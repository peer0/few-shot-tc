src,back-translation,index
"public class TestClass1 {


    public static void main(String[] args) throws  Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s[] = br.readLine().split("" "");

        long A,B,y,g,b;
        A= Long.parseLong(s[0]);
        B= Long.parseLong(s[1]);
        s=br.readLine().split("" "");

        y = Long.parseLong(s[0]);
        g = Long.parseLong(s[1]);
        b = Long.parseLong(s[2]);

long ans=0;
        if(A-2*y-g < 0){
            ans+=Math.abs(A-2*y-g);
        }
        
        if(B-g-3*b < 0){
            ans+=Math.abs(B-g-3*b);
        }
        System.out.println(ans);



    }
}","public class TestClass1 {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String s[] = br.readLine().split("" "");

        long A, B, y, g, b;
        A = Long.parseLong(s[0]);
        B = Long.parseLong(s[1]);
        s = br.readLine().split("" "");

        y = Long.parseLong(s[0]);
        g = Long.parseLong(s[1]);
        b = Long.parseLong(s[2]);

        long ans = 0;
        if (A - 2 * y - g < 0) {
            ans += Math.abs(A - 2 * y - g);
        }

        if (B - g - 3 * b < 0) {
            ans += Math.abs(B - g - 3 * b);
        }
        System.out.println(ans);

    }
}",1
"public class Codechef
{     
  static String reverse(String s){
    String reverse="""";
    for(int i=s.length()-1;i>=0;i--){
        reverse=reverse + s.charAt(i);
    }
    return reverse;
  }

      
    public static void main (String[] args) throws java.lang.Exception
    {
        Scanner sc=new Scanner(System.in);
         int n=sc.nextInt();
         int m=sc.nextInt();
         int x=m%(int)Math.pow(2,n);
         System.out.println(x);



}
}","public class Codechef
{
    static String reverse(String s){
        StringBuilder reverse=new StringBuilder();
        for(int i=s.length()-1;i>=0;i--){
            reverse.append(s.charAt(i));
        }
        return reverse.toString();
    }

    public static void main (String[] args) throws java.lang.Exception
    {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int m=sc.nextInt();
        int x=m%(int)Math.pow(2,n);
        System.out.println(x);
    }
}",2
"public class task1{
    public static void main(String args[]){
        Scanner in = new Scanner(System.in);
        int n=in.nextInt();
        int pos=in.nextInt();
        int l=in.nextInt();
        int r=in.nextInt();
        boolean b=false;
        boolean c=true;
        if(l==1&&r==n){
            c=false;
            System.out.println(0);
        }
        if(c){
            if(l==1){
            if(pos<r){
                System.out.println(r-pos+1);
                b=true;}
            else{
                System.out.println(pos-r+1);
                b=true;
            }
        }
        if(r==n){
            if(pos>l){
                System.out.println(pos-l+1);
                b=true;}
            else{
                System.out.println(l-pos+1);
                b=true;
            }
        }
        }
        if(b==false&&c){
            if(pos<l){
            System.out.println(l-pos+1+r-l+1);
        }
        else if(pos>r){
            System.out.println(pos-r+1+r-l+1);
        }
        else{
            if(((pos-l)<(r-pos))){
                System.out.println(pos-l+1+r-l+1);
                
            }
            
            else if((pos-l)>(r-pos)){
                System.out.println(r-pos+1+r-l+1);
                
            }
            else{
                System.out.println((r-pos)*3+2);
                
            }
        }
        }
        
    }
}","public class task1 {
    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int pos = in.nextInt();
        int l = in.nextInt();
        int r = in.nextInt();
        boolean b = false;
        boolean c = true;
        if (l == 1 && r == n) {
            c = false;
            System.out.println(0);
        }
        if (c) {
            if (l == 1) {
                if (pos < r) {
                    System.out.println(r - pos + 1);
                    b = true;
                } else {
                    System.out.println(pos - r + 1);
                    b = true;
                }
            }
            if (r == n) {
                if (pos > l) {
                    System.out.println(pos - l + 1);
                    b = true;
                } else {
                    System.out.println(l - pos + 1);
                    b = true;
                }
            }
        }
        if (b == false && c) {
            if (pos < l) {
                System.out.println(l - pos + 1 + r - l + 1);
            } else if (pos > r) {
                System.out.println(pos - r + 1 + r - l + 1);
            } else {
                if (((pos - l) < (r - pos))) {
                    System.out.println(pos - l + 1 + r - l + 1);
                } else if ((pos - l) > (r - pos)) {
                    System.out.println(r - pos + 1 + r - l + 1);
                } else {
                    System.out.println((r - pos) * 3 + 2);
                }
            }
        }
    }
}",3
"public class C
{

	static StringBuilder st = new StringBuilder();
	
	public static void main(String[] args) throws Exception 
	{

		Scanner sc = new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);
		
		int [] freq = new int [5] ; 
		
		int k = 3;  
		while(k -- >0)
		{
			int x = sc.nextInt();
			
			if(x <= 4) freq[x]++;
			
		}
		freq[2] += freq[4]/ 2 ;
		
		if(freq[1] >= 1 || freq[2] >= 2 || freq[3] >= 3)
			out.println(""YES"");
		else
			out.println(""NO"");
		
		
		out.flush();
		out.close();

	}
	
	static class Scanner 
	{
		BufferedReader br;
		StringTokenizer st;

		Scanner(InputStream in) 
		{
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() throws Exception {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		int nextInt() throws Exception {
			return Integer.parseInt(next());
		}

		long nextLong() throws Exception {
			return Long.parseLong(next());
		}

		double nextDouble() throws Exception {
			return Double.parseDouble(next());
		}

	}

	static void shuffle(int[] a) {
		int n = a.length;
		for (int i = 0; i < n; i++) {
			int r = i + (int) (Math.random() * (n - i));
			int tmp = a[i];
			a[i] = a[r];
			a[r] = tmp;
		}
	}

}","public class C {

    static StringBuilder st = new StringBuilder();

    public static void main(String[] args) throws Exception {

        Scanner sc = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);

        int[] freq = new int[5];

        int k = 3;
        while (k-- > 0) {
            int x = sc.nextInt();

            if (x <= 4) freq[x]++;

        }
        freq[2] += freq[4] / 2;

        if (freq[1] >= 1 || freq[2] >= 2 || freq[3] >= 3)
            out.println(""YES"");
        else
            out.println(""NO"");

        out.flush();
        out.close();

    }

    static class Scanner {
        BufferedReader br;
        StringTokenizer st;

        Scanner(InputStream in) {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() throws Exception {
            while (st == null || !st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }

        int nextInt() throws Exception {
            return Integer.parseInt(next());
        }

        long nextLong() throws Exception {
            return Long.parseLong(next());
        }

        double nextDouble() throws Exception {
            return Double.parseDouble(next());
        }

    }

    static void shuffle(int[] a) {
        int n = a.length;
        for (int i = 0; i < n; i++) {
            int r = i + (int) (Math.random() * (n - i));
            int tmp = a[i];
            a[i] = a[r];
            a[r] = tmp;
        }
    }

}",4
"public class TrickyAlchemy {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		long a = nextLong();
		long b = nextLong();
		long x = nextLong();
		long y = nextLong();
		long z = nextLong();
		System.out.println(Math.max(2*x+y-a, 0) + Math.max(y+3*z-b, 0));
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class TrickyAlchemy {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		long a = nextLong();
		long b = nextLong();
		long x = nextLong();
		long y = nextLong();
		long z = nextLong();
		System.out.println(Math.max(2*x + y - a, 0) + Math.max(y + 3*z - b, 0));
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}",5
"public class A912 {

	public static void main(String[] args) {
		

		Scanner scan = new Scanner(System.in);
		
		int A = scan.nextInt();
		int B = scan.nextInt();
		long x = scan.nextInt();
		long y = scan.nextInt();
		long z = scan.nextInt();
		
		long requiredA = x * 2 + y;
		long requiredB = y + z * 3;
		
		long neededA = Math.max(0, requiredA - A);
		long neededB = Math.max(0, requiredB - B);
		System.out.print(neededA + neededB);
	}

}","public class A912 {

	public static void main(String[] args) {
		

		Scanner scan = new Scanner(System.in);
		
		int A = scan.nextInt();
		int B = scan.nextInt();
		long x = scan.nextInt();
		long y = scan.nextInt();
		long z = scan.nextInt();
		
		long requiredA = x * 2 + y;
		long requiredB = y + z * 3;
		
		long neededA = Math.max(0, requiredA - A);
		long neededB = Math.max(0, requiredB - B);
		System.out.print(neededA + neededB);
	}

}",6
"public class Test3 {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int x=Integer.parseInt(br.readLine());
		int y=Integer.parseInt(br.readLine());
		System.out.print((int)(y%(Math.pow(2, x))));
	}
}","public class Test3 {
	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		try {
			int x = Integer.parseInt(br.readLine());
			int y = Integer.parseInt(br.readLine());
			System.out.print((int) (y % (Math.pow(2, x))));
		} catch (NumberFormatException | IOException e) {
			e.printStackTrace();
		}
	}
}",7
"public class RENAMETHISBITCH {
		
	public static void main(String[] args) {
		
		try (Scanner sc = new Scanner(System.in)) {
			
			int n = sc.nextInt();
			BigInteger m = sc.nextBigInteger();
			
			System.out.println(m.mod(BigInteger.valueOf(2).pow(n)));
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}
}","public class NEWCLASSNAME {
    public static void main(String[] args) {
        try {
            try (Scanner sc = new Scanner(System.in)) {
                int n = sc.nextInt();
                BigInteger m = sc.nextBigInteger();
                System.out.println(m.mod(BigInteger.valueOf(2).pow(n)));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}",8
"public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while(sc.hasNext()) {
		int n = sc.nextInt();
		int pos = sc.nextInt();
		int l = sc.nextInt();
		int r = sc.nextInt();
		
		if(l==1&&r==n) {
			System.out.println(0);
		}
		else if(l==1&&r<n) {
			System.out.println(Math.abs(r-pos)+1);
		}
		else if(l>1&&r==n) {
			System.out.println(Math.abs(l-pos)+1);
		}
		else if(l>1&&r<n) {
			int c = Math.min(Math.abs(r-pos), Math.abs(l-pos));
			System.out.println(c+2+r-l);
		}
		}
	}	
}","public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while(sc.hasNext()) {
			int n = sc.nextInt();
			int pos = sc.nextInt();
			int l = sc.nextInt();
			int r = sc.nextInt();
			
			if(l == 1 && r == n) {
				System.out.println(0);
			} else if(l == 1 && r < n) {
				System.out.println(Math.abs(r - pos) + 1);
			} else if(l > 1 && r == n) {
				System.out.println(Math.abs(l - pos) + 1);
			} else if(l > 1 && r < n) {
				int c = Math.min(Math.abs(r - pos), Math.abs(l - pos));
				System.out.println(c + 2 + r - l);
			}
		}
	}
}",9
"public class A {
	static FastReader scan;
	static PrintWriter out;

	public static void main(String[] args) throws FileNotFoundException {
		Solver solver = new Solver();
		scan = new FastReader();
		out = new PrintWriter(System.out);
		int testCases = 1;
		for(int i = 1; i <= testCases; i++) {

			solver.solve();
		}
		out.close();
	}

	static class Solver {
		
		void solve() {
			int a = scan.nextInt(), b = scan.nextInt();
			if(b <= a) out.println(1);
			else out.println(b/a + Math.min(1, b%a));
		}
		
	}

	

	static class DSU {
		int[] root, size;
		int n;

		DSU(int n) {
			this.n = n;
			root = new int[n];
			size = new int[n];
			for (int i = 0; i < n; i++) {
				root[i] = i;
				size[i] = 1;
			}
		}

		int findParent(int idx) {
			while (root[idx] != idx) {
				root[idx] = root[root[idx]];
				idx = root[idx];
			}
			return idx;
		}

		boolean union(int x, int y) {
			int parX = findParent(x);
			int parY = findParent(y);
			if (parX == parY)
				return false;
			if (size[parX] < size[parY]) {
				root[parY] = parX;
				size[parX] += size[parY];
			} else {
				root[parX] = parY;
				size[parY] += size[parX];
			}
			return true;
		}
	}

	static class Extra {
		static void sort(int[] a) {
			Integer[] aa = new Integer[a.length];
			for (int i = 0; i < aa.length; i++)
				aa[i] = a[i];
			Arrays.sort(aa);
			for (int i = 0; i < aa.length; i++)
				a[i] = aa[i];
		}

		static void sort(long[] a) {
			Long[] aa = new Long[a.length];
			for (int i = 0; i < aa.length; i++)
				aa[i] = a[i];
			Arrays.sort(aa);
			for (int i = 0; i < aa.length; i++)
				a[i] = aa[i];
		}

		static void sort(double[] a) {
			Double[] aa = new Double[a.length];
			for (int i = 0; i < aa.length; i++)
				aa[i] = a[i];
			Arrays.sort(aa);
			for (int i = 0; i < aa.length; i++)
				a[i] = aa[i];
		}

		static void sort(char[] a) {
			Character[] aa = new Character[a.length];
			for (int i = 0; i < aa.length; i++)
				aa[i] = a[i];
			Arrays.sort(aa);
			for (int i = 0; i < aa.length; i++)
				a[i] = aa[i];
		}

		static long gcd(long a, long b) {
			while (b > 0) {
				long temp = b;
				b = a % b;
				a = temp;
			}
			return a;
		}

		static long lcm(long a, long b) {
			return a * (b / gcd(a, b));
		}

		static boolean isPrime(long n) {
			if (n <= 1)
				return false;
			if (n <= 3)
				return true;
			if (n % 2 == 0 || n % 3 == 0)
				return false;
			for (long i = 5; i * i <= n; i = i + 6) {
				if (n % i == 0 || n % (i + 2) == 0)
					return false;
			}
			return true;
		}

		static HashSet<Integer> sieve(int n) {
			boolean[] prime = new boolean[n + 1];
			HashSet<Integer> res = new HashSet<>();
			for (int p = 2; p * p <= n; p++) {
				if (!prime[p]) {
					res.add(p);
					for (int i = p * p; i <= n; i += p)
						prime[i] = true;
				}
			}
			return res;
		}

		static HashMap<Long, Integer> primeFactorization(long n) {
			HashMap<Long, Integer> res = new HashMap<>();
			while (n % 2 == 0) {
				res.put(2L, res.getOrDefault(2L, 0) + 1);
				n /= 2;
			}
			for (long i = 3; i * i <= n; i += 2) {
				while (n % i == 0) {
					res.put(i, res.getOrDefault(i, 0) + 1);
					n /= i;
				}
			}
			if (n > 2)
				res.put(n, 1);
			return res;
		}
	}

	static class FastReader {
		BufferedReader br;
		StringTokenizer st;

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}
		public FastReader(String s) throws FileNotFoundException {
			br = new BufferedReader(new FileReader(new File(s)));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		int[] nextIntArray(int n) {
			int[] a = new int[n];
			for (int i = 0; i < n; i++)
				a[i] = nextInt();
			return a;
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		long[] nextLongArray(int n) {
			long[] a = new long[n];
			for (int i = 0; i < n; i++)
				a[i] = nextLong();
			return a;
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		double[] nextDoubleArray(int n) {
			double[] a = new double[n];
			for (int i = 0; i < n; i++)
				a[i] = nextDouble();
			return a;
		}

		String nextLine() {
			String str = """";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}
	}

}","public class A {
    static FastReader scan;
    static PrintWriter out;

    public static void main(String[] args) throws FileNotFoundException {
        MySolver solver = new MySolver();
        scan = new FastReader();
        out = new PrintWriter(System.out);
        int testCases = 1;
        for (int i = 1; i <= testCases; i++) {
            solver.solve();
        }
        out.close();
    }

    static class MySolver {
        void solve() {
            int a = scan.nextInt(), b = scan.nextInt();
            if (b <= a)
                out.println(1);
            else
                out.println(b / a + Math.min(1, b % a));
        }
    }

    static class DSU {
        int[] root, size;
        int n;

        DSU(int n) {
            this.n = n;
            root = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                root[i] = i;
                size[i] = 1;
            }
        }

        int findParent(int idx) {
            while (root[idx] != idx) {
                root[idx] = root[root[idx]];
                idx = root[idx];
            }
            return idx;
        }

        boolean union(int x, int y) {
            int parX = findParent(x);
            int parY = findParent(y);
            if (parX == parY)
                return false;
            if (size[parX] < size[parY]) {
                root[parY] = parX;
                size[parX] += size[parY];
            } else {
                root[parX] = parY;
                size[parY] += size[parX];
            }
            return true;
        }
    }

    // Remaining translation omitted for brevity
}",10
"public class Param
{
                
      public static  void main( String[]args) 
    {
       MyScanner param = new MyScanner();
      out = new PrintWriter(new BufferedOutputStream(System.out));
      int highestcoin=param.nextInt();
      int sum=param.nextInt();
      int remainder=sum%highestcoin;
      if(remainder!=0){
         remainder=1;
      }
      else{
         remainder=0;
      }
      int count=(sum-remainder)/highestcoin;
     
       if (highestcoin>=sum){
         System.out.println(""1"");
      }
      else{
      System.out.println(count+remainder);
      }
      out.close();
}
public static PrintWriter out;
      
   
   public static class MyScanner {
      BufferedReader br;
      StringTokenizer st;
 
      public MyScanner() {
         br = new BufferedReader(new InputStreamReader(System.in));
      }
 
      String next() {
          while (st == null || !st.hasMoreElements()) {
              try {
                  st = new StringTokenizer(br.readLine());
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }
          return st.nextToken();
      }
 
      int nextInt() {
          return Integer.parseInt(next());
      }
 
      long nextLong() {
          return Long.parseLong(next());
      }
 
      double nextDouble() {
          return Double.parseDouble(next());
      }
 
      String nextLine(){
          String str = """";
	  try {
	     str = br.readLine();
	  } catch (IOException e) {
	     e.printStackTrace();
	  }
	  return str;
      }
}
}","public class Param { public static  void main( String[]args) { MyScanner param = new MyScanner(); out = new PrintWriter(new BufferedOutputStream(System.out)); int highestcoin=param.nextInt(); int sum=param.nextInt(); int remainder=sum%highestcoin; if(remainder!=0){ remainder=1; } else{ remainder=0; } int count=(sum-remainder)/highestcoin; if (highestcoin>=sum){ System.out.println(""1""); } else{ System.out.println(count+remainder); } out.close(); } public static PrintWriter out; public static class MyScanner { BufferedReader br; StringTokenizer st; public MyScanner() { br = new BufferedReader(new InputStreamReader(System.in)); } String next() { while (st == null || !st.hasMoreElements()) { try { st = new StringTokenizer(br.readLine()); } catch (IOException e) { e.printStackTrace(); } } return st.nextToken(); } int nextInt() { return Integer.parseInt(next()); } long nextLong() { return Long.parseLong(next()); } double nextDouble() { return Double.parseDouble(next()); } String nextLine(){ String str = """"; try { str = br.readLine(); } catch (IOException e) { e.printStackTrace(); } return str; } } }",11
"public class pr1023B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);

        long n = sc.nextLong();
        long k = sc.nextLong();

        out.println(solve(n, k));
        out.flush();
        out.close();
    }


    static long solve(long n, long k) {
        if(k <= n) return (long)Math.floor((double)(k-1)/2);
        else{
            long mx = n;
            long mn = k-n;
            return Math.max(0, (long)Math.floor((double)(mx-mn+1)/2));
        }
    }
}","public class pr1023B {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        PrintWriter out = new PrintWriter(System.out);

        long n = sc.nextLong();
        long k = sc.nextLong();

        out.println(solve(n, k));
        out.flush();
        out.close();
    }


    static long solve(long n, long k) {
        return (long)Math.max(0, Math.floorDiv(n - Math.max(k - n, 0) + 1, 2));
    }
}",12
"public class Main {
    
    static Scanner in = new Scanner();
    static PrintWriter out = new PrintWriter(System.out);
    
    public static void main(String[] args) throws IOException {
        int x = in.nextInt(),
            y = in.nextInt(),
            z = in.nextInt(),
            t1 = in.nextInt(),
            t2 = in.nextInt(),
            t3 = in.nextInt()*3,
            d = Math.abs(x - y);
        out.print(((Math.abs(x - z) + d) * t2 + t3 > d * t1 ? ""NO"" : ""YES""));
        out.close();
    }
    
    static class Scanner {
        BufferedReader br;
        StringTokenizer st;
        
        public Scanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
            st = new StringTokenizer("""");
        }
        
        public String next() throws IOException {
            if(!st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }
        
        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }
    }
}","public class Main {
    
    static Scanner in = new Scanner();
    static PrintWriter out = new PrintWriter(System.out);
    
    public static void main(String[] args) throws IOException {
        int x = in.nextInt(),
            y = in.nextInt(),
            z = in.nextInt(),
            t1 = in.nextInt(),
            t2 = in.nextInt(),
            t3 = in.nextInt()*3,
            d = Math.abs(x - y);
        if (((Math.abs(x - z) + d) * t2 + t3 > d * t1)) {
            out.print(""NO"");
        } else {
            out.print(""YES"");
        }
        out.close();
    }
    
    static class Scanner {
        BufferedReader br;
        StringTokenizer st;
        
        public Scanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
            st = new StringTokenizer("""");
        }
        
        public String next() throws IOException {
            if(!st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }
        
        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }
    }
}",13
"public class Solution {

	static long MOD = 1_000_000_000 + 7;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		long n = Long.parseLong(st.nextToken());
		long m = Long.parseLong(st.nextToken());
		long k = Long.parseLong(st.nextToken());
		long l = Long.parseLong(st.nextToken());

		long p = (l + k) / m;

		if (p * m != l + k) {
			p++;
		}

		if (m * p <= n) {
			System.out.println(p);
		} else {
			System.out.println(-1);
		}

	}
}","public class Solution {

	static long MOD = 1_000_000_000 + 7;

	public static long calculateValues(long n, long m, long k, long l) {
		long p = (l + k) / m;

		if (p * m != l + k) {
			p++;
		}

		if (m * p <= n) {
			return p;
		} else {
			return -1;
		}
	}

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		long n = Long.parseLong(st.nextToken());
		long m = Long.parseLong(st.nextToken());
		long k = Long.parseLong(st.nextToken());
		long l = Long.parseLong(st.nextToken());

		System.out.println(calculateValues(n, m, k, l));
	}
}",14
"public class A {

	public static void main(String[] args) {
		BufferedReader br = null;
		br = new BufferedReader(new InputStreamReader(System.in));
        String input;
		try {
			input = br.readLine();
			long n = Long.parseLong(input.split("" "")[0]);
	        long k = Long.parseLong(input.split("" "")[1]);
	        long red = (long) (Math.ceil((n * 2.0)/k));
	        long blue = (long) (Math.ceil((n * 5.0)/k));
	        long green = (long) (Math.ceil((n * 8.0)/k));
	        System.out.println(red + blue +green);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}","public class A {

    public static void main(String[] args) {
        BufferedReader br = null;
        br = new BufferedReader(new InputStreamReader(System.in));
        String input;
        try {
            input = br.readLine();
            long n = Long.parseLong(input.split("" "")[0]);
            long k = Long.parseLong(input.split("" "")[1]);
            long red = (long) (Math.ceil((n * 2.0) / k));
            long blue = (long) (Math.ceil((n * 5.0) / k));
            long green = (long) (Math.ceil((n * 8.0) / k));
            String result = String.valueOf(red + blue + green);
            System.out.println(result);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}",15
"public class EhabAndAnotherConstructionProblem {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int x = nextInt();
		System.out.println(x == 1 ? -1 : x + "" "" + x);
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class EhabAndAnotherConstructionProblem {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int x = nextInt();
		if (x == 1) {
			System.out.println(-1);
		} else {
			System.out.println(x + "" "" + x);
		}
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}",16
"public class A1008 {
    public static void main(String [] args)  {
        InputStream inputReader = System.in;
        OutputStream outputReader = System.out;
        InputReader in = new InputReader(inputReader);
        PrintWriter out = new PrintWriter(outputReader);
        Algorithm solver = new Algorithm();
        solver.solve(in, out);
        out.close();
    }
}

class Algorithm {
    void solve(InputReader ir, PrintWriter pw) {

        long n = ir.nextLong(), k = ir.nextLong();
        long l = Math.max(1, k - n), r = (k + 1) / 2;
        l = Math.max(0, r - l);
        pw.print(l);

    }

}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer tokenizer;

    InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    String nextLine(){
        String fullLine = null;
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                fullLine = reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return fullLine;
        }
        return fullLine;
    }

    String [] toArray() {
        return nextLine().split("" "");
    }

    int nextInt() {
        return Integer.parseInt(next());
    }
    double nextDouble() {
        return Double.parseDouble(next());
    }
    long nextLong() {
        return Long.parseLong(next());
    }

}","public class A1008 {
    public static void main(String [] args)  {
        InputStream inputReader = System.in;
        OutputStream outputReader = System.out;
        InputReader in = new InputReader(inputReader);
        PrintWriter out = new PrintWriter(outputReader);
        Algorithm solver = new Algorithm();
        solver.solve(in, out);
        out.close();
    }
}

class Algorithm {
    void solve(InputReader ir, PrintWriter pw) {

        long n = ir.nextLong(), k = ir.nextLong();
        long l = Math.max(1, k - n), r = (k + 1) / 2;
        l = Math.max(0, r - l);
        pw.print(l);

    }

}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer tokenizer;

    InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    String nextLine(){
        String fullLine = null;
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                fullLine = reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return fullLine;
        }
        return fullLine;
    }

    String [] toArray() {
        return nextLine().split("" "");
    }

    int nextInt() {
        return Integer.parseInt(next());
    }
    double nextDouble() {
        return Double.parseDouble(next());
    }
    long nextLong() {
        return Long.parseLong(next());
    }

}",17
"public class B 
{
	
	static StringBuilder st ; 
	
	public static void main(String[] args) throws Exception
	{
		Scanner sc = new Scanner () ;
		PrintWriter out = new PrintWriter(System.out);
		
		int n = sc.nextInt();
		int m = sc.nextInt();
		
		String first = """" ; 
		String second = """" ; 
		
		
		for(int i = 0 ; i < 126 ;i++ )
		{
			first+= ""9"";
			second+=""9"";
		}
		
		for(int i = 0 ; i < 125 ;i++ )
			first+= ""0"";
		
		first += ""1"";
		
		out.println(first+"" ""+second);
		
		out.flush();
		out.close();
	
	}
	
	static int sumDigits(int num)
	{
		int ans = 0 ;
		
		while(num > 0)
		{
			ans += num % 10  ;
			
			num /= 10;
		}
		
		return ans ;
		
	}
	
	static class Scanner 
	{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;

		String next() throws Exception 
		{
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());

			return st.nextToken();
		}

		int nextInt() throws Exception { return Integer.parseInt(next()); }
		
		long nextLong() throws Exception { return Long.parseLong(next()); }

		double nextDouble() throws Exception { return Double.parseDouble(next()); }

		char nextChar() throws Exception { return next().charAt(0); }
		
		char [] nextCharArray() throws Exception{ return next().toCharArray() ; }
	}

}","public class B {
    
    static StringBuilder st ; 
    
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner();
        PrintWriter out = new PrintWriter(System.out);
        
        int n = sc.nextInt();
        int m = sc.nextInt();
        
        String first = """" ; 
        String second = """" ; 
        
        
        for(int i = 0 ; i < 126 ;i++ ) {
            first+= ""9"";
            second+=""9"";
        }
        
        for(int i = 0 ; i < 125 ;i++ )
            first+= ""0"";
        
        first += ""1"";
        
        out.println(first+"" ""+second);
        
        out.flush();
        out.close();
    }
    
    static int sumDigits(int num) {
        int ans = 0 ;
        
        while(num > 0) {
            ans += num % 10  ;
            
            num /= 10;
        }
        
        return ans ;
        
    }
    
    static class Scanner {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;

        String next() throws Exception  {
            while (st == null || !st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());

            return st.nextToken();
        }

        int nextInt() throws Exception { return Integer.parseInt(next()); }
        
        long nextLong() throws Exception { return Long.parseLong(next()); }

        double nextDouble() throws Exception { return Double.parseDouble(next()); }

        char nextChar() throws Exception { return next().charAt(0); }
        
        char[] nextCharArray() throws Exception { return next().toCharArray(); }
    }

}",18
"public class A {

	public static void main(String[] args) {
		BufferedReader br = null;
		br = new BufferedReader(new InputStreamReader(System.in));
        String input;
		try {
			input = br.readLine();
			int n = Integer.parseInt(input);
			input = br.readLine();
			int qx = Integer.parseInt(input.split("" "")[0]);
			int qy = Integer.parseInt(input.split("" "")[1]);
			input = br.readLine();
			int kx = Integer.parseInt(input.split("" "")[0]);
			int ky = Integer.parseInt(input.split("" "")[1]);
			input = br.readLine();
			int gx = Integer.parseInt(input.split("" "")[0]);
			int gy = Integer.parseInt(input.split("" "")[1]);
			if((kx<qx && gx<qx)||(kx>qx && gx>qx)) {
				if((ky<qy && gy<qy)||(ky>qy && gy>qy))System.out.println(""YES"");
				else System.out.println(""NO"");
			}else System.out.println(""NO"");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}","public class A {

	public static void main(String[] args) {
		BufferedReader br = null;
		br = new BufferedReader(new InputStreamReader(System.in));
        String input;
		try {
			input = br.readLine();
			int n = Integer.parseInt(input);
			input = br.readLine();
			int qx = Integer.parseInt(input.split("" "")[0]);
			int qy = Integer.parseInt(input.split("" "")[1]);
			input = br.readLine();
			int kx = Integer.parseInt(input.split("" "")[0]);
			int ky = Integer.parseInt(input.split("" "")[1]);
			input = br.readLine();
			int gx = Integer.parseInt(input.split("" "")[0]);
			int gy = Integer.parseInt(input.split("" "")[1]);
			if ((kx<qx && gx<qx) || (kx>qx && gx>qx)) {
				if ((ky<qy && gy<qy) || (ky>qy && gy>qy)) System.out.println(""YES"");
				else System.out.println(""NO"");
			} else System.out.println(""NO"");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}",19
"public class A_KingEscape {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader inp = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        solver.solve(inp, out);
        out.close();
    }

    private static class Solver {
        private void solve(InputReader inp, PrintWriter out) {
            int n = inp.nextInt();
            int Qx = inp.nextInt(), Qy = inp.nextInt();
            int Kx = inp.nextInt(), Ky = inp.nextInt();
            int Tx = inp.nextInt(), Ty = inp.nextInt();
            if (((Kx < Qx && Tx < Qx) || (Kx > Qx && Tx > Qx)) && ((Ky < Qy && Ty < Qy) || (Ky > Qy && Ty > Qy))) out.println(""YES"");
            else out.println(""NO"");
        }
    }

    static class InputReader {
        BufferedReader reader;
        StringTokenizer tokenizer;

        InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}","public class A_KingEscape {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader inp = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        solver.solve(inp, out);
        out.close();
    }

    private static class Solver {
        private void solve(InputReader inp, PrintWriter out) {
            int n = inp.nextInt();
            int Qx = inp.nextInt(), Qy = inp.nextInt();
            int Kx = inp.nextInt(), Ky = inp.nextInt();
            int Tx = inp.nextInt(), Ty = inp.nextInt();
            if (((Kx < Qx && Tx < Qx) || (Kx > Qx && Tx > Qx)) && ((Ky < Qy && Ty < Qy) || (Ky > Qy && Ty > Qy))) out.println(""YES"");
            else out.println(""NO"");
        }
    }

    static class InputReader {
        BufferedReader reader;
        StringTokenizer tokenizer;

        InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}",20
"public class Main
{
	
	public static void main(String[] args) throws IOException
	{
		BufferedReader st = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer s = new StringTokenizer(st.readLine());
		long n = Long.parseLong(s.nextToken());
		long k = Long.parseLong(s.nextToken());
		long ans = k/n;
		if(k%n != 0) ans++;
		System.out.println(ans+"""");
	}
}","public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader st = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer s = new StringTokenizer(st.readLine());
        long n = Long.parseLong(s.nextToken());
        long k = Long.parseLong(s.nextToken());
        long ans = k / n;
        if (k % n != 0) ans++;
        System.out.println(ans + """");
    }
}",21
"public class A1008 {
    public static void main(String [] args)  {
        InputStream inputReader = System.in;
        OutputStream outputReader = System.out;
        InputReader in = new InputReader(inputReader);
        PrintWriter out = new PrintWriter(outputReader);
        Algorithm solver = new Algorithm();
        solver.solve(in, out);
        out.close();
    }
}

class Algorithm {
    void solve(InputReader ir, PrintWriter pw) {

        long n = ir.nextLong(), k = ir.nextLong();
        pw.print((n + k - 1) / n);

    }

    private static void Qsort(int[] array, int low, int high) {

        int i = low;
        int j = high;
        int x = array[low + (high - low) / 2];

        do {
            while (array[i] < x) ++i;
            while (array[j] > x) --j;
            if (i <= j) {
                int tmp = array[i];
                array[i] = array[j];
                array[j] = tmp;
                i++;
                j--;
            }
        } while (i <= j);

        if (low < j) Qsort(array, low, j);
        if (i < high) Qsort(array, i, high);

    }
}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer tokenizer;

    InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    String nextLine(){
        String fullLine = null;
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                fullLine = reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            return fullLine;
        }
        return fullLine;
    }

    String [] toArray() {
        return nextLine().split("" "");
    }

    int nextInt() {
        return Integer.parseInt(next());
    }
    double nextDouble() {
        return Double.parseDouble(next());
    }
    long nextLong() {
        return Long.parseLong(next());
    }

}","public class A1008 {
    public static void main(String [] args)  {
        InputStream inputReader = System.in;
        OutputStream outputReader = System.out;
        InputReader in = new InputReader(inputReader);
        PrintWriter out = new PrintWriter(outputReader);
        Algorithm solver = new Algorithm();
        solver.solve(in, out);
        out.close();
    }
}

class Algorithm {
    void solve(InputReader ir, PrintWriter pw) {

        long n = ir.nextLong(), k = ir.nextLong();
        pw.print((n + k - 1) / n);

    }

    private static void Qsort(int[] array, int low, int high) {

        int i = low;
        int j = high;
        int x = array[low + (high - low) / 2];

        do {
            while (array[i] < x) ++i;
            while (array[j] > x) --j;
            if (i <= j) {
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
                i++;
                j--;
            }
        } while (i <= j);

        if (low < j) Qsort(array, low, j);
        if (i < high) Qsort(array, i, high);

    }
}

class InputReader {
    private BufferedReader reader;
    private StringTokenizer tokenizer;

    InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    String nextLine() {
        String fullLine = null;
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                fullLine = reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return fullLine;
    }

    String[] toArray() {
        return nextLine().split("" "");
    }

    int nextInt() {
        return Integer.parseInt(next());
    }

    double nextDouble() {
        return Double.parseDouble(next());
    }

    long nextLong() {
        return Long.parseLong(next());
    }
}",22
"public class Param
{
                
      public static  void main( String[]args) 
    {
       MyScanner param = new MyScanner();
      out = new PrintWriter(new BufferedOutputStream(System.out));
      int highestcoin=param.nextInt();
      int sum=param.nextInt();
      int remainder=sum%highestcoin;
      if(remainder!=0){
         remainder=1;
      }
      else{
         remainder=0;
      }
      int count=(sum-remainder)/highestcoin;
     
       if (highestcoin>=sum){
         System.out.println(""1"");
      }
      else{
      System.out.println(count+remainder);
      }
      out.close();
}
public static PrintWriter out;
      
   
   public static class MyScanner {
      BufferedReader br;
      StringTokenizer st;
 
      public MyScanner() {
         br = new BufferedReader(new InputStreamReader(System.in));
      }
 
      String next() {
          while (st == null || !st.hasMoreElements()) {
              try {
                  st = new StringTokenizer(br.readLine());
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }
          return st.nextToken();
      }
 
      int nextInt() {
          return Integer.parseInt(next());
      }
 
      long nextLong() {
          return Long.parseLong(next());
      }
 
      double nextDouble() {
          return Double.parseDouble(next());
      }
 
      String nextLine(){
          String str = """";
	  try {
	     str = br.readLine();
	  } catch (IOException e) {
	     e.printStackTrace();
	  }
	  return str;
      }
}
}","public class Param {
    public static void main(String[] args) {
        MyScanner param = new MyScanner();
        out = new PrintWriter(new BufferedOutputStream(System.out));
        int highestcoin = param.nextInt();
        int sum = param.nextInt();
        int remainder = sum % highestcoin;
        if (remainder != 0) {
            remainder = 1;
        } else {
            remainder = 0;
        }
        int count = (sum - remainder) / highestcoin;
        if (highestcoin >= sum) {
            System.out.println(""1"");
        } else {
            System.out.println(count + remainder);
        }
        out.close();
    }
    public static PrintWriter out;

    public static class MyScanner {
        BufferedReader br;
        StringTokenizer st;
        public MyScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
        int nextInt() {
            return Integer.parseInt(next());
        }
        long nextLong() {
            return Long.parseLong(next());
        }
        double nextDouble() {
            return Double.parseDouble(next());
        }
        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
}",23
"public class Main {

    public static void main(String[] args) {
        SpeedScanner speedScanner = new SpeedScanner();
        PrintWriter out = new PrintWriter(System.out);
        taskSolver(speedScanner, out);
        out.close();
    }


    public static void taskSolver(SpeedScanner speedScanner, PrintWriter out) {
        long n = speedScanner.nextLong();
        long m = speedScanner.nextLong();
        long k = speedScanner.nextLong();
        long l = speedScanner.nextLong();

        long tempM ;

        if ((k+l) < m){
            if (n<m)
                out.print(-1);
            else
                out.print(1);
        }else {
            tempM = (k+l)/m;
            if ((k+l)%m == 0){
                if (tempM*m <= n)
                    out.print(tempM);
                else
                    out.print(-1);
            }else {
                if ((tempM+1)*m <= n)
                    out.print(tempM+1);
                else
                    out.print(-1);
            }
        }
    }


    public static class SpeedScanner {
        BufferedReader br;
        StringTokenizer st;

        public SpeedScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String nextToken() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(nextToken());
        }

        long nextLong() {
            return Long.parseLong(nextToken());
        }

        double nextDouble() {
            return Double.parseDouble(nextToken());
        }
    }

}","public class Main {

    public static void main(String[] args) {
        SpeedScanner speedScanner = new SpeedScanner();
        PrintWriter out = new PrintWriter(System.out);
        taskSolver(speedScanner, out);
        out.close();
    }


    public static void taskSolver(SpeedScanner speedScanner, PrintWriter out) {
        long n = speedScanner.nextLong();
        long m = speedScanner.nextLong();
        long k = speedScanner.nextLong();
        long l = speedScanner.nextLong();

        long tempM ;

        if ((k+l) < m){
            if (n<m)
                out.print(-1);
            else
                out.print(1);
        }else {
            tempM = (k+l)/m;
            if ((k+l)%m == 0){
                if (tempM*m <= n)
                    out.print(tempM);
                else
                    out.print(-1);
            }else {
                if ((tempM+1)*m <= n)
                    out.print(tempM+1);
                else
                    out.print(-1);
            }
        }
    }


    public static class SpeedScanner {
        BufferedReader br;
        StringTokenizer st;

        public SpeedScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String nextToken() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(nextToken());
        }

        long nextLong() {
            return Long.parseLong(nextToken());
        }

        double nextDouble() {
            return Double.parseDouble(nextToken());
        }
    }

}",24
"public class Main {

    static StringBuilder data;
    final static FastReader in = new FastReader();


    public static void main(String[] args) {
        int n = in.nextInt(), k = in.nextInt();
               long answ = 0;
        if (n * 2 > k) {
         if((n*2)%k==0){
             answ+=(n*2)/k;
         }else{
             answ+=((n*2)/k)+1;
         }
        }else{
            answ++;
        }
        if (n * 5 > k) {
            if((n*5)%k==0){
                answ+=(n*5)/k;
            }else{
                answ+=((n*5)/k)+1;
            }
        }else{
            answ++;
        }
        if (n * 8 > k) {
            if((n*8)%k==0){
                answ+=(n*8)/k;
            }else{
                answ+=((n*8)/k)+1;
            }
        }else{
            answ++;
        }

        System.out.println(answ);
    }


    static void fileOut(String s) {
        File out = new File(""output.txt"");
        try {
            FileWriter fw = new FileWriter(out);
            fw.write(s);
            fw.flush();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        public FastReader(String path) {
            try {
                br = new BufferedReader(new
                        InputStreamReader(new FileInputStream(path)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        float nextFloat() {
            return Float.parseFloat(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }


        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}","public class Main {

    static StringBuilder data;
    final static FastReader in = new FastReader();


    public static void main(String[] args) {
        int n = in.nextInt(), k = in.nextInt();
        long answ = 0;
        if (n * 2 > k) {
            if ((n * 2) % k == 0) {
                answ += (n * 2) / k;
            } else {
                answ += ((n * 2) / k) + 1;
            }
        } else {
            answ++;
        }
        if (n * 5 > k) {
            if ((n * 5) % k == 0) {
                answ += (n * 5) / k;
            } else {
                answ += ((n * 5) / k) + 1;
            }
        } else {
            answ++;
        }
        if (n * 8 > k) {
            if ((n * 8) % k == 0) {
                answ += (n * 8) / k;
            } else {
                answ += ((n * 8) / k) + 1;
            }
        } else {
            answ++;
        }
        System.out.println(answ);
    }

    static void fileOut(String s) {
        File out = new File(""output.txt"");
        try {
            FileWriter fw = new FileWriter(out);
            fw.write(s);
            fw.flush();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        public FastReader(String path) {
            try {
                br = new BufferedReader(new InputStreamReader(new FileInputStream(path)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        float nextFloat() {
            return Float.parseFloat(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}",25
"public class programA {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		int t1 = (int)Math.ceil((double)n*2/k);
		int t2 = (int)Math.ceil((double)n*5/k);
		int t3 = (int)Math.ceil((double)n*8/k);
		System.out.println(t1+t2+t3);
	}
}","public class TransformedProgram {
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		int t1 = (int) Math.ceil((double) n * 2 / k);
		int t2 = (int) Math.ceil((double) n * 5 / k);
		int t3 = (int) Math.ceil((double) n * 8 / k);
		System.out.println(t1 + t2 + t3);
	}
}",26
"public class bhaa {

    InputStream is;
    PrintWriter o;
    



    boolean chpr(int n)
    {
    	if(n==1)
    	{
    		return true;
    	}if(n==2)
    	{
    		return true;
    	}
    	if(n==3)
    	{
    		return true;
    	}
    	if(n%2==0)
    	{
    		return false;

    	}
    	if(n%3==0)
    	{
    		return false;
    	}
    	
    	int w=2;
 		int i=5;
    	while(i*i<=n)
    	{
    		if(n%i==0)
    		{
    			return false;
    		}
    		i+=w;
    		w=6-w;
    	}
    	return true;

    }
    
    void solve() {


        int n=ni();
        int k=ni();
        int rr=2*n;
        int gr=5*n;
        int br=8*n;
        o.println((long)(Math.ceil(rr*1.0/k)+Math.ceil(gr*1.0/k)+Math.ceil(br*1.0/k)));



    	

    }





   


    












    








































    
    
    public static void main(String[] args) { new bhaa().run(); }
    void run() { 
        is = System.in; 
        o = new PrintWriter(System.out);
        solve();
        o.flush();
    }
    
    byte input[] = new byte[1024];
    int len = 0, ptr = 0;
    
    int readByte() { 
        if(ptr >= len) { ptr = 0; 
            try { len = is.read(input); } 
            catch(IOException e) { throw new InputMismatchException(); } 
            if(len <= 0) { return -1; } 
        } return input[ptr++];
    }
    boolean isSpaceChar(int c) { return !( c >= 33 && c <= 126 ); }
    int skip() { 
        int b = readByte(); 
        while(b != -1 && isSpaceChar(b)) { b = readByte(); } 
        return b;
    }
    
    char nc() { return (char)skip(); }
    String ns() { 
        int b = skip(); 
        StringBuilder sb = new StringBuilder(); 
        while(!isSpaceChar(b)) { sb.appendCodePoint(b); b = readByte(); } 
        return sb.toString();
    }
    String nLine() { 
        int b = skip(); 
        StringBuilder sb = new StringBuilder(); 
        while( !(isSpaceChar(b) && b != ' ') ) { sb.appendCodePoint(b); b = readByte(); } 
        return sb.toString();
    }
    int ni() { 
        int n = 0, b = readByte(); 
        boolean minus = false; 
        while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); } 
        if(b == '-') { minus = true; b = readByte(); } 
        if(b == -1) { return -1; }  
        while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); } 
        return minus ? -n : n;
    }
    long nl() { 
        long n = 0L;    int b = readByte(); 
        boolean minus = false; 
        while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); } 
        if(b == '-') { minus = true; b = readByte(); } 
        while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); } 
        return minus ? -n : n;
    }

    double nd() { return Double.parseDouble(ns()); }
    float nf() { return Float.parseFloat(ns()); }
    int[] nia(int n) { 
        int a[] = new int[n]; 
        for(int i = 0; i < n; i++) { a[i] = ni(); } 
        return a;
    }
    long[] nla(int n) { 
        long a[] = new long[n]; 
        for(int i = 0; i < n; i++) { a[i] = nl(); } 
        return a;
    }
    int [][] nim(int n)
    {
        int mat[][]=new int[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                mat[i][j]=ni();
            }
        }
        return mat;
    }
    long [][] nlm(int n)
    {
        long mat[][]=new long[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                mat[i][j]=nl();
            }
        }
        return mat;
    }
    




    
    char[] ns(int n) { 
        char c[] = new char[n]; 
        int i, b = skip(); 
        for(i = 0; i < n; i++) { 
            if(isSpaceChar(b)) { break; } 
            c[i] = (char)b; b = readByte(); 
        } return i == n ? c : Arrays.copyOf(c,i);
    }
    void piarr(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            o.print(arr[i]+"" "");

        }
        o.println();
    }
    void plarr(long arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            o.print(arr[i]+"" "");

        }
        o.println();
    }
    
    void pimat(int mat[][])
    {
        for(int i=0;i<mat.length;i++)
        {
            for(int j=0;j<mat[0].length;j++)
            {
                o.print(mat[i][j]);
            }
            o.println();
        }
    }
    void plmat(long mat[][])
    {
        for(int i=0;i<mat.length;i++)
        {
            for(int j=0;j<mat[0].length;j++)
            {
                o.print(mat[i][j]);
            }
            o.println();
        }

    }




    



}","public class bhaa {

    InputStream is;
    PrintWriter o;
    



    boolean chpr(int n)
    {
    	if(n==1)
    	{
    		return true;
    	}if(n==2)
    	{
    		return true;
    	}
    	if(n==3)
    	{
    		return true;
    	}
    	if(n%2==0)
    	{
    		return false;

    	}
    	if(n%3==0)
    	{
    		return false;
    	}
    	
    	int w=2;
 		int i=5;
    	while(i*i<=n)
    	{
    		if(n%i==0)
    		{
    			return false;
    		}
    		i+=w;
    		w=6-w;
    	}
    	return true;

    }
    
    void solve() {


        int n=ni();
        int k=ni();
        int rr=2*n;
        int gr=5*n;
        int br=8*n;
        o.println((long)(Math.ceil(rr*1.0/k)+Math.ceil(gr*1.0/k)+Math.ceil(br*1.0/k)));



    	

    }





   


    












    








































    
    
    public static void main(String[] args) { new bhaa().run(); }
    void run() { 
        is = System.in; 
        o = new PrintWriter(System.out);
        solve();
        o.flush();
    }
    
    byte input[] = new byte[1024];
    int len = 0, ptr = 0;
    
    int readByte() { 
        if(ptr >= len) { ptr = 0; 
            try { len = is.read(input); } 
            catch(IOException e) { throw new InputMismatchException(); } 
            if(len <= 0) { return -1; } 
        } return input[ptr++];
    }
    boolean isSpaceChar(int c) { return !( c >= 33 && c <= 126 ); }
    int skip() { 
        int b = readByte(); 
        while(b != -1 && isSpaceChar(b)) { b = readByte(); } 
        return b;
    }
    
    char nc() { return (char)skip(); }
    String ns() { 
        int b = skip(); 
        StringBuilder sb = new StringBuilder(); 
        while(!isSpaceChar(b)) { sb.appendCodePoint(b); b = readByte(); } 
        return sb.toString();
    }
    String nLine() { 
        int b = skip(); 
        StringBuilder sb = new StringBuilder(); 
        while( !(isSpaceChar(b) && b != ' ') ) { sb.appendCodePoint(b); b = readByte(); } 
        return sb.toString();
    }
    int ni() { 
        int n = 0, b = readByte(); 
        boolean minus = false; 
        while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); } 
        if(b == '-') { minus = true; b = readByte(); } 
        if(b == -1) { return -1; }  
        while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); } 
        return minus ? -n : n;
    }
    long nl() { 
        long n = 0L;    int b = readByte(); 
        boolean minus = false; 
        while(b != -1 && !( (b >= '0' && b <= '9') || b == '-')) { b = readByte(); } 
        if(b == '-') { minus = true; b = readByte(); } 
        while(b >= '0' && b <= '9') { n = n * 10 + (b - '0'); b = readByte(); } 
        return minus ? -n : n;
    }

    double nd() { return Double.parseDouble(ns()); }
    float nf() { return Float.parseFloat(ns()); }
    int[] nia(int n) { 
        int a[] = new int[n]; 
        for(int i = 0; i < n; i++) { a[i] = ni(); } 
        return a;
    }
    long[] nla(int n) { 
        long a[] = new long[n]; 
        for(int i = 0; i < n; i++) { a[i] = nl(); } 
        return a;
    }
    int [][] nim(int n)
    {
        int mat[][]=new int[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                mat[i][j]=ni();
            }
        }
        return mat;
    }
    long [][] nlm(int n)
    {
        long mat[][]=new long[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                mat[i][j]=nl();
            }
        }
        return mat;
    }
    




    
    char[] ns(int n) { 
        char c[] = new char[n]; 
        int i, b = skip(); 
        for(i = 0; i < n; i++) { 
            if(isSpaceChar(b)) { break; } 
            c[i] = (char)b; b = readByte(); 
        } return i == n ? c : Arrays.copyOf(c,i);
    }
    void piarr(int arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            o.print(arr[i]+"" "");

        }
        o.println();
    }
    void plarr(long arr[])
    {
        for(int i=0;i<arr.length;i++)
        {
            o.print(arr[i]+"" "");

        }
        o.println();
    }
    
    void pimat(int mat[][])
    {
        for(int i=0;i<mat.length;i++)
        {
            for(int j=0;j<mat[0].length;j++)
            {
                o.print(mat[i][j]);
            }
            o.println();
        }
    }
    void plmat(long mat[][])
    {
        for(int i=0;i<mat.length;i++)
        {
            for(int j=0;j<mat[0].length;j++)
            {
                o.print(mat[i][j]);
            }
            o.println();
        }

    }




    



}",27
"public class DS {

    
   



    public static void main(String[] args) throws IOException {
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       int x=Integer.parseInt(br.readLine());
         
if (x==1)
            System.out.println(-1);
else
            System.out.println(x+"" ""+x);

        }

        
    }","public class DS {

    
   



    public static void main(String[] args) throws IOException {
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       int x=Integer.parseInt(br.readLine());
         
if (x==1)
            System.out.println(-1);
else
            System.out.println(x+"" ""+x);

        }

        
    }",28
"public class DS {

    
   



    public static void main(String[] args) throws IOException {
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       int x=Integer.parseInt(br.readLine());
         
if (x==1)
            System.out.println(-1);
else
            System.out.println(x+"" ""+x);

        }

        
    }","public class DS {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int x = Integer.parseInt(br.readLine());
        if (x == 1) {
            System.out.println(-1);
        } else {
            System.out.println(x + "" "" + x);
        }
    }
}",29
"public class FirstApp {
    
    
 
    
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solve = new TaskA();
        solve.solve(1, in, out);
        out.close();
    }
    
    static class TaskA {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int number = in.nextInt();

            if(number > 2 && number % 2 == 0) {
                out.println(""YES"");
            } else {
                out.println(""NO"");
            }
        }
    }
    
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;
 
        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
 
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
 
        public int nextInt() {
            return Integer.parseInt(next());
        }
 
    }
    
}","class FirstApp {
    
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solve = new TaskA();
        solve.solve(1, in, out);
        out.close();
    }
    
    static class TaskA {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int number = in.nextInt();

            if(number > 2 && number % 2 == 0) {
                out.println(""YES"");
            } else {
                out.println(""NO"");
            }
        }
    }
    
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;
 
        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
 
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
 
        public int nextInt() {
            return Integer.parseInt(next());
        }
 
    }
    
}",30
"public class Main implements Runnable {
  static String readLn(int maxLength) {

    byte line[] = new byte[maxLength];
    int length = 0;
    int input = -1;
    try {
      while (length < maxLength) {
        input = System.in.read();
        if ((input < 0) || (input == '\n')) {
          break;
        }

        line[length++] += input;
      }

      if ((input < 0) && (length == 0)) {
        return null;
      }

      return new String(line, 0, length);
    } catch (IOException e) {
      return null;
    }
  }

  public static void main(String args[]) {
    Main myWork = new Main();
    myWork.run();
  }

  public void run() {
    new Watermelon().run();
  }
}

class Watermelon implements Runnable {
  public void run() {
    String line = Main.readLn(100).trim();
    int weight = Integer.parseInt(line);
    System.out.println(weight % 2 == 0 && weight > 2 ? ""YES"": ""NO"");
  }
}","public class Main implements Runnable {
    static String readLn(int maxLength) {
        byte line[] = new byte[maxLength];
        int length = 0;
        int input = -1;
        try {
            while (length < maxLength) {
                input = System.in.read();
                if ((input < 0) || (input == '\n')) {
                    break;
                }

                line[length++] += input;
            }

            if ((input < 0) && (length == 0)) {
                return null;
            }

            return new String(line, 0, length);
        } catch (IOException e) {
            return null;
        }
    }

    public static void main(String args[]) {
        Main myWork = new Main();
        myWork.run();
    }

    public void run() {
        new Watermelon().run();
    }
}

class Watermelon implements Runnable {
    public void run() {
        String line = Main.readLn(100).trim();
        int weight = Integer.parseInt(line);
        System.out.println(weight % 2 == 0 && weight > 2 ? ""YES"": ""NO"");
    }
}",31
"public class Solution
{
    public static void main(String[] args)
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        try
        {
            String str = br.readLine();
            int q = Integer.parseInt(str);
            
            
        if(q%2 == 0 && q!=2)
                System.out.println(""YES"");
            else
                System.out.println(""NO"");
            
        }
        catch(IOException e)
        {
            System.out.println(""Input Error"");
        }
        
        
 
       
 
    }
}","public class Solution
{
    public static void main(String[] args)
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        try
        {
            String str = br.readLine();
            int q = Integer.parseInt(str);
            if(q % 2 == 0 && q != 2)
                System.out.println(""YES"");
            else
                System.out.println(""NO"");
        }
        catch (NumberFormatException e)
        {
            System.out.println(""Input Error"");
        }
    }
}",32
"public class Main {

	public static void main(String[] args) {

		Scanner kai = new Scanner(System.in);
		while (kai.hasNext()) {
			int a = kai.nextInt();
			if ((a & 1) == 0) {
				System.out.println(""Mahmoud"");
			}else {
				System.out.println(""Ehab"");
			}
		}
	}
}","public class Main {

	public static void main(String[] args) {

		Scanner kai = new Scanner(System.in);
		for (int a = kai.nextInt(); kai.hasNext(); a = kai.nextInt()) {
			if ((a & 1) == 0) {
				System.out.println(""Mahmoud"");
			} else {
				System.out.println(""Ehab"");
			}
		}
	}
}",33
"public class Main
{
  static class FastReader
  {
    BufferedReader br;
    StringTokenizer st;

    public FastReader(){ br = new BufferedReader(new InputStreamReader(System.in)); }

    String next()
    {
      while (st == null || !st.hasMoreElements())
      {
        try
        {
          st = new StringTokenizer(br.readLine());
        }
        catch (IOException  e)
        {
          e.printStackTrace();
        }
      }
      return st.nextToken();
    }

    int nextInt() { return Integer.parseInt(next()); }

    long nextLong(){ return Long.parseLong(next()); }

    double nextDouble(){ return Double.parseDouble(next()); }

    float nextFloat() { return Float.parseFloat(next()); }

    boolean nextBoolean() { return Boolean.parseBoolean(next()); }

    String nextLine()
    {
      String str = """";
      try
      {
        str = br.readLine();
      }
      catch (IOException e)
      {
        e.printStackTrace();
      }
      return str;
    }
  }
  static long modExp(long x, long n, long mod)    
  {
    long result = 1;
    while(n > 0)
    {
        if(n % 2 == 1)
            result = (result%mod * x%mod)%mod;
        x = (x%mod * x%mod)%mod;
        n=n/2;
    }
    return result;
  }
  static long gcd(long a, long b)
  {
    if(a==0) return b;
    return gcd(b%a,a);
  }
  public static void main(String[] args)
  throws IOException
  {
    FastReader fr = new FastReader();
    System.out.println((int)(fr.nextInt()/2) + 1);

  }
}
class pair
{
  public int first;
  public int second;
  public pair(int first,int second)
  {
    this.first = first;
    this.second = second;
  }
  public int first() { return first; }
  public int second() { return second; }
  public void setFirst(int first) { this.first = first; }
  public void setSecond(int second) { this.second = second; }
}
class myComp implements Comparator<pair>
{
  public int compare(pair a,pair b)
  {
    return (a.first - b.first);
  }
}
class BIT       
{
  public long[] m_array;

  public BIT(long[] dat)
  {
    m_array = new long[dat.length + 1];
    Arrays.fill(m_array,0);
    for(int i = 0; i < dat.length; i++)
    {
      m_array[i + 1] = dat[i];
    }
    for(int i = 1; i < m_array.length; i++)
    {
      int j = i + (i & -i);
      if(j < m_array.length)
      {
        m_array[j] = m_array[j] + m_array[i];
      }
    }
  }

  public final long prefix_query(int i)
  {
    long result = 0;
    for(++i; i > 0; i = i - (i & -i))
    {
      result = result + m_array[i];
    }
    return result;
  }

  public final long range_query(int fro, int to)
  {
    if(fro == 0)
    {
      return prefix_query(to);
    }
    else
    {
      return (prefix_query(to) - prefix_query(fro - 1));
    }
  }

  public void update(int i, long add)
  {
    for(++i; i < m_array.length; i = i + (i & -i))
    {
      m_array[i] = m_array[i] + add;
    }
  }
}","public class Main{static class FastReader{BufferedReader br;StringTokenizer st;public FastReader(){br=new BufferedReader(new InputStreamReader(System.in));}String next(){while(st==null||!st.hasMoreElements()){try{st=new StringTokenizer(br.readLine());}catch(IOException e){e.printStackTrace();}}return st.nextToken();}int nextInt(){return Integer.parseInt(next());}long nextLong(){return Long.parseLong(next());}double nextDouble(){return Double.parseDouble(next());}float nextFloat(){return Float.parseFloat(next());}boolean nextBoolean(){return Boolean.parseBoolean(next());}String nextLine(){String str="""";try{str=br.readLine();}catch(IOException e){e.printStackTrace();}return str;}}static long modExp(long x,long n,long mod){long result=1;while(n>0){if(n%2==1)result=(result%mod*x%mod)%mod;x=(x%mod*x%mod)%mod;n=n/2;}return result;}static long gcd(long a,long b){if(a==0)return b;return gcd(b%a,a);}public static void main(String[] args) throws IOException{FastReader fr=new FastReader();System.out.println((int)(fr.nextInt()/2)+1);}}",34
"public class SolutionB {
       
      public static void main(String args[])throws IOException{
              Scanner sc = new Scanner(System.in);
              long a[] = new long[14];
              for(int i = 0; i < 14; i++)
                     a[i] = sc.nextLong();
              long cpy[] = new long[14];
              long max = 0;
              for(int i = 0; i < 14; i++){
                     if(a[i] == 0)continue;
                     long score = 0;
                     long curr = a[i];
                     for(int j = 0; j < 14; j++)
                            cpy[j] = a[j];
                     cpy[i] = 0;
                     long amnt = curr / 14l;
                     for(int j = 0; j < 14; j++){
                            cpy[j] += amnt;
                     }
                     amnt = curr % 14;
                     for(int j = i + 1; j < i + 1 + amnt; j++){
                            cpy[j % 14]++;
                     }
                     for(int j = 0; j < 14; j++){
                            if(cpy[j] % 2 == 0)
                                   score += cpy[j];
                     }
                     max = Math.max(max, score);
              }
              System.out.println(max);
      }
}","public class SolutionB {

    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        long[] a = new long[14];
        for (int i = 0; i < 14; i++)
            a[i] = sc.nextLong();
        long[] cpy = new long[14];
        long max = 0;
        for (int i = 0; i < 14; i++) {
            if (a[i] == 0) continue;
            long score = 0;
            long curr = a[i];
            for (int j = 0; j < 14; j++)
                cpy[j] = a[j];
            cpy[i] = 0;
            long amnt = curr / 14L;
            for (int j = 0; j < 14; j++) {
                cpy[j] += amnt;
            }
            amnt = curr % 14;
            for (int j = i + 1; j < i + 1 + amnt; j++) {
                cpy[j % 14]++;
            }
            for (int j = 0; j < 14; j++) {
                if (cpy[j] % 2 == 0)
                    score += cpy[j];
            }
            max = Math.max(max, score);
        }
        System.out.println(max);
    }
}",35
"public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        OutputWriter out = new OutputWriter(outputStream);
        A979 solver = new A979();
        solver.solve(1, in, out);
        out.close();
    }

    static class A979 {
        public void solve(int testNumber, InputReader in, OutputWriter out) {

            long n = in.nextLong();
            n = n + 1;
            if (n % 2 == 0) {
                out.println(n / 2);
            } else {
                if (n != 1) {
                    out.println(n);
                } else {
                    out.println(0);
                }
            }

        }

    }

    static class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void close() {
            writer.close();
        }

        public void println(long i) {
            writer.println(i);
        }

        public void println(int i) {
            writer.println(i);
        }

    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private InputReader.SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public long nextLong() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }

        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);

        }

    }
}","class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        OutputWriter out = new OutputWriter(outputStream);
        A979 solver = new A979();
        solver.solve(1, in, out);
        out.close();
    }

    static class A979 {
        public void solve(int testNumber, InputReader in, OutputWriter out) {
            long n = in.nextLong();
            n = n + 1;
            if(n % 2 == 0) {
                out.println(n / 2);
            }
            else {
                if(n != 1) {
                    out.println(n);
                }
                else {
                    out.println(0);
                }
            }
        }
    }

    static class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void close() {
            writer.close();
        }

        public void println(long i) {
            writer.println(i);
        }

        public void println(int i) {
            writer.println(i);
        }
    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private InputReader.SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public long nextLong() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }

        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }
}",36
"public class Main implements Runnable {
    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;
        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        public InputReader(InputStream stream) {
            this.stream = stream;
        }
        
        public int read() {
            if (numChars==-1) 
                throw new InputMismatchException();
            
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                }
                catch (IOException e) {
                    throw new InputMismatchException();
                }
                
                if(numChars <= 0)               
                    return -1;
            }
            return buf[curChar++];
        }
     
        public String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            int c = read();
            
            while(isSpaceChar(c)) 
                c = read();
            
            int sgn = 1;
            
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            
            int res = 0;
            do {
                if(c<'0'||c>'9') 
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c)); 
            
            return res * sgn;
        }
        
        public long nextLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));
                return res * sgn;
        }
        
        public double nextDouble() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            double res = 0;
            while (!isSpaceChar(c) && c != '.') {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            if (c == '.') {
                c = read();
                double m = 1;
                while (!isSpaceChar(c)) {
                    if (c == 'e' || c == 'E')
                        return res * Math.pow(10, nextInt());
                    if (c < '0' || c > '9')
                        throw new InputMismatchException();
                    m /= 10;
                    res += (c - '0') * m;
                    c = read();
                }
            }
            return res * sgn;
        }
        
        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            } 
            while (!isSpaceChar(c));
            
            return res.toString();
        }
     
        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
     
        public String next() {
            return readString();
        }
        
        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }
    public static void main(String args[]) throws Exception {
        new Thread(null, new Main(),""Main"",1<<26).start();
    }
    
    static void merge(int arr[], int l, int m, int r) { 
        int n1 = m - l + 1; 
        int n2 = r - m; 
        int L[] = new int [n1]; 
        int R[] = new int [n2]; 
        for (int i=0; i<n1; ++i) 
            L[i] = arr[l + i]; 
        for (int j=0; j<n2; ++j) 
            R[j] = arr[m + 1+ j]; 
        int i = 0, j = 0; 
        int k = l; 
        while (i < n1 && j < n2){ 
            if (L[i] <= R[j]){ 
                arr[k] = L[i]; 
                i++; 
            } 
            else{ 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
        while (i < n1){ 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 
    static void sort(int arr[], int l, int r) { 
        if (l < r) 
        { 
            int m = (l+r)/2; 
            sort(arr, l, m); 
            sort(arr , m+1, r); 
            merge(arr, l, m, r); 
        } 
    } 
    
    static void merge(long arr[], int l, int m, int r) { 
        int n1 = m - l + 1; 
        int n2 = r - m; 
        long L[] = new long [n1]; 
        long R[] = new long [n2]; 
        for (int i=0; i<n1; ++i) 
            L[i] = arr[l + i]; 
        for (int j=0; j<n2; ++j) 
            R[j] = arr[m + 1+ j]; 
        int i = 0, j = 0; 
        int k = l; 
        while (i < n1 && j < n2){ 
            if (L[i] <= R[j]){ 
                arr[k] = L[i]; 
                i++; 
            } 
            else{ 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
        while (i < n1){ 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 
    static void sort(long arr[], int l, int r) { 
        if (l < r) 
        { 
            int m = (l+r)/2; 
            sort(arr, l, m); 
            sort(arr , m+1, r); 
            merge(arr, l, m, r); 
        } 
    }
    static int gcd(int a, int b){ 
        if (b == 0) 
            return a; 
        return gcd(b, a % b);  
    }
    static long gcd(long a, long b){ 
        if (b == 0) 
            return a; 
        return gcd(b, a % b);  
    } 
    public long m=(long)1e9+7;;
    
    public void run() {
        InputReader in = new InputReader(System.in);
        PrintWriter out = new PrintWriter(System.out);
        
        int a=in.nextInt(),b=in.nextInt(),c=in.nextInt(),n=in.nextInt();
        int nnew=a+b-c;
        if((n>nnew) && (a>=c) && (b>=c))
            out.println(n-nnew);
        else
            out.println(-1);
        
        out.close();
    }
}","public class Main implements Runnable {
    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;
        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();

            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }

                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            int c = read();

            while (isSpaceChar(c))
                c = read();

            int sgn = 1;

            if (c == '-') {
                sgn = -1;
                c = read();
            }

            int res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));
            return res * sgn;
        }

        public long nextLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;

            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));
            return res * sgn;
        }

        public double nextDouble() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            double res = 0;
            while (!isSpaceChar(c) && c != '.') {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            if (c == '.') {
                c = read();
                double m = 1;
                while (!isSpaceChar(c)) {
                    if (c == 'e' || c == 'E')
                        return res * Math.pow(10, nextInt());
                    if (c < '0' || c > '9')
                        throw new InputMismatchException();
                    m /= 10;
                    res += (c - '0') * m;
                    c = read();
                }
            }
            return res * sgn;
        }

        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            }
            while (!isSpaceChar(c));

            return res.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public String next() {
            return readString();
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }

    public static void main(String args[]) throws Exception {
        new Thread(null, new Main(), ""Main"", 1 << 26).start();
    }

    static void merge(int arr[], int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    static void sort(int arr[], int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            sort(arr, l, m);
            sort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }

    static void merge(long arr[], int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        long L[] = new long[n1];
        long R[] = new long[n2];
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];
        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    static void sort(long arr[], int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            sort(arr, l, m);
            sort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }

    static int gcd(int a, int b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    static long gcd(long a, long b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    public long m = (long) 1e9 + 7;

    public void run() {
        InputReader in = new InputReader(System.in);
        PrintWriter out = new PrintWriter(System.out);

        int a = in.nextInt(), b = in.nextInt(), c = in.nextInt(), n = in.nextInt();
        int nnew = a + b - c;
        if ((n > nnew) && (a >= c) && (b >= c))
            out.println(n - nnew);
        else
            out.println(-1);

        out.close();
    }
}",37
"public class IfAtFIrstYouDIdnt {

	public static void main(String[] args) {
		

		Scanner input = new Scanner(System.in);
		int a = input.nextInt();
		int b = input.nextInt();
		int c = input.nextInt();
		int n  = input.nextInt();
		if(a<n && b<n && c < n && (a+b-c)<n && c<=a && c<=b){
			System.out.println((n)-(a+b-c));
		}
		else
			System.out.println(""-1"");
	}

}","public class IfAtFIrstYouDIdnt {

	public static void main(String[] args) {
		

		Scanner input = new Scanner(System.in);
		int a = input.nextInt();
		int b = input.nextInt();
		int c = input.nextInt();
		int n = input.nextInt();
		if (a < n && b < n && c < n && (a + b - c) < n && c <= a && c <= b) {
			System.out.println(n - (a + b - c));
		} else {
			System.out.println(""-1"");
		}
	}

}",38
"public class C_NNAndTheOpticalIllusion {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader inp = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        solver.solve(inp, out);
        out.close();
    }

    private static class Solver {
        private void solve(InputReader inp, PrintWriter out) {
            double n = inp.nextInt(), r = inp.nextInt();
            double x = Math.cos((n - 2) * Math.PI / (2 * n));
            out.print((r * x) / (1 - x));
        }
    }

    static class InputReader {
        BufferedReader reader;
        StringTokenizer tokenizer;

        InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}","public class C_NNAndTheOpticalIllusion {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader inp = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Solver solver = new Solver();
        solver.solve(inp, out);
        out.close();
    }

    private static class Solver {
        private void solve(InputReader inp, PrintWriter out) {
            double n = inp.nextInt(), r = inp.nextInt();
            double x = Math.cos((n - 2) * Math.PI / (2 * n));
            out.print((r * x) / (1 - x));
        }
    }

    static class InputReader {
        BufferedReader reader;
        StringTokenizer tokenizer;

        InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }
        public long nextLong() {
            return Long.parseLong(next());
        }
    }
}",39
"public class HelloWorld {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Palindrome solver = new Palindrome();
        solver.solve(1, in, out);
        out.close();
    }
    
    static class Palindrome {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            long l = in.nextLong();
            
            if(l%4 == 0 || l%4 == 3)
            {
                out.print(""0"");
            }
            else
            {
                out.print(""1"");
            }
        }
 
    }
    
    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;
 
        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }
 
        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }
        
        public long nextLong(){
            return Long.parseLong(next());
        }
 
    }
}","public class HelloWorld { static class Palindrome { public void solve(int testNumber, InputReader in, PrintWriter out) { long l = in.nextLong(); if (l % 4 == 0 || l % 4 == 3) { out.print(""0""); } else { out.print(""1""); } } } static class InputReader { public BufferedReader reader; public StringTokenizer tokenizer; public InputReader(InputStream stream) { reader = new BufferedReader(new InputStreamReader(stream), 32768); tokenizer = null; } public String next() { while (tokenizer == null || !tokenizer.hasMoreTokens()) { try { tokenizer = new StringTokenizer(reader.readLine()); } catch (IOException e) { throw new RuntimeException(e); } } return tokenizer.nextToken(); } public long nextLong() { return Long.parseLong(next()); } } public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); PrintWriter out = new PrintWriter(outputStream); Palindrome solver = new Palindrome(); solver.solve(1, in, out); out.close(); } }",40
"public class Main {
 
    private static final FS scanner = new FS(System.in);
	
	
	public static void main(String[] args) throws Exception {

        int n = scanner.nextInt();
        int sumA = 0;
        int sumB = 0;
        int rem = n % 4;
        for (int i = rem; i >= 1 ; i--) {
            if (sumB <= sumA) {
                sumB += i;
            }
            else {
                sumA +=i;
            }
        }

        System.out.println(Math.abs(sumA - sumB));
    }
	
    static class FS {
        BufferedReader br;
        StringTokenizer st;

        public FS(InputStream i) {
            br = new BufferedReader(new InputStreamReader(i));
            st = new StringTokenizer("""");
        }

        public String next() throws IOException {
            if(st.hasMoreTokens())
                return st.nextToken();
            else
                st = new StringTokenizer(br.readLine());
            return next();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }
        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }
 
}","public class Main {
 
    private static final FS scanner = new FS(System.in);
	
	
	public static void main(String[] args) throws Exception {

        int n = scanner.nextInt();
        int sumA = 0;
        int sumB = 0;
        int rem = n % 4;
        int i = rem;
        while (i >= 1) {
            if (sumB <= sumA) {
                sumB += i;
            } else {
                sumA += i;
            }
            i--;
        }

        System.out.println(Math.abs(sumA - sumB));
    }
	
    static class FS {
        BufferedReader br;
        StringTokenizer st;

        public FS(InputStream i) {
            br = new BufferedReader(new InputStreamReader(i));
            st = new StringTokenizer("""");
        }

        public String next() throws IOException {
            if (st.hasMoreTokens())
                return st.nextToken();
            else
                st = new StringTokenizer(br.readLine());
            return next();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }
        public double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }
    }
 
}",41
"public class usd {
		
		static int r=0;static int c=0;
		static void fillzero(int a[][],int n)
		{
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<n-1;j++)
				{
					if(a[j][i]==0&&a[j+1][i]==0)
					{
						a[j][i]=1;a[j+1][i]=1;
						r=j;c=i;
						return;
					}
				}
			}
		}
		static void fillone(int a[][],int n)
		{
			for(int i=0;i<n;i++)
			{
				for(int j=0;j<n-1;j++)
				{
					if(a[i][j]==0&&a[i][j+1]==0)
					{
						a[i][j]=1;a[i][j+1]=1;
						r=i;c=j;
						return;
					}
				}
			}
		}
		
		static void check(int a[][],int n)
		{
			for(int i=0;i<4;i++)
			{
				if(a[i][0]==1&&a[i][1]==1&&a[i][2]==1&&a[i][3]==1)
				{
					a[i][0]=0;a[i][1]=0;a[i][2]=0;a[i][3]=0;
				}
			}
			for(int i=0;i<4;i++)
			{
				if(a[0][i]==1&&a[1][i]==1&&a[2][i]==1&&a[3][i]==1)
				{
					a[0][i]=0;a[1][i]=0;a[2][i]=0;a[3][i]=0;;
				}
			}
		}
		
		
		public static void main(String[] args) throws NumberFormatException, IOException {
			
			
		Scanner in=new Scanner (System.in);
		HashMap<String,Integer>map=new HashMap<String,Integer>();
		ArrayList<Integer>list=new ArrayList<Integer>();
	
long n=in.nextLong();
long ans=Long.MAX_VALUE;
long sum=0;long sum2=(n*(n+1))/2;
if(sum2%2==0)
System.out.println(0);
else
	System.out.println(1);


		
		
		
		
		}
		
		
	}","public class usd {

    static int r = 0;
    static int c = 0;

    static void fillzero(int[][] a, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                if (a[j][i] == 0 && a[j + 1][i] == 0) {
                    a[j][i] = 1;
                    a[j + 1][i] = 1;
                    r = j;
                    c = i;
                    return;
                }
            }
        }
    }

    static void fillone(int[][] a, int n) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - 1; j++) {
                if (a[i][j] == 0 && a[i][j + 1] == 0) {
                    a[i][j] = 1;
                    a[i][j + 1] = 1;
                    r = i;
                    c = j;
                    return;
                }
            }
        }
    }

    static void check(int[][] a, int n) {
        for (int i = 0; i < 4; i++) {
            if (a[i][0] == 1 && a[i][1] == 1 && a[i][2] == 1 && a[i][3] == 1) {
                a[i][0] = 0;
                a[i][1] = 0;
                a[i][2] = 0;
                a[i][3] = 0;
            }
        }
        for (int i = 0; i < 4; i++) {
            if (a[0][i] == 1 && a[1][i] == 1 && a[2][i] == 1 && a[3][i] == 1) {
                a[0][i] = 0;
                a[1][i] = 0;
                a[2][i] = 0;
                a[3][i] = 0;
            }
        }
    }

    public static void main(String[] args) throws NumberFormatException, IOException {

        Scanner in = new Scanner(System.in);
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        ArrayList<Integer> list = new ArrayList<Integer>();

        long n = in.nextLong();
        long ans = Long.MAX_VALUE;
        long sum = 0;
        long sum2 = (n * (n + 1)) / 2;
        if (sum2 % 2 == 0)
            System.out.println(0);
        else
            System.out.println(1);
    }
}",42
"public class SashaAndHisTrip {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int v = in.nextInt();
        if (v > N) {
            System.out.println(N-1);
        }
        else {
            int price = v + ((N-v-1) * (2+ N - v))/2;
            int counter = 0;
            System.out.println(price);
        }
    }
}","public class SashaAndHisTrip {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int N = in.nextInt();
        int v = in.nextInt();
        if (v > N) {
            System.out.println(N-1);
        } else {
            int price = v + (N - v - 1) * (2 + N - v) / 2;
            int counter = 0;
            System.out.println(price);
        }
    }
}",43
"public class Main {
    public static void main(String args[]) {
        FastReader fr = new FastReader();
        PrintWriter out = new PrintWriter(System.out);
        int n = fr.nextInt(), v = fr.nextInt();
        if (v >= n)
            out.println(n - 1);
        else
            out.println((n - v) * (n - v + 1) / 2 + v - 1);
        out.flush();
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        int[] nextIntArray(int n) {
            int a[] = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = nextInt();
            }
            return a;
        }

        int[] memset(int n, int val) {
            int ar[] = new int[n];
            Arrays.fill(ar, val);
            return ar;
        }
    }
}","public class Main {
    public static void main(String args[]) {
        FastReader fr = new FastReader();
        PrintWriter out = new PrintWriter(System.out);
        int n = fr.nextInt(), v = fr.nextInt();
        if (n <= v)
            out.println(n - 1);
        else
            out.println((n - v) * (n - v + 1) / 2 + v - 1);
        out.flush();
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        int[] nextIntArray(int n) {
            int a[] = new int[n];
            for (int i = 0; i < n; i++) {
                a[i] = nextInt();
            }
            return a;
        }

        int[] memset(int n, int val) {
            int ar[] = new int[n];
            Arrays.fill(ar, val);
            return ar;
        }
    }
}",44
"public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		while (sc.hasNext()) {
			int n = sc.nextInt();
			if (n % 2 != 0) {
				System.out.println(""Ehab"");
			} else {
				System.out.println(""Mahmoud"");
			}

		}

	}

}","public class Main {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n;
		while (sc.hasNextInt()) {
			n = sc.nextInt();
			if (n % 2 != 0) {
				System.out.println(""Ehab"");
			} else {
				System.out.println(""Mahmoud"");
			}
		}
	}
}",45
"public class Main {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		while(sc.hasNext()) {
			int n=sc.nextInt();
			if(n%2==0) {
				System.out.println(""Mahmoud"");
			}else {
				System.out.println(""Ehab"");
			}
		}
	}
}","public class Main {

	public static void main(String[] args) {
		try(Scanner sc = new Scanner(System.in)) {
			while(sc.hasNextInt()) {
				int n = sc.nextInt();
				if(n % 2 == 0) {
					System.out.println(""Mahmoud"");
				} else {
					System.out.println(""Ehab"");
				}
			}
		}
	}
}",46
"public class CodeForces
{
	public static void main(String[] args)
	{
		Scanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
		int k = input.nextInt();
		int n = input.nextInt();
		int s = input.nextInt();
		int p = input.nextInt();

		int each = n / s;
		if (n % s != 0)
		{
			each++;
		}
		int all = each * k;

		if (all % p == 0)
		{
			System.out.println(all / p);
		} else
		{
			System.out.println(all / p + 1);
		}
	}
}","public class CodeForces
{
	public static void main(String[] args)
	{
		Scanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
		int k = input.nextInt();
		int n = input.nextInt();
		int s = input.nextInt();
		int p = input.nextInt();

		int each = n / s + (n % s != 0 ? 1 : 0);
		int all = each * k;

		System.out.println((all % p == 0) ? all / p : all / p + 1);
	}
}",47
"public class A {
		static int n;
		static TreeSet<Integer> Primes;
		static int[] arr;
		static int[] arr2;
	
		public static int[] copyOf(int[] arr) {
			for (int i = 0; i < arr.length; i++)
				arr2[i] += arr[i];
			return arr2;
		}
	
		public static long addEvens(int[] arr) {
			long r = 0;
			for (int i = 0; i < arr.length; i++)
				if (arr[i] % 2 == 0)
					r += arr[i];
			return r;
		}
	
		public static void main(String[] args) throws IOException {
			Scanner sc = new Scanner(System.in);
			PrintWriter pw = new PrintWriter(System.out);
			arr = new int[14];
			for (int i = 0; i < 14; i++) {
				arr[i] = sc.nextInt();
			}
			int x = 5535;
			int y = x;
			int s;
			long max = Integer.MIN_VALUE;
			for (int i = 0; i < 14; i++) {
				int a = arr[i];
				arr2 = new int[14];
				arr2 = copyOf(arr);
				arr2[i]=0;
				int j =0;
				int rem = arr[i] / 14;
				int steps = 0;
				int c = 0;
				for (  j = i+1;c<14; j++) {
					if (j >=14 )
						j = 0;
					arr2[c] += rem;
					c++;
				}
				steps = arr[i] % 14;
				j = i;
				c=0;
				int adasd;
				for ( j = i+1;c<steps; j++) {
					if (j >= 14)
						j = 0;
					arr2[j] += 1;
					c++;
				}
				max = Math.max(max, addEvens(arr2));
			}
			pw.print(max);
	
			pw.flush();
		}
	
	
	
	}","public class A {
	static int n;
	static TreeSet<Integer> Primes;
	static int[] arr;
	static int[] arr2;

	public static int[] copyOf(int[] arr) {
		int[] arr2 = new int[arr.length];
		for (int i = 0; i < arr.length; i++)
			arr2[i] = arr[i];
		return arr2;
	}

	public static long addEvens(int[] arr) {
		long r = 0;
		for (int i = 0; i < arr.length; i++)
			if (arr[i] % 2 == 0)
				r += arr[i];
		return r;
	}

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		PrintWriter pw = new PrintWriter(System.out);
		arr = new int[14];
		for (int i = 0; i < 14; i++) {
			arr[i] = sc.nextInt();
		}
		int x = 5535;
		int y = x;
		int s;
		long max = Integer.MIN_VALUE;
		for (int i = 0; i < 14; i++) {
			int a = arr[i];
			arr2 = new int[14];
			arr2 = copyOf(arr);
			arr2[i] = 0;
			int j = 0;
			int rem = arr[i] / 14;
			int steps = 0;
			int c = 0;
			for (j = i + 1; c < 14; j++) {
				if (j >= 14)
					j = 0;
				arr2[c] += rem;
				c++;
			}
			steps = arr[i] % 14;
			j = i;
			c = 0;
			for (j = i + 1; c < steps; j++) {
				if (j >= 14)
					j = 0;
				arr2[j] += 1;
				c++;
			}
			max = Math.max(max, addEvens(arr2));
		}
		pw.print(max);

		pw.flush();
	}
}",48
"public class helloWorld 
{
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		long n = in.nextLong();
		long ans = n+1;
		
		if(ans == 1)
			ans = 0;
		if(ans % 2 == 0)
			ans /= 2;
		
		System.out.println(ans);
		
		in.close();
	}
}",public class helloWorld { public static void main(String[] args) { Scanner in = new Scanner(System.in); long n = in.nextLong(); long ans = n + 1; if (ans == 1) ans = 0; if (ans % 2 == 0) ans /= 2; System.out.println(ans); in.close(); } },49
"public class A
{
      public static void main(String ar[]) throws Exception
      {
            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
            String s1[]=br.readLine().split("" "");
            int a=Integer.parseInt(s1[0]);
            int b=Integer.parseInt(s1[1]);
            int c=Integer.parseInt(s1[2]);
            int n=Integer.parseInt(s1[3]);
            int S=a+b-c;
            if(n-S<1 || c>Math.min(a,b))
             System.out.println(""-1"");
            else
             System.out.println(n-S);
      }
}","public class A
{
      public static void main(String ar[]) throws Exception
      {
            BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
            String s1[]=br.readLine().split("" "");
            int a=Integer.parseInt(s1[0]);
            int b=Integer.parseInt(s1[1]);
            int c=Integer.parseInt(s1[2]);
            int n=Integer.parseInt(s1[3]);
            int S=a+b-c;
            if(n-S<1 || c>Math.min(a,b))
             System.out.println(""-1"");
            else
             System.out.println(n-S);
      }
}",50
"public class aaaaaaaaaaaaaaaa {
	public void run() throws Exception {
		Scanner file = new Scanner(System.in);
		int a = file.nextInt(), b= file.nextInt(), c = file.nextInt(), n = file.nextInt();
		a -= c;
		b -= c;
		if (a < 0 || b < 0) System.out.println(-1);
		else {
			int x = a + b + c;
			if (x >= n) System.out.println(-1);
			else System.out.println(n - x);
		}
	}

	public static void main(String[] args) throws Exception {
		new aaaaaaaaaaaaaaaa().run();
	}

}","public class Solution {
	public void solve() throws Exception {
		Scanner scanner = new Scanner(System.in);
		int a = scanner.nextInt(), b = scanner.nextInt(), c = scanner.nextInt(), n = scanner.nextInt();
		a -= c;
		b -= c;
		if (a < 0 || b < 0) System.out.println(-1);
		else {
			int x = a + b + c;
			if (x >= n) System.out.println(-1);
			else System.out.println(n - x);
		}
	}

	public static void main(String[] args) throws Exception {
		new Solution().solve();
	}
}",51
"public class C {
	public static void main(String[]args){
		Scanner sc=new Scanner(System.in);
		double n=sc.nextDouble(),r=sc.nextDouble();
		System.out.println(r/(1/Math.sin(Math.PI/n)-1));
		sc.close();
	}
}","public class C {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		double n = sc.nextDouble();
		double r = sc.nextDouble();
		System.out.println(r / (1 / Math.sin(Math.PI / n) - 1));
		sc.close();
	}
}",52
"public class Main_1100C {

	private static Scanner sc;
	private static Printer pr;

	private static void solve() {
		int n = sc.nextInt();
		int r = sc.nextInt();

		double sin = Math.sin(Math.PI / n);
		double ans = r * sin / (1 - sin);
		
		pr.printf(""%.7f%n"", ans);
	}

	
	public static void main(String[] args) {
		sc = new Scanner(System.in);
		pr = new Printer(System.out);
			
		solve();
			
		pr.close();
		sc.close();
	}

	static class Scanner {
		BufferedReader br;

		Scanner (InputStream in) {
			br = new BufferedReader(new InputStreamReader(in));
		}

		private boolean isPrintable(int ch) {
			return ch >= '!' && ch <= '~';
		}

		private boolean isCRLF(int ch) {
			return ch == '\n' || ch == '\r' || ch == -1;
		}

		private int nextPrintable() {
			try {
				int ch;
				while (!isPrintable(ch = br.read())) {
					if (ch == -1) {
						throw new NoSuchElementException();
					}
				}

				return ch;
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		String next() {
			try {
				int ch = nextPrintable();
				StringBuilder sb = new StringBuilder();
				do {
					sb.appendCodePoint(ch);
				} while (isPrintable(ch = br.read()));

				return sb.toString();
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		int nextInt() {
			try {
				
				boolean negative = false;
				int res = 0;
				int limit = -Integer.MAX_VALUE;
				int radix = 10;

				int fc = nextPrintable();
				if (fc < '0') {
					if (fc == '-') {
						negative = true;
						limit = Integer.MIN_VALUE;
					} else if (fc != '+') {
						throw new NumberFormatException();
					}
					fc = br.read();
				}
				int multmin = limit / radix;

				int ch = fc;
				do {
					int digit = ch - '0';
					if (digit < 0 || digit >= radix) {
						throw new NumberFormatException();
					}
					if (res < multmin) {
						throw new NumberFormatException();
					}
					res *= radix;
					if (res < limit + digit) {
						throw new NumberFormatException();
					}
					res -= digit;

				} while (isPrintable(ch = br.read()));

				return negative ? res : -res;
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		long nextLong() {
			try {
				
				boolean negative = false;
				long res = 0;
				long limit = -Long.MAX_VALUE;
				int radix = 10;

				int fc = nextPrintable();
				if (fc < '0') {
					if (fc == '-') {
						negative = true;
						limit = Long.MIN_VALUE;
					} else if (fc != '+') {
						throw new NumberFormatException();
					}
					fc = br.read();
				}
				long multmin = limit / radix;

				int ch = fc;
				do {
					int digit = ch - '0';
					if (digit < 0 || digit >= radix) {
						throw new NumberFormatException();
					}
					if (res < multmin) {
						throw new NumberFormatException();
					}
					res *= radix;
					if (res < limit + digit) {
						throw new NumberFormatException();
					}
					res -= digit;

				} while (isPrintable(ch = br.read()));

				return negative ? res : -res;
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}

		float nextFloat() {
			return Float.parseFloat(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			try {
				int ch;
				while (isCRLF(ch = br.read())) {
					if (ch == -1) {
						throw new NoSuchElementException();
					}
				}
				StringBuilder sb = new StringBuilder();
				do {
					sb.appendCodePoint(ch);
				} while (!isCRLF(ch = br.read()));

				return sb.toString();
			} catch (IOException e) {
				throw new NoSuchElementException();
			}
		}
		
		int[] nextIntArray(int n) {
			int[] ret = new int[n];
			for (int i = 0; i < n; i++) {
				ret[i] = sc.nextInt();
			}
			
			return ret;
		}

		int[][] nextIntArrays(int n, int m) {
			int[][] ret = new int[m][n];
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < m; j++) {
					ret[j][i] = sc.nextInt();
				}
			}
			
			return ret;
		}

		void close() {
			try {
				br.close();
			} catch (IOException e) {

			}
		}
	}

	static class Printer extends PrintWriter {
		Printer(OutputStream out) {
			super(out);
		}
		
		void printInts(int... a) {
			StringBuilder sb = new StringBuilder(32);
			for (int i = 0, size = a.length; i < size; i++) {
				if (i > 0) {
					sb.append(' ');
				}
				sb.append(a[i]);
			}

			println(sb);
		}
		
		void printLongs(long... a) {
			StringBuilder sb = new StringBuilder(64);
			for (int i = 0, size = a.length; i < size; i++) {
				if (i > 0) {
					sb.append(' ');
				}
				sb.append(a[i]);
			}

			println(sb);
		}
		
		void printStrings(String... a) {
			StringBuilder sb = new StringBuilder(32);
			for (int i = 0, size = a.length; i < size; i++) {
				if (i > 0) {
					sb.append(' ');
				}
				sb.append(a[i]);
			}

			println(sb);
		}
	}
}","class Main_1100C { private static Scanner sc; private static Printer pr; private static void solve() { int n = sc.nextInt(); int r = sc.nextInt(); double sin = Math.sin(Math.PI / n); double ans = r * sin / (1 - sin); pr.printf(""%.7f%n"", ans); } public static void main(String[] args) { sc = new Scanner(System.in); pr = new Printer(System.out); solve(); pr.close(); sc.close(); } static class Scanner { BufferedReader br; Scanner(InputStream in) { br = new BufferedReader(new InputStreamReader(in)); } private boolean isPrintable(int ch) { return ch >= '!' && ch <= '~'; } private boolean isCRLF(int ch) { return ch == '\n' || ch == '\r' || ch == -1; } private int nextPrintable() { try { int ch; while (!isPrintable(ch = br.read())) { if (ch == -1) { throw new NoSuchElementException(); } } return ch; } catch (IOException e) { throw new NoSuchElementException(); } } String next() { try { int ch = nextPrintable(); StringBuilder sb = new StringBuilder(); do { sb.appendCodePoint(ch); } while (isPrintable(ch = br.read())); return sb.toString(); } catch (IOException e) { throw new NoSuchElementException(); } } int nextInt() { try { boolean negative = false; int res = 0; int limit = -Integer.MAX_VALUE; int radix = 10; int fc = nextPrintable(); if (fc < '0') { if (fc == '-') { negative = true; limit = Integer.MIN_VALUE; } else if (fc != '+') { throw new NumberFormatException(); } fc = br.read(); } int multmin = limit / radix; int ch = fc; do { int digit = ch - '0'; if (digit < 0 || digit >= radix) { throw new NumberFormatException(); } if (res < multmin) { throw new NumberFormatException(); } res *= radix; if (res < limit + digit) { throw new NumberFormatException(); } res -= digit; } while (isPrintable(ch = br.read())); return negative ? res : -res; } catch (IOException e) { throw new NoSuchElementException(); } } long nextLong() { try { boolean negative = false; long res = 0; long limit = -Long.MAX_VALUE; int radix = 10; int fc = nextPrintable(); if (fc < '0') { if (fc == '-') { negative = true; limit = Long.MIN_VALUE; } else if (fc != '+') { throw new NumberFormatException(); } fc = br.read(); } long multmin = limit / radix; int ch = fc; do { int digit = ch - '0'; if (digit < 0 || digit >= radix) { throw new NumberFormatException(); } if (res < multmin) { throw new NumberFormatException(); } res *= radix; if (res < limit + digit) { throw new NumberFormatException(); } res -= digit; } while (isPrintable(ch = br.read())); return negative ? res : -res; } catch (IOException e) { throw new NoSuchElementException(); } } float nextFloat() { return Float.parseFloat(next()); } double nextDouble() { return Double.parseDouble(next()); } String nextLine() { try { int ch; while (isCRLF(ch = br.read())) { if (ch == -1) { throw new NoSuchElementException(); } } StringBuilder sb = new StringBuilder(); do { sb.appendCodePoint(ch); } while (!isCRLF(ch = br.read())); return sb.toString(); } catch (IOException e) { throw new NoSuchElementException(); } } int[] nextIntArray(int n) { int[] ret = new int[n]; for (int i = 0; i < n; i++) { ret[i] = sc.nextInt(); } return ret; } int[][] nextIntArrays(int n, int m) { int[][] ret = new int[m][n]; for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { ret[j][i] = sc.nextInt(); } } return ret; } void close() { try { br.close(); } catch (IOException e) { } } } static class Printer extends PrintWriter { Printer(OutputStream out) { super(out); } void printInts(int... a) { StringBuilder sb = new StringBuilder(32); for (int i = 0, size = a.length; i < size; i++) { if (i > 0) { sb.append(' '); } sb.append(a[i]); } println(sb); } void printLongs(long... a) { StringBuilder sb = new StringBuilder(64); for (int i = 0, size = a.length; i < size; i++) { if (i > 0) { sb.append(' '); } sb.append(a[i]); } println(sb); } void printStrings(String... a) { StringBuilder sb = new StringBuilder(32); for (int i = 0, size = a.length; i < size; i++) { if (i > 0) { sb.append(' '); } sb.append(a[i]); } println(sb); } } }",53
"public class IntegerSequenceDividing {
	static PrintWriter pw = new PrintWriter(System.out);
	public static void main(String[] args) throws IOException{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		if(n%2==0)
		{
			n=n/2;
			if(n%2==0)
				System.out.println(0);
			else
				System.out.println(1);
		}else
		{
			n++;
			n=n/2;
			if(n%2==0)
				System.out.println(0);
			else
				System.out.println(1);
		}
	}
	static class Scanner {
		StringTokenizer st;
		BufferedReader br;
 
		public Scanner(InputStream system) {
			br = new BufferedReader(new InputStreamReader(system));
		}
 
		public Scanner(String file) throws Exception {
			br = new BufferedReader(new FileReader(file));
		}
 
		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}
 
		public String nextLine() throws IOException {
			return br.readLine();
		}
 
		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}
 
		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}
 
		public char nextChar() throws IOException {
			return next().charAt(0);
		}
 
		public Long nextLong() throws IOException {
			return Long.parseLong(next());
		}
 
		public boolean ready() throws IOException {
			return br.ready();
		}
 
		public void waitForInput() throws InterruptedException {
			Thread.sleep(3000);
		}
	}
}","public class IntegerSequenceDividing {
	static PrintWriter pw = new PrintWriter(System.out);
	public static void main(String[] args) throws IOException{
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		if(n%2==0)
		{
			n=n/2;
			if(n%2==0)
				System.out.println(0);
			else
				System.out.println(1);
		}else
		{
			n++;
			n=n/2;
			if(n%2==0)
				System.out.println(0);
			else
				System.out.println(1);
		}
	}
	static class Scanner {
		StringTokenizer st;
		BufferedReader br;
 
		public Scanner(InputStream system) {
			br = new BufferedReader(new InputStreamReader(system));
		}
 
		public Scanner(String file) throws Exception {
			br = new BufferedReader(new FileReader(file));
		}
 
		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}
 
		public String nextLine() throws IOException {
			return br.readLine();
		}
 
		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}
 
		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}
 
		public char nextChar() throws IOException {
			return next().charAt(0);
		}
 
		public Long nextLong() throws IOException {
			return Long.parseLong(next());
		}
 
		public boolean ready() throws IOException {
			return br.ready();
		}
 
		public void waitForInput() throws InterruptedException {
			Thread.sleep(3000);
		}
	}
}",54
"public class Codechef
{   static PrintWriter out=new PrintWriter(System.out);
	static FastScanner in = new FastScanner(System.in);
     static class FastScanner {BufferedReader br;StringTokenizer stok;FastScanner(InputStream is) {br = new BufferedReader(new InputStreamReader(is));}
        String next() throws IOException {while (stok == null || !stok.hasMoreTokens()) {String s = br.readLine();if (s == null) {return null;}
                stok = new StringTokenizer(s);}return stok.nextToken();}
        int ni() throws IOException {    return Integer.parseInt(next());}
        long nl() throws IOException {return Long.parseLong(next());}
        double nd() throws IOException {return Double.parseDouble(next());}
        char nc() throws IOException {return (char) (br.read());}
        String ns() throws IOException {return br.readLine();}
        int[] nia(int n) throws IOException{int a[] = new int[n];for (int i = 0; i < n; i++)a[i] = ni();return a;}
        long[] nla(int n) throws IOException {
            long a[] = new long[n];for (int i = 0; i < n; i++)a[i] = nl();return a;}
        double[] nda(int n)throws IOException {double a[] = new double[n];for (int i = 0; i < n; i++)        a[i] = nd();    return a;}
        int [][] imat(int n,int m) throws IOException
        {   int mat[][]=new int[n][m];for(int i=0;i<n;i++){   for(int j=0;j<m;j++)mat[i][j]=ni();}return mat;}
    }
        
    
    
    
    
    
	static long mod=Long.MAX_VALUE;
	public static void main (String[] args) throws java.lang.Exception
	{   int i,j;
	    HashMap<Integer,Integer> hm=new HashMap<Integer,Integer>();
		       
        ArrayList<Integer> arr=new ArrayList<Integer>();
        HashSet<Integer> set=new HashSet<Integer>();
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
        
        long n=in.nl();
        long v=in.nl();
        long temp=n-1;
        long ans=0;
          
        ans+=Math.min(v,temp);
        temp-=v;
	    
	    if(temp>0)
            ans+=((temp+1)*(temp+2))/(long)2-1;
        
        
        out.println(ans);
        out.close();
	}
	
	
	
	
	
	static long gcd(long a,long b)
	{   if(b==0)
	        return a;
	    return gcd(b,a%b);    
	}
	static long exponent(long a,long n)
	{   long ans=1;
	    while(n!=0)
	    {   if(n%2==1)
	            ans=(ans*a)%mod;
	       a=(a*a)%mod;
	       n=n>>1;
	    }
	    return ans;
	}
	static int binarySearch(int a[], int item, int low, int high) 
    {   if (high <= low) 
            return (item > a[low])?  (low + 1): low; 
        int mid = (low + high)/2; 
        if(item == a[mid]) 
            return mid+1; 
        if(item > a[mid]) 
            return binarySearch(a, item, mid+1, high); 
        return binarySearch(a, item, low, mid-1); 
    } 
   static void merge(int arr[], int l, int m, int r) 
    {   int n1 = m - l + 1; int n2 = r - m; int L[] = new int [n1]; int R[] = new int [n2]; 
        
        for (int i=0; i<n1; ++i) L[i] = arr[l + i]; for (int j=0; j<n2; ++j) R[j] = arr[m + 1+ j]; int i = 0, j = 0; int k = l; 
        while (i < n1 && j < n2) {   if (L[i] <= R[j]) {   arr[k] = L[i]; i++; } else{   arr[k] = R[j]; j++; } k++; } while (i < n1){   arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j];   j++;     k++; } 
    } 
    static void Sort(int arr[], int l, int r) 
    {    if (l < r) {   int m = (l+r)/2; Sort(arr, l, m); Sort(arr , m+1, r); merge(arr, l, m, r); } } 
    
    static void sort(int a[])
    {Sort(a,0,a.length-1);}

}","class Codechef { static PrintWriter out = new PrintWriter(System.out); static FastScanner in = new FastScanner(System.in); static class FastScanner { BufferedReader br; StringTokenizer stok; FastScanner(InputStream is) { br = new BufferedReader(new InputStreamReader(is)); } String next() throws IOException { while (stok == null || !stok.hasMoreTokens()) { String s = br.readLine(); if (s == null) return null; stok = new StringTokenizer(s); } return stok.nextToken(); } int ni() throws IOException { return Integer.parseInt(next()); } long nl() throws IOException { return Long.parseLong(next()); } double nd() throws IOException { return Double.parseDouble(next()); } char nc() throws IOException { return (char) (br.read()); } String ns() throws IOException { return br.readLine(); } int[] nia(int n) throws IOException { int a[] = new int[n]; for (int i = 0; i < n; i++) a[i] = ni(); return a; } long[] nla(int n) throws IOException { long a[] = new long[n]; for (int i = 0; i < n; i++) a[i] = nl(); return a; } double[] nda(int n) throws IOException { double a[] = new double[n]; for (int i = 0; i < n; i++) a[i] = nd(); return a; } int[][] imat(int n, int m) throws IOException { int mat[][] = new int[n][m]; for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) mat[i][j] = ni(); } return mat; } } static long mod = Long.MAX_VALUE; public static void main(String[] args) throws java.lang.Exception { int i, j; HashMap<Integer, Integer> hm = new HashMap<Integer, Integer>(); ArrayList<Integer> arr = new ArrayList<Integer>(); HashSet<Integer> set = new HashSet<Integer>(); PriorityQueue<Integer> pq = new PriorityQueue<Integer>(); long n = in.nl(); long v = in.nl(); long temp = n - 1; long ans = 0; ans += Math.min(v, temp); temp -= v; if (temp > 0) ans += ((temp + 1) * (temp + 2)) / (long) 2 - 1; out.println(ans); out.close(); } static long gcd(long a, long b) { if (b == 0) return a; return gcd(b, a % b); } static long exponent(long a, long n) { long ans = 1; while (n != 0) { if (n % 2 == 1) ans = (ans * a) % mod; a = (a * a) % mod; n = n >> 1; } return ans; } static int binarySearch(int a[], int item, int low, int high) { if (high <= low) return (item > a[low]) ? (low + 1) : low; int mid = (low + high) / 2; if (item == a[mid]) return mid + 1; if (item > a[mid]) return binarySearch(a, item, mid + 1, high); return binarySearch(a, item, low, mid - 1); } static void merge(int arr[], int l, int m, int r) { int n1 = m - l + 1; int n2 = r - m; int L[] = new int[n1]; int R[] = new int[n2]; for (int i = 0; i < n1; ++i) L[i] = arr[l + i]; for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j]; int i = 0, j = 0; int k = l; while (i < n1 && j < n2) { if (L[i] <= R[j]) { arr[k] = L[i]; i++; } else { arr[k] = R[j]; j++; } k++; } while (i < n1) { arr[k] = L[i]; i++; k++; } while (j < n2) { arr[k] = R[j]; j++; k++; } } static void Sort(int arr[], int l, int r) { if (l < r) { int m = (l + r) / 2; Sort(arr, l, m); Sort(arr, m + 1, r); merge(arr, l, m, r); } } static void sort(int a[]) { Sort(a, 0, a.length - 1); } }",55
"public class SashaAndHisTrip {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		int v = nextInt();
		
		if (v >= n-1)
			System.out.println(n-1);
		else
			System.out.println((n-v)*(n-v+1)/2+v-1);
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class SashaAndHisTrip {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintStream out = System.out;
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		int v = nextInt();
		
		if (v >= n-1)
			out.println(n-1);
		else
			out.println((n-v)*(n-v+1)/2+v-1);
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}",56
"public
class
DLL { 

Node head; 





class
Node { 

int
data; 

Node prev; 

Node next; 








Node(
int
d) { data = d; } 

} 




public
void
push(
int
new_data) 

{ 





Node new_Node = 
new
Node(new_data); 






new_Node.next = head; 

new_Node.prev = 
null
; 




if
(head != 
null
) 

head.prev = new_Node; 




head = new_Node; 

} 






public
void
printlist(Node node) 

{ 

Node last = 
null
; 


while
(node != 
null
) { 

System.out.print(node.data + 
"" ""
); 

last = node; 

node = node.next; 

} 


System.out.println(); 

} 








void
deleteNode(Node head_ref, Node del) 

{ 




if
(head == 
null
|| del == 
null
) { 

return
; 

} 




if
(head == del) { 

head = del.next; 

} 






if
(del.next != 
null
) { 

del.next.prev = del.prev; 

} 






if
(del.prev != 
null
) { 

del.prev.next = del.next; 

} 




return
; 

} 




public
static
void
main(String[] args) 

{ 



DLL dll = 
new
DLL(); 




dll.push(
2
); 




dll.push(
4
); 




dll.push(
8
); 




dll.push(
10
); 


System.out.print(
""Created DLL is: ""
); 

dll.printlist(dll.head); 




dll.deleteNode(dll.head, dll.head); 






System.out.print(
""\nList after deleting first node: ""
); 

dll.printlist(dll.head); 




dll.deleteNode(dll.head, dll.head.next); 


System.out.print(
""\nList after Deleting middle node: ""
); 

dll.printlist(dll.head); 

} 
}","public class DLL { Node head; static class Node { int data; Node prev; Node next; Node( int d) { data = d; } } public void push( int new_data) { Node new_Node = new Node(new_data); new_Node.next = head; new_Node.prev = null ; if (head != null) head.prev = new_Node; head = new_Node; } public void printlist(Node node) { Node last = null ; while (node != null) { System.out.print(node.data + "" ""); last = node; node = node.next; } System.out.println(); } void deleteNode(Node head_ref, Node del) { if (head == null || del == null) { return; } if (head == del) { head = del.next; } if (del.next != null) { del.next.prev = del.prev; } if (del.prev != null) { del.prev.next = del.next; } return; } public static void main(String[] args) { DLL dll = new DLL(); dll.push( 2 ); dll.push( 4 ); dll.push( 8 ); dll.push( 10 ); System.out.print( ""Created DLL is: ""); dll.printlist(dll.head); dll.deleteNode(dll.head, dll.head); System.out.print( ""\nList after deleting first node: ""); dll.printlist(dll.head); dll.deleteNode(dll.head, dll.head.next); System.out.print( ""\nList after Deleting middle node: ""); dll.printlist(dll.head); } }",57
"class
GfG { 

static
class
StackWithMax 
{ 



static
Stack<Integer> mainStack = 
new
Stack<Integer> (); 




static
Stack<Integer> trackStack = 
new
Stack<Integer> (); 

static
void
push(
int
x) 

{ 

mainStack.push(x); 

if
(mainStack.size() == 
1
) 

{ 

trackStack.push(x); 

return
; 

} 












if
(x > trackStack.peek()) 

trackStack.push(x); 

else

trackStack.push(trackStack.peek()); 

} 


static
int
getMax() 

{ 

return
trackStack.peek(); 

} 


static
void
pop() 

{ 

mainStack.pop(); 

trackStack.pop(); 

} 
}; 


public
static
void
main(String[] args) 
{ 

StackWithMax s = 
new
StackWithMax(); 

s.push(
20
); 

System.out.println(s.getMax()); 

s.push(
10
); 

System.out.println(s.getMax()); 

s.push(
50
); 

System.out.println(s.getMax()); 
} 
}",class GfG { static class StackWithMax { static Stack<Integer> mainStack = new Stack<Integer>(); static Stack<Integer> trackStack = new Stack<Integer>(); static void push(int x) { mainStack.push(x); if (mainStack.size() == 1) { trackStack.push(x); return; } if (x > trackStack.peek()) trackStack.push(x); else trackStack.push(trackStack.peek()); } static int getMax() { return trackStack.peek(); } static void pop() { mainStack.pop(); trackStack.pop(); } } public static void main(String[] args) { StackWithMax s = new StackWithMax(); s.push(20); System.out.println(s.getMax()); s.push(10); System.out.println(s.getMax()); s.push(50); System.out.println(s.getMax()); } },58
"class
GFG 
{ 





static
int
count(
int
n) 

{ 



if
(n < 
4
) 

return
-
1
; 






int
rem = n % 
4
; 






if
(rem == 
0
) 

return
n / 
4
; 




if
(rem == 
1
) { 










if
(n < 
9
) 

return
-
1
; 










return
(n - 
9
) / 
4
+ 
1
; 

} 









if
(rem == 
2
) 

return
(n - 
6
) / 
4
+ 
1
; 







if
(rem == 
3
) 

{ 

if
(n < 
15
) 

return
-
1
; 












return
(n - 
15
) / 
4
+ 
2
; 

} 

return
0
; 

} 




public
static
void
main (String[] args) 

{ 

int
n = 
90
; 

System.out.println(count(n)); 


n = 
143
; 

System.out.println(count(n)); 

} 
}",class GFG { static int count(int n) { if (n < 4) return -1; int rem = n % 4; if (rem == 0) return n / 4; if (rem == 1) { if (n < 9) return -1; return (n - 9) / 4 + 1; } if (rem == 2) return (n - 6) / 4 + 1; if (rem == 3) { if (n < 15) return -1; return (n - 15) / 4 + 2; } return 0; } public static void main(String[] args) { int n = 90; System.out.println(count(n)); n = 143; System.out.println(count(n)); } },59
"public class Main {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        long n = sc.nextLong();
        long s = sc.nextLong();

        long ans = (s - 1) / n + 1;
        System.out.print(ans);
    }
}","public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        long n = sc.nextLong();
        long s = sc.nextLong();

        long ans = (s - 1) / n + 1;
        System.out.println(ans);
    }
}",60
"public class OrangeJuice{
	public static void main(String[] args) {
		Scanner in=new Scanner(System.in);
		int n=in.nextInt();
		int s=in.nextInt();
		if(n>=1&&n<=100000&&s>=1&&s<=1000000000){
			if(s%n==0){
				System.out.println(s/n);
			}else{
				int o=s%n;
				System.out.println((s-o)/n+1);
			}
		}
	}
}","public class OrangeJuice{
	public static void main(String[] args) {
		Scanner in=new Scanner(System.in);
		int n=in.nextInt();
		int s=in.nextInt();
		if(n>=1&&n<=100000&&s>=1&&s<=1000000000){
			if(s%n==0){
				System.out.println(s/n);
			}else{
				int o=s%n;
				System.out.println((s-o)/n+1);
			}
		}
	}
}",61
"public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(), s = sc.nextInt();
        int coins;
        if(s%n != 0)
            coins = s/n + 1;
        else
            coins = s/n;

        System.out.println(coins);

    }
}","public class Result {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt(), s = sc.nextInt();
        int coins;
        coins = (s % n != 0) ? (s / n + 1) : (s / n);
        System.out.println(coins);

    }
}",62
"public class Param
{
                
      public static  void main( String[]args) 
    {
       MyScanner param = new MyScanner();
      out = new PrintWriter(new BufferedOutputStream(System.out));
       long l2 =param.nextLong();
       long dice1=param.nextLong();
       long dice2=param.nextLong();
      
       long l1=1;
       long r1=1;
       long r2=l2;
       long count=0;
       long check=0;
       count=l2-dice1;
       count=count+(r2-dice2);
       check=dice1-l1;
       check=check+(dice2-r1);
       if(check<=count){
          System.out.println(""White"");
       }
       else{
          System.out.println(""Black"");
       }
      out.close();
}
public static PrintWriter out;
      
   
   public static class MyScanner {
      BufferedReader br;
      StringTokenizer st;
 
      public MyScanner() {
         br = new BufferedReader(new InputStreamReader(System.in));
      }
 
      String next() {
          while (st == null || !st.hasMoreElements()) {
              try {
                  st = new StringTokenizer(br.readLine());
              } catch (IOException e) {
                  e.printStackTrace();
              }
          }
          return st.nextToken();
      }
 
      int nextInt() {
          return Integer.parseInt(next());
      }
 
      long nextLong() {
          return Long.parseLong(next());
      }
 
      double nextDouble() {
          return Double.parseDouble(next());
      }
 
      String nextLine(){
          String str = """";
	  try {
	     str = br.readLine();
	  } catch (IOException e) {
	     e.printStackTrace();
	  }
	  return str;
      }
}
}","public class Param {
    public static void main(String[] args) {
        MyScanner param = new MyScanner();
        out = new PrintWriter(new BufferedOutputStream(System.out));
        long l2 = param.nextLong();
        long dice1 = param.nextLong();
        long dice2 = param.nextLong();

        long l1 = 1;
        long r1 = 1;
        long r2 = l2;
        long count = 0;
        long check = 0;
        count = l2 - dice1;
        count = count + (r2 - dice2);
        check = dice1 - l1;
        check = check + (dice2 - r1);
        if (check <= count) {
            System.out.println(""White"");
        } else {
            System.out.println(""Black"");
        }
        out.close();
    }

    public static PrintWriter out;

    public static class MyScanner {
        BufferedReader br;
        StringTokenizer st;

        public MyScanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }
}",63
"public class Dont {
    static BufferedReader jin = new BufferedReader( new InputStreamReader( System.in ) );
    static long n;
    static long x, y;

    public static void main(String[] args) throws Exception {
        n = nextLong();
        x = nextLong();
        y = nextLong();
        System.out.println( (max(n-x, n-y) < max(x-1, y-1))? ""Black"" : ""White"" );
    }

    static long max(long a, long b) {
        return (a > b)? a : b ;
    }

    static long nextLong() throws Exception {
        long res = 0;
        int ch = jin.read();
        while(ch < '0' || '9' < ch) ch = jin.read();
        while('0'<= ch && ch <= '9') {
            res = res*10 + ch - '0';
            ch = jin.read();
        }
        return res;
    }
}","public class Dont {
    static BufferedReader jin = new BufferedReader(new InputStreamReader(System.in));
    static long n;
    static long x, y;

    public static void main(String[] args) throws Exception {
        n = getNextLong();
        x = getNextLong();
        y = getNextLong();
        System.out.println((maximum(n - x, n - y) < maximum(x - 1, y - 1)) ? ""Black"" : ""White"");
    }

    static long maximum(long a, long b) {
        return (a > b) ? a : b;
    }

    static long getNextLong() throws Exception {
        long res = 0;
        int ch = jin.read();
        while (ch < '0' || '9' < ch) ch = jin.read();
        while ('0' <= ch && ch <= '9') {
            res = res * 10 + ch - '0';
            ch = jin.read();
        }
        return res;
    }
}",64
"class
GFG { 

public
static
int
N = 
1000
; 




static
int
prefixans[] = 
new
int
[
1000
]; 


public
static
void
countIndex(
int
a[], 
int
n) 
{ 






for
(
int
i = 
0
; i < n; i++) { 

if
(i + 
1
< n && a[i] == a[i + 
1
]) 

prefixans[i] = 
1
; 


if
(i != 
0
) 

prefixans[i] += prefixans[i - 
1
]; 

} 
} 



public
static
int
answer_query(
int
l, 
int
r) 
{ 

if
(l == 
0
) 

return
prefixans[r - 
1
]; 

else

return
prefixans[r - 
1
] - 

prefixans[l - 
1
]; 
} 


public
static
void
main(String args[]) 
{ 

int
a[] = {
1
, 
2
, 
2
, 
2
, 
3
, 
3
, 
4
, 
4
, 
4
}; 

int
n = 
9
; 




countIndex(a, n); 


int
L, R; 




L = 
1
; 

R = 
8
; 


System.out.println(answer_query(L, R)); 




L = 
0
; 

R = 
4
; 

System.out.println(answer_query(L, R)); 
} 
}","class GFG { public static int N = 1000; static int prefixans[] = new int[1000]; public static void countIndex(int a[], int n) { for (int i = 0; i < n; i++) { if (i + 1 < n && a[i] == a[i + 1]) prefixans[i] = 1; if (i != 0) prefixans[i] += prefixans[i - 1]; } } public static int answer_query(int l, int r) { if (l == 0) return prefixans[r - 1]; else return prefixans[r - 1] - prefixans[l - 1]; } public static void main(String args[]) { int a[] = {1, 2, 2, 2, 3, 3, 4, 4, 4}; int n = 9; countIndex(a, n); int L, R; L = 1; R = 8; System.out.println(answer_query(L, R)); L = 0; R = 4; System.out.println(answer_query(L, R)); } }",65
"public class Main {


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
         int hp = scanner.nextInt();
        if (hp%4 == 1){
            System.out.println(""0 A"");
        }
        else if (hp%4 == 2){
            System.out.println(""1 B"");
        }
        else if (hp%4 == 3){
            System.out.println(""2 A"");
        }
        else {
            System.out.println(""1 A"");
        }

    }
    }","public class Main {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int hp = scanner.nextInt();
        switch (hp % 4) {
            case 1:
                System.out.println(""0 A"");
                break;
            case 2:
                System.out.println(""1 B"");
                break;
            case 3:
                System.out.println(""2 A"");
                break;
            default:
                System.out.println(""1 A"");
        }
    }
}",66
"public class mainA {
    public static PrintWriter out = new PrintWriter(System.out);
    public static FastScanner enter = new FastScanner(System.in);

    public static void main(String[] args) throws IOException {
        int x=enter.nextInt();
        if(x%4==0){
            System.out.println(1 +"" A"");
        }
        else if(x%4==1){
            System.out.println(0+"" A"");
        }
        else if(x%4==2){
            System.out.println(1+"" B"");
        }
        else if(x%4==3){
            System.out.println(2+"" A"");
        }
    }

    static class FastScanner {
        BufferedReader br;
        StringTokenizer stok;

        FastScanner(InputStream is) {
            br = new BufferedReader(new InputStreamReader(is));
        }

        String next() throws IOException {
            while (stok == null || !stok.hasMoreTokens()) {
                String s = br.readLine();
                if (s == null) {
                    return null;
                }
                stok = new StringTokenizer(s);
            }
            return stok.nextToken();
        }

        int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }

        char nextChar() throws IOException {
            return (char) (br.read());
        }

        String nextLine() throws IOException {
            return br.readLine();
        }
    }
}","public class newMain {
    public static PrintWriter out = new PrintWriter(System.out);
    public static FastScanner enter = new FastScanner(System.in);

    public static void main(String[] args) throws IOException {
        int x = enter.nextInt();
        if (x % 4 == 0) {
            System.out.println(1 + "" A"");
        } else if (x % 4 == 1) {
            System.out.println(0 + "" A"");
        } else if (x % 4 == 2) {
            System.out.println(1 + "" B"");
        } else if (x % 4 == 3) {
            System.out.println(2 + "" A"");
        }
    }

    static class FastScanner {
        BufferedReader br;
        StringTokenizer stok;

        FastScanner(InputStream is) {
            br = new BufferedReader(new InputStreamReader(is));
        }

        String next() throws IOException {
            while (stok == null || !stok.hasMoreTokens()) {
                String s = br.readLine();
                if (s == null) {
                    return null;
                }
                stok = new StringTokenizer(s);
            }
            return stok.nextToken();
        }

        int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }

        char nextChar() throws IOException {
            return (char) (br.read());
        }

        String nextLine() throws IOException {
            return br.readLine();
        }
    }
}",67
"public class TokitsukazeAndEnhancement {
	
	static char check(int n) {
		if(n%4 == 0)
			return 'D';
		if(n%4 == 1)
			return 'A';
		if(n%4 == 2)
			return 'C';
		return 'B';
	}
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter pw = new PrintWriter(System.out);
		StringTokenizer st;
		int n = Integer.parseInt(br.readLine());
		int a = n + 1;
		int b = n + 2;
		char n1 = check(n);
		char a1 = check(a);
		char b1 = check(b);
		char sol = (char) Math.min(Math.min(a1, b1),n1);
		if(sol == n1)
			pw.println(0 + "" "" + sol);
		else if(sol == a1)
			pw.println(1 + "" "" + sol);
		else if(sol == b1)
			pw.println(2 + "" "" + sol);
		pw.close();
	}
}","public class TokitsukazeAndEnhancement {

    static char check(int n) {
        if (n % 4 == 0)
            return 'D';
        if (n % 4 == 1)
            return 'A';
        if (n % 4 == 2)
            return 'C';
        return 'B';
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(System.out);
        StringTokenizer st;
        int n = Integer.parseInt(br.readLine());
        int a = n + 1;
        int b = n + 2;
        char n1 = check(n);
        char a1 = check(a);
        char b1 = check(b);
        char sol = (char) Math.min(Math.min(a1, b1), n1);
        if (sol == n1)
            pw.println(0 + "" "" + sol);
        else if (sol == a1)
            pw.println(1 + "" "" + sol);
        else if (sol == b1)
            pw.println(2 + "" "" + sol);
        pw.close();
    }
}",68
"public class problem2 {
    static class tile implements Comparable<tile> {
        int number;
        int suit;

        public int compareTo(tile b){

            return number - b.number;
        }

    }
    public static void main(String[] args) {


        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        String[] parts = line.split("" "");

        tile[] tiles = new tile[3];
        for(int i = 0; i < 3; i++){

            tiles[i] = new tile();
            tiles[i].number = parts[i].charAt(0) - '0';
            if(parts[i].substring(1,2).equals(""s""))tiles[i].suit = 1;
            if(parts[i].substring(1,2).equals(""m""))tiles[i].suit = 2;
            if(parts[i].substring(1,2).equals(""p""))tiles[i].suit = 3;
            
        }
        Arrays.sort(tiles);

        int[][] tilesObtained = new int[10][4];
        int[][] stairCases = new int[10][4];
        int[][] stairCases2 = new int[10][4];
        for(int i = 0; i < 3; i++){
            int currNumber = tiles[i].number;
            int currSuit = tiles[i].suit;

            tilesObtained[currNumber][currSuit]++;
            stairCases[currNumber][currSuit] = 1 + stairCases[currNumber-1][currSuit];
            if(currNumber != 1){
                if(stairCases2[currNumber-2][currSuit] != 0){
                    stairCases2[currNumber][currSuit] = 2;
                }
                else{
                    stairCases2[currNumber][currSuit] = 1;
                }
            }
            else{
                stairCases2[currNumber][currSuit]++;
            }


        }
        int best = 3;

        for(int i = 1; i <= 9; i++){

            for(int j = 1; j <= 3; j++){

                best = Math.min(best, 3 - tilesObtained[i][j]);
                best = Math.min(best, 3 - stairCases[i][j]);
                best = Math.min(best, 3- stairCases2[i][j]);
                if(best <0)best = 0;
            }
        }
        System.out.println(best);


    }
}","public class Solution {
    static class Tile implements Comparable<Tile> {
        int number;
        int suit;

        public int compareTo(Tile b) {

            return number - b.number;
        }

    }
    public static void main(String[] args) {


        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        String[] parts = line.split("" "");

        Tile[] tiles = new Tile[3];
        for (int i = 0; i < 3; i++) {

            tiles[i] = new Tile();
            tiles[i].number = parts[i].charAt(0) - '0';
            if (parts[i].substring(1, 2).equals(""s"")) tiles[i].suit = 1;
            if (parts[i].substring(1, 2).equals(""m"")) tiles[i].suit = 2;
            if (parts[i].substring(1, 2).equals(""p"")) tiles[i].suit = 3;

        }
        Arrays.sort(tiles);

        int[][] tilesObtained = new int[10][4];
        int[][] stairCases = new int[10][4];
        int[][] stairCases2 = new int[10][4];
        for (int i = 0; i < 3; i++) {
            int currNumber = tiles[i].number;
            int currSuit = tiles[i].suit;

            tilesObtained[currNumber][currSuit]++;
            stairCases[currNumber][currSuit] = 1 + stairCases[currNumber - 1][currSuit];
            if (currNumber != 1) {
                if (stairCases2[currNumber - 2][currSuit] != 0) {
                    stairCases2[currNumber][currSuit] = 2;
                } else {
                    stairCases2[currNumber][currSuit] = 1;
                }
            } else {
                stairCases2[currNumber][currSuit]++;
            }


        }
        int best = 3;

        for (int i = 1; i <= 9; i++) {

            for (int j = 1; j <= 3; j++) {

                best = Math.min(best, 3 - tilesObtained[i][j]);
                best = Math.min(best, 3 - stairCases[i][j]);
                best = Math.min(best, 3 - stairCases2[i][j]);
                if (best < 0) best = 0;
            }
        }
        System.out.println(best);


    }
}",69
"public class Main {
	static Scanner sc = new Scanner(System.in);
	
	public static char returnLetter(int n)
	{
		if(n%4==1)
		{
			return 'A';
		}
		else if(n%4==3)
		{
			return 'B';
		}
		else if(n%4==2)
		{
			return 'C';
		}
		else
		{
			return 'D';
		}
	}
	
	
	public static void main(String[] args) throws IOException {
		String[] a= new String[3];
		
		for (int i = 0; i < a.length; i++) {
			a[i]=sc.next();
		}
		boolean equal=true;
		
		for (int i = 1; i < a.length; i++) {
			if(a[i].charAt(1)!=a[i-1].charAt(1) || a[i].charAt(0)!=a[i-1].charAt(0))
			{
				equal=false;break;
			}
		}
		if(equal)
		{
			System.out.println(0);
		}
		else
		{
			Arrays.sort(a);
			boolean ord=true;
			
			for (int i = 1; i < a.length; i++) {
				if(a[i].charAt(1)!=a[i-1].charAt(1) || a[i].charAt(0)-a[i-1].charAt(0)!=1)
				{
					ord=false;break;
				}
			}
			if(ord)
			{
				System.out.println(0);
			}
			else
			{
				if(a[1].charAt(1)==a[0].charAt(1) && a[1].charAt(0)-a[0].charAt(0)==2)
				{
					System.out.println(1);
				}
				else if(a[2].charAt(1)==a[1].charAt(1) && a[2].charAt(0)-a[1].charAt(0)==2)
				{
					System.out.println(1);

				}
				else if(a[2].charAt(1)==a[0].charAt(1) && a[2].charAt(0)-a[0].charAt(0)==2)
				{
					System.out.println(1);

				}
				else if(a[0].charAt(1)==a[1].charAt(1) && a[0].charAt(0)-a[1].charAt(0)==2)
				{
					System.out.println(1);

				}
				else if(a[1].charAt(1)==a[2].charAt(1) && a[1].charAt(0)-a[2].charAt(0)==2)
				{
					System.out.println(1);

				}
				else if(a[0].charAt(1)==a[2].charAt(1) && a[0].charAt(0)-a[2].charAt(0)==2)
				{
					System.out.println(1);

				}
				else if(a[1].charAt(1)==a[0].charAt(1) && a[1].charAt(0)-a[0].charAt(0)==1)
				{
					System.out.println(1);

				}
				else if(a[2].charAt(1)==a[1].charAt(1) && a[2].charAt(0)-a[1].charAt(0)==1)
				{
					System.out.println(1);
				}
				else if(a[2].charAt(1)==a[0].charAt(1) && a[2].charAt(0)-a[0].charAt(0)==1)
				{
					System.out.println(1);
				}
				else if(a[0].charAt(1)==a[1].charAt(1) && a[0].charAt(0)-a[1].charAt(0)==1)
				{
					System.out.println(1);

				}
				else if(a[1].charAt(1)==a[2].charAt(1) && a[1].charAt(0)-a[2].charAt(0)==1)
				{
					System.out.println(1);

				}
				else if(a[0].charAt(1)==a[2].charAt(1) && a[0].charAt(0)-a[2].charAt(0)==1)
				{
					System.out.println(1);

				}
				else if(a[1].charAt(1)==a[0].charAt(1) && a[1].charAt(0)==a[0].charAt(0))
				{
					System.out.println(1);

				}
				else if(a[2].charAt(1)==a[1].charAt(1) && a[1].charAt(0)==a[2].charAt(0))
				{
					System.out.println(1);

				}
				else
				{
					System.out.println(2);
				}
				
			}
		}
	}
	static class Scanner {
		StringTokenizer st;
		BufferedReader br;
 
		public Scanner(InputStream s) {
			br = new BufferedReader(new InputStreamReader(s));
		}
 
		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}
 
		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}
 
		public long nextLong() throws IOException {
			return Long.parseLong(next());
		}
 
		public String nextLine() throws IOException {
			return br.readLine();
		}
 
		public double nextDouble() throws IOException {
			String x = next();
			StringBuilder sb = new StringBuilder(""0"");
			double res = 0, f = 1;
			int start = 0;
			boolean dec = false, neg = false;
			if (x.charAt(0) == '-') {
				neg = true;
				start++;
			}
			for (int i = start; i < x.length(); i++)
				if (x.charAt(i) == '.') {
					res = Long.parseLong(sb.toString());
					sb = new StringBuilder(""0"");
					dec = true;
				} else {
					sb.append(x.charAt(i));
					if (dec)
						f *= 10;
				}
			res += Long.parseLong(sb.toString()) / f;
			return res * (neg ? -1 : 1);
		}
 
		public boolean ready() throws IOException {
			return br.ready();
		}
 
	}
}",ERROR,70
"public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        OutputWriter out = new OutputWriter(outputStream);
        KingEscape solver = new KingEscape();
        solver.solve(1, in, out);
        out.close();
    }

    static class KingEscape {
        public void solve(int testNumber, InputReader in, OutputWriter out) {
            int n = in.nextInt();
            int qx = in.nextInt();
            int qy = in.nextInt();
            int kx = in.nextInt();
            int ky = in.nextInt();
            int safex = in.nextInt();
            int safey = in.nextInt();
            boolean possible = false;
            if (qx > Math.max(kx, safex) || qx < Math.min(kx, safex)) {
                if (qy > Math.max(ky, safey) || qy < Math.min(ky, safey)) {
                    possible = true;
                }
            }
            if (possible) out.println(""YES"");
            else out.println(""NO"");
        }

    }

    static class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void print(Object... objects) {
            for (int i = 0; i < objects.length; i++) {
                if (i != 0) {
                    writer.print(' ');
                }
                writer.print(objects[i]);
            }
        }

        public void println(Object... objects) {
            print(objects);
            writer.println();
        }

        public void close() {
            writer.close();
        }

    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private InputReader.SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public int nextInt() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }

        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);

        }

    }
}","static class Main { static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; InputReader in = new InputReader(inputStream); OutputWriter out = new OutputWriter(outputStream); KingEscape solver = new KingEscape(); solver.solve(1, in, out); out.close(); } static class KingEscape { void solve(int testNumber, InputReader in, OutputWriter out) { int n = in.nextInt(); int qx = in.nextInt(); int qy = in.nextInt(); int kx = in.nextInt(); int ky = in.nextInt(); int safex = in.nextInt(); int safey = in.nextInt(); boolean possible = false; if (qx > Math.max(kx, safex) || qx < Math.min(kx, safex)) { if (qy > Math.max(ky, safey) || qy < Math.min(ky, safey)) { possible = true; } } if (possible) out.println(""YES""); else out.println(""NO""); } } static class OutputWriter { private final PrintWriter writer; OutputWriter(OutputStream outputStream) { writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream))); } OutputWriter(Writer writer) { this.writer = new PrintWriter(writer); } void print(Object... objects) { for (int i = 0; i < objects.length; i++) { if (i != 0) { writer.print(' '); } writer.print(objects[i]); } } void println(Object... objects) { print(objects); writer.println(); } void close() { writer.close(); } } static class InputReader { private InputStream stream; private byte[] buf = new byte[1024]; private int curChar; private int numChars; private InputReader.SpaceCharFilter filter; InputReader(InputStream stream) { this.stream = stream; } int read() { if (numChars == -1) { throw new InputMismatchException(); } if (curChar >= numChars) { curChar = 0; try { numChars = stream.read(buf); } catch (IOException e) { throw new InputMismatchException(); } if (numChars <= 0) { return -1; } } return buf[curChar++]; } int nextInt() { int c = read(); while (isSpaceChar(c)) { c = read(); } int sgn = 1; if (c == '-') { sgn = -1; c = read(); } int res = 0; do { if (c < '0' || c > '9') { throw new InputMismatchException(); } res *= 10; res += c - '0'; c = read(); } while (!isSpaceChar(c)); return res * sgn; } boolean isSpaceChar(int c) { if (filter != null) { return filter.isSpaceChar(c); } return isWhitespace(c); } static boolean isWhitespace(int c) { return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1; } } }",71
"public class helloWorld 
{
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		long n = in.nextLong();
		long m = in.nextLong();
		
		long ans = m / n;
		
		if(m % n > 0)
			ans++;
		
		System.out.println(ans);
		
		in.close();
	}
}","public class helloWorld {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		long n = in.nextLong();
		long m = in.nextLong();
		long ans = m / n + (m % n > 0 ? 1 : 0);
		System.out.println(ans);
		in.close();
	}
}",72
"public class main {
    public static void main(String[] args) throws IOException {
        init();
        int x = nextInt();
        int y = nextInt();
        int z = nextInt();
        int t1 = nextInt();
        int t2 = nextInt();
        int t3 = nextInt();
        int lift = Math.abs(z - x) * t2 + 2 * t3 + Math.abs(x - y) * t2 + t3;
        int stair = Math.abs(x - y) * t1;
        if (lift <= stair) {
            pw.print(""YES"");
        } else {
            pw.print(""NO"");
        }
        pw.close();
    }

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    static String next() throws IOException {
        while (st == null || !st.hasMoreElements()) {
            st = new StringTokenizer(sc.readLine());
        }
        return st.nextToken();
    }

    static int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    static long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    static void init(String in, String out) throws IOException {
        sc = new BufferedReader(new FileReader(in));
        pw = new PrintWriter(out);
    }

    static void init() {
        sc = new BufferedReader(new InputStreamReader(System.in));
        pw = new PrintWriter(System.out);
    }
}

class DSU {
    int parent[];
    public DSU(int n){
        parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    int get(int i){
        if (i == parent[i]){
            return i;
        }
        int p = get(parent[i]);
        parent[i] = p;
        return p;
    }

    boolean union(int a, int b){
        a = get(a);
        b = get(b);
        if (a == b) return false;
        parent[a] = b;
        return true;
    }
}","public class Solution {
    public static void main(String[] args) throws IOException {
        setup();
        int x = readInt();
        int y = readInt();
        int z = readInt();
        int t1 = readInt();
        int t2 = readInt();
        int t3 = readInt();
        int lift = Math.abs(z - x) * t2 + 2 * t3 + Math.abs(x - y) * t2 + t3;
        int stair = Math.abs(x - y) * t1;
        if (lift <= stair) {
            printOutput(""YES"");
        } else {
            printOutput(""NO"");
        }
        closeOutput();
    }

    static StringTokenizer st;
    static BufferedReader sc;
    static PrintWriter pw;

    static String read() throws IOException {
        while (st == null || !st.hasMoreElements()) {
            st = new StringTokenizer(sc.readLine());
        }
        return st.nextToken();
    }

    static int readInt() throws IOException {
        return Integer.parseInt(read());
    }

    static long readLong() throws IOException {
        return Long.parseLong(read());
    }

    static void setup(String in, String out) throws IOException {
        sc = new BufferedReader(new FileReader(in));
        pw = new PrintWriter(out);
    }

    static void setup() {
        sc = new BufferedReader(new InputStreamReader(System.in));
        pw = new PrintWriter(System.out);
    }
}

class DSU {
    int parent[];
    public DSU(int n){
        parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    int find(int i){
        if (i == parent[i]){
            return i;
        }
        int p = find(parent[i]);
        parent[i] = p;
        return p;
    }

    boolean merge(int a, int b){
        a = find(a);
        b = find(b);
        if (a == b) return false;
        parent[a] = b;
        return true;
    }
}",73
"public class Main {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        long n = sc.nextLong();
        long s = sc.nextLong();

        long ans = (s - 1) / n + 1;
        System.out.print(ans);
    }
}","public class Main { 
    public static void main(String args[]) { 
        Scanner sc = new Scanner(System.in); 

        long n = sc.nextLong(); 
        long s = sc.nextLong(); 

        long ans = (s - 1) / n + 1; 
        System.out.print(ans); 
    } 
}",74
"public class origami {
	public static void main(String args[]){
		Scanner input = new Scanner(System.in);
		double n = input.nextInt();
		double k = input.nextInt();
		double red = 0;
		double green = 0;
		double blue = 0;
		double ans = 0;
		red = (2 * n) / k;
		green = (5 * n) / k;
		blue = (8 * n) / k;

		double red1 = Math.ceil(red) ;
		double green1 = Math.ceil(green);
		double blue1 = Math.ceil(blue);

		ans+=red1;
		ans+=green1;
		ans+=blue1;
		Double answer = new Double(ans);
		int finished = answer.intValue();
		System.out.println(finished);
	}
}","public class PaperFolding {
	public static void main(String args[]) {
		Scanner scanner = new Scanner(System.in);
		double n = scanner.nextInt();
		double k = scanner.nextInt();
		double red = 0;
		double green = 0;
		double blue = 0;
		double ans = 0;
		red = (2.0 * n) / k;
		green = (5.0 * n) / k;
		blue = (8.0 * n) / k;

		double red1 = Math.ceil(red);
		double green1 = Math.ceil(green);
		double blue1 = Math.ceil(blue);

		ans += red1;
		ans += green1;
		ans += blue1;
		Double answer = Double.valueOf(ans);
		int finished = answer.intValue();
		System.out.println(finished);
	}
}",75
"public class VJudgeProblem2{
    public static void main(String[] args) throws IOException{

        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        int x = Integer.parseInt(reader.readLine());

        if (x == 1)
            System.out.println(-1);
        else
            System.out.println(x + "" "" + x);    
    }
        
}","public class VJudgeProblem2 {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        int x = Integer.parseInt(reader.readLine());
        if (x == 1) {
            System.out.println(-1);
        } else {
            System.out.println(x + "" "" + x);
        }
    }
}",76
"public class Main{
    public static void main(String [] args)
    {
        Scanner scan=new Scanner(System.in);
        int q=scan.nextInt();
        int i;
        for(i=1;i<=q;i++)
        {
            int a=scan.nextInt();
            int ans=a/7+1;
            System.out.println(ans);
        }
    }
}","public class Main{
    public static void main(String [] args)
    {
        Scanner scan=new Scanner(System.in);
        int q=scan.nextInt();
        int i = 1;
        while(i<=q)
        {
            int a=scan.nextInt();
            int ans=a/7+1;
            System.out.println(ans);
            i++;
        }
    }
}",77
"public class Main {
    static Scanner scan = new Scanner(System.in);

    public static void main(String [] args){
        int num = scan.nextInt();
        for(int i=0;i<num;i++){
            int a = scan.nextInt();
            int b = scan.nextInt();
            System.out.println(a+"" ""+2*a);
        }
    }
}","public class Main {
    static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {
        int num = scan.nextInt();
        int i = 0;
        while (i < num) {
            int a = scan.nextInt();
            int b = scan.nextInt();
            System.out.println(a + "" "" + 2 * a);
            i++;
        }
    }
}",78
"public class Main{
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int a = in.nextInt();

		if(a>=1 && a<=100){
			if(a>2){
				if(a%2==0){
					System.out.println(""YES"");
				}else{
					System.out.println(""NO"");
				}
			}else{
				System.out.println(""NO"");
			}
		}
		
		

	}
}","public class Main{
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);

		int a = in.nextInt();

		if(a >= 0 && a <= 100){
			if(a % 2 == 0 && a > 2){
				System.out.println(""YES"");
			}else{
				System.out.println(""NO"");
			}
		}else{
			System.out.println(""NO"");
		}
	}
}",79
"public class b {

	public static void main(String[] args) throws IOException, InterruptedException {
		Scanner zizo = new Scanner(System.in);
		PrintWriter wr = new PrintWriter(System.out);
		
		int n1 = 0,n2 = 0,n3 = 0,n4 = 0;
		int n = 3;
		while(n --> 0) {
			int x = zizo.nextInt();
			switch(x) {
			case 1:n1++;break;
			case 4:n4++;break;
			case 2:n2++;break;
			case 3:n3++;break;
			}
		}
		n2 += n4/2;
		if(n1>0 || n2>1 || n3>2)
			System.out.println(""YES"");
		else System.out.println(""NO"");
		wr.close();
	}
}
class pair{
	int l,r;
	pair(int a,int b){l = a;r = b;}
}

class Scanner 
{
	StringTokenizer st;
	BufferedReader br;

	public Scanner(InputStream s){	br = new BufferedReader(new InputStreamReader(s));}

	public String next() throws IOException 
	{
		while (st == null || !st.hasMoreTokens()) 
			st = new StringTokenizer(br.readLine());
		return st.nextToken();
	}

	public int nextInt() throws IOException {return Integer.parseInt(next());}

	public long nextLong() throws IOException {return Long.parseLong(next());}

	public String nextLine() throws IOException {return br.readLine();}

	public double nextDouble() throws IOException
	{
		String x = next();
		StringBuilder sb = new StringBuilder(""0"");
		double res = 0, f = 1;
		boolean dec = false, neg = false;
		int start = 0;
		if(x.charAt(0) == '-')
		{
			neg = true;
			start++;
		}
		for(int i = start; i < x.length(); i++)
			if(x.charAt(i) == '.')
			{
				res = Long.parseLong(sb.toString());
				sb = new StringBuilder(""0"");
				dec = true;
			}
			else
			{
				sb.append(x.charAt(i));
				if(dec)
					f *= 10;
			}
		res += Long.parseLong(sb.toString()) / f;
		return res * (neg?-1:1);
	}

	public boolean ready() throws IOException {return br.ready();}
}",ERROR,80
"public class TrickyAlchemy {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		long a = nextLong();
		long b = nextLong();
		long x = nextLong();
		long y = nextLong();
		long z = nextLong();
		System.out.println(Math.max(2*x+y-a, 0) + Math.max(y+3*z-b, 0));
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class TrickyAlchemy {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		long a = nextLong();
		long b = nextLong();
		long x = nextLong();
		long y = nextLong();
		long z = nextLong();
		long result1 = Math.max(2 * x + y - a, 0);
		long result2 = Math.max(y + 3 * z - b, 0);
		System.out.println(result1 + result2);
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}",81
"public class Main{
    public static void main(String [] args)
    {
        Scanner scan=new Scanner(System.in);
        long n=scan.nextLong();
        long m=scan.nextLong();
        n=(long)Math.pow(2,n);
        long ans=m%n;
        System.out.println(ans);
    }
}","public class Main{
    public static void main(String [] args)
    {
        long n=scan.nextLong();
        long m=scan.nextLong();
        n=(long)Math.pow(2,n);
        long ans=m%n;
        System.out.println(ans);
    }
}",82
"public class tab
{
public static void main(String[] args)
{
int n,pos,l,r;
Scanner sc=new Scanner(System.in);
n=sc.nextInt();
pos=sc.nextInt();
l=sc.nextInt();
r=sc.nextInt();
int sum;
int a=(n-r)+(l-1);
if((Math.abs(pos-l)<Math.abs(r-pos))&&a!=0)
{
 if(l!=1)
   {sum=Math.abs(pos-l);
    sum++;
    if(r!=n)
      sum+=(r-l)+1;
   }
 else
   sum=Math.abs(r-pos)+1;
}
else if(a==0)
  sum=0; 
else
{
  if(r!=n)
  {  sum=Math.abs(r-pos);
     sum++;
     if(l!=1) 
     sum+=(r-l)+1;
  }
  else
   sum=Math.abs(pos-l)+1;
}
System.out.println(sum);
}}","public class Tab {
    public static void main(String[] args) {
        int n, pos, l, r;
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();
        pos = sc.nextInt();
        l = sc.nextInt();
        r = sc.nextInt();
        int sum;
        int a = (n - r) + (l - 1);
        if ((Math.abs(pos - l) < Math.abs(r - pos)) && a != 0) {
            if (l != 1) {
                sum = Math.abs(pos - l);
                sum++;
                if (r != n) {
                    sum += (r - l) + 1;
                }
            } else {
                sum = Math.abs(r - pos) + 1;
            }
        } else if (a == 0) {
            sum = 0;
        } else {
            if (r != n) {
                sum = Math.abs(r - pos);
                sum++;
                if (l != 1) {
                    sum += (r - l) + 1;
                }
            } else {
                sum = Math.abs(pos - l) + 1;
            }
        }
        System.out.println(sum);
    }
}",83
"public class Main {

	public static void main(String[] args) {
		Scanner kai = new Scanner(System.in);
		while (kai.hasNext()) {
			int a = kai.nextInt();
			if ((a & 1) == 0) {
				System.out.println(""Mahmoud"");
			}else {
				System.out.println(""Ehab"");
			}
		}
	}
}","public class Main {

	public static void main(String[] args) {
		Scanner kai = new Scanner(System.in);
		while (kai.hasNextInt()) {
			int a = kai.nextInt();
			if ((a & 1) == 0) {
				System.out.println(""Mahmoud"");
			} else {
				System.out.println(""Ehab"");
			}
		}
	}
}",84
"public class PizzaPizzaPizza {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		long n = nextLong();
		if (n == 0)
			System.out.println(0);
		else if (n % 2 == 0)
			System.out.println(n+1);
		else
			System.out.println((n+1)/2);
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class PizzaPizzaPizza {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		long n = nextLong();
		if (n == 0)
			System.out.println(0);
		else if (n % 2 == 0)
			System.out.println(n + 1);
		else
			System.out.println((n + 1) / 2);
	}

	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}",85
"public class helloWorld 
{
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		int a = in.nextInt();
		int b = in.nextInt();
		int c = in.nextInt();
		int n = in.nextInt();

		int ans = n - (a + b - c);
		if(ans < 1 || a >= n || b >= n || c > a || c > b)
			ans = -1;
		
		System.out.println(ans);
		
		in.close();
	}
}","public class helloWorld {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int a = in.nextInt();
		int b = in.nextInt();
		int c = in.nextInt();
		int n = in.nextInt();

		int ans = n - (a + b - c);
		if(ans < 1 || a >= n || b >= n || c > a || c > b) ans = -1;
		System.out.println(ans);
		in.close();
	}
}",86
"public class AlexAndARhombus {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		System.out.println(n*n+(n-1)*(n-1));
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class AlexAndARhombus {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StreamTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		System.out.println((long) n * n + (n - 1) * (n - 1));
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || st.nextToken() == StreamTokenizer.TT_EOF)
			st = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
		return st.sval;
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}",87
"public class simple implements Runnable {


    public void run()
    {

        InputReader input = new InputReader(System.in);
        PrintWriter w = new PrintWriter(System.out);
        int n = input.nextInt();

            System.out.println((2*n*n)-(2*n)+1);
    }



    class Graph{
        private final int v;
        private List<List<Integer>> adj;
        Graph(int v){
            this.v = v;
            adj = new ArrayList<>(v);
            for(int i=0;i<v;i++){
                adj.add(new LinkedList<>());
            }
        }
        private void addEdge(int a,int b){
            adj.get(a).add(b);
        }
        private boolean isCyclic()
        {
            boolean[] visited = new boolean[v];
            boolean[] recStack = new boolean[v];
            for (int i = 0; i < v; i++)
                if (isCyclicUtil(i, visited, recStack))
                    return true;

            return false;
        }
        private boolean isCyclicUtil(int i, boolean[] visited, boolean[] recStack)
        {
            if (recStack[i])
                return true;
            if (visited[i])
                return false;
            visited[i] = true;
            recStack[i] = true;
            List<Integer> children = adj.get(i);
            for (Integer c: children)
                if (isCyclicUtil(c, visited, recStack))
                    return true;
            recStack[i] = false;
            return false;
        }
    }
    public static void sortbyColumn(int arr[][], int col)
    {

        Arrays.sort(arr, new Comparator<int[]>()
        {
            public int compare(int[] o1, int[] o2){
                return(Integer.valueOf(o1[col]).compareTo(o2[col]));
            }
        });

    }
    static long gcd(long a, long b)
    {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }
    public static class DJSet {
        public int[] upper;

        public DJSet(int n) {
            upper = new int[n];
            Arrays.fill(upper, -1);
        }

        public int root(int x) {
            return upper[x] < 0 ? x : (upper[x] = root(upper[x]));
        }

        public boolean equiv(int x, int y) {
            return root(x) == root(y);
        }

        public boolean union(int x, int y) {
            x = root(x);
            y = root(y);
            if (x != y) {
                if (upper[y] < upper[x]) {
                    int d = x;
                    x = y;
                    y = d;
                }
                upper[x] += upper[y];
                upper[y] = x;
            }
            return x == y;
        }
    }
    public static int[] radixSort(int[] f)
    {
        int[] to = new int[f.length];
        {
            int[] b = new int[65537];
            for(int i = 0;i < f.length;i++)b[1+(f[i]&0xffff)]++;
            for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];
            for(int i = 0;i < f.length;i++)to[b[f[i]&0xffff]++] = f[i];
            int[] d = f; f = to;to = d;
        }
        {
            int[] b = new int[65537];
            for(int i = 0;i < f.length;i++)b[1+(f[i]>>>16)]++;
            for(int i = 1;i <= 65536;i++)b[i]+=b[i-1];
            for(int i = 0;i < f.length;i++)to[b[f[i]>>>16]++] = f[i];
            int[] d = f; f = to;to = d;
        }
        return f;
    }
    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;
        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars==-1)
                throw new InputMismatchException();

            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                }
                catch (IOException e) {
                    throw new InputMismatchException();
                }

                if(numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            int c = read();

            while(isSpaceChar(c))
                c = read();

            int sgn = 1;

            if (c == '-') {
                sgn = -1;
                c = read();
            }

            int res = 0;
            do {
                if(c<'0'||c>'9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));

            return res * sgn;
        }

        public long nextLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;

            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));
            return res * sgn;
        }

        public double nextDouble() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            double res = 0;
            while (!isSpaceChar(c) && c != '.') {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            if (c == '.') {
                c = read();
                double m = 1;
                while (!isSpaceChar(c)) {
                    if (c == 'e' || c == 'E')
                        return res * Math.pow(10, nextInt());
                    if (c < '0' || c > '9')
                        throw new InputMismatchException();
                    m /= 10;
                    res += (c - '0') * m;
                    c = read();
                }
            }
            return res * sgn;
        }

        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            }
            while (!isSpaceChar(c));

            return res.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public String next() {
            return readString();
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }
    public static void main(String args[]) throws Exception {
        new Thread(null, new simple(),""TaskA"",1<<26).start();
    }
}","class Simple implements Runnable {

    public void run() {

        InputReader input = new InputReader(System.in);
        PrintWriter w = new PrintWriter(System.out);
        int n = input.nextInt();

        System.out.println((2 * n * n) - (2 * n) + 1);
    }

    class Graph {
        private final int v;
        private List<List<Integer>> adj;

        Graph(int v) {
            this.v = v;
            adj = new ArrayList<>(v);
            for (int i = 0; i < v; i++) {
                adj.add(new LinkedList<>());
            }
        }

        private void addEdge(int a, int b) {
            adj.get(a).add(b);
        }

        private boolean isCyclic() {
            boolean[] visited = new boolean[v];
            boolean[] recStack = new boolean[v];
            for (int i = 0; i < v; i++)
                if (isCyclicUtil(i, visited, recStack))
                    return true;

            return false;
        }

        private boolean isCyclicUtil(int i, boolean[] visited, boolean[] recStack) {
            if (recStack[i])
                return true;
            if (visited[i])
                return false;
            visited[i] = true;
            recStack[i] = true;
            List<Integer> children = adj.get(i);
            for (Integer c : children)
                if (isCyclicUtil(c, visited, recStack))
                    return true;
            recStack[i] = false;
            return false;
        }
    }

    public static void sortbyColumn(int arr[][], int col) {

        Arrays.sort(arr, new Comparator<int[]>() {

            public int compare(int[] o1, int[] o2) {
                return (Integer.valueOf(o1[col]).compareTo(o2[col]));
            }
        });

    }

    static long gcd(long a, long b) {
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }

    public static class DJSet {
        public int[] upper;

        public DJSet(int n) {
            upper = new int[n];
            Arrays.fill(upper, -1);
        }

        public int root(int x) {
            return upper[x] < 0 ? x : (upper[x] = root(upper[x]));
        }

        public boolean equiv(int x, int y) {
            return root(x) == root(y);
        }

        public boolean union(int x, int y) {
            x = root(x);
            y = root(y);
            if (x != y) {
                if (upper[y] < upper[x]) {
                    int d = x;
                    x = y;
                    y = d;
                }
                upper[x] += upper[y];
                upper[y] = x;
            }
            return x == y;
        }
    }

    public static int[] radixSort(int[] f) {
        int[] to = new int[f.length];

        {
            int[] b = new int[65537];
            for (int i = 0; i < f.length; i++) b[1 + (f[i] & 0xffff)]++;
            for (int i = 1; i <= 65536; i++) b[i] += b[i - 1];
            for (int i = 0; i < f.length; i++) to[b[f[i] & 0xffff]++] = f[i];
            int[] d = f;
            f = to;
            to = d;
        }

        {
            int[] b = new int[65537];
            for (int i = 0; i < f.length; i++) b[1 + (f[i] >>> 16)]++;
            for (int i = 1; i <= 65536; i++) b[i] += b[i - 1];
            for (int i = 0; i < f.length; i++) to[b[f[i] >>> 16]++] = f[i];
            int[] d = f;
            f = to;
            to = d;
        }

        return f;
    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;
        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();

            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }

                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        public int nextInt() {
            int c = read();

            while (isSpaceChar(c))
                c = read();

            int sgn = 1;

            if (c == '-') {
                sgn = -1;
                c = read();
            }

            int res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));

            return res * sgn;
        }

        public long nextLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;

            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));
            return res * sgn;
        }

        public double nextDouble() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            double res = 0;
            while (!isSpaceChar(c) && c != '.') {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }

            if (c == '.') {
                c = read();
                double m = 1;
                while (!isSpaceChar(c)) {
                    if (c == 'e' || c == 'E')
                        return res * Math.pow(10, nextInt());
                    if (c < '0' || c > '9')
                        throw new InputMismatchException();
                    m /= 10;
                    res += (c - '0') * m;
                    c = read();
                }
            }

            return res * sgn;
        }

        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            }
            while (!isSpaceChar(c));

            return res.toString();
        }

        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public String next() {
            return readString();
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }

    public static void main(String args[]) throws Exception {
        new Thread(null, new Simple(), ""TaskA"", 1 << 26).start();
    }
}",88
"class
GFG 
{ 

static
int
countStr(
int
n) 

{ 

return
1
+ (n * 
2
) + 

(n * ((n * n) - 
1
) / 
2
); 

} 


public
static
void
main (String[] args) 
{ 

int
n = 
3
; 

System.out.println( countStr(n)); 
} 
}",class GFG { static int countStr(int n) { return 1 + n * 2 + n * ((n * n) - 1) / 2; } public static void main(String[] args) { int n = 3; System.out.println(countStr(n)); } },89
"class
Test 
{ 



static
int
binarySearch(
int
arr[], 
int
l, 
int
r, 
int
x) 

{ 

if
(r>=l) 

{ 

int
mid = l + (r - l)/
2
; 

if
(arr[mid] == x) 

return
mid; 

if
(arr[mid] > x) 

return
binarySearch(arr, l, mid-
1
, x); 

return
binarySearch(arr, mid+
1
, r, x); 

} 

return
-
1
; 

} 














static
int
findPos(
int
arr[],
int
key) 

{ 

int
l = 
0
, h = 
1
; 

int
val = arr[
0
]; 




while
(val < key) 

{ 

l = h; 






if
(
2
*h < arr.length-
1
) 

h = 
2
*h; 

else

h = arr.length-
1
; 


val = arr[h]; 


} 








return
binarySearch(arr, l, h, key); 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = 
new
int
[]{
3
, 
5
, 
7
, 
9
, 
10
, 
90
, 

100
, 
130
, 
140
, 
160
, 
170
}; 

int
ans = findPos(arr,
10
); 


if
(ans==-
1
) 

System.out.println(
""Element not found""
); 

else

System.out.println(
""Element found at index ""
+ ans); 

} 
}","class Test { static int binarySearch(int arr[], int l, int r, int x) { if (r>=l) { int mid = l + (r - l)/2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid-1, x); return binarySearch(arr, mid+1, r, x); } return -1; } static int findPos(int arr[], int key) { int l = 0, h = 1; int val = arr[0]; while (val < key) { l = h; if (2*h < arr.length-1) h = 2*h; else h = arr.length-1; val = arr[h]; } return binarySearch(arr, l, h, key); } public static void main(String[] args) { int arr[] = new int[]{3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170}; int ans = findPos(arr, 10); if (ans==-1) System.out.println(""Element not found""); else System.out.println(""Element found at index ""+ ans); } }",90
"class
Main 
{ 



static
int
ceilSearch(
int
arr[], 
int
low, 
int
high, 
int
x) 

{ 

int
mid; 




if
(x <= arr[low]) 

return
low; 




if
(x > arr[high]) 

return
-
1
; 




mid = (low + high)/
2
; 





if
(arr[mid] == x) 

return
mid; 




else
if
(arr[mid] < x) 

{ 

if
(mid + 
1
<= high && x <= arr[mid+
1
]) 

return
mid + 
1
; 

else

return
ceilSearch(arr, mid+
1
, high, x); 

} 




else

{ 

if
(mid - 
1
>= low && x > arr[mid-
1
]) 

return
mid; 

else

return
ceilSearch(arr, low, mid - 
1
, x); 

} 

} 





public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
2
, 
8
, 
10
, 
10
, 
12
, 
19
}; 

int
n = arr.length; 

int
x = 
8
; 

int
index = ceilSearch(arr, 
0
, n-
1
, x); 

if
(index == -
1
) 

System.out.println(
""Ceiling of ""
+x+
"" doesn't exist in array""
); 

else

System.out.println(
""ceiling of ""
+x+
"" is ""
+arr[index]); 

} 
}","class Main { static int ceilSearch(int arr[], int low, int high, int x) { int mid; if (x <= arr[low]) return low; if (x > arr[high]) return -1; mid = (low + high) / 2; if (arr[mid] == x) return mid; else if (arr[mid] < x) { if (mid + 1 <= high && x <= arr[mid + 1]) return mid + 1; else return ceilSearch(arr, mid + 1, high, x); } else { if (mid - 1 >= low && x > arr[mid - 1]) return mid; else return ceilSearch(arr, low, mid - 1, x); } } public static void main(String[] args) { int arr[] = { 1, 2, 8, 10, 10, 12, 19 }; int n = arr.length; int x = 8; int index = ceilSearch(arr, 0, n - 1, x); if (index == -1) System.out.println(""Ceiling of "" + x + "" doesn't exist in array""); else System.out.println(""ceiling of "" + x + "" is "" + arr[index]); } }",91
"class
Majority { 




static
int
_binarySearch(
int
arr[], 
int
low, 
int
high, 
int
x) 

{ 

if
(high >= low) 

{ 

int
mid = (low + high)/
2
; 





if
( (mid == 
0
|| x > arr[mid-
1
]) && (arr[mid] == x) ) 

return
mid; 

else
if
(x > arr[mid]) 

return
_binarySearch(arr, (mid + 
1
), high, x); 

else

return
_binarySearch(arr, low, (mid -
1
), x); 

} 


return
-
1
; 

} 





static
boolean
isMajority(
int
arr[], 
int
n, 
int
x) 

{ 



int
i = _binarySearch(arr, 
0
, n-
1
, x); 




if
(i == -
1
) 

return
false
; 




if
(((i + n/
2
) <= (n -
1
)) && arr[i + n/
2
] == x) 

return
true
; 

else

return
false
; 

} 




public
static
void
main (String[] args) { 


int
arr[] = {
1
, 
2
, 
3
, 
3
, 
3
, 
3
, 
10
}; 

int
n = arr.length; 

int
x = 
3
; 

if
(isMajority(arr, n, x)==
true
) 

System.out.println(x + 
"" appears more than ""
+ 

n/
2
+ 
"" times in arr[]""
); 

else

System.out.println(x + 
"" does not appear more than ""
+ 

n/
2
+ 
"" times in arr[]""
); 

} 
}","class Majority {

    static int binarySearch(int arr[], int low, int high, int x) {
        if (high >= low) {
            int mid = (low + high) / 2;
            if ((mid == 0 || x > arr[mid - 1]) && (arr[mid] == x))
                return mid;
            else if (x > arr[mid])
                return binarySearch(arr, (mid + 1), high, x);
            else
                return binarySearch(arr, low, (mid - 1), x);
        }
        return -1;
    }

    static boolean isMajority(int arr[], int n, int x) {
        int i = binarySearch(arr, 0, n - 1, x);
        if (i == -1)
            return false;
        if (((i + n / 2) <= (n - 1)) && arr[i + n / 2] == x)
            return true;
        else
            return false;
    }

    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 3, 3, 3, 10};
        int n = arr.length;
        int x = 3;
        if (isMajority(arr, n, x) == true)
            System.out.println(x + "" appears more than "" + n / 2 + "" times in arr[]"");
        else
            System.out.println(x + "" does not appear more than "" + n / 2 + "" times in arr[]"");
    }
}",92
"public class BinarySearch {

    
    private static int binarySearch(int[] a, int n) {
        return binarySearch(a, n, 0, a.length - 1);
    }

    public static int binarySearch(int[] a, int n, int low, int high) {

        if (low <= high) {
            int mid = (low + high) / 2; 

            if (n == a[mid]) {
                return mid;
            } else if (n < a[mid]) {
                return binarySearch(a, n, 0, mid - 1);
            } else {
                return binarySearch(a, n, mid + 1, high);
            }
        } else {
            return -1;
        }
    }

    
    private static int binarySearchNonRecursive(int[] a, int n) {
        int low = 0, high = a.length, mid;
        while (low <= high) {
            mid = (low + high) / 2; 
            if (n == a[mid]) {
                return mid;
            } else if (n < a[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

    
    public static void main(String[] args) {
        System.out.println(binarySearch(new int[]{0, 2}, 2));
        System.out.println(binarySearch(new int[]{0, 1, 2, 3}, 2));
        System.out.println(binarySearch(new int[]{0, 1, 2, 3}, 3));
        System.out.println(binarySearch(new int[]{0, 2}, 0));
        System.out.println(binarySearch(new int[]{0, 1, 2, 2, 2, 3, 3}, 2)); 
        System.out.println(""---------"");
        System.out.println(binarySearchNonRecursive(new int[]{0, 2}, 2));
        System.out.println(binarySearchNonRecursive(new int[]{0, 1, 2, 3}, 2));
        System.out.println(binarySearchNonRecursive(new int[]{0, 1, 2, 3}, 3));
        System.out.println(binarySearchNonRecursive(new int[]{0, 2}, 0));
        System.out.println(binarySearchNonRecursive(new int[]{0, 1, 2, 2, 2, 3, 3}, 2));
    }
}","public class BinarySearch {

    private static int binarySearch(int[] a, int n) {
        return binarySearch(a, n, 0, a.length - 1);
    }

    public static int binarySearch(int[] a, int n, int low, int high) {

        if (low <= high) {
            int mid = (low + high) / 2;

            if (n == a[mid]) {
                return mid;
            } else if (n < a[mid]) {
                return binarySearch(a, n, 0, mid - 1);
            } else {
                return binarySearch(a, n, mid + 1, high);
            }
        } else {
            return -1;
        }
    }

    private static int binarySearchNonRecursive(int[] a, int n) {
        int low = 0, high = a.length, mid;
        while (low <= high) {
            mid = (low + high) / 2;
            if (n == a[mid]) {
                return mid;
            } else if (n < a[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        System.out.println(binarySearch(new int[]{0, 2}, 2));
        System.out.println(binarySearch(new int[]{0, 1, 2, 3}, 2));
        System.out.println(binarySearch(new int[]{0, 1, 2, 3}, 3));
        System.out.println(binarySearch(new int[]{0, 2}, 0));
        System.out.println(binarySearch(new int[]{0, 1, 2, 2, 2, 3, 3}, 2));
        System.out.println(""---------"");
        System.out.println(binarySearchNonRecursive(new int[]{0, 2}, 2));
        System.out.println(binarySearchNonRecursive(new int[]{0, 1, 2, 3}, 2));
        System.out.println(binarySearchNonRecursive(new int[]{0, 1, 2, 3}, 3));
        System.out.println(binarySearchNonRecursive(new int[]{0, 2}, 0));
        System.out.println(binarySearchNonRecursive(new int[]{0, 1, 2, 2, 2, 3, 3}, 2));
    }
}",93
"class findMedianTwoArrays
{
  public static double main(
    int[] arr1, int start1, int end1, int[] arr2, int start2, int end2) {
    if ( end1 - start1 == 1 && end2 - start2 == 1 ) {
        return ( Math.max(arr1[start1], arr2[start2]) + Math.min(arr1[end1], arr2[end2]) ) / 2;
    }    
  
  int median1Index = Math.floor((start1 + end1 ) / 2);
  int median2Index = Math.floor((start2 + end2 ) / 2);
  int median1 = arr1[median1Index];
  int median2 = arr2[median2Index];

  if ( median1 == median2 ) {
    return median1;
  }    

  if ( median1 < median2 ) {
    start1 = median1Index;
    if ( end2 - start2 > 1 ) { 
        end2 = median2Index;
    }        
  } else {
    start2 = median2Index;
    if ( end1 - start1 > 1 ) { 
        end1 = median1Index;
    }    
  }            

  return main(arr1, start1, end1, arr2, start2, end2);
  }
}

class test {
  public static void main(String[] args) {
    int[] A = { 1, 2, 3, 4, 4 };
    int[] B = { 6, 9, 10, 11, 15};
    findMedianTwoArrays findMedian = new findMedianTwoArrays();
    System.out.println(""Hello Java"");
    System.out.println(findMedian.main(A, 0, 4, B, 0, 4));
  }    
}","class findMedianTwoArrays {
  public static double main(int[] arr1, int start1, int end1, int[] arr2, int start2, int end2) {
    if (end1 - start1 == 1 && end2 - start2 == 1) {
      return (Math.max(arr1[start1], arr2[start2]) + Math.min(arr1[end1], arr2[end2])) / 2;
    }
    int median1Index = (int) Math.floor((start1 + end1) / 2);
    int median2Index = (int) Math.floor((start2 + end2) / 2);
    int median1 = arr1[median1Index];
    int median2 = arr2[median2Index];
    if (median1 == median2) {
      return median1;
    }
    if (median1 < median2) {
      start1 = median1Index;
      if (end2 - start2 > 1) {
        end2 = median2Index;
      }
    } else {
      start2 = median2Index;
      if (end1 - start1 > 1) {
        end1 = median1Index;
      }
    }
    return main(arr1, start1, end1, arr2, start2, end2);
  }
}

class test {
  public static void main(String[] args) {
    int[] A = {1, 2, 3, 4, 4};
    int[] B = {6, 9, 10, 11, 15};
    findMedianTwoArrays findMedian = new findMedianTwoArrays();
    System.out.println(""Hello Java"");
    System.out.println(findMedian.main(A, 0, 4, B, 0, 4));
  }
}",94
"public class MedianOfTwoSortedArrayOfDifferentLength {

    public double findMedianSortedArrays(int input1[], int input2[]) {
        
        if (input1.length > input2.length) {
            return findMedianSortedArrays(input2, input1);
        }
        int x = input1.length;
        int y = input2.length;

        int low = 0;
        int high = x;
        while (low <= high) {
            int partitionX = (low + high)/2;
            int partitionY = (x + y + 1)/2 - partitionX;

            
            
            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : input1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : input1[partitionX];

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : input2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : input2[partitionY];

            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                
                
                
                if ((x + y) % 2 == 0) {
                    return ((double)Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY))/2;
                } else {
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) { 
                high = partitionX - 1;
            } else { 
                low = partitionX + 1;
            }
        }

        
        throw new IllegalArgumentException();
    }

    public static void main(String[] args) {
        int[] x = {1, 3, 8, 9, 15};
        int[] y = {7, 11, 19, 21, 18, 25};

        MedianOfTwoSortedArrayOfDifferentLength mm = new MedianOfTwoSortedArrayOfDifferentLength();
        mm.findMedianSortedArrays(x, y);
    }
}","public class MedianOfTwoSortedArrayOfDifferentLength {

    public double findMedianSortedArrays(int[] input1, int[] input2) {
        if (input1.length > input2.length) {
            return findMedianSortedArrays(input2, input1);
        }
        int x = input1.length;
        int y = input2.length;
        int low = 0;
        int high = x;
        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (x + y + 1) / 2 - partitionX;
            int maxLeftX = (partitionX == 0) ? Integer.MIN_VALUE : input1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : input1[partitionX];
            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : input2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : input2[partitionY];
            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((x + y) % 2 == 0) {
                    return ((double) Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;
                } else {
                    return (double) Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) {
                high = partitionX - 1;
            } else {
                low = partitionX + 1;
            }
        }
        throw new IllegalArgumentException();
    }

    public static void main(String[] args) {
        int[] x = {1, 3, 8, 9, 15};
        int[] y = {7, 11, 19, 21, 18, 25};

        MedianOfTwoSortedArrayOfDifferentLength mm = new MedianOfTwoSortedArrayOfDifferentLength();
        mm.findMedianSortedArrays(x, y);
    }
}",95
"public class FloorAndCeilingSortedArray {

    public int floor(int input[], int x){
        int low = 0;
        int high = input.length-1;
        while(low <= high){
            int middle = (low + high)/2;
            if(input[middle] == x || (input[middle] < x && (middle == input.length-1 || input[middle+1] > x))){
                return middle;
            }else if(input[middle] < x){
                low = middle+1;
            }else{
                high = middle-1;
            }
        }
        return -1;
    }

    public int ceiling(int input[], int x){
        int low = 0;
        int high = input.length-1;
        while(low <= high){
            int middle = (low + high)/2;
            if(input[middle] == x || (input[middle] > x && (middle == 0 || input[middle-1] < x))){
                return middle;
            }else if(input[middle] < x){
                low = middle+1;
            }else{
                high = middle-1;
            }
        }
        return -1;
    }
    
    public static void main(String args[]){
        int input[] = {1,2,5,6,11,15};
        FloorAndCeilingSortedArray foc = new FloorAndCeilingSortedArray();
        System.out.println(foc.floor(input, 15));
        System.out.println(foc.ceiling(input, 2));
    }
}","public class FloorAndCeilingConverted {

    public int search(int arr[], int x, String type) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == x || (arr[mid] < x && (mid == arr.length - 1 || arr[mid + 1] > x))) {
                return mid;
            } else if (arr[mid] < x) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        int arr[] = {1, 2, 5, 6, 11, 15};
        FloorAndCeilingConverted obj = new FloorAndCeilingConverted();
        System.out.println(obj.search(arr, 15, ""floor""));
        System.out.println(obj.search(arr, 2, ""ceiling""));
    }
}",96
"public class FloorAndCeilingInASortedArray {

	
	private static int ceilSearch(int arr[], int low, int high, int x) {
		int mid;

		
		if (x <= arr[low])
			return low;

		
		if (x > arr[high])
			return -1;

		
		mid = (low + high) / 2; 

		
		if (arr[mid] == x)
			return mid;

		
		else if (x > arr[mid]) {
			if (mid + 1 <= high && x <= arr[mid + 1])
				return mid + 1;
			else
				return ceilSearch(arr, mid + 1, high, x);
		}

		
		else {
			if (mid - 1 >= low && x > arr[mid - 1])
				return mid;
			else
				return ceilSearch(arr, low, mid - 1, x);
		}
	}

	
	public static void main(String[] args) {
		int arr[] = { 1, 2, 8, 10, 10, 12, 19 };
		int n = arr.length;
		int x = 11;
		int index = ceilSearch(arr, 0, n - 1, x);
		if (index == -1)
			System.out.println(""Ceiling of doesn't exist in array "" + x);
		else
			System.out.println(""ceiling of"" + x + "" is "" + arr[index]);

	}

}","public class FloorAndCeilingInASortedArray {

    private static int ceilSearch(int arr[], int low, int high, int x) {
        int mid;

        if (x <= arr[low])
            return low;

        if (x > arr[high])
            return -1;

        mid = (low + high) / 2; 

        if (arr[mid] == x)
            return mid;

        else if (x > arr[mid]) {
            if (mid + 1 <= high && x <= arr[mid + 1])
                return mid + 1;
            else
                return ceilSearch(arr, mid + 1, high, x);
        }

        else {
            if (mid - 1 >= low && x > arr[mid - 1])
                return mid;
            else
                return ceilSearch(arr, low, mid - 1, x);
        }
    }

    public static void main(String[] args) {
        int arr[] = { 1, 2, 8, 10, 10, 12, 19 };
        int n = arr.length;
        int x = 11;
        int index = ceilSearch(arr, 0, n - 1, x);
        if (index == -1)
            System.out.println(""Ceiling of doesn't exist in array "" + x);
        else
            System.out.println(""ceiling of"" + x + "" is "" + arr[index]);
    }

}",97
"public class FloorInSortedArray {
	public static int floor(int[] A, int val) throws Exception {
		if (val < A[0])
			throw new Exception(""All elements are greater than val"");
		else if (val > A[A.length - 1])
			return A[A.length - 1];
		return floor(A, 0, A.length - 1, val);
	}

	private static int floor(int[] A, int l, int r, int val) throws Exception {
		if (l > r) {
			throw new Exception(""Not found"");
		}
		int mid = (l + r) / 2;
		if (val == A[mid])
			return A[mid];
		else if (val < A[mid]) {
			if (val >= A[mid - 1])
				return A[mid - 1];
			return floor(A, l, mid - 1, val);
		} else {
			if (val < A[mid + 1])
				return A[mid];
			return floor(A, mid + 1, r, val);
		}
	}

	public static void main(String[] args) throws Exception {
		int[] A = new int[] { 1, 3, 4, 7, 8, 12, 32, 45, 78, 98 };
		
		System.out.println(floor(A, 11));
		System.out.println(floor(A, 32));
		System.out.println(floor(A, 70));
		System.out.println(floor(A, 125));
	}

}","public class FloorInSortedArray { 
    public static int floor(int[] A, int val) throws Exception { 
        if (val < A[0]) 
            throw new Exception(""All elements are greater than val""); 
        else if (val > A[A.length - 1]) 
            return A[A.length - 1]; 
        return floor(A, 0, A.length - 1, val); 
    } 

    private static int floor(int[] A, int l, int r, int val) throws Exception { 
        if (l > r) { 
            throw new Exception(""Not found""); 
        } 
        int mid = (l + r) / 2; 
        if (val == A[mid]) 
            return A[mid]; 
        else if (val < A[mid]) { 
            if (val >= A[mid - 1]) 
                return A[mid - 1]; 
            return floor(A, l, mid - 1, val); 
        } else { 
            if (val < A[mid + 1]) 
                return A[mid]; 
            return floor(A, mid + 1, r, val); 
        } 
    } 

    public static void main(String[] args) throws Exception { 
        int[] A = new int[] {1, 3, 4, 7, 8, 12, 32, 45, 78, 98}; 

        System.out.println(floor(A, 11)); 
        System.out.println(floor(A, 32)); 
        System.out.println(floor(A, 70)); 
        System.out.println(floor(A, 125)); 
    } 
}",98
"public class BinarySearch {

    public int search(final int input[], int search) {
        int low = 0;
        int high = input.length - 1;
        int mid;
        while (low <= high) {
            mid = low + ((high - low) / 2);
            if (input[mid] == search) {
                return mid;
            } else if (input[mid] < search) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    public static void main(String args[]) {
        BinarySearch bSearch = new BinarySearch();
        final int arr1[] = {1, 2, 4, 5, 7, 8};
        System.out.println(bSearch.search(arr1, -1));
        System.out.println(bSearch.search(arr1, 1));
        System.out.println(bSearch.search(arr1, 8));
        System.out.println(bSearch.search(arr1, 2));
    }
}","public class BinarySearch {

    public static int search(int[] input, int search) {
        int low = 0;
        int high = input.length - 1;
        int mid;
        while (low <= high) {
            mid = low + ((high - low) / 2);
            if (input[mid] == search) {
                return mid;
            } else if (input[mid] < search) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        BinarySearch bSearch = new BinarySearch();
        int[] arr1 = {1, 2, 4, 5, 7, 8};
        System.out.println(bSearch.search(arr1, -1));
        System.out.println(bSearch.search(arr1, 1));
        System.out.println(bSearch.search(arr1, 8));
        System.out.println(bSearch.search(arr1, 2));
    }
}",99
"public class CircularBinarySearch {

    
    
    public int search(int arr[]) {
        int low = 0;
        int high = arr.length - 1;
        int mid = 0;
        while (low < high) {
            mid = (low + high) / 2;
            
            if((low == mid || arr[mid] < arr[mid-1])&& arr[mid] < arr[mid+1]){
                return arr[mid];
            }
            if ((arr[mid] >= arr[low] && arr[mid] >= arr[high])){
                if(arr[low] < arr[high]){
                    high = mid-1;
                }else{
                    low = mid+1;
                }
            }else{
                if(arr[mid-1] < arr[mid+1]){
                    high = mid-1;
                }else{
                    low = mid+1;
                }
            }
        }
        return arr[low];
    }

    public static void main(String args[]) {
        CircularBinarySearch cbs = new CircularBinarySearch();
        int arr[] = { 7, 10, 8, 5, 2, 3, 5 };
        System.out.print(cbs.search(arr));

        int arr1[] = { 5, 8, 10, 7, 5, 3, 2 };
        System.out.print(cbs.search(arr1));

        int arr2[] = { 3, 5, 7, 10, 8, 5, 2 };
        System.out.print(cbs.search(arr2));

        int arr3[] = { 8, 5, 2, 3, 5, 7, 10 };
        System.out.print(cbs.search(arr3));

        int arr4[] = { 5, 3, 2, 5, 8, 10, 7 };
        System.out.print(cbs.search(arr4));

        int arr5[] = {100,20,10,5,2,8,11,16,19};
        System.out.print(cbs.search(arr5));

        int arr6[] = {200,2,10,15,20,80,110,160,190};
        System.out.print(cbs.search(arr6));

        int arr7[] = {5,10,20,50,200,800,1100,1600,1900,2};
        System.out.print(cbs.search(arr7));

        int arr8[] = {2,5,10,20,50,200,800,1100,1600,1900};
        System.out.print(cbs.search(arr8));
        
        int arr9[] = {3,1,8,5,4};
        System.out.print(cbs.search(arr9));
        
    }
}","public class CircularBinarySearch {

    public int search(int[] arr) {
        int low = 0;
        int high = arr.length - 1;
        int mid = 0;
        while (low < high) {
            mid = (low + high) / 2;
            if ((low == mid || arr[mid] < arr[mid - 1]) && arr[mid] < arr[mid + 1]) {
                return arr[mid];
            }
            if ((arr[mid] >= arr[low] && arr[mid] >= arr[high])) {
                if (arr[low] < arr[high]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                if (arr[mid - 1] < arr[mid + 1]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
        }
        return arr[low];
    }

    public static void main(String[] args) {
        CircularBinarySearch cbs = new CircularBinarySearch();
        int[] arr = {7, 10, 8, 5, 2, 3, 5};
        System.out.print(cbs.search(arr));
        int[] arr1 = {5, 8, 10, 7, 5, 3, 2};
        System.out.print(cbs.search(arr1));
        int[] arr2 = {3, 5, 7, 10, 8, 5, 2};
        System.out.print(cbs.search(arr2));
        int[] arr3 = {8, 5, 2, 3, 5, 7, 10};
        System.out.print(cbs.search(arr3));
        int[] arr4 = {5, 3, 2, 5, 8, 10, 7};
        System.out.print(cbs.search(arr4));
        int[] arr5 = {100, 20, 10, 5, 2, 8, 11, 16, 19};
        System.out.print(cbs.search(arr5));
        int[] arr6 = {200, 2, 10, 15, 20, 80, 110, 160, 190};
        System.out.print(cbs.search(arr6));
        int[] arr7 = {5, 10, 20, 50, 200, 800, 1100, 1600, 1900, 2};
        System.out.print(cbs.search(arr7));
        int[] arr8 = {2, 5, 10, 20, 50, 200, 800, 1100, 1600, 1900};
        System.out.print(cbs.search(arr8));
        int[] arr9 = {3, 1, 8, 5, 4};
        System.out.print(cbs.search(arr9));
    }
}",100
"public class MonotonicallyIncreasingFunctionBecomesPositive {

    private int f(int x){
        return x*x - 10*x - 20;
    }
    
    public int findPoint(){
        int i=1;
        while(f(i) <=0 ){
            i = i*2;
        }
        return binarySearch(i/2,i);
    }
    
    private int binarySearch(int start,int end){
        int mid = (start+end)/2;
        while(start < end){
            mid = (start+end)/2;
            if(f(mid) >0 && f(mid-1) <=0){
                return mid;
            }
            if(f(mid) <=0 && f(mid+1)>0){
                return mid+1;
            }
            if(f(mid) <= 0){
                start = mid+1;
            }else{
                end = mid-1;
            }
        }
        return mid;
    }
    
    public static void main(String args[]){
        MonotonicallyIncreasingFunctionBecomesPositive mif = new MonotonicallyIncreasingFunctionBecomesPositive();
        System.out.print(mif.findPoint());
    }
}","class MonotonicallyIncreasingFunctionBecomesPositive {

    private int f(int x){
        return x*x - 10*x - 20;
    }
    
    public int findPoint(){
        int i=1;
        for(;f(i) <=0 ;){
            i = i*2;
        }
        return binarySearch(i/2,i);
    }
    
    private int binarySearch(int start,int end){
        int mid = (start+end)/2;
        for(;start < end;){
            mid = (start+end)/2;
            if(f(mid) >0 && f(mid-1) <=0){
                return mid;
            }
            if(f(mid) <=0 && f(mid+1)>0){
                return mid+1;
            }
            if(f(mid) <= 0){
                start = mid+1;
            }else{
                end = mid-1;
            }
        }
        return mid;
    }
    
    public static void main(String args[]){
        MonotonicallyIncreasingFunctionBecomesPositive mif = new MonotonicallyIncreasingFunctionBecomesPositive();
        System.out.print(mif.findPoint());
    }
}",101
"public class SortedAndRotatedArraySearch {

    
    public int search(int arr[],int search){
        int low =0;
        int high = arr.length-1;
        while(low <= high){
            int mid = (low + high)/2;
            if(arr[mid] == search){
                return mid;
            }
            
            if(arr[mid] < arr[high]){
                if(arr[mid] < search && search <= arr[high]){
                    low = mid+1;
                }else{
                    high = mid-1;
                }
            }else{
                if(search >= arr[low] && search < arr[mid]){
                    high = mid-1;
                }else{
                    low = mid+1;
                }
            }
        }
        return -1;
    }

    
    public boolean searchWithDuplicates(int[] arr, int search) {
        int low =0;
        int high = arr.length-1;
        while(low <= high){
            int mid = (low + high)/2;
            if(arr[mid] == search) {
                return true;
            }
            
            if (arr[mid] == arr[low]) {
                low++;
            } else if (arr[mid] == arr[high]) { 
                high--;
            } else if (arr[mid] < arr[high]) {
                if(arr[mid] < search && search <= arr[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            } else {
                if(search >= arr[low] && search < arr[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
        }
        return false;
    }
    
    public static void main(String args[]){
        SortedAndRotatedArraySearch ras = new SortedAndRotatedArraySearch();
        int arr1[] = {1,2,5,6,7,8,11,21};
        System.out.print(ras.search(arr1, 1));
        System.out.print(ras.search(arr1, 5));
        System.out.print(ras.search(arr1, 22));
        System.out.println();
    
        int arr2[] = {18,21,1,2,5,6,7,8,10,15};
        System.out.print(ras.search(arr2, 1));
        System.out.print(ras.search(arr2, 5));
        System.out.print(ras.search(arr2, 10));
        System.out.print(ras.search(arr2, 14));
        System.out.println();

        int arr3[] = {7,8,15,17,18,21,1,2,5,6};
        System.out.print(ras.search(arr3, 1));
        System.out.print(ras.search(arr3, 5));
        System.out.print(ras.search(arr3, 10));
        System.out.print(ras.search(arr3, 7));
        System.out.print(ras.search(arr3, 6));
        System.out.print(ras.search(arr3, 16));
    }
}","public class SortedAndRotatedArraySearch {
    public int search(int[] arr, int search) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == search) {
                return mid;
            }
            if (arr[mid] < arr[high]) {
                if (arr[mid] < search && search <= arr[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            } else {
                if (search >= arr[low] && search < arr[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
        }
        return -1;
    }

    public boolean searchWithDuplicates(int[] arr, int search) {
        int low = 0;
        int high = arr.length - 1;
        while (low <= high) {
            int mid = (low + high) / 2;
            if (arr[mid] == search) {
                return true;
            }
            if (arr[mid] == arr[low]) {
                low++;
            } else if (arr[mid] == arr[high]) {
                high--;
            } else if (arr[mid] < arr[high]) {
                if (arr[mid] < search && search <= arr[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            } else {
                if (search >= arr[low] && search < arr[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            }
        }
        return false;
    }

    public static void main(String[] args) {
        SortedAndRotatedArraySearch ras = new SortedAndRotatedArraySearch();
        int[] arr1 = {1, 2, 5, 6, 7, 8, 11, 21};
        System.out.print(ras.search(arr1, 1));
        System.out.print(ras.search(arr1, 5));
        System.out.print(ras.search(arr1, 22));
        System.out.println();
        int[] arr2 = {18, 21, 1, 2, 5, 6, 7, 8, 10, 15};
        System.out.print(ras.search(arr2, 1));
        System.out.print(ras.search(arr2, 5));
        System.out.print(ras.search(arr2, 10));
        System.out.print(ras.search(arr2, 14));
        System.out.println();
        int[] arr3 = {7, 8, 15, 17, 18, 21, 1, 2, 5, 6};
        System.out.print(ras.search(arr3, 1));
        System.out.print(ras.search(arr3, 5));
        System.out.print(ras.search(arr3, 10));
        System.out.print(ras.search(arr3, 7));
        System.out.print(ras.search(arr3, 6));
        System.out.print(ras.search(arr3, 16));
    }
}",102
"public class SearchForRange {
    public int[] searchRange(int[] nums, int target) {
        int first = firstOccurence(nums, target);
        if (first == -1) {
            return new int[]{-1, -1};
        }
        int last = lastOccurence(nums, target);
        return new int[]{first, last};
    }

    private int firstOccurence(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        while (low <= high) {
            int mid = low + (high - low)/2;
            if (nums[mid] == target && (mid == 0 || nums[mid - 1] < target)) {
                return mid;
            } else if (nums[mid] >= target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

    private int lastOccurence(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        while (low <= high) {
            int mid = low + (high - low)/2;
            if (nums[mid] == target && (mid == nums.length - 1 || nums[mid + 1] > target)) {
                return mid;
            } else if (nums[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    public static void main(String args[]) {
        SearchForRange searchForRange = new SearchForRange();
        int[] nums = {0, 1, 1, 3, 6, 9, 11};
        int[] r = searchForRange.searchRange(nums, 11);
        System.out.println(r[0] + "" "" + r[1]);
        r = searchForRange.searchRange(nums, 0);
        System.out.println(r[0] + "" "" + r[1]);
    }
}","public class SearchForRange {
    public int[] searchRange(int[] nums, int target) {
        int first = findFirstOccurrence(nums, target);
        if (first == -1) {
            return new int[]{-1, -1};
        }
        int last = findLastOccurrence(nums, target);
        return new int[]{first, last};
    }

    private int findFirstOccurrence(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target && (mid == 0 || nums[mid - 1] < target)) {
                return mid;
            } else if (nums[mid] >= target) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;
    }

    private int findLastOccurrence(int[] nums, int target) {
        int low = 0;
        int high = nums.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] == target && (mid == nums.length - 1 || nums[mid + 1] > target)) {
                return mid;
            } else if (nums[mid] <= target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }

    public static void main(String args[]) {
        SearchForRange searchForRange = new SearchForRange();
        int[] nums = {0, 1, 1, 3, 6, 9, 11};
        int[] result = searchForRange.searchRange(nums, 11);
        System.out.println(result[0] + "" "" + result[1]);
        result = searchForRange.searchRange(nums, 0);
        System.out.println(result[0] + "" "" + result[1]);
    }
}",103
"public class PeakElement {

    public int findPeakElement(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        int middle = 0;
        while (low <= high) {
            middle = (low + high)/2;
            int before = Integer.MIN_VALUE;
            if (middle > 0) {
                before = nums[middle - 1];
            }
            int after = Integer.MIN_VALUE;
            if (middle < nums.length - 1) {
                after = nums[middle + 1];
            }
            if (nums[middle] > before && nums[middle] > after) {
                return middle;
            } else if (before > after) {
                high = middle - 1;
            } else {
                low = middle + 1;
            }
        }
        return middle;
    }

    public static void main(String args[]){
        int arr[] = {10,5,15,2,23,90,67};
        PeakElement pe = new PeakElement();
        System.out.println(pe.findPeakElement(arr));
        int arr1[] = {10,20,30,40,50};
        System.out.println(pe.findPeakElement(arr1));
        int arr2[] = {100,90,80,70,60};
        System.out.println(pe.findPeakElement(arr2));
                
    }
}","public class PeakElement {

    public int findPeakElement(int[] nums) {
        int low = 0;
        int high = nums.length - 1;
        int middle = 0;
        while (low <= high) {
            middle = (low + high) / 2;
            int before = Integer.MIN_VALUE;
            if (middle > 0) {
                before = nums[middle - 1];
            }
            int after = Integer.MIN_VALUE;
            if (middle < nums.length - 1) {
                after = nums[middle + 1];
            }
            if (nums[middle] > before && nums[middle] > after) {
                return middle;
            } else if (before > after) {
                high = middle - 1;
            } else {
                low = middle + 1;
            }
        }
        return middle;
    }

    public static void main(String args[]){
        int arr[] = {10, 5, 15, 2, 23, 90, 67};
        PeakElement pe = new PeakElement();
        System.out.println(pe.findPeakElement(arr));
        int arr1[] = {10, 20, 30, 40, 50};
        System.out.println(pe.findPeakElement(arr1));
        int arr2[] = {100, 90, 80, 70, 60};
        System.out.println(pe.findPeakElement(arr2));
    }
}",104
"public class FirstOccurrenceOfNumberInSortedArray {

    public int firstOccurrence(int input[], int x){
        int low = 0;
        int high = input.length-1;
        
        while(low <= high){
            int middle = (low + high)/2;
            if(input[middle] == x && (middle == 0 || input[middle-1] < x)){
                return middle;
            }else if(input[middle] < x){
                low = middle+1;
            }else{
                high = middle-1;
            }
        }
        return -1;
    }
    
    public static void main(String args[]){
        FirstOccurrenceOfNumberInSortedArray fos = new FirstOccurrenceOfNumberInSortedArray();
        int input[] = {1,2,2,2,2,2,5,7,7};
        System.out.println(fos.firstOccurrence(input, 6));
    }
    
}","public class FirstOccurrenceOfNumberInSortedArray {

    public int firstOccurrence(int[] input, int x) {
        int low = 0;
        int high = input.length - 1;

        while (low <= high) {
            int middle = (low + high) / 2;
            if (input[middle] == x && (middle == 0 || input[middle - 1] < x)) {
                return middle;
            } else if (input[middle] < x) {
                low = middle + 1;
            } else {
                high = middle - 1;
            }
        }
        return -1;
    }

    public static void main(String[] args) {
        FirstOccurrenceOfNumberInSortedArray fos = new FirstOccurrenceOfNumberInSortedArray();
        int[] input = {1, 2, 2, 2, 2, 2, 5, 7, 7};
        System.out.println(fos.firstOccurrence(input, 6));
    }

}",105
"class CountOne {

  public static void main(String[] args) {
    int[] arr={0, 0, 0, 0, 0, 0, 0};
    
    
    countOne(arr);
  }

  public static void countOne(int[] a)
  {
       int l = 0;
       int h = a.length-1;
       int mid = -1;
      
       while(l<=h)
       {
         mid = (l+h)/2;
         
         if( (mid == h || a[mid+1] == 0) && a[mid] == 1)
         {
             System.out.println(""Count "" + (mid + 1));
             return;
         }
           
         if( a[mid] < 1)
         {
             h = mid - 1;
         } else {
             l = mid + 1;
         } 
       }
       System.out.println("" No one's found "");
       return;
  }
}","public class CountOne {

    public static void main(String[] args) {
        int[] arr = {0, 0, 0, 0, 0, 0, 0};

        countOne(arr);
    }

    public static void countOne(int[] a) {
        int l = 0;
        int h = a.length - 1;
        int mid = -1;

        while (l <= h) {
            mid = (l + h) / 2;

            if ((mid == h || a[mid + 1] == 0) && a[mid] == 1) {
                System.out.println(""Count "" + (mid + 1));
                return;
            }

            if (a[mid] < 1) {
                h = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        System.out.println("" No one's found "");
        return;
    }
}",106
"public class Search {

    public static boolean find2(int[] array, int begin, int end, int element) {
        if (begin <= end) {
            int medium = begin + (end - begin) / 2;
            if (array[medium] == element)
                return true;
            else if (medium > begin && array[medium - 1] == element) return true;
            else if (medium < end && array[medium + 1] == element) return true;

            if (array[medium] > element) return find2(array, 0, medium - 2, element);
            return find2(array, medium + 2, end, element);
        }
        return false;
    }
    
    public static int find(int[] array, int begin, int end, int element) {
        if (begin < end) {
            int medium = begin + (end - begin) / 2;
            if (array[medium] == element)
                return medium;
            else if (medium > begin && array[medium - 1] == element) return medium - 1;
            else if (medium < end && array[medium + 1] == element) return medium + 1;

            if (array[medium] > element) return find(array, 0, medium - 2, element);
            return find(array, medium + 2, end, element);


        }
        return -1;
    }

    public static void main(String[] args) {
        int[] array = {12,13, 21, 36, 3, 43, 65, 76, 88, 91, 100};
        System.out.println(find2(array, 0, array.length-1, 13));
    }


}","public class Search {

    public static boolean find2(int[] array, int begin, int end, int element) {
        if (begin <= end) {
            int medium = begin + (end - begin) / 2;
            if (array[medium] == element)
                return true;
            else if (medium > begin && array[medium - 1] == element) return true;
            else if (medium < end && array[medium + 1] == element) return true;

            if (array[medium] > element) return find2(array, 0, medium - 2, element);
            return find2(array, medium + 2, end, element);
        }
        return false;
    }
    
    public static int find(int[] array, int begin, int end, int element) {
        if (begin < end) {
            int medium = begin + (end - begin) / 2;
            if (array[medium] == element)
                return medium;
            else if (medium > begin && array[medium - 1] == element) return medium - 1;
            else if (medium < end && array[medium + 1] == element) return medium + 1;

            if (array[medium] > element) return find(array, 0, medium - 2, element);
            return find(array, medium + 2, end, element);


        }
        return -1;
    }

    public static void main(String[] args) {
        int[] array = {12,13, 21, 36, 3, 43, 65, 76, 88, 91, 100};
        System.out.println(find2(array, 0, array.length-1, 13));
    }
}",107
"public
class
GFG 
{ 



static
Stack<Integer> st= 
new
Stack<>(); 




static
void
push_digits(
int
number) 

{ 

while
(number != 
0
) 

{ 

st.push(number % 
10
); 

number = number / 
10
; 

} 

} 




static
int
reverse_number(
int
number) 

{ 





push_digits(number); 

int
reverse = 
0
; 

int
i = 
1
; 






while
(!st.isEmpty()) 

{ 

reverse = reverse + (st.peek() * i); 

st.pop(); 

i = i * 
10
; 

} 




return
reverse; 

} 




public
static
void
main(String[] args) 

{ 

int
number = 
39997
; 

System.out.println(reverse_number(number)); 

} 
}","public class GFG {

    static Stack<Integer> st = new Stack<>();

    static void push_digits(int number) {
        while (number != 0) {
            st.push(number % 10);
            number = number / 10;
        }
    }

    static int reverse_number(int number) {
        push_digits(number);
        int reverse = 0;
        int i = 1;
        while (!st.isEmpty()) {
            reverse = reverse + (st.peek() * i);
            st.pop();
            i = i * 10;
        }
        return reverse;
    }

    public static void main(String[] args) {
        int number = 39997;
        System.out.println(reverse_number(number));
    }
}",108
"class
BinarySearch 
{ 







static
int
countRotations(
int
arr[], 
int
low, 

int
high) 

{ 







if
(high < low) 

return
0
; 




if
(high == low) 

return
low; 






int
mid = low + (high - low)/
2
; 








if
(mid < high && arr[mid+
1
] < arr[mid]) 

return
(mid + 
1
); 




if
(mid > low && arr[mid] < arr[mid - 
1
]) 

return
mid; 






if
(arr[high] > arr[mid]) 

return
countRotations(arr, low, mid - 
1
); 


return
countRotations(arr, mid + 
1
, high); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
15
, 
18
, 
2
, 
3
, 
6
, 
12
}; 

int
n = arr.length; 


System.out.println(countRotations(arr, 
0
, n-
1
)); 

} 
}","class BinarySearch { static int countRotations(int[] arr, int low, int high) { if (high < low) return 0; if (high == low) return low; int mid = low + (high - low)/2; if (mid < high && arr[mid+1] < arr[mid]) return (mid + 1); if (mid > low && arr[mid] < arr[mid - 1]) return mid; if (arr[high] > arr[mid]) return countRotations(arr, low, mid - 1); return countRotations(arr, mid + 1, high); } public static void main(String[] args) { int[] arr = {15, 18, 2, 3, 6, 12}; int n = arr.length; System.out.println(countRotations(arr, 0, n-1)); } }",109
"class
Minimum 
{ 

static
int
findMin(
int
arr[], 
int
low, 
int
high) 

{ 





if
(high < low) 
return
arr[
0
]; 




if
(high == low) 
return
arr[low]; 




int
mid = low + (high - low)/
2
; 







if
(mid < high && arr[mid+
1
] < arr[mid]) 

return
arr[mid+
1
]; 




if
(mid > low && arr[mid] < arr[mid - 
1
]) 

return
arr[mid]; 




if
(arr[high] > arr[mid]) 

return
findMin(arr, low, mid-
1
); 

return
findMin(arr, mid+
1
, high); 

} 




public
static
void
main (String[] args) 

{ 

int
arr1[] = {
5
, 
6
, 
1
, 
2
, 
3
, 
4
}; 

int
n1 = arr1.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr1, 
0
, n1-
1
)); 


int
arr2[] = {
1
, 
2
, 
3
, 
4
}; 

int
n2 = arr2.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr2, 
0
, n2-
1
)); 


int
arr3[] = {
1
}; 

int
n3 = arr3.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr3, 
0
, n3-
1
)); 


int
arr4[] = {
1
, 
2
}; 

int
n4 = arr4.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr4, 
0
, n4-
1
)); 


int
arr5[] = {
2
, 
1
}; 

int
n5 = arr5.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr5, 
0
, n5-
1
)); 


int
arr6[] = {
5
, 
6
, 
7
, 
1
, 
2
, 
3
, 
4
}; 

int
n6 = arr6.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr6, 
0
, n6-
1
)); 


int
arr7[] = {
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
}; 

int
n7 = arr7.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr7, 
0
, n7-
1
)); 


int
arr8[] = {
2
, 
3
, 
4
, 
5
, 
6
, 
7
, 
8
, 
1
}; 

int
n8 = arr8.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr8, 
0
, n8-
1
)); 


int
arr9[] = {
3
, 
4
, 
5
, 
1
, 
2
}; 

int
n9 = arr9.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr9, 
0
, n9-
1
)); 

} 
}",ERROR,110
"class
BinarySearch { 





int
binarySearch(
int
arr[], 
int
l, 
int
r, 
int
x) 

{ 

if
(r >= l) { 

int
mid = l + (r - l) / 
2
; 






if
(arr[mid] == x) 

return
mid; 






if
(arr[mid] > x) 

return
binarySearch(arr, l, mid - 
1
, x); 






return
binarySearch(arr, mid + 
1
, r, x); 

} 






return
-
1
; 

} 




public
static
void
main(String args[]) 

{ 

BinarySearch ob = 
new
BinarySearch(); 

int
arr[] = { 
2
, 
3
, 
4
, 
10
, 
40
}; 

int
n = arr.length; 

int
x = 
10
; 

int
result = ob.binarySearch(arr, 
0
, n - 
1
, x); 

if
(result == -
1
) 

System.out.println(
""Element not present""
); 

else

System.out.println(
""Element found at index ""
+ result); 

} 
}","public class BinarySearch { public int binarySearch(int[] arr, int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } return -1; } public static void main(String args[]) { BinarySearch ob = new BinarySearch(); int arr[] = { 2, 3, 4, 10, 40}; int n = arr.length; int x = 10; int result = ob.binarySearch(arr, 0, n - 1, x); if (result == -1) System.out.println(""Element not present""); else System.out.println(""Element found at index "" + result); } }",111
"class
BinarySearch { 





int
binarySearch(
int
arr[], 
int
x) 

{ 

int
l = 
0
, r = arr.length - 
1
; 

while
(l <= r) { 

int
m = l + (r - l) / 
2
; 




if
(arr[m] == x) 

return
m; 




if
(arr[m] < x) 

l = m + 
1
; 




else

r = m - 
1
; 

} 






return
-
1
; 

} 




public
static
void
main(String args[]) 

{ 

BinarySearch ob = 
new
BinarySearch(); 

int
arr[] = { 
2
, 
3
, 
4
, 
10
, 
40
}; 

int
n = arr.length; 

int
x = 
10
; 

int
result = ob.binarySearch(arr, x); 

if
(result == -
1
) 

System.out.println(
""Element not present""
); 

else

System.out.println(
""Element found at ""

+ 
""index ""
+ result); 

} 
}","class BinarySearch { int binarySearch(int arr[], int x) { int l = 0, r = arr.length - 1; while (l <= r) { int m = l + (r - l) / 2; if (arr[m] == x) return m; if (arr[m] < x) l = m + 1; else r = m - 1; } return -1; } public static void main(String args[]) { BinarySearch ob = new BinarySearch(); int arr[] = {2, 3, 4, 10, 40}; int n = arr.length; int x = 10; int result = ob.binarySearch(arr, x); if (result == -1) System.out.println(""Element not present""); else System.out.println(""Element found at "" + ""index "" + result); } }",112
"class
Binary 
{ 

public
static
int
f(
int
x) 

{ 
return
(x*x - 
10
*x - 
20
); } 








public
static
int
findFirstPositive() 

{ 



if
(f(
0
) > 
0
) 

return
0
; 






int
i = 
1
; 

while
(f(i) <= 
0
) 

i = i * 
2
; 




return
binarySearch(i / 
2
, i); 

} 






public
static
int
binarySearch(
int
low, 
int
high) 

{ 

if
(high >= low) 

{ 



int
mid = low + (high - low)/
2
; 












if
(f(mid) > 
0
&& (mid == low || f(mid-
1
) <= 
0
)) 

return
mid; 




if
(f(mid) <= 
0
) 

return
binarySearch((mid + 
1
), high); 

else


return
binarySearch(low, (mid -
1
)); 

} 




return
-
1
; 

} 




public
static
void
main(String[] args) 

{ 

System.out.print (
""The value n where f() ""
+ 

""becomes positive first is ""
+ 

findFirstPositive()); 

} 
}","class Binary { public static int f(int x) { return (x * x - 10 * x - 20); } public static int findFirstPositive() { if (f(0) > 0) return 0; int i = 1; while (f(i) <= 0) i = i * 2; return binarySearch(i / 2, i); } public static int binarySearch(int low, int high) { if (high >= low) { int mid = low + (high - low) / 2; if (f(mid) > 0 && (mid == low || f(mid - 1) <= 0)) return mid; if (f(mid) <= 0) return binarySearch((mid + 1), high); else return binarySearch(low, (mid - 1)); } return -1; } public static void main(String[] args) { System.out.print (""The value n where f() "" + ""becomes positive first is "" + findFirstPositive()); } }",113
"class
Main 
{ 




static
int
pivotedBinarySearch(
int
arr[], 
int
n, 
int
key) 

{ 

int
pivot = findPivot(arr, 
0
, n-
1
); 






if
(pivot == -
1
) 

return
binarySearch(arr, 
0
, n-
1
, key); 








if
(arr[pivot] == key) 

return
pivot; 

if
(arr[
0
] <= key) 

return
binarySearch(arr, 
0
, pivot-
1
, key); 

return
binarySearch(arr, pivot+
1
, n-
1
, key); 

} 




static
int
findPivot(
int
arr[], 
int
low, 
int
high) 

{ 



if
(high < low) 

return
-
1
; 

if
(high == low) 

return
low; 




int
mid = (low + high)/
2
; 

if
(mid < high && arr[mid] > arr[mid + 
1
]) 

return
mid; 

if
(mid > low && arr[mid] < arr[mid - 
1
]) 

return
(mid-
1
); 

if
(arr[low] >= arr[mid]) 

return
findPivot(arr, low, mid-
1
); 

return
findPivot(arr, mid + 
1
, high); 

} 




static
int
binarySearch(
int
arr[], 
int
low, 
int
high, 
int
key) 

{ 

if
(high < low) 

return
-
1
; 




int
mid = (low + high)/
2
; 

if
(key == arr[mid]) 

return
mid; 

if
(key > arr[mid]) 

return
binarySearch(arr, (mid + 
1
), high, key); 

return
binarySearch(arr, low, (mid -
1
), key); 

} 




public
static
void
main(String args[]) 

{ 



int
arr1[] = {
5
, 
6
, 
7
, 
8
, 
9
, 
10
, 
1
, 
2
, 
3
}; 

int
n = arr1.length; 

int
key = 
3
; 

System.out.println(
""Index of the element is : ""

+ pivotedBinarySearch(arr1, n, key)); 

} 
}","class Main { static int pivotedBinarySearch(int arr[], int n, int key) { int pivot = findPivot(arr, 0, n-1); if (pivot == -1) return binarySearch(arr, 0, n-1, key); if (arr[pivot] == key) return pivot; if (arr[0] <= key) return binarySearch(arr, 0, pivot-1, key); return binarySearch(arr, pivot+1, n-1, key); } static int findPivot(int arr[], int low, int high) { if (high < low) return -1; if (high == low) return low; int mid = (low + high)/2; if (mid < high && arr[mid] > arr[mid + 1]) return mid; if (mid > low && arr[mid] < arr[mid - 1]) return (mid-1); if (arr[low] >= arr[mid]) return findPivot(arr, low, mid-1); return findPivot(arr, mid + 1, high); } static int binarySearch(int arr[], int low, int high, int key) { if (high < low) return -1; int mid = (low + high)/2; if (key == arr[mid]) return mid; if (key > arr[mid]) return binarySearch(arr, (mid + 1), high, key); return binarySearch(arr, low, (mid -1), key); } public static void main(String args[]) { int arr1[] = {5, 6, 7, 8, 9, 10, 1, 2, 3}; int n = arr1.length; int key = 3; System.out.println(",114
"class
GfG { 


static
int
getMedian(
int
ar1[], 
int
ar2[], 
int
n) 
{ 



if
(n <= 
0
) 

return
-
1
; 

if
(n == 
1
) 

return
(ar1[
0
] + ar2[
0
]) / 
2
; 

if
(n == 
2
) 

return
(Math.max(ar1[
0
], ar2[
0
]) + Math.min(ar1[
1
], ar2[
1
])) / 
2
; 




int
m1 = median(ar1, n); 




int
m2 = median(ar2, n); 




if
(m1 == m2) 

return
m1; 




if
(m1 < m2) 

{ 

if
(n % 
2
== 
0
) 

return
getMedian(ar1 + n / 
2
- 
1
, ar2, n - n / 
2
+ 
1
); 

return
getMedian(ar1 + n / 
2
, ar2, n - n / 
2
); 

} 




if
(n % 
2
== 
0
) 

return
getMedian(ar2 + n / 
2
- 
1
, ar1, n - n / 
2
+ 
1
); 

return
getMedian(ar2 + n / 
2
, ar1, n - n / 
2
); 
} 


static
int
median(
int
arr[], 
int
n) 
{ 

if
(n % 
2
== 
0
) 

return
(arr[n / 
2
] + arr[n / 
2
- 
1
]) / 
2
; 

else

return
arr[n / 
2
]; 
} 


public
static
void
main(String[] args) 
{ 

int
ar1[] = {
1
, 
2
, 
3
, 
6
}; 

int
ar2[] = {
4
, 
6
, 
8
, 
10
}; 

int
n1 = ar1.length; 

int
n2 = ar2.length; 

if
(n1 == n2) 

System.out.println(
""Median is ""
+ getMedian(ar1, ar2, n1)); 

else

System.out.println(
""Doesn't work for arrays ""
+ 
""of unequal size""
); 
} 
}","class GfG { static int getMedian(int[] ar1, int[] ar2, int n) { if (n <= 0) return -1; if (n == 1) return (ar1[0] + ar2[0]) / 2; if (n == 2) return (Math.max(ar1[0], ar2[0]) + Math.min(ar1[1], ar2[1])) / 2; int m1 = median(ar1, n); int m2 = median(ar2, n); if (m1 == m2) return m1; if (m1 < m2) { if (n % 2 == 0) return getMedian(searchArray(ar1, n / 2 - 1), ar2, n - n / 2 + 1); return getMedian(searchArray(ar1, n / 2), ar2, n - n / 2); } if (n % 2 == 0) return getMedian(searchArray(ar2, n / 2 - 1), ar1, n - n / 2 + 1); return getMedian(searchArray(ar2, n / 2), ar1, n - n / 2); } static int median(int[] arr, int n) { if (n % 2 == 0) return (arr[n / 2] + arr[n / 2 - 1]) / 2; else return arr[n / 2]; } public static void main(String[] args) { int ar1[] = {1, 2, 3, 6}; int ar2[] = {4, 6, 8, 10}; int n1 = ar1.length; int n2 = ar2.length; if (n1 == n2) System.out.println(",115
"class
Main 
{ 



static
int
ceilSearch(
int
arr[], 
int
low, 
int
high, 
int
x) 

{ 

int
mid; 




if
(x <= arr[low]) 

return
low; 




if
(x > arr[high]) 

return
-
1
; 




mid = (low + high)/
2
; 





if
(arr[mid] == x) 

return
mid; 




else
if
(arr[mid] < x) 

{ 

if
(mid + 
1
<= high && x <= arr[mid+
1
]) 

return
mid + 
1
; 

else

return
ceilSearch(arr, mid+
1
, high, x); 

} 




else

{ 

if
(mid - 
1
>= low && x > arr[mid-
1
]) 

return
mid; 

else

return
ceilSearch(arr, low, mid - 
1
, x); 

} 

} 





public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
2
, 
8
, 
10
, 
10
, 
12
, 
19
}; 

int
n = arr.length; 

int
x = 
8
; 

int
index = ceilSearch(arr, 
0
, n-
1
, x); 

if
(index == -
1
) 

System.out.println(
""Ceiling of ""
+x+
"" doesn't exist in array""
); 

else

System.out.println(
""ceiling of ""
+x+
"" is ""
+arr[index]); 

} 
}","class Main { static int ceilSearch(int arr[], int low, int high, int x) { int mid; if (x <= arr[low]) return low; if (x > arr[high]) return -1; mid = (low + high) / 2; if (arr[mid] == x) return mid; else if (arr[mid] < x) { if (mid + 1 <= high && x <= arr[mid+1]) return mid + 1; else return ceilSearch(arr, mid+1, high, x); } else { if (mid - 1 >= low && x > arr[mid-1]) return mid; else return ceilSearch(arr, low, mid - 1, x); } } public static void main(String[] args) { int arr[] = { 1, 2, 8, 10, 10, 12, 19 }; int n = arr.length; int x = 8; int index = ceilSearch(arr, 0, n-1, x); if (index == -1) System.out.println(""Ceiling of "" + x + "" doesn't exist in array""); else System.out.println(""ceiling of "" + x + "" is "" + arr[index]); } }",116
"class
GFG 
{ 










static
int
binarySearch(
int
arr[], 
int
l, 

int
r, 
int
x) 

{ 

if
(r < l) 

return
-
1
; 


int
mid = l + (r - l) / 
2
; 






if
(arr[mid] == x) 

return
mid; 








if
(arr[mid] > x) 

return
binarySearch(arr, l, 

mid - 
1
, x); 








return
binarySearch(arr, mid + 
1
, r, x); 

} 






static
int
countOccurrences(
int
arr[], 

int
n, 
int
x) 

{ 

int
ind = binarySearch(arr, 
0
, 

n - 
1
, x); 




if
(ind == -
1
) 

return
0
; 




int
count = 
1
; 

int
left = ind - 
1
; 

while
(left >= 
0
&& 

arr[left] == x) 

{ 

count++; 

left--; 

} 






int
right = ind + 
1
; 

while
(right < n && 

arr[right] == x) 

{ 

count++; 

right++; 

} 


return
count; 

} 





public
static
void
main(String[] args) 

{ 

int
arr[] = {
1
, 
2
, 
2
, 
2
, 
2
, 

3
, 
4
, 
7
, 
8
, 
8
}; 

int
n = arr.length; 

int
x = 
2
; 

System.out.print(countOccurrences(arr, n, x)); 

} 
}","class GFG { static int binarySearch(int arr[], int l, int r, int x) { if (r < l) return -1; int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (arr[mid] > x) return binarySearch(arr, l, mid - 1, x); return binarySearch(arr, mid + 1, r, x); } static int countOccurrences(int arr[], int n, int x) { int ind = binarySearch(arr, 0, n - 1, x); if (ind == -1) return 0; int count = 1; int left = ind - 1; while (left >= 0 && arr[left] == x) { count++; left--; } int right = ind + 1; while (right < n && arr[right] == x) { count++; right++; } return count; } public static void main(String[] args) { int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 }; int n = arr.length; int x = 2; System.out.print(countOccurrences(arr, n, x)); } }",117
"class
Main 
{ 

static
int
binarySearch(
int
arr[], 
int
low, 
int
high) 

{ 

if
(high >= low) 

{ 



int
mid = (low + high)/
2
; 

if
(mid == arr[mid]) 

return
mid; 

if
(mid > arr[mid]) 

return
binarySearch(arr, (mid + 
1
), high); 

else

return
binarySearch(arr, low, (mid -
1
)); 

} 




return
-
1
; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = {-
10
, -
1
, 
0
, 
3
, 
10
, 
11
, 
30
, 
50
, 
100
}; 

int
n = arr.length; 

System.out.println(
""Fixed Point is ""

+ binarySearch(arr,
0
, n-
1
)); 

} 
}","class Main { static int binarySearch(int arr[], int low, int high) { if (high >= low) { int mid = (low + high) / 2; if (mid == arr[mid]) return mid; if (mid > arr[mid]) return binarySearch(arr, (mid + 1), high); else return binarySearch(arr, low, (mid - 1)); } return -1; } public static void main(String args[]) { int arr[] = {-10, -1, 0, 3, 10, 11, 30, 50, 100}; int n = arr.length; System.out.println(""Fixed Point is "" + binarySearch(arr, 0, n-1)); } }",118
"class
Main 
{ 





static
int
findMaximum(
int
arr[], 
int
low, 
int
high) 

{ 




if
(low == high) 

return
arr[low]; 




if
((high == low + 
1
) && arr[low] >= arr[high]) 

return
arr[low]; 




if
((high == low + 
1
) && arr[low] < arr[high]) 

return
arr[high]; 




int
mid = (low + high)/
2
; 




if
( arr[mid] > arr[mid + 
1
] && arr[mid] > arr[mid - 
1
]) 

return
arr[mid]; 




if
(arr[mid] > arr[mid + 
1
] && arr[mid] < arr[mid - 
1
]) 

return
findMaximum(arr, low, mid-
1
); 

else

return
findMaximum(arr, mid + 
1
, high); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
3
, 
50
, 
10
, 
9
, 
7
, 
6
}; 

int
n = arr.length; 

System.out.println(
""The maximum element is ""
+ 

findMaximum(arr, 
0
, n-
1
)); 

} 
}","class Main { static int findMaximum(int arr[], int low, int high) { if (low == high) return arr[low]; if ((high == low + 1) && arr[low] >= arr[high]) return arr[low]; if ((high == low + 1) && arr[low] < arr[high]) return arr[high]; int mid = (low + high) / 2; if (arr[mid] > arr[mid + 1] && arr[mid] > arr[mid - 1]) return arr[mid]; if (arr[mid] > arr[mid + 1] && arr[mid] < arr[mid - 1]) return findMaximum(arr, low, mid - 1); else return findMaximum(arr, mid + 1, high); } public static void main(String[] args) { int arr[] = { 1, 3, 50, 10, 9, 7, 6 }; int n = arr.length; System.out.println(""The maximum element is "" + findMaximum(arr, 0, n - 1)); } }",119
"class
PeakElement 
{ 





static
int
findPeakUtil(
int
arr[], 
int
low, 
int
high, 
int
n) 

{ 



int
mid = low + (high - low)/
2
; 







if
((mid == 
0
|| arr[mid-
1
] <= arr[mid]) && (mid == n-
1
|| 

arr[mid+
1
] <= arr[mid])) 

return
mid; 






else
if
(mid > 
0
&& arr[mid-
1
] > arr[mid]) 

return
findPeakUtil(arr, low, (mid -
1
), n); 








else
return
findPeakUtil(arr, (mid + 
1
), high, n); 

} 




static
int
findPeak(
int
arr[], 
int
n) 

{ 

return
findPeakUtil(arr, 
0
, n-
1
, n); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
3
, 
20
, 
4
, 
1
, 
0
}; 

int
n = arr.length; 

System.out.println(
""Index of a peak point is ""
+ 

findPeak(arr, n)); 

} 
}","class PeakElement { static int findPeakUtil(int arr[], int low, int high, int n) { int mid = low + (high - low)/2; if ((mid == 0 || arr[mid-1] <= arr[mid]) && (mid == n-1 || arr[mid+1] <= arr[mid])) return mid; else if (mid > 0 && arr[mid-1] > arr[mid]) return findPeakUtil(arr, low, (mid - 1), n); else return findPeakUtil(arr, (mid + 1), high, n); } static int findPeak(int arr[], int n) { return findPeakUtil(arr, 0, n-1, n); } public static void main (String[] args) { int arr[] = {1, 3, 20, 4, 1, 0}; int n = arr.length; System.out.println(""Index of a peak point is ""+ findPeak(arr, n)); } }",120
"class
Minimum 
{ 

static
int
findMin(
int
arr[], 
int
low, 
int
high) 

{ 





if
(high < low) 
return
arr[
0
]; 




if
(high == low) 
return
arr[low]; 




int
mid = low + (high - low)/
2
; 







if
(mid < high && arr[mid+
1
] < arr[mid]) 

return
arr[mid+
1
]; 




if
(mid > low && arr[mid] < arr[mid - 
1
]) 

return
arr[mid]; 




if
(arr[high] > arr[mid]) 

return
findMin(arr, low, mid-
1
); 

return
findMin(arr, mid+
1
, high); 

} 




public
static
void
main (String[] args) 

{ 

int
arr1[] = {
5
, 
6
, 
1
, 
2
, 
3
, 
4
}; 

int
n1 = arr1.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr1, 
0
, n1-
1
)); 


int
arr2[] = {
1
, 
2
, 
3
, 
4
}; 

int
n2 = arr2.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr2, 
0
, n2-
1
)); 


int
arr3[] = {
1
}; 

int
n3 = arr3.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr3, 
0
, n3-
1
)); 


int
arr4[] = {
1
, 
2
}; 

int
n4 = arr4.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr4, 
0
, n4-
1
)); 


int
arr5[] = {
2
, 
1
}; 

int
n5 = arr5.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr5, 
0
, n5-
1
)); 


int
arr6[] = {
5
, 
6
, 
7
, 
1
, 
2
, 
3
, 
4
}; 

int
n6 = arr6.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr6, 
0
, n6-
1
)); 


int
arr7[] = {
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
}; 

int
n7 = arr7.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr7, 
0
, n7-
1
)); 


int
arr8[] = {
2
, 
3
, 
4
, 
5
, 
6
, 
7
, 
8
, 
1
}; 

int
n8 = arr8.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr8, 
0
, n8-
1
)); 


int
arr9[] = {
3
, 
4
, 
5
, 
1
, 
2
}; 

int
n9 = arr9.length; 

System.out.println(
""The minimum element is ""
+ findMin(arr9, 
0
, n9-
1
)); 

} 
}","class Minimum { static int findMin(int arr[], int low, int high) { if (high < low) return arr[0]; if (high == low) return arr[low]; int mid = low + (high - low)/2; if (mid < high && arr[mid+1] < arr[mid]) return arr[mid+1]; if (mid > low && arr[mid] < arr[mid - 1]) return arr[mid]; if (arr[high] > arr[mid]) return findMin(arr, low, mid-1); return findMin(arr, mid+1, high); } public static void main (String[] args) { int arr1[] = {5, 6, 1, 2, 3, 4}; int n1 = arr1.length; System.out.println(""The minimum element is ""+ findMin(arr1, 0, n1-1)); int arr2[] = {1, 2, 3, 4}; int n2 = arr2.length; System.out.println(""The minimum element is ""+ findMin(arr2, 0, n2-1)); int arr3[] = {1}; int n3 = arr3.length; System.out.println(""The minimum element is ""+ findMin(arr3, 0, n3-1)); int arr4[] = {1, 2}; int n4 = arr4.length; System.out.println(""The minimum element is ""+ findMin(arr4, 0, n4-1)); int arr5[] = {2, 1}; int n5 = arr5.length; System.out.println(""The minimum element is ""+ findMin(arr5, 0, n5-1)); int arr6[] = {5, 6, 7, 1, 2, 3, 4}; int n6 = arr6.length; System.out.println(""The minimum element is ""+ findMin(arr6, 0, n6-1)); int arr7[] = {1, 2, 3, 4, 5, 6, 7}; int n7 = arr7.length; System.out.println(""The minimum element is ""+ findMin(arr7, 0, n7-1)); int arr8[] = {2, 3, 4, 5, 6, 7, 8, 1}; int n8 = arr8.length; System.out.println(""The minimum element is ""+ findMin(arr8, 0, n8-1)); int arr9[] = {3, 4, 5, 1, 2}; int n9 = arr9.length; System.out.println(""The minimum element is ""+ findMin(arr9, 0, n9-1)); } }",121
"class
GFG 
{ 







int
binarySearch(
int
arr[], 
int
l, 
int
r, 
int
x) 

{ 

if
(r >= l) 

{ 

int
mid = l + (r - l) / 
2
; 






if
(arr[mid] == x) 

return
mid; 

if
(mid > l && arr[mid - 
1
] == x) 

return
(mid - 
1
); 

if
(mid < r && arr[mid + 
1
] == x) 

return
(mid + 
1
); 






if
(arr[mid] > x) 

return
binarySearch(arr, l, mid - 
2
, x); 






return
binarySearch(arr, mid + 
2
, r, x); 

} 






return
-
1
; 

} 




public
static
void
main(String args[]) 

{ 

GFG ob = 
new
GFG(); 

int
arr[] = {
3
, 
2
, 
10
, 
4
, 
40
}; 

int
n = arr.length; 

int
x = 
4
; 

int
result = ob.binarySearch(arr, 
0
, n - 
1
, x); 

if
(result == -
1
) 

System.out.println(
""Element is not present in array""
); 

else

System.out.println(
""Element is present at index ""
+ 

result); 

} 
}","class GFG { public static void main(String args[]) { GFG ob = new GFG(); int arr[] = {3, 2, 10, 4, 40}; int n = arr.length; int x = 4; int result = ob.binarySearch(arr, 0, n - 1, x); if(result == -1) System.out.println(""Element is not present in array""); else System.out.println(""Element is present at index "" + result); } int binarySearch(int arr[], int l, int r, int x) { if (r >= l) { int mid = l + (r - l) / 2; if (arr[mid] == x) return mid; if (mid > l && arr[mid - 1] == x) return (mid - 1); if (mid < r && arr[mid + 1] == x) return (mid + 1); if (arr[mid] > x) return binarySearch(arr, l, mid - 2, x); return binarySearch(arr, mid + 2, r, x); } return -1; } }",122
"class
CountOnes 
{ 



int
countOnes(
int
arr[], 
int
low, 
int
high) 

{ 

if
(high >= low) 

{ 



int
mid = low + (high - low)/
2
; 




if
( (mid == high || arr[mid+
1
] == 
0
) && 

(arr[mid] == 
1
)) 

return
mid+
1
; 




if
(arr[mid] == 
1
) 

return
countOnes(arr, (mid + 
1
), high); 




return
countOnes(arr, low, (mid -
1
)); 

} 

return
0
; 

} 




public
static
void
main(String args[]) 

{ 

CountOnes ob = 
new
CountOnes(); 

int
arr[] = {
1
, 
1
, 
1
, 
1
, 
0
, 
0
, 
0
}; 

int
n = arr.length; 

System.out.println(
""Count of 1's in given array is ""
+ 

ob.countOnes(arr, 
0
, n-
1
) ); 

} 
}","class CountOnes {
    int countOnes(int arr[], int low, int high) {
        if (high >= low) {
            int mid = low + (high - low) / 2;
            if ((mid == high || arr[mid + 1] == 0) && (arr[mid] == 1))
                return mid + 1;
            if (arr[mid] == 1)
                return countOnes(arr, (mid + 1), high);
            return countOnes(arr, low, (mid - 1));
        }
        return 0;
    }

    public static void main(String args[]) {
        CountOnes ob = new CountOnes();
        int arr[] = {1, 1, 1, 1, 0, 0, 0};
        int n = arr.length;
        System.out.println(""Count of 1's in given array is "" + ob.countOnes(arr, 0, n - 1));
    }
}",123
"class
SmallestMissing 
{ 

int
findFirstMissing(
int
array[], 
int
start, 
int
end) 

{ 

if
(start > end) 

return
end + 
1
; 


if
(start != array[start]) 

return
start; 


int
mid = (start + end) / 
2
; 




if
(array[mid] == mid) 

return
findFirstMissing(array, mid+
1
, end); 


return
findFirstMissing(array, start, mid); 

} 




public
static
void
main(String[] args) 

{ 

SmallestMissing small = 
new
SmallestMissing(); 

int
arr[] = {
0
, 
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
, 
10
}; 

int
n = arr.length; 

System.out.println(
""First Missing element is : ""

+ small.findFirstMissing(arr, 
0
, n - 
1
)); 

} 
}","class SmallestMissing { int findFirstMissing(int[] array, int start, int end) { if (start > end) return end + 1; if (start != array[start]) return start; int mid = (start + end) / 2; if (array[mid] == mid) return findFirstMissing(array, mid+1, end); return findFirstMissing(array, start, mid); } public static void main(String[] args) { SmallestMissing small = new SmallestMissing(); int arr[] = {0, 1, 2, 3, 4, 5, 6, 7, 10}; int n = arr.length; System.out.println(""First Missing element is : "" + small.findFirstMissing(arr, 0, n - 1)); } }",124
"class
Main 
{ 



static
int
count(
int
arr[], 
int
x, 
int
n) 

{ 



int
i; 




int
j; 




i = first(arr, 
0
, n-
1
, x, n); 




if
(i == -
1
) 

return
i; 




j = last(arr, i, n-
1
, x, n); 




return
j-i+
1
; 

} 




static
int
first(
int
arr[], 
int
low, 
int
high, 
int
x, 
int
n) 

{ 

if
(high >= low) 

{ 



int
mid = (low + high)/
2
; 

if
( ( mid == 
0
|| x > arr[mid-
1
]) && arr[mid] == x) 

return
mid; 

else
if
(x > arr[mid]) 

return
first(arr, (mid + 
1
), high, x, n); 

else

return
first(arr, low, (mid -
1
), x, n); 

} 

return
-
1
; 

} 




static
int
last(
int
arr[], 
int
low, 
int
high, 
int
x, 
int
n) 

{ 

if
(high >= low) 

{ 



int
mid = (low + high)/
2
; 

if
( ( mid == n-
1
|| x < arr[mid+
1
]) && arr[mid] == x ) 

return
mid; 

else
if
(x < arr[mid]) 

return
last(arr, low, (mid -
1
), x, n); 

else

return
last(arr, (mid + 
1
), high, x, n); 

} 

return
-
1
; 

} 


public
static
void
main(String args[]) 

{ 

int
arr[] = {
1
, 
2
, 
2
, 
3
, 
3
, 
3
, 
3
}; 




int
x = 
3
; 

int
n = arr.length; 

int
c = count(arr, x, n); 

System.out.println(x+
"" occurs ""
+c+
"" times""
); 

} 
}","class Main { static int count(int arr[], int x, int n) { int i; int j; i = first(arr, 0 , n-1, x, n); if(i == -1) return i; j = last(arr, i, n-1, x, n); return j-i+1; } static int first(int arr[], int low, int high, int x, int n) { if(high >= low) { int mid = (low + high)/2; if((mid == 0 || x > arr[mid-1]) && arr[mid] == x) return mid; else if(x > arr[mid]) return first(arr, (mid + 1), high, x, n); else return first(arr, low, (mid -1), x, n); } return -1; } static int last(int arr[], int low, int high, int x, int n) { if(high >= low) { int mid = (low + high)/2; if((mid == n-1 || x < arr[mid+1]) && arr[mid] == x) return mid; else if(x < arr[mid]) return last(arr, low, (mid -1), x, n); else return last(arr, (mid + 1), high, x, n); } return -1; } public static void main(String args[]) { int arr[] = {1, 2, 2, 3, 3, 3, 3}; int x = 3; int n = arr.length; int c = count(arr, x, n); System.out.println(x+"" occurs ""+c+"" times""); } }",125
"public class A1180 {

    public static void main(String[] args) throws FileNotFoundException 
    { 
		Scanner scan = new Scanner(System.in);
		int n = scan.nextInt();
		int layers = n-1;
		int counter =0;
		for(int i =1 ;i < layers + 1 ; i ++) {
			counter += i ;
		}
		
		System.out.println(1 + counter*4);
    } 
}","public class A1180 {

    public static void main(String[] args) throws FileNotFoundException 
    { 
		Scanner scan = new Scanner(System.in);
		int n = scan.nextInt();
		int layers = n-1;
		int counter =0;
		int i =1 ;
		while (i < layers + 1 ) {
			counter += i ;
			i++;
		}
		
		System.out.println(1 + counter*4);
    } 
}",126
"public class round569d2b {

	public static void main(String args[]) {
		FastScanner in = new FastScanner(System.in);
		
		int n = in.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = in.nextInt();
		}
		if (n % 2 == 0) {
			for (int i = 0; i < n; i++) {
				if (arr[i] >= 0) {
					arr[i] = -1*arr[i]-1;
				}
			}
		}
		else {
			int max = Integer.MIN_VALUE;
			int maxIndex = 0;
			for (int i = 0; i < n; i++) {
				int elem = arr[i];
				if (elem < 0) {
					elem = -1*elem-1;
				}
				if (elem > max) {
					max = elem;
					maxIndex = i;
				}
			}
			for (int i = 0; i < n; i++) {
				if (i == maxIndex) {
					if (arr[i] < 0) {
						arr[i] = -1*arr[i]-1;
					}
				}
				else {
					if (arr[i] >= 0) {
						arr[i] = -1*arr[i]-1;
					}
				}
			}
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < n ;i++) {
			sb.append(arr[i] + "" "");
			
		}
		System.out.println(sb);

	}

	
	
	

	static int greatestDivisor(int n) {
		int limit = (int) Math.sqrt(n);
		int max = 1;
		for (int i = 2; i <= limit; i++) {
			if (n % i == 0) {
				max = Integer.max(max, i);
				max = Integer.max(max, n / i);
			}
		}
		return max;
	}

	
	
	static boolean[] sieveOfEratosthenes(int n) {
		
		
		
		boolean prime[] = new boolean[n + 1];
		for (int i = 0; i <= n; i++)
			prime[i] = true;

		prime[0] = false;
		prime[1] = false;

		for (int p = 2; p * p <= n; p++) {
			
			if (prime[p] == true) {
				
				for (int i = p * p; i <= n; i += p)
					prime[i] = false;
			}
		}

		return prime;
	}

	
	
	private static int bin_gteq(int[] a, int key) {
		int low = 0;
		int high = a.length;
		int max_limit = high;
		while (low < high) {
			int mid = low + (high - low) / 2;
			if (a[mid] < key) {
				low = mid + 1;
			} else
				high = mid;
		}

		return high == max_limit ? -1 : high;
	}

	public static int gcd(int a, int b) {
		if (a == 0)
			return b;

		return gcd(b % a, a);
	}

	static class Tuple<X, Y> {
		public final X x;
		public final Y y;

		public Tuple(X x, Y y) {
			this.x = x;
			this.y = y;
		}

		public String toString() {
			return ""("" + x + "","" + y + "")"";
		}
	}

	static class Tuple3<X, Y, Z> {
		public final X x;
		public final Y y;
		public final Z z;

		public Tuple3(X x, Y y, Z z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public String toString() {
			return ""("" + x + "","" + y + "","" + z + "")"";
		}
	}

	static Tuple3<Integer, Integer, Integer> gcdExtended(int a, int b, int x, int y) {
		
		if (a == 0) {
			x = 0;
			y = 1;
			return new Tuple3(0, 1, b);
		}

		int x1 = 1, y1 = 1; 
		Tuple3<Integer, Integer, Integer> tuple = gcdExtended(b % a, a, x1, y1);
		int gcd = tuple.z;
		x1 = tuple.x;
		y1 = tuple.y;

		
		
		x = y1 - (b / a) * x1;
		y = x1;

		return new Tuple3(x, y, gcd);
	}

	
	
	
	
	static int inv(int a, int m) {
		int m0 = m, t, q;
		int x0 = 0, x1 = 1;

		if (m == 1)
			return 0;

		
		while (a > 1) {
			
			q = a / m;

			t = m;

			
			
			m = a % m;
			a = t;

			t = x0;

			x0 = x1 - q * x0;

			x1 = t;
		}

		
		if (x1 < 0)
			x1 += m0;

		return x1;
	}

	
	
	
	
	
	
	
	
	
	static int findMinX(int num[], int rem[], int k) {
		
		int prod = 1;
		for (int i = 0; i < k; i++)
			prod *= num[i];

		
		int result = 0;

		
		for (int i = 0; i < k; i++) {
			int pp = prod / num[i];
			result += rem[i] * inv(pp, num[i]) * pp;
		}

		return result % prod;
	}

	
	static class FastScanner {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int chars;

		public FastScanner(InputStream stream) {
			this.stream = stream;
		}

		int read() {
			if (chars == -1)
				throw new InputMismatchException();
			if (curChar >= chars) {
				curChar = 0;
				try {
					chars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (chars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		boolean isEndline(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public double nextDouble() {
			return Double.parseDouble(next());
		}

		public String next() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public String nextLine() {
			int c = read();
			while (isEndline(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndline(c));
			return res.toString();
		}
	}

}",ERROR,127
"public class Main {
	
	static InputReader in = new InputReader(System.in);
	static PrintWriter out = new PrintWriter(System.out);

	static long oo = 1000000000000L;
	static int[][] memo;
	
	public static void main(String[] args) throws IOException {
 
		int n = in.nextInt();
		int[] a = in.nextIntArray(n);
		if(n % 2 == 0) {
			for(int i = 0; i < n; ++i) {
				if(a[i] >= 0)
					a[i] = -a[i] - 1;
			}
		}
		else {
			int maxi = -1, max = -1;
			for(int i = 0; i < n; ++i) {
				int x = a[i] >= 0 ? -a[i] - 1 : a[i];
				x = -x;
				if(x > max) {
					max = x; maxi = i;
				}
			}
			if(max == 1) {
				a[0] = 0;
			}
			else {
				for(int i = 0; i < n; ++i) {
					if(i == maxi) {
						if(a[i] < 0)
							a[i] = -a[i] - 1;
					}
					else {
						if(a[i] >= 0)
							a[i] = -a[i] - 1;
					}
				}
			}
		}
		for(int x : a)
			System.out.print(x + "" "");
		
		out.close();
	}
	
	
	
	static long lcm(long a, long b) {
		return a * b / gcd(a, b);
	}
	
	static boolean nextPermutation(int[] a) {
		for(int i = a.length - 2; i >= 0; --i) {
			if(a[i] < a[i+1]) {
				for(int j = a.length - 1; ; --j) {
					if(a[i] < a[j]) {
						int t = a[i];
						a[i] = a[j];
						a[j] = t;
						for(i++, j = a.length - 1; i < j; ++i, --j) {
							t = a[i];
							a[i] = a[j];
							a[j] = t;
						}
						return true;
					}
				}
			}
		}
		return false;
	}
	
	
	static void shuffle(int[] a) {
		Random r = new Random();
		for(int i = a.length - 1; i > 0; --i) {
			int si = r.nextInt(i);
			int t = a[si];
			a[si] = a[i];
			a[i] = t;
		}
	}
	
	static void shuffle(long[] a) {
		Random r = new Random();
		for(int i = a.length - 1; i > 0; --i) {
			int si = r.nextInt(i);
			long t = a[si];
			a[si] = a[i];
			a[i] = t;
		}
	}
	
	static int lower_bound(int[] a, int n, int k) {
		int s = 0;
		int e = n;
		int m;
		while (e - s > 0) {
			m = (s + e) / 2;
			if (a[m] < k)
				s = m + 1;
			else
				e = m;
		}
		return e;
	}
	static int lower_bound(long[] a, int n, long k) {
		int s = 0;
		int e = n;
		int m;
		while (e - s > 0) {
			m = (s + e) / 2;
			if (a[m] < k)
				s = m + 1;
			else
				e = m;
		}
		return e;
	}
	
	static int gcd(int a, int b) {
		return b == 0 ? a : gcd(b, a % b);
	}
	static long gcd(long a, long b) {
		return b == 0 ? a : gcd(b, a % b);
	}
	
	static class Pair implements Comparable<Pair> {
		int first, second;
 
		public Pair(int first, int second) {
			super();
			this.first = first;
			this.second = second;
		}
 
		@Override
		public int compareTo(Pair o) {
			return this.first != o.first ? this.first - o.first : this.second - o.second;
		}
 
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + first;
			result = prime * result + second;
			return result;
		}
 
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Pair other = (Pair) obj;
			if (first != other.first)
				return false;
			if (second != other.second)
				return false;
			return true;
		}
	}
	
	
}
 
 
 
class InputReader {
 
	private final InputStream stream;
	private final byte[] buf = new byte[8192];
	private int curChar, snumChars;
 
	public InputReader(InputStream st) {
		this.stream = st;
	}
 
	public int read() {
		if (snumChars == -1)
			throw new InputMismatchException();
		if (curChar >= snumChars) {
			curChar = 0;
			try {
				snumChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (snumChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}
 
	public int nextInt() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
 
	public long nextLong() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		long res = 0;
		do {
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
 
	public int[] nextIntArray(int n) {
		int a[] = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = nextInt();
		}
		return a;
	}
 
	public String readString() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}
 
	public String nextLine() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isEndOfLine(c));
		return res.toString();
	}
 
	public boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
 
	private boolean isEndOfLine(int c) {
		return c == '\n' || c == '\r' || c == -1;
	}
 
}","public class Main {
    
    static InputReader in = new InputReader(System.in);
    static PrintWriter out = new PrintWriter(System.out);

    static long oo = 1000000000000L;
    static int[][] memo;
    
    public static void main(String[] args) throws IOException {
 
        int n = in.nextInt();
        int[] a = in.nextIntArray(n);
        if(n % 2 == 0) {
            for(int i = 0; i < n; ++i) {
                if(a[i] >= 0)
                    a[i] = -a[i] - 1;
            }
        }
        else {
            int maxi = -1, max = -1;
            for(int i = 0; i < n; ++i) {
                int x = a[i] >= 0 ? -a[i] - 1 : a[i];
                x = -x;
                if(x > max) {
                    max = x; maxi = i;
                }
            }
            if(max == 1) {
                a[0] = 0;
            }
            else {
                for(int i = 0; i < n; ++i) {
                    if(i == maxi) {
                        if(a[i] < 0)
                            a[i] = -a[i] - 1;
                    }
                    else {
                        if(a[i] >= 0)
                            a[i] = -a[i] - 1;
                    }
                }
            }
        }
        for(int x : a)
            System.out.print(x + "" "");
        
        out.close();
    }
    
    
    
    static long lcm(long a, long b) {
        return a * b / gcd(a, b);
    }
    
    static boolean nextPermutation(int[] a) {
        for(int i = a.length - 2; i >= 0; --i) {
            if(a[i] < a[i+1]) {
                for(int j = a.length - 1; ; --j) {
                    if(a[i] < a[j]) {
                        int t = a[i];
                        a[i] = a[j];
                        a[j] = t;
                        for(i++, j = a.length - 1; i < j; ++i, --j) {
                            t = a[i];
                            a[i] = a[j];
                            a[j] = t;
                        }
                        return true;
                    }
                }
            }
        }
        return false;
    }
    
    static void shuffle(int[] a) {
        Random r = new Random();
        for(int i = a.length - 1; i > 0; --i) {
            int si = r.nextInt(i);
            int t = a[si];
            a[si] = a[i];
            a[i] = t;
        }
    }
    
    static void shuffle(long[] a) {
        Random r = new Random();
        for(int i = a.length - 1; i > 0; --i) {
            int si = r.nextInt(i);
            long t = a[si];
            a[si] = a[i];
            a[i] = t;
        }
    }
    
    static int lower_bound(int[] a, int n, int k) {
        int s = 0;
        int e = n;
        int m;
        while (e - s > 0) {
            m = (s + e) / 2;
            if (a[m] < k)
                s = m + 1;
            else
                e = m;
        }
        return e;
    }
    static int lower_bound(long[] a, int n, long k) {
        int s = 0;
        int e = n;
        int m;
        while (e - s > 0) {
            m = (s + e) / 2;
            if (a[m] < k)
                s = m + 1;
            else
                e = m;
        }
        return e;
    }
    
    static int gcd(int a, int b) {
        return b == 0 ? a : gcd(b, a % b);
    }
    static long gcd(long a, long b) {
        return b == 0 ? a : gcd(b, a % b);
    }
    
    static class Pair implements Comparable<Pair> {
        int first, second;
 
        public Pair(int first, int second) {
            super();
            this.first = first;
            this.second = second;
        }
 
        @Override
        public int compareTo(Pair o) {
            return this.first != o.first ? this.first - o.first : this.second - o.second;
        }
 
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + first;
            result = prime * result + second;
            return result;
        }
 
        @Override
        public boolean equals(Object obj) {
            if (this == obj)
                return true;
            if (obj == null)
                return false;
            if (getClass() != obj.getClass())
                return false;
            Pair other = (Pair) obj;
            if (first != other.first)
                return false;
            if (second != other.second)
                return false;
            return true;
        }
    }
    
    
}",128
"public class MyClass {
    public static void main(String args[]) {
        Scanner sc= new Scanner(System.in);
        int n=sc.nextInt();
        int [] a= new int[n];
        int k=0;
        int m=0;
        for (int i=0;i<n;i++){
            a[i]=sc.nextInt();
            if (a[i]>=0){
                a[i]=-a[i]-1;
            }
            if (a[i]<m){
                m=a[i];
                k=i;
            }
        }
        if (n%2==1){
            a[k]=-a[k]-1;
        }
        for (int i=0;i<n;i++){
            System.out.print(a[i]+"" "");
        }
    }
}","public class MyClass {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        int k = 0;
        int m = 0;
        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
            if (a[i] >= 0) {
                a[i] = -a[i] - 1;
            }
            if (a[i] < m) {
                m = a[i];
                k = i;
            }
        }
        if (n % 2 == 1) {
            a[k] = -a[k] - 1;
        }
        for (int i = 0; i < n; i++) {
            System.out.print(a[i] + "" "");
        }
    }
}",129
"public class round569d2c {

	public static void main(String args[]) {
		FastScanner in = new FastScanner(System.in);
		
		int n = in.nextInt();
		int q = in.nextInt();
		ArrayDeque<Integer> deq = new ArrayDeque<>();
		for (int i = 0; i < n; i++) {
			deq.addLast(in.nextInt());
		}
		long[] queries = new long[q];
		for (int i = 0; i < q; i++) {
			queries[i] = in.nextLong();
		}
		int[] origAs = new int[n-1];
		int[] origBs = new int[n-1];
		for (int i = 0; i < n-1; i++) {
			int a = deq.pollFirst();
			int b = deq.pollFirst();
			origAs[i] = a;
			origBs[i] = b;
			if (a > b) {
				deq.addFirst(a);
				deq.addLast(b);
			}
			else {
				deq.addFirst(b);
				deq.addLast(a);
			}
		}
		int[] repeatAs = new int[n-1];
		int[] repeatBs = new int[n-1];
		for (int i = 0; i < n-1; i++) {
			int a = deq.pollFirst();
			int b = deq.pollFirst();
			repeatAs[i] = a;
			repeatBs[i] = b;
			if (a > b) {
				deq.addFirst(a);
				deq.addLast(b);
			}
			else {
				deq.addFirst(b);
				deq.addLast(a);
			}
		}
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < q; i++) {
			long query = queries[i] - 1;
			if (query < n-1) {
				sb.append(origAs[(int)query] + "" "" + origBs[(int)query] + ""\n"");
			}
			else {
				query %= (n-1);
				sb.append(repeatAs[(int)query] + "" "" + repeatBs[(int)query] + ""\n"");
			}
		}
		System.out.println(sb);

	}

	
	
	

	static int greatestDivisor(int n) {
		int limit = (int) Math.sqrt(n);
		int max = 1;
		for (int i = 2; i <= limit; i++) {
			if (n % i == 0) {
				max = Integer.max(max, i);
				max = Integer.max(max, n / i);
			}
		}
		return max;
	}

	
	
	static boolean[] sieveOfEratosthenes(int n) {
		
		
		
		boolean prime[] = new boolean[n + 1];
		for (int i = 0; i <= n; i++)
			prime[i] = true;

		prime[0] = false;
		prime[1] = false;

		for (int p = 2; p * p <= n; p++) {
			
			if (prime[p] == true) {
				
				for (int i = p * p; i <= n; i += p)
					prime[i] = false;
			}
		}

		return prime;
	}

	
	
	private static int bin_gteq(int[] a, int key) {
		int low = 0;
		int high = a.length;
		int max_limit = high;
		while (low < high) {
			int mid = low + (high - low) / 2;
			if (a[mid] < key) {
				low = mid + 1;
			} else
				high = mid;
		}

		return high == max_limit ? -1 : high;
	}

	public static int gcd(int a, int b) {
		if (a == 0)
			return b;

		return gcd(b % a, a);
	}

	static class Tuple<X, Y> {
		public final X x;
		public final Y y;

		public Tuple(X x, Y y) {
			this.x = x;
			this.y = y;
		}

		public String toString() {
			return ""("" + x + "","" + y + "")"";
		}
	}

	static class Tuple3<X, Y, Z> {
		public final X x;
		public final Y y;
		public final Z z;

		public Tuple3(X x, Y y, Z z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public String toString() {
			return ""("" + x + "","" + y + "","" + z + "")"";
		}
	}

	static Tuple3<Integer, Integer, Integer> gcdExtended(int a, int b, int x, int y) {
		
		if (a == 0) {
			x = 0;
			y = 1;
			return new Tuple3(0, 1, b);
		}

		int x1 = 1, y1 = 1; 
		Tuple3<Integer, Integer, Integer> tuple = gcdExtended(b % a, a, x1, y1);
		int gcd = tuple.z;
		x1 = tuple.x;
		y1 = tuple.y;

		
		
		x = y1 - (b / a) * x1;
		y = x1;

		return new Tuple3(x, y, gcd);
	}

	
	
	
	
	static int inv(int a, int m) {
		int m0 = m, t, q;
		int x0 = 0, x1 = 1;

		if (m == 1)
			return 0;

		
		while (a > 1) {
			
			q = a / m;

			t = m;

			
			
			m = a % m;
			a = t;

			t = x0;

			x0 = x1 - q * x0;

			x1 = t;
		}

		
		if (x1 < 0)
			x1 += m0;

		return x1;
	}

	
	
	
	
	
	
	
	
	
	static int findMinX(int num[], int rem[], int k) {
		
		int prod = 1;
		for (int i = 0; i < k; i++)
			prod *= num[i];

		
		int result = 0;

		
		for (int i = 0; i < k; i++) {
			int pp = prod / num[i];
			result += rem[i] * inv(pp, num[i]) * pp;
		}

		return result % prod;
	}

	
	static class FastScanner {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int chars;

		public FastScanner(InputStream stream) {
			this.stream = stream;
		}

		int read() {
			if (chars == -1)
				throw new InputMismatchException();
			if (curChar >= chars) {
				curChar = 0;
				try {
					chars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (chars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		boolean isEndline(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public double nextDouble() {
			return Double.parseDouble(next());
		}

		public String next() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public String nextLine() {
			int c = read();
			while (isEndline(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndline(c));
			return res.toString();
		}
	}

}",ERROR,130
"public class Kello
{
    public static void  main(String args[])
    {
        Scanner sc =new Scanner(System.in);
        int n,q,m,max,inp,k,i;
        long in_q;
        n=sc.nextInt();
        q=sc.nextInt();
        int a[]=new int[n-1];
        int b[]=new int[n-1];
        int c[]=new int[n-1];
        max=sc.nextInt();
        for(i=0;i<n-1;i++)
        {
            inp=sc.nextInt();
            a[i]=max;
            b[i]=inp;
            if(inp>max)
            {
                c[i]=max;
             max=inp;
        }
        else
        c[i]=inp;
    }
   
        for(i=0;i<q;i++)
        {
            in_q=sc.nextLong();
            if(in_q<n)
            System.out.println(a[(int)in_q-1]+"" ""+b[(int)in_q-1]);
          else   {
          k=(int)(in_q %(n-1))-1;
          if(k==-1)
          k=n-2;
          System.out.println(max+"" ""+c[k]);
            }
        }
    }
    public static void display(int a[],int b[])
    {
        int i;
        for(i=0;i<a.length;i++)
        System.out.println(a[i]+"" ""+b[i]);
}
}","public class Kello {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n, q, m, max, inp, k, i;
        long in_q;
        n = sc.nextInt();
        q = sc.nextInt();
        int a[] = new int[n - 1];
        int b[] = new int[n - 1];
        int c[] = new int[n - 1];
        max = sc.nextInt();
        for (i = 0; i < n - 1; i++) {
            inp = sc.nextInt();
            a[i] = max;
            b[i] = inp;
            if (inp > max) {
                c[i] = max;
                max = inp;
            } else
                c[i] = inp;
        }
        for (i = 0; i < q; i++) {
            in_q = sc.nextLong();
            if (in_q < n)
                System.out.println(a[(int) in_q - 1] + "" "" + b[(int) in_q - 1]);
            else {
                k = (int) (in_q % (n - 1)) - 1;
                if (k == -1)
                    k = n - 2;
                System.out.println(max + "" "" + c[k]);
            }
        }
    }
    public static void display(int a[], int b[]) {
        int i;
        for (i = 0; i < a.length; i++)
            System.out.println(a[i] + "" "" + b[i]);
    }
}",131
"class
Main 
{ 

static
void
printUnsorted(
int
arr[], 
int
n) 

{ 

int
s = 
0
, e = n-
1
, i, max, min; 




for
(s = 
0
; s < n-
1
; s++) 

{ 

if
(arr[s] > arr[s+
1
]) 

break
; 

} 

if
(s == n-
1
) 

{ 

System.out.println(
""The complete array is sorted""
); 

return
; 

} 




for
(e = n - 
1
; e > 
0
; e--) 

{ 

if
(arr[e] < arr[e-
1
]) 

break
; 

} 




max = arr[s]; min = arr[s]; 

for
(i = s + 
1
; i <= e; i++) 

{ 

if
(arr[i] > max) 

max = arr[i]; 

if
(arr[i] < min) 

min = arr[i]; 

} 




for
( i = 
0
; i < s; i++) 

{ 

if
(arr[i] > min) 

{ 

s = i; 

break
; 

} 

} 




for
( i = n -
1
; i >= e+
1
; i--) 

{ 

if
(arr[i] < max) 

{ 

e = i; 

break
; 

} 

} 




System.out.println(
"" The unsorted subarray which""
+ 

"" makes the given array sorted lies""
+ 

"" between the indices ""
+s+
"" and ""
+e); 

return
; 

} 


public
static
void
main(String args[]) 

{ 

int
arr[] = {
10
, 
12
, 
20
, 
30
, 
25
, 
40
, 
32
, 
31
, 
35
, 
50
, 
60
}; 

int
arr_size = arr.length; 

printUnsorted(arr, arr_size); 

} 
}","class Main { static void printUnsorted(int arr[], int n) { int s = 0, e = n-1, i, max, min; for (s = 0; s < n-1; s++) { if (arr[s] > arr[s+1]) break; } if (s == n-1) { System.out.println(""The complete array is sorted""); return; } for (e = n - 1; e > 0; e--) { if (arr[e] < arr[e-1]) break; } max = arr[s]; min = arr[s]; for (i = s + 1; i <= e; i++) { if (arr[i] > max) max = arr[i]; if (arr[i] < min) min = arr[i]; } for (i = 0; i < s; i++) { if (arr[i] > min) { s = i; break; } } for (i = n - 1; i >= e+1; i--) { if (arr[i] < max) { e = i; break; } } System.out.println("" The unsorted subarray which"" + "" makes the given array sorted lies"" + "" between the indices "" + s + "" and "" + e); return; } public static void main(String args[]) { int arr[] = {10, 12, 20, 30, 25, 40, 32, 31, 35, 50, 60}; int arr_size = arr.length; printUnsorted(arr, arr_size); } }",132
"public class C {
    static class FastWriter {
        private final BufferedWriter bw;

        public FastWriter() {
            this.bw = new BufferedWriter(new OutputStreamWriter(System.out));
        }

        public void print(Object object) throws IOException {
            bw.append("""" + object);
        }

        public void println(Object object) throws IOException {
            print(object);
            bw.append(""\n"");
        }

        public void close() throws IOException {
            bw.close();
        }
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }

        BigInteger nextBigInteger() {
            try {
                return new BigInteger(nextLine());
            } catch (NumberFormatException e) {
                throw new InputMismatchException();
            }
        }
    }

    public static void main(String[] args) {
        FastReader fr = new FastReader();
        FastWriter fw = new FastWriter();
        int n = fr.nextInt();
        int q = fr.nextInt();
        int[] aa = new int[n - 1];
        int[] ab = new int[n - 1];
        Deque<Integer> dq = new ArrayDeque<>();
        for (int i = 0; i < n; i++) dq.addLast(fr.nextInt());
        for (int i = 0; i < n - 1; i++) {
            int a = dq.removeFirst();
            int b = dq.removeFirst();
            aa[i] = a;
            ab[i] = b;
            int mi = Math.min(a, b);
            int ma = Math.max(a, b);
            dq.addFirst(ma);
            dq.addLast(mi);
        }
        int fm = dq.removeFirst();
        int[] arr = new int[n - 1];
        for (int i = 0; i < arr.length; i++) arr[i] = dq.removeFirst();
        while (q-- > 0) {
            long m = fr.nextLong() - 1;
            if (m < n - 1) {
                System.out.println(aa[(int) m] + "" "" + ab[(int) m]);
            } else {
                m = m % (n - 1);
                System.out.println(fm + "" "" + arr[(int) m]);
            }
        }
    }
}","public class C {
    static class FastWriter {
        private final BufferedWriter bw;

        public FastWriter() {
            this.bw = new BufferedWriter(new OutputStreamWriter(System.out));
        }

        public void print(Object object) throws IOException {
            bw.append("""").append(String.valueOf(object));
        }

        public void println(Object object) throws IOException {
            print(object);
            bw.append(""\n"");
        }

        public void close() throws IOException {
            bw.close();
        }
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() throws IOException {
            while (st == null || !st.hasMoreTokens()) {
                st = new StringTokenizer(br.readLine());
            }
            return st.nextToken();
        }

        int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        double nextDouble() throws IOException {
            return Double.parseDouble(next());
        }

        String nextLine() throws IOException {
            return br.readLine();
        }

        BigInteger nextBigInteger() throws IOException {
            return new BigInteger(nextLine());
        }
    }

    public static void main(String[] args) throws IOException {
        FastReader fr = new FastReader();
        FastWriter fw = new FastWriter();
        int n = fr.nextInt();
        int q = fr.nextInt();
        int[] aa = new int[n - 1];
        int[] ab = new int[n - 1];
        Deque<Integer> dq = new ArrayDeque<>();
        for (int i = 0; i < n; i++) dq.addLast(fr.nextInt());
        for (int i = 0; i < n - 1; i++) {
            int a = dq.pollFirst();
            int b = dq.pollFirst();
            aa[i] = a;
            ab[i] = b;
            int mi = Math.min(a, b);
            int ma = Math.max(a, b);
            dq.addFirst(ma);
            dq.addLast(mi);
        }
        int fm = dq.pollFirst();
        int[] arr = new int[n - 1];
        for (int i = 0; i < arr.length; i++) arr[i] = dq.pollFirst();
        while (q-- > 0) {
            long m = fr.nextLong() - 1;
            if (m < n - 1) {
                fw.println(aa[(int) m] + "" "" + ab[(int) m]);
            } else {
                m = m % (n - 1);
                fw.println(fm + "" "" + arr[(int) m]);
            }
        }
        fw.close();
    }
}",133
"public class Main {
 
    public static void main(String[] args) {
	
        Scanner scan = new Scanner(System.in);
        int T = scan.nextInt();
        for(; T > 0; T--) {
            int n = scan.nextInt();
            int[] arr = new int[n];
            for(int i = 0; i < n; i++) arr[i] = scan.nextInt();
            int m1 = 1, m2 = 1;
            for(int i = 0; i < n; i++) {
                if(arr[i] >= m1) {
                    m2 = m1;
                    m1 = arr[i];
                } else if (arr[i] >= m2) {
                    m2 = arr[i];
                }
            }
            System.out.println(Math.min(Math.min(m1, m2) - 1, n - 2));
        }
    }
}","public class Main {
 
    public static void main(String[] args) {
	
        Scanner scan = new Scanner(System.in);
        int T = scan.nextInt();
        while(T > 0) {
            int n = scan.nextInt();
            int[] arr = new int[n];
            for(int i = 0; i < n; i++) {
                arr[i] = scan.nextInt();
            }
            int m1 = 1;
            int m2 = 1;
            for(int i = 0; i < n; i++) {
                if(arr[i] >= m1) {
                    m2 = m1;
                    m1 = arr[i];
                } else if (arr[i] >= m2) {
                    m2 = arr[i];
                }
            }
            System.out.println(Math.min(Math.min(m1, m2) - 1, n - 2));
            T--;
        }
    }
}",134
"public class   CF111111
{
  BufferedReader in;
  StringTokenizer as;
  int nums[],nums2[];
  int[] nums1[];
  boolean con = true;
 
  ArrayList < Integer >  ar = new ArrayList < Integer >();
  ArrayList < Integer >  fi = new ArrayList < Integer >();
  Map<Integer,Integer > map = new HashMap<Integer, Integer>();
  public static void main (String[] args)
  {
    new CF111111  ();
  }
  
  public int GCD(int a, int b) {
    if (b==0) return a;
    return GCD(b,a%b);
  }
  
  public int LIS(int arr[])
  {
    int n = arr.length;
    int sun[] = new int [n];
    int cur = 0;
    for(int x = 0;x<n;x++)
    {
      int temp = Arrays.binarySearch(sun,0,cur,arr[x]);
      if(temp < 0)
        temp = -temp -1;
      sun[temp] = arr[x];
      if(temp == cur)
        cur++;
    }
    return cur;
    
  }
  
  
  public void no()
  {
    System.out.println(""NO"");
    System.exit(0);
  }
  
  public CF111111  ()
  {
    try
    {
      
      in = new BufferedReader (new InputStreamReader (System.in));
      int a = nextInt();
      nums = new int [a];
      int max = -1;
      int index = -1;
     for(int x = 0;x<a;x++)
     {
       nums[x] = nextInt();
       if(nums[x] > max)
       {
         max = nums[x];
         index = x;
       }
     }
      int lindex = index-1;
      int rindex = index+1;
      int done = 1;
      int top = max;
      for(;;)
      {
        done++;
      
        if(lindex < 0)
        {
           if(nums[rindex] > top)
           {
             no();
           }
           else
             top = nums[rindex];
           rindex++;
        }
        else if(rindex >= a)
        {
          if(nums[lindex] > top)
            no();
          else
            top = nums[lindex];
          lindex--;
        }
        else
        {
          if(nums[lindex] > top || nums[rindex] > top)
            no();
          else
          {
            if(nums[lindex] > nums[rindex])
            {
              top = nums[lindex];
              lindex--;
            }
            else
            {
              top = nums[rindex];
              rindex++;
            }
          }
        }
        if(done == a)
        {
          System.out.println(""YES"");
          System.exit(0);
        }
      }
    }
    catch(IOException e)
    {

    }
  }
  
  
  
  
  
  
  
  String next () throws IOException
  {
    while (as == null || !as.hasMoreTokens ())
    {
      as = new StringTokenizer (in.readLine ().trim ());
    }
    
    
    return as.nextToken ();
  }
  
  
  
  long nextLong () throws IOException
  {
    return Long.parseLong (next ());
  }
  
  
  int nextInt () throws IOException
  {
    return Integer.parseInt (next ());
  }
  
  
  double nextDouble () throws IOException
  {
    return Double.parseDouble (next ());
  }
  
  
  String nextLine () throws IOException
  {
    return in.readLine ().trim ();
  }
}","public class CF111111 {
    BufferedReader in;
    StringTokenizer as;
    int nums[], nums2[];
    int[][] nums1;
    boolean con = true;
    ArrayList<Integer> ar = new ArrayList<Integer>();
    ArrayList<Integer> fi = new ArrayList<Integer>();
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();

    public static void main(String[] args) {
        new CF111111();
    }

    public int GCD(int a, int b) {
        if (b == 0) return a;
        return GCD(b, a % b);
    }

    public int LIS(int[] arr) {
        int n = arr.length;
        int[] sun = new int[n];
        int cur = 0;
        for (int x = 0; x < n; x++) {
            int temp = Arrays.binarySearch(sun, 0, cur, arr[x]);
            if (temp < 0)
                temp = -temp - 1;
            sun[temp] = arr[x];
            if (temp == cur)
                cur++;
        }
        return cur;
    }

    public void no() {
        System.out.println(""NO"");
        System.exit(0);
    }

    public CF111111() {
        try {
            in = new BufferedReader(new InputStreamReader(System.in));
            int a = nextInt();
            nums = new int[a];
            int max = -1;
            int index = -1;
            for (int x = 0; x < a; x++) {
                nums[x] = nextInt();
                if (nums[x] > max) {
                    max = nums[x];
                    index = x;
                }
            }
            int lindex = index - 1;
            int rindex = index + 1;
            int done = 1;
            int top = max;
            for (; ; ) {
                done++;

                if (lindex < 0) {
                    if (nums[rindex] > top) {
                        no();
                    } else
                        top = nums[rindex];
                    rindex++;
                } else if (rindex >= a) {
                    if (nums[lindex] > top)
                        no();
                    else
                        top = nums[lindex];
                    lindex--;
                } else {
                    if (nums[lindex] > top || nums[rindex] > top)
                        no();
                    else {
                        if (nums[lindex] > nums[rindex]) {
                            top = nums[lindex];
                            lindex--;
                        } else {
                            top = nums[rindex];
                            rindex++;
                        }
                    }
                }
                if (done == a) {
                    System.out.println(""YES"");
                    System.exit(0);
                }
            }
        } catch (IOException e) {

        }
    }

    String next() throws IOException {
        while (as == null || !as.hasMoreTokens()) {
            as = new StringTokenizer(in.readLine().trim());
        }

        return as.nextToken();
    }

    long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }

    String nextLine() throws IOException {
        return in.readLine().trim();
    }
}",135
"public class codef
{
    public static void main(String ar[]) throws IOException
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int n=Integer.parseInt(br.readLine());
        String st[]=br.readLine().split("" "");
        int a[]=new int[n];
        for(int i=0;i<n;i++)
            a[i]=Integer.parseInt(st[i]);

        int max=0;
        for(int i=0;i<n;i++)
        {
            if(i!=0 && a[i]>a[max])
                max=i;
        }
       
        int maxi=max;
        int i=max-1;
        while(i>=0)
        {
            if(a[i]>a[max])
            {
                System.out.println(""NO"");
                return;
            }
            max=i;
            i--;
        }
        max=maxi;
        i=max+1;
        while(i<n)
        {
            if(a[i]>a[max])
            {
                System.out.println(""NO"");
                return;
            }
            max=i;
            i++;
        }
        System.out.println(""YES"");
    }
}","public class codef
{
    public static void main(String ar[]) throws IOException
    {
        BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
        int n=Integer.parseInt(br.readLine());
        String st[]=br.readLine().split("" "");
        int a[]=new int[n];
        for(int i=0;i<n;i++)
            a[i]=Integer.parseInt(st[i]);

        int max=0;
        for(int i=0;i<n;i++)
        {
            if(i!=0 && a[i]>a[max])
                max=i;
        }
       
        int maxi=max;
        int i=max-1;
        while(i>=0)
        {
            if(a[i]>a[max])
            {
                System.out.println(""NO"");
                return;
            }
            max=i;
            i--;
        }
        max=maxi;
        i=max+1;
        while(i<n)
        {
            if(a[i]>a[max])
            {
                System.out.println(""NO"");
                return;
            }
            max=i;
            i++;
        }
        System.out.println(""YES"");
    }
}",136
"class
PairSum { 






static
void
constructArr(
int
arr[], 
int
pair[], 
int
n) 

{ 

arr[
0
] = (pair[
0
]+pair[
1
]-pair[n-
1
]) / 
2
; 

for
(
int
i=
1
; i<n; i++) 

arr[i] = pair[i-
1
]-arr[
0
]; 

} 




public
static
void
main(String[] args) 

{ 

int
pair[] = {
15
, 
13
, 
11
, 
10
, 
12
, 
10
, 
9
, 
8
, 
7
, 
5
}; 

int
n = 
5
; 

int
[] arr = 
new
int
[n]; 

constructArr(arr, pair, n); 

for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i]+
"" ""
); 

} 
}","class PairSum {

static void constructArr(int arr[], int pair[], int n) {
arr[0] = (pair[0]+pair[1]-pair[n-1]) / 2;
for (int i=1; i<n; i++)
arr[i] = pair[i-1]-arr[0];
}

public static void main(String[] args) {
int pair[] = {15, 13, 11, 10, 12, 10, 9, 8, 7, 5};
int n = 5;
int[] arr = new int[n];
constructArr(arr, pair, n);
for (int i = 0; i < n; i++)
System.out.print(arr[i]+"" "");
}
}",137
"class
GfG 
{ 




public
static
int
minMaxProduct(
int
arr1[], 

int
arr2[], 

int
n1, 

int
n2) 

{ 






int
max = arr1[
0
]; 






int
min = arr2[
0
]; 


int
i; 

for
(i = 
1
; i < n1 && i < n2; ++i) 

{ 






if
(arr1[i] > max) 

max = arr1[i]; 






if
(arr2[i] < min) 

min = arr2[i]; 

} 




while
(i < n1) 

{ 

if
(arr1[i] > max) 

max = arr1[i]; 

i++; 

} 

while
(i < n2) 

{ 

if
(arr2[i] < min) 

min = arr2[i]; 

i++; 

} 


return
max * min; 

} 




public
static
void
main(String argc[]) 

{ 

int
[] arr1= 
new
int
[]{ 
10
, 
2
, 
3
, 

6
, 
4
, 
1
}; 

int
[] arr2 = 
new
int
[]{ 
5
, 
1
, 
4
, 

2
, 
6
, 
9
}; 

int
n1 = 
6
; 

int
n2 = 
6
; 

System.out.println(minMaxProduct(arr1, arr2, 

n1, n2)); 

} 
}","class GfG { public static int minMaxProduct(int arr1[], int arr2[], int n1, int n2) { int max = arr1[0]; int min = arr2[0]; int i; for (i = 1; i < n1 && i < n2; ++i) { if (arr1[i] > max) max = arr1[i]; if (arr2[i] < min) min = arr2[i]; } while (i < n1) { if (arr1[i] > max) max = arr1[i]; i++; } while (i < n2) { if (arr2[i] < min) min = arr2[i]; i++; } return max * min; } public static void main(String argc[]) { int [] arr1= new int[]{ 10, 2, 3, 6, 4, 1}; int [] arr2 = new int[]{ 5, 1, 4, 2, 6, 9}; int n1 = 6; int n2 = 6; System.out.println(minMaxProduct(arr1, arr2, n1, n2)); } }",138
"class
GFG { 


static
int
MAX_CHAR = 
26
; 


public
static
void
commonCharacters(String str[], 

int
n) 

{ 






Boolean[] prim = 
new
Boolean[MAX_CHAR]; 

Arrays.fill(prim, 
new
Boolean(
true
)); 




for
(
int
i = 
0
; i < n; i++) { 






Boolean[] sec = 
new
Boolean[MAX_CHAR]; 

Arrays.fill(sec, 
new
Boolean(
false
)); 




for
(
int
j = 
0
; j < str[i].length(); j++) 

{ 






if
(prim[str[i].charAt(j) - 
'a'
]) 

sec[str[i].charAt(j) - 
'a'
] = 
true
; 

} 




System.arraycopy(sec, 
0
, prim, 
0
, MAX_CHAR); 

} 




for
(
int
i = 
0
; i < 
26
; i++) 

if
(prim[i]){ 

System.out.print(Character.toChars(i 

+ 
97
)); 

System.out.print(
"" ""
); 

} 

} 




public
static
void
main(String[] args) 

{ 

String str[] = { 
""geeksforgeeks""
, 

""gemkstones""
, 

""acknowledges""
, 

""aguelikes""
}; 


int
n = str.length; 

commonCharacters(str, n); 

} 
}","class GFG { static int MAX_CHAR = 26; public static void commonCharacters(String[] str, int n) { Boolean[] prim = new Boolean[MAX_CHAR]; Arrays.fill(prim, new Boolean(true)); for (int i = 0; i < n; i++) { Boolean[] sec = new Boolean[MAX_CHAR]; Arrays.fill(sec, new Boolean(false)); for (int j = 0; j < str[i].length(); j++) { if (prim[str[i].charAt(j) - 'a']) sec[str[i].charAt(j) - 'a'] = true; } System.arraycopy(sec, 0, prim, 0, MAX_CHAR); } for (int i = 0; i < 26; i++) if (prim[i]) { System.out.print(Character.toChars(i + 97)); System.out.print(",139
"class
GFG 
{ 




static
int
MAX_CHAR = 
26
; 






static
void
findAndPrintUncommonChars(String str1, 

String str2) 

{ 





int
present[] = 
new
int
[MAX_CHAR]; 

for
(
int
i = 
0
; i < MAX_CHAR; i++) 

{ 

present[i] = 
0
; 

} 


int
l1 = str1.length(); 

int
l2 = str2.length(); 






for
(
int
i = 
0
; i < l1; i++) 

{ 

present[str1.charAt(i) - 
'a'
] = 
1
; 

} 




for
(
int
i = 
0
; i < l2; i++) 

{ 






if
(present[str2.charAt(i) - 
'a'
] == 
1

|| present[str2.charAt(i) - 
'a'
] == -
1
) 

{ 

present[str2.charAt(i) - 
'a'
] = -
1
; 

} 




else

{ 

present[str2.charAt(i) - 
'a'
] = 
2
; 

} 

} 




for
(
int
i = 
0
; i < MAX_CHAR; i++) 

{ 

if
(present[i] == 
1
|| present[i] == 
2
) 

{ 

System.out.print((
char
) (i + 
'a'
) + 
"" ""
); 

} 

} 

} 




public
static
void
main(String[] args) 

{ 

String str1 = 
""characters""
; 

String str2 = 
""alphabets""
; 

findAndPrintUncommonChars(str1, str2); 

} 
}","class GFG { static int MAX_CHAR = 26; static void findAndPrintUncommonChars(String str1, String str2) { int present[] = new int[MAX_CHAR]; for (int i = 0; i < MAX_CHAR; i++) { present[i] = 0; } int l1 = str1.length(); int l2 = str2.length(); for (int i = 0; i < l1; i++) { present[str1.charAt(i) - 'a'] = 1; } for (int i = 0; i < l2; i++) { if (present[str2.charAt(i) - 'a'] == 1 || present[str2.charAt(i) - 'a'] == -1) { present[str2.charAt(i) - 'a'] = -1; } else { present[str2.charAt(i) - 'a'] = 2; } } for (int i = 0; i < MAX_CHAR; i++) { if (present[i] == 1 || present[i] == 2) { System.out.print((char) (i + 'a') + "" ""); } } } public static void main(String[] args) { String str1 = ""characters""; String str2 = ""alphabets""; findAndPrintUncommonChars(str1, str2); } }",140
"class
GFG 
{ 


static
boolean
isVowel(
char
ch) 
{ 

if
(ch == 
'a'
|| ch == 
'e'
|| ch == 
'i'
|| 

ch == 
'o'
|| ch ==
'u'
) 

return
true
; 

return
false
; 
} 



static
String createAltStr(String str1, String str2, 

int
start, 
int
l) 
{ 

String finalStr = 
""""
; 






for
(
int
i = 
0
, j = start; j < l; i++, j++) 

finalStr = (finalStr + str1.charAt(i)) + 

str2.charAt(j); 

return
finalStr; 
} 



static
String findAltStr(String str) 
{ 

int
nv = 
0
, nc = 
0
; 

String vstr = 
""""
, cstr = 
""""
; 

int
l = str.length(); 

for
(
int
i = 
0
; i < l; i++) 

{ 

char
ch = str.charAt(i); 




if
(isVowel(ch)) 

{ 

nv++; 

vstr = vstr + ch; 

} 






else

{ 

nc++; 

cstr = cstr + ch; 

} 

} 




if
(Math.abs(nv - nc) >= 
2
) 

return
""no such string""
; 








if
(nv > nc) 

return
(vstr.charAt(
0
) + createAltStr(cstr, vstr, 
1
, nv)); 








if
(nc > nv) 

return
(cstr.charAt(
0
) + createAltStr(vstr, cstr, 
1
, nc)); 








if
(cstr.charAt(
0
) < vstr.charAt(
0
)) 

return
createAltStr(cstr, vstr, 
0
, nv); 




return
createAltStr(vstr, cstr, 
0
, nc); 
} 


public
static
void
main(String args[]) 
{ 

String str = 
""geeks""
; 

System.out.println(findAltStr(str)); 
} 
}","class GFG { static boolean isVowel(char ch) { if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch =='u') return true; return false; } static String createAltStr(String str1, String str2, int start, int l) { String finalStr = """"; for (int i = 0, j = start; j < l; i++, j++) finalStr = (finalStr + str1.charAt(i)) + str2.charAt(j); return finalStr; } static String findAltStr(String str) { int nv = 0, nc = 0; String vstr = """", cstr = """"; int l = str.length(); for (int i = 0; i < l; i++) { char ch = str.charAt(i); if (isVowel(ch)) { nv++; vstr = vstr + ch; } else { nc++; cstr = cstr + ch; } } if (Math.abs(nv - nc) >= 2) return ""no such string""; if (nv > nc) return (vstr.charAt(0) + createAltStr(cstr, vstr, 1, nv)); if (nc > nv) return (cstr.charAt(0) + createAltStr(vstr, cstr, 1, nc)); if (cstr.charAt(0) < vstr.charAt(0)) return createAltStr(cstr, vstr, 0, nv); return createAltStr(vstr, cstr, 0, nc); } public static void main(String args[]) { String str = ""geeks""; System.out.println(findAltStr(str)); } }",141
"class
CountSubString 
{ 

int
countSubStr(
char
str[], 
int
n) 

{ 

int
m = 
0
; 





for
(
int
i = 
0
; i < n; i++) 

{ 

if
(str[i] == 
'1'
) 

m++; 

} 




return
m * (m - 
1
) / 
2
; 

} 




public
static
void
main(String[] args) 

{ 

CountSubString count = 
new
CountSubString(); 

String string = 
""00100101""
; 

char
str[] = string.toCharArray(); 

int
n = str.length; 

System.out.println(count.countSubStr(str, n)); 

} 
}","class CountSubString { int countSubStr(char str[], int n) { int m = 0; for (int i = 0; i < n; i++) { if (str[i] == '1') m++; } return m * (m - 1) / 2; } public static void main(String[] args) { CountSubString count = new CountSubString(); String string = ""00100101""; char str[] = string.toCharArray(); int n = str.length; System.out.println(count.countSubStr(str, n)); } }",142
"public
class
GFG { 


static
final
int
M = 
26
; 






static
int
getIdx(
char
ch) 

{ 

return
(ch - 
'a'
); 

} 






static
boolean
allSame(
int
freq[], 
int
N) 

{ 

int
same = 
0
; 




int
i; 

for
(i = 
0
; i < N; i++) { 

if
(freq[i] > 
0
) { 

same = freq[i]; 

break
; 

} 

} 






for
(
int
j = i + 
1
; j < N; j++) 

if
(freq[j] > 
0
&& freq[j] != same) 

return
false
; 


return
true
; 

} 






static
boolean
possibleSameCharFreqByOneRemoval(String str) 

{ 

int
l = str.length(); 




int
[] freq = 
new
int
[M]; 


for
(
int
i = 
0
; i < l; i++) 

freq[getIdx(str.charAt(i))]++; 




if
(allSame(freq, M)) 

return
true
; 




for
(
char
c = 
'a'
; c <= 
'z'
; c++) { 

int
i = getIdx(c); 




if
(freq[i] > 
0
) { 

freq[i]--; 


if
(allSame(freq, M)) 

return
true
; 

freq[i]++; 

} 

} 


return
false
; 

} 




public
static
void
main(String args[]) 

{ 

String str = 
""xyyzz""
; 

if
(possibleSameCharFreqByOneRemoval(str)) 

System.out.println(
""Yes""
); 

else

System.out.println(
""No""
); 

} 
}","public class GFG {
    static final int M = 26;

    static int getIdx(char ch) {
        return (ch - 'a');
    }

    static boolean allSame(int freq[], int N) {
        int same = 0;

        int i;
        for (i = 0; i < N; i++) {
            if (freq[i] > 0) {
                same = freq[i];
                break;
            }
        }

        for (int j = i + 1; j < N; j++)
            if (freq[j] > 0 && freq[j] != same)
                return false;

        return true;
    }

    static boolean possibleSameCharFreqByOneRemoval(String str) {
        int l = str.length();

        int[] freq = new int[M];

        for (int i = 0; i < l; i++)
            freq[getIdx(str.charAt(i))]++;

        if (allSame(freq, M))
            return true;

        for (char c = 'a'; c <= 'z'; c++) {
            int i = getIdx(c);

            if (freq[i] > 0) {
                freq[i]--;

                if (allSame(freq, M))
                    return true;

                freq[i]++;
            }
        }

        return false;
    }

    public static void main(String args[]) {
        String str = ""xyyzz"";

        if (possibleSameCharFreqByOneRemoval(str))
            System.out.println(""Yes"");
        else
            System.out.println(""No"");
    }
}",143
"public
class
GFG 
{ 



static
void
printMinIndexChar(String str, String patt) 

{ 



HashMap<Character, Integer> hm = 
new
HashMap<>(); 






int
minIndex = Integer.MAX_VALUE; 




int
m = str.length(); 

int
n = patt.length(); 




for
(
int
i = 
0
; i < m; i++) 

if
(!hm.containsKey(str.charAt(i))) 

hm.put(str.charAt(i),i); 




for
(
int
i = 
0
; i < n; i++) 







if
(hm.containsKey(patt.charAt(i)) && 

hm.get(patt.charAt(i)) < minIndex) 

minIndex = hm.get(patt.charAt(i)); 




if
(minIndex != Integer.MAX_VALUE) 

System.out.println(
""Minimum Index Character = ""
+ 

str.charAt(minIndex)); 




else

System.out.println(
""No character present""
); 

} 




public
static
void
main(String[] args) 

{ 

String str = 
""geeksforgeeks""
; 

String patt = 
""set""
; 

printMinIndexChar(str, patt); 

} 
}","class GFG { static void printMinIndexChar(String str, String patt) { HashMap<Character, Integer> hm = new HashMap<>(); int minIndex = Integer.MAX_VALUE; int m = str.length(); int n = patt.length(); for (int i = 0; i < m; i++) if (!hm.containsKey(str.charAt(i))) hm.put(str.charAt(i),i); for (int i = 0; i < n; i++) if (hm.containsKey(patt.charAt(i)) && hm.get(patt.charAt(i)) < minIndex) minIndex = hm.get(patt.charAt(i)); if (minIndex != Integer.MAX_VALUE) System.out.println(",144
"public
class
GFG 
{ 

static
final
int
NO_OF_CHARS = 
256
; 




static
int
[] getCharCountArray(String str) 

{ 

int
count[] = 
new
int
[NO_OF_CHARS]; 

for
(
int
i = 
0
; i<str.length(); i++) 

count[str.charAt(i)]++; 


return
count; 

} 




static
String removeDirtyChars(String str, String mask_str) 

{ 

int
count[] = getCharCountArray(mask_str); 

int
ip_ind = 
0
, res_ind = 
0
; 


char
arr[] = str.toCharArray(); 


while
(ip_ind != arr.length) 

{ 

char
temp = arr[ip_ind]; 

if
(count[temp] == 
0
) 

{ 

arr[res_ind] = arr[ip_ind]; 

res_ind ++; 

} 

ip_ind++; 


} 


str = 
new
String(arr); 





return
str.substring(
0
, res_ind); 


} 




public
static
void
main(String[] args) 

{ 

String str = 
""geeksforgeeks""
; 

String mask_str = 
""mask""
; 

System.out.println(removeDirtyChars(str, mask_str)); 

} 
}","public class GFG { static final int NO_OF_CHARS = 256; static int[] getCharCountArray(String str) { int count[] = new int[NO_OF_CHARS]; for (int i = 0; i < str.length(); i++) count[str.charAt(i)]++; return count; } static String removeDirtyChars(String str, String mask_str) { int count[] = getCharCountArray(mask_str); int ip_ind = 0, res_ind = 0; char arr[] = str.toCharArray(); while (ip_ind != arr.length) { char temp = arr[ip_ind]; if (count[temp] == 0) { arr[res_ind] = arr[ip_ind]; res_ind++; } ip_ind++; } str = new String(arr); return str.substring(0, res_ind); } public static void main(String[] args) { String str = ""geeksforgeeks""; String mask_str = ""mask""; System.out.println(removeDirtyChars(str, mask_str)); } }",145
"public
class
GFG 
{ 



static
class
Pair{ 

char
first; 

int
second; 

Pair(
char
first, 
int
second){ 

this
.first = first; 

this
.second = second; 

} 

} 




static
int
longestNull(String str) 

{ 

ArrayList<Pair> arr = 
new
ArrayList<>(); 






arr.add(
new
Pair(
'@'
, -
1
)); 


int
maxlen = 
0
; 





for
(
int
i = 
0
; i < str.length(); ++i) 

{ 





arr.add(
new
Pair(str.charAt(i), i)); 






while
(arr.size() >= 
3
&& 

arr.get(arr.size()-
3
).first==
'1'
&& 

arr.get(arr.size()-
2
).first==
'0'
&& 

arr.get(arr.size()-
1
).first==
'0'
) 

{ 





arr.remove(arr.size() - 
3
); 

arr.remove(arr.size() - 
2
); 

arr.remove(arr.size() - 
1
); 

} 




int
tmp = arr.get(arr.size() - 
1
).second; 




















maxlen = Math.max(maxlen, i - tmp); 

} 


return
maxlen; 

} 




public
static
void
main(String args[]) 

{ 

System.out.println(longestNull(
""1011100000100""
)); 

} 
}","public class GFG { static class Pair { char first; int second; Pair(char first, int second) { this.first = first; this.second = second; } } static int longestNull(String str) { ArrayList<Pair> arr = new ArrayList<>(); arr.add(new Pair('@', -1)); int maxlen = 0; for (int i = 0; i < str.length(); ++i) { arr.add(new Pair(str.charAt(i), i)); while (arr.size() >= 3 && arr.get(arr.size() - 3).first == '1' && arr.get(arr.size() - 2).first == '0' && arr.get(arr.size() - 1).first == '0') { arr.remove(arr.size() - 3); arr.remove(arr.size() - 2); arr.remove(arr.size() - 1); } int tmp = arr.get(arr.size() - 1).second; maxlen = Math.max(maxlen, i - tmp); } return maxlen; } public static void main(String args[]) { System.out.println(longestNull(""1011100000100"")); } }",146
"class
Test { 

static
final
int
MAX_CHAR = 
26
; 






static
int
countPairs(String str) 

{ 

int
result = 
0
; 

int
n = str.length(); 


for
(
int
i = 
0
; i < n; i++) 




for
(
int
j = 
1
; (i + j) < n && j <= MAX_CHAR; j++) 

if
((Math.abs(str.charAt(i + j) - str.charAt(i)) == j)) 

result++; 


return
result; 

} 




public
static
void
main(String args[]) 

{ 

String str = 
""geeksforgeeks""
; 

System.out.println(countPairs(str)); 

} 
}","class Test { static final int MAX_CHAR = 26; static int countPairs(String str) { int result = 0; int n = str.length(); for (int i = 0; i < n; i++) for (int j = 1; (i + j) < n && j <= MAX_CHAR; j++) if ((Math.abs(str.charAt(i + j) - str.charAt(i)) == j)) result++; return result; } public static void main(String args[]) { String str = ""geeksforgeeks""; System.out.println(countPairs(str)); } }",147
"class
ReverseArray { 




static
void
rvereseArray(
int
arr[], 
int
start, 
int
end) 

{ 

int
temp; 

if
(start >= end) 

return
; 

temp = arr[start]; 

arr[start] = arr[end]; 

arr[end] = temp; 

rvereseArray(arr, start+
1
, end-
1
); 

} 




static
void
printArray(
int
arr[], 
int
size) 

{ 

for
(
int
i=
0
; i < size; i++) 

System.out.print(arr[i] + 
"" ""
); 

System.out.println(
""""
); 

} 




public
static
void
main (String[] args) { 

int
arr[] = {
1
, 
2
, 
3
, 
4
, 
5
, 
6
}; 

printArray(arr, 
6
); 

rvereseArray(arr, 
0
, 
5
); 

System.out.println(
""Reversed array is ""
); 

printArray(arr, 
6
); 

} 
}","class ReverseArray {

    static void rvereseArray(int arr[], int start, int end) {
        int temp;
        if (start >= end)
            return;
        temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
        rvereseArray(arr, start+1, end-1);
    }

    static void printArray(int arr[], int size) {
        for (int i=0; i < size; i++)
            System.out.print(arr[i] + "" "");
        System.out.println("""");
    }

    public static void main (String[] args) {
        int arr[] = {1, 2, 3, 4, 5, 6};
        printArray(arr, 6);
        rvereseArray(arr, 0, 5);
        System.out.println(""Reversed array is "");
        printArray(arr, 6);
    }
}",148
"class
GFG { 


static
final
int
MAX_CHARS = 
26
; 


static
void
longestSubseqWithK(String str, 
int
k) { 

int
n = str.length(); 




int
freq[] = 
new
int
[MAX_CHARS]; 

for
(
int
i = 
0
; i < n; i++) { 

freq[str.charAt(i) - 
'a'
]++; 

} 








for
(
int
i = 
0
; i < n; i++) { 

if
(freq[str.charAt(i) - 
'a'
] >= k) { 

System.out.print(str.charAt(i)); 

} 

} 

} 



static
public
void
main(String[] args) { 

String str = 
""geeksforgeeks""
; 

int
k = 
2
; 

longestSubseqWithK(str, k); 


} 
}","class GFG {

    static final int MAX_CHARS = 26;

    static void longestSubseqWithK(String str, int k) {
        int n = str.length();

        int[] freq = new int[MAX_CHARS];

        for (int i = 0; i < n; i++) {
            freq[str.charAt(i) - 'a']++;
        }

        for (int i = 0; i < n; i++) {
            if (freq[str.charAt(i) - 'a'] >= k) {
                System.out.print(str.charAt(i));
            }
        }
    }

    static public void main(String[] args) {
        String str = ""geeksforgeeks"";
        int k = 2;

        longestSubseqWithK(str, k);
    }
}",149
"public
class
No_of_subsequence { 






static
int
countSubsequences(String s) 

{ 





int
aCount = 
0
; 








int
bCount = 
0
; 








int
cCount = 
0
; 




for
(
int
i=
0
; i< s.length(); i++) 

{ 



if
(s.charAt(i) == 
'a'
) 

aCount = (
1
+ 
2
* aCount); 




else
if
(s.charAt(i) == 
'b'
) 

bCount = (aCount + 
2
* bCount); 




else
if
(s.charAt(i) == 
'c'
) 

cCount = (bCount + 
2
* cCount); 

} 


return
cCount; 

} 




public
static
void
main(String args[]) 

{ 

String s = 
""abbc""
; 

System.out.println(countSubsequences(s)); 

} 
}","public class No_of_subsequence { static int countSubsequences(String s) { int aCount = 0; int bCount = 0; int cCount = 0; for (int i = 0; i < s.length(); i++) { if (s.charAt(i) == 'a') aCount = (1 + 2 * aCount); else if (s.charAt(i) == 'b') bCount = (aCount + 2 * bCount); else if (s.charAt(i) == 'c') cCount = (bCount + 2 * cCount); } return cCount; } public static void main(String args[]) { String s = ""abbc""; System.out.println(countSubsequences(s)); } }",150
"class
GFG { 


static
int
countOccurrences(String s, 
int
K) 

{ 

int
n = s.length(); 

int
C = 
0
, c1 = 
0
, c2 = 
0
; 

for
(
int
i = 
0
; i < n; i++) { 

if
(s.charAt(i) == 
'a'
) 

c1++; 


if
(s.charAt(i) == 
'b'
) { 

c2++; 







C += c1; 

} 

} 








return
C * K + (K * (K - 
1
) / 
2
) * c1 * c2; 

} 




public
static
void
main(String[] args) 

{ 

String S = 
""abcb""
; 

int
k = 
2
; 


System.out.println(countOccurrences(S, k)); 

} 
}","class GFG { static int countOccurrences(String s, int K) { int n = s.length(); int C = 0, c1 = 0, c2 = 0; for (int i = 0; i < n; i++) { if (s.charAt(i) == 'a') c1++; if (s.charAt(i) == 'b') { c2++; C += c1; } } return C * K + (K * (K - 1) / 2) * c1 * c2; } public static void main(String[] args) { String S = ""abcb""; int k = 2; System.out.println(countOccurrences(S, k)); } }",151
"public
class
GFG { 


static
int
max = 
100
; 






static
void
countSubsequence(String s, 
int
n) 

{ 

int
cntG = 
0
, cntF = 
0
, result = 
0
, C=
0
; 




for
(
int
i = 
0
; i < n; i++) { 

switch
(s.charAt(i)) { 










case
'G'
: 

cntG++; 

result+=C; 

break
; 








case
'F'
: 

cntF++; 

C+=cntG; 

break
; 




default
: 

continue
; 

} 

} 


System.out.println(result); 

} 




public
static
void
main(String args[]) { 

String s= 
""GFGFG""
; 

int
n = s.length(); 

countSubsequence(s, n); 

} 
}","public class GFG { static int max = 100; static void countSubsequence(String s, int n) { int cntG = 0, cntF = 0, result = 0, C= 0; for (int i = 0; i < n; i++) { switch (s.charAt(i)) { case 'G' : cntG++; result+=C; break; case 'F' : cntF++; C+=cntG; break; default: continue; } } System.out.println(result); } public static void main(String args[]) { String s= ""GFGFG""; int n = s.length(); countSubsequence(s, n); } }",152
"public
class
Count_Subsequences { 


static
final
int
MAX_CHAR = 
256
; 




static
int
countSub(String str) 

{ 





int
[] last = 
new
int
[MAX_CHAR]; 

Arrays.fill(last, -
1
); 




int
n = str.length(); 






int
[] dp = 
new
int
[n+
1
]; 




dp[
0
] = 
1
; 




for
(
int
i=
1
; i<=n; i++) 

{ 





dp[i] = 
2
*dp[i-
1
]; 








if
(last[(
int
)str.charAt(i-
1
)] != -
1
) 

dp[i] = dp[i] - dp[last[(
int
)str.charAt(i-
1
)]]; 




last[(
int
)str.charAt(i-
1
)] = (i-
1
); 

} 


return
dp[n]; 

} 




public
static
void
main(String args[]) 

{ 

System.out.println(countSub(
""gfg""
)); 

} 
}","public class Count_Subsequences { static final int MAX_CHAR = 256; static int countSub(String str) { int[] last = new int[MAX_CHAR]; Arrays.fill(last, -1); int n = str.length(); int[] dp = new int[n+1]; dp[0] = 1; for (int i=1; i<=n; i++) { dp[i] = 2*dp[i-1]; if (last[(int)str.charAt(i-1)] != -1) dp[i] = dp[i] - dp[last[(int)str.charAt(i-1)]]; last[(int)str.charAt(i-1)] = (i-1); } return dp[n]; } public static void main(String args[]) { System.out.println(countSub(""gfg"")); } }",153
"class
UglyNumber 
{ 



int
getNthUglyNo(
int
n) 

{ 

int
ugly[] = 
new
int
[n]; 


int
i2 = 
0
, i3 = 
0
, i5 = 
0
; 

int
next_multiple_of_2 = 
2
; 

int
next_multiple_of_3 = 
3
; 

int
next_multiple_of_5 = 
5
; 

int
next_ugly_no = 
1
; 


ugly[
0
] = 
1
; 


for
(
int
i = 
1
; i < n; i++) 

{ 

next_ugly_no = Math.min(next_multiple_of_2, 

Math.min(next_multiple_of_3, 

next_multiple_of_5)); 


ugly[i] = next_ugly_no; 

if
(next_ugly_no == next_multiple_of_2) 

{ 

i2 = i2+
1
; 

next_multiple_of_2 = ugly[i2]*
2
; 

} 

if
(next_ugly_no == next_multiple_of_3) 

{ 

i3 = i3+
1
; 

next_multiple_of_3 = ugly[i3]*
3
; 

} 

if
(next_ugly_no == next_multiple_of_5) 

{ 

i5 = i5+
1
; 

next_multiple_of_5 = ugly[i5]*
5
; 

} 

} 


return
next_ugly_no; 

} 




public
static
void
main(String args[]) 

{ 

int
n = 
150
; 

UglyNumber obj = 
new
UglyNumber(); 

System.out.println(obj.getNthUglyNo(n)); 

} 
}","class UglyNumber { int getNthUglyNo(int n) { int ugly[] = new int[n]; int i2 = 0, i3 = 0, i5 = 0; int next_multiple_of_2 = 2; int next_multiple_of_3 = 3; int next_multiple_of_5 = 5; int next_ugly_no = 1; ugly[0] = 1; for(int i = 1; i < n; i++) { next_ugly_no = Math.min(next_multiple_of_2, Math.min(next_multiple_of_3, next_multiple_of_5)); ugly[i] = next_ugly_no; if (next_ugly_no == next_multiple_of_2) { i2 = i2 + 1; next_multiple_of_2 = ugly[i2] * 2; } if (next_ugly_no == next_multiple_of_3) { i3 = i3 + 1; next_multiple_of_3 = ugly[i3] * 3; } if (next_ugly_no == next_multiple_of_5) { i5 = i5 + 1; next_multiple_of_5 = ugly[i5] * 5; } } return next_ugly_no; } public static void main(String args[]) { int n = 150; UglyNumber obj = new UglyNumber(); System.out.println(obj.getNthUglyNo(n)); } }",154
"public
class
GFG { 






static
int
permutationCoeff(
int
n, 

int
k) 

{ 

int
[]fact = 
new
int
[n+
1
]; 




fact[
0
] = 
1
; 






for
(
int
i = 
1
; i <= n; i++) 

fact[i] = i * fact[i - 
1
]; 




return
fact[n] / fact[n - k]; 

} 




static
public
void
main (String[] args) 

{ 

int
n = 
10
, k = 
2
; 

System.out.println(
""Value of""

+ 
"" P( ""
+ n + 
"", ""
+ k + 
"") is ""

+ permutationCoeff(n, k) ); 

} 
}","public class GFG {

    static int permutationCoeff(int n, int k) {
        int[] fact = new int[n + 1];
        fact[0] = 1;
        for (int i = 1; i <= n; i++)
            fact[i] = i * fact[i - 1];
        return fact[n] / fact[n - k];
    }

    public static void main(String[] args) {
        int n = 10, k = 2;
        System.out.println(""Value of"" + "" P( "" + n + "", "" + k + "") is "" + permutationCoeff(n, k));
    }
}",155
"class
GFG { 






static
int
countFriendsPairings(
int
n) 

{ 

int
dp[] = 
new
int
[n + 
1
]; 






for
(
int
i = 
0
; i <= n; i++) { 

if
(i <= 
2
) 

dp[i] = i; 

else

dp[i] = dp[i - 
1
] + (i - 
1
) * dp[i - 
2
]; 

} 


return
dp[n]; 

} 




public
static
void
main(String[] args) 

{ 

int
n = 
4
; 

System.out.println(countFriendsPairings(n)); 

} 
}",class GFG { static int countFriendsPairings(int n) { int dp[] = new int[n + 1]; for (int i = 0; i <= n; i++) { if (i <= 2) dp[i] = i; else dp[i] = dp[i - 1] + (i - 1) * dp[i - 2]; } return dp[n]; } public static void main(String[] args) { int n = 4; System.out.println(countFriendsPairings(n)); } },156
"public
class
Test 
{ 

static
int
arr[] = 
new
int
[]{
1
, 
2
, 
3
, 
4
, 
5
}; 




static
void
rotate() 

{ 

int
x = arr[arr.length-
1
], i; 

for
(i = arr.length-
1
; i > 
0
; i--) 

arr[i] = arr[i-
1
]; 

arr[
0
] = x; 

} 




public
static
void
main(String[] args) 

{ 

System.out.println(
""Given Array is""
); 

System.out.println(Arrays.toString(arr)); 


rotate(); 


System.out.println(
""Rotated Array is""
); 

System.out.println(Arrays.toString(arr)); 

} 
}","public class Test { static int[] arr = new int[]{1, 2, 3, 4, 5}; static void rotate() { int x = arr[arr.length - 1], i; for (i = arr.length - 1; i > 0; i--) arr[i] = arr[i - 1]; arr[0] = x; } public static void main(String[] args) { System.out.println(""Given Array is""); System.out.println(Arrays.toString(arr)); rotate(); System.out.println(""Rotated Array is""); System.out.println(Arrays.toString(arr)); } }",157
"class
GFG { 

static
int
[] dp = 
new
int
[
1000
]; 






static
int
countFriendsPairings(
int
n) 

{ 

if
(dp[n] != -
1
) 

return
dp[n]; 


if
(n > 
2
) 

return
dp[n] = countFriendsPairings(n - 
1
) + (n - 
1
) * countFriendsPairings(n - 
2
); 

else

return
dp[n] = n; 

} 




public
static
void
main(String[] args) 

{ 

for
(
int
i = 
0
; i < 
1000
; i++) 

dp[i] = -
1
; 

int
n = 
4
; 

System.out.println(countFriendsPairings(n)); 

} 
}",class GFG { static int[] dp = new int[1000]; static int countFriendsPairings(int n) { if (dp[n] != -1) return dp[n]; if (n > 2) return dp[n] = countFriendsPairings(n - 1) + (n - 1) * countFriendsPairings(n - 2); else return dp[n] = n; } public static void main(String[] args) { for (int i = 0; i < 1000; i++) dp[i] = -1; int n = 4; System.out.println(countFriendsPairings(n)); } },158
"class
GFG { 






static
int
sequence(
int
n) 

{ 

if
(n == 
1
|| n == 
2
) 

return
1
; 

else

return
sequence(sequence(n - 
1
)) 

+ sequence(n - sequence(n - 
1
)); 

} 




public
static
void
main(String args[]) 

{ 

int
n = 
10
; 

System.out.println(sequence(n)); 

} 
}",class GFG { static int sequence(int n) { if (n == 1 || n == 2) return 1; else return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1)); } public static void main(String args[]) { int n = 10; System.out.println(sequence(n)); } },159
"class
GFG { 




static
int
sequence(
int
n) 

{ 



int
f[] = 
new
int
[n + 
1
]; 

f[
0
] = 
0
; 

f[
1
] = 
1
; 

f[
2
] = 
1
; 


int
i; 


for
(i = 
3
; i <= n; i++) 

f[i] = f[f[i - 
1
]] + 

f[i - f[i - 
1
]]; 


return
f[n]; 

} 




public
static
void
main(String[] args) 

{ 

int
n = 
10
; 

System.out.println(sequence(n)); 


} 
}",class GFG { static int sequence(int n) { int f[] = new int[n + 1]; f[0] = 0; f[1] = 1; f[2] = 1; int i; for (i = 3; i <= n; i++) f[i] = f[f[i - 1]] + f[i - f[i - 1]]; return f[n]; } public static void main(String[] args) { int n = 10; System.out.println(sequence(n)); } },160
"class
RearrangeArray { 





void
rearrangeNaive(
int
arr[], 
int
n) 

{ 



int
temp[] = 
new
int
[n]; 

int
i; 




for
(i = 
0
; i < n; i++) 

temp[arr[i]] = i; 




for
(i = 
0
; i < n; i++) 

arr[i] = temp[i]; 

} 




void
printArray(
int
arr[], 
int
n) 

{ 

int
i; 

for
(i = 
0
; i < n; i++) { 

System.out.print(arr[i] + 
"" ""
); 

} 

System.out.println(
""""
); 

} 




public
static
void
main(String[] args) 

{ 

RearrangeArray arrange = 
new
RearrangeArray(); 

int
arr[] = { 
1
, 
3
, 
0
, 
2
}; 

int
n = arr.length; 


System.out.println(
""Given array is ""
); 

arrange.printArray(arr, n); 


arrange.rearrangeNaive(arr, n); 


System.out.println(
""Modified array is ""
); 

arrange.printArray(arr, n); 

} 
}","class RearrangeArray { void rearrangeNaive(int arr[], int n) { int temp[] = new int[n]; int i; for (i = 0; i < n; i++) temp[arr[i]] = i; for (i = 0; i < n; i++) arr[i] = temp[i]; } void printArray(int arr[], int n) { int i; for (i = 0; i < n; i++) { System.out.print(arr[i] + "" ""); } System.out.println(""""); } public static void main(String[] args) { RearrangeArray arrange = new RearrangeArray(); int arr[] = {1, 3, 0, 2}; int n = arr.length; System.out.println(""Given array is ""); arrange.printArray(arr, n); arrange.rearrangeNaive(arr, n); System.out.println(""Modified array is ""); arrange.printArray(arr, n); } }",161
"class
GFG { 






static
int
maxSumWO3Consec(
int
arr[], 
int
n) 

{ 







int
sum[] = 
new
int
[n]; 




if
(n >= 
1
) 

sum[
0
] = arr[
0
]; 


if
(n >= 
2
) 

sum[
1
] = arr[
0
] + arr[
1
]; 


if
(n > 
2
) 

sum[
2
] = Math.max(sum[
1
], Math.max(arr[
1
] + arr[
2
], arr[
0
] + arr[
2
])); 












for
(
int
i = 
3
; i < n; i++) 

sum[i] = Math.max(Math.max(sum[i - 
1
], sum[i - 
2
] + arr[i]), 

arr[i] + arr[i - 
1
] + sum[i - 
3
]); 


return
sum[n - 
1
]; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
100
, 
1000
, 
100
, 
1000
, 
1
}; 

int
n = arr.length; 

System.out.println(maxSumWO3Consec(arr, n)); 

} 
}","class GFG {

    static int maxSumWO3Consec(int[] arr, int n) {
        int[] sum = new int[n];

        if (n >= 1)
            sum[0] = arr[0];

        if (n >= 2)
            sum[1] = arr[0] + arr[1];

        if (n > 2)
            sum[2] = Math.max(sum[1], Math.max(arr[1] + arr[2], arr[0] + arr[2]));

        for (int i = 3; i < n; i++)
            sum[i] = Math.max(Math.max(sum[i - 1], sum[i - 2] + arr[i]), arr[i] + arr[i - 1] + sum[i - 3]);

        return sum[n - 1];
    }

    public static void main(String[] args) {
        int[] arr = {100, 1000, 100, 1000, 1};
        int n = arr.length;

        System.out.println(maxSumWO3Consec(arr, n));
    }
}",162
"class
GFG 
{ 

static
int
arr[] = {
100
, 
1000
, 
100
, 
1000
, 
1
}; 
static
int
sum[] = 
new
int
[
10000
]; 




static
int
maxSumWO3Consec(
int
n) 
{ 

if
(sum[n] != -
1
) 

return
sum[n]; 





if
(n == 
0
) 

return
sum[n] = 
0
; 


if
(n == 
1
) 

return
sum[n] = arr[
0
]; 


if
(n == 
2
) 

return
sum[n] = arr[
1
] + arr[
0
]; 






return
sum[n] = Math.max(Math.max(maxSumWO3Consec(n - 
1
), 

maxSumWO3Consec(n - 
2
) + arr[n - 
1
]), 

arr[n - 
2
] + arr[n - 
1
] + maxSumWO3Consec(n - 
3
)); 


} 


public
static
void
main(String[] args) 
{ 

int
n = arr.length; 

Arrays.fill(sum, -
1
); 

System.out.println(maxSumWO3Consec(n)); 
} 
}","class GFG { static int arr[] = {100, 1000, 100, 1000, 1}; static int sum[] = new int[10000]; static int maxSumWO3Consec(int n) { if (sum[n] != -1) return sum[n]; if (n == 0) return sum[n] = 0; if (n == 1) return sum[n] = arr[0]; if (n == 2) return sum[n] = arr[1] + arr[0]; return sum[n] = Math.max(Math.max(maxSumWO3Consec(n - 1), maxSumWO3Consec(n - 2) + arr[n - 1]), arr[n - 2] + arr[n - 1] + maxSumWO3Consec(n - 3)); } public static void main(String[] args) { int n = arr.length; Arrays.fill(sum, -1); System.out.println(maxSumWO3Consec(n)); } }",163
"class
GFG 
{ 






static
int
maximumSegments(
int
n, 
int
a, 

int
b, 
int
c) 

{ 





int
dp[] = 
new
int
[n + 
10
]; 




Arrays.fill(dp, -
1
); 






dp[
0
] = 
0
; 






for
(
int
i = 
0
; i < n; i++) 

{ 

if
(dp[i] != -
1
) 

{ 




if
(i + a <= n ) 


dp[i + a] = Math.max(dp[i] + 
1
, 

dp[i + a]); 


if
(i + b <= n ) 


dp[i + b] = Math.max(dp[i] + 
1
, 

dp[i + b]); 


if
(i + c <= n ) 


dp[i + c] = Math.max(dp[i] + 
1
, 

dp[i + c]); 

} 

} 

return
dp[n]; 

} 




public
static
void
main(String arg[]) 

{ 

int
n = 
7
, a = 
5
, b = 
2
, c = 
5
; 

System.out.print(maximumSegments(n, a, b, c)); 

} 
}","class GFG { static int maximumSegments(int n, int a, int b, int c) { int dp[] = new int[n + 10]; Arrays.fill(dp, -1); dp[0] = 0; for (int i = 0; i < n; i++) { if(dp[i] != -1) { if (i + a <= n) dp[i + a] = Math.max(dp[i] + 1, dp[i + a]); if (i + b <= n) dp[i + b] = Math.max(dp[i] + 1, dp[i + b]); if (i + c <= n) dp[i + c] = Math.max(dp[i] + 1, dp[i + c]); } } return dp[n]; } public static void main(String arg[]) { int n = 7, a = 5, b = 2, c = 5; System.out.print(maximumSegments(n, a, b, c)); } }",164
"class
RearrangeArray { 









void
rearrangeUtil(
int
arr[], 
int
n, 
int
i) 

{ 






int
val = -(i + 
1
); 






i = arr[i] - 
1
; 




while
(arr[i] > 
0
) { 





int
new_i = arr[i] - 
1
; 




arr[i] = val; 




val = -(i + 
1
); 

i = new_i; 

} 

} 






void
rearrange(
int
arr[], 
int
n) 

{ 





int
i; 

for
(i = 
0
; i < n; i++) 

arr[i]++; 




for
(i = 
0
; i < n; i++) { 





if
(arr[i] > 
0
) 

rearrangeUtil(arr, n, i); 

} 






for
(i = 
0
; i < n; i++) 

arr[i] = (-arr[i]) - 
1
; 

} 




void
printArray(
int
arr[], 
int
n) 

{ 

int
i; 

for
(i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

System.out.println(
""""
); 

} 




public
static
void
main(String[] args) 

{ 

RearrangeArray arrange = 
new
RearrangeArray(); 

int
arr[] = { 
2
, 
0
, 
1
, 
4
, 
5
, 
3
}; 

int
n = arr.length; 


System.out.println(
""Given array is ""
); 

arrange.printArray(arr, n); 


arrange.rearrange(arr, n); 


System.out.println(
""Modified array is ""
); 

arrange.printArray(arr, n); 

} 
}","class RearrangeArray { void rearrangeUtil(int arr[], int n, int i) { int val = -(i + 1); i = arr[i] - 1; while (arr[i] > 0) { int new_i = arr[i] - 1; arr[i] = val; val = -(i + 1); i = new_i; } } void rearrange(int arr[], int n) { int i; for (i = 0; i < n; i++) arr[i]++; for (i = 0; i < n; i++) { if (arr[i] > 0) rearrangeUtil(arr, n, i); } for (i = 0; i < n; i++) arr[i] = (-arr[i]) - 1; } void printArray(int arr[], int n) { int i; for (i = 0; i < n; i++) System.out.print(arr[i] + "" ""); System.out.println(""""); } public static void main(String[] args) { RearrangeArray arrange = new RearrangeArray(); int arr[] = { 2, 0, 1, 4, 5, 3 }; int n = arr.length; System.out.println(""Given array is ""); arrange.printArray(arr, n); arrange.rearrange(arr, n); System.out.println(""Modified array is ""); arrange.printArray(arr, n); } }",165
"class
GFG { 


final
int
MAX = 
1000000
; 




static
int
breakSum(
int
n) 

{ 

int
dp[] = 
new
int
[n+
1
]; 




dp[
0
] = 
0
; dp[
1
] = 
1
; 






for
(
int
i=
2
; i<=n; i++) 

dp[i] = Math.max(dp[i/
2
] + dp[i/
3
] + dp[i/
4
], i); 


return
dp[n]; 

} 




public
static
void
main (String[] args) { 

int
n = 
24
; 

System.out.println(breakSum(n)); 

} 
}","class GFG { final int MAX = 1000000; static int breakSum(int n) { int dp[] = new int[n+1]; dp[0] = 0; dp[1] = 1; for (int i = 2; i <= n; i++) dp[i] = Math.max(dp[i/2] + dp[i/3] + dp[i/4], i); return dp[n]; } public static void main(String[] args) { int n = 24; System.out.println(breakSum(n)); } }",166
"class
GFG { 




public
static
int
maxSum(
int
grid[][], 
int
n) 

{ 





int
incl = Math.max(grid[
0
][
0
], grid[
1
][
0
]); 




int
excl = 
0
, excl_new; 




for
(
int
i = 
1
; i < n; i++ ) 

{ 





excl_new = Math.max(excl, incl); 






incl = excl + Math.max(grid[
0
][i], grid[
1
][i]); 




excl = excl_new; 

} 






return
Math.max(excl, incl); 

} 




public
static
void
main(String[] args) 

{ 

int
grid[][] = {{ 
1
, 
2
, 
3
, 
4
, 
5
}, 

{ 
6
, 
7
, 
8
, 
9
, 
10
}}; 


int
n = 
5
; 

System.out.println(maxSum(grid, n)); 

} 

}","class GFG { public static int maxSum(int[][] grid, int n) { int incl = Math.max(grid[0][0], grid[1][0]); int excl = 0, excl_new; for (int i = 1; i < n; i++) { excl_new = Math.max(excl, incl); incl = excl + Math.max(grid[0][i], grid[1][i]); excl = excl_new; } return Math.max(excl, incl); } public static void main(String[] args) { int grid[][] = {{1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}}; int n = 5; System.out.println(maxSum(grid, n)); } }",167
"class
GFG { 








public
static
int
findLength(String str, 
int
n) 

{ 


int
current_sum = 
0
; 

int
max_sum = 
0
; 




for
(
int
i = 
0
; i < n; i++) { 








current_sum += (str.charAt(i) == 
'0'
? 
1
: -
1
); 


if
(current_sum < 
0
) 

current_sum = 
0
; 




max_sum = Math.max(current_sum, max_sum); 

} 





return
max_sum == 
0
? -
1
: max_sum; 

} 


public
static
void
main(String[] args) 

{ 

String str = 
""11000010001""
; 

int
n = str.length(); 


System.out.println(findLength(str, n)); 

} 
}","class GFG { public static int findLength(String str, int n) { int current_sum = 0; int max_sum = 0; for (int i = 0; i < n; i++) { current_sum += (str.charAt(i) == '0' ? 1 : -1); if (current_sum < 0) current_sum = 0; max_sum = Math.max(current_sum, max_sum); } return max_sum == 0 ? -1 : max_sum; } public static void main(String[] args) { String str = ""11000010001""; int n = str.length(); System.out.println(findLength(str, n)); } }",168
"public
class
GFG{ 






static
int
minTimeForWritingChars(
int
N, 
int
insert, 

int
remove, 
int
copy) 

{ 

if
(N == 
0
) 

return
0
; 

if
(N == 
1
) 

return
insert; 




int
dp[] = 
new
int
[N + 
1
]; 





for
(
int
i = 
1
; i <= N; i++) 

{ 



if
(i % 
2
== 
0
) 

dp[i] = Math.min(dp[i-
1
] + insert, dp[i/
2
] + copy); 




else

dp[i] = Math.min(dp[i-
1
] + insert, 

dp[(i+
1
)/
2
] + copy + remove); 

} 

return
dp[N]; 

} 




public
static
void
main(String []args) 

{ 

int
N = 
9
; 

int
insert = 
1
, remove = 
2
, copy = 
1
; 

System.out.println(minTimeForWritingChars(N, insert,remove, copy)); 

} 


}","public class GFG {
    static int minTimeForWritingChars(int N, int insert, int remove, int copy) {
        if (N == 0) return 0;
        if (N == 1) return insert;
        int dp[] = new int[N + 1];
        for (int i = 1; i <= N; i++) {
            if (i % 2 == 0) dp[i] = Math.min(dp[i - 1] + insert, dp[i / 2] + copy);
            else dp[i] = Math.min(dp[i - 1] + insert, dp[(i + 1) / 2] + copy + remove);
        }
        return dp[N];
    }
    public static void main(String[] args) {
        int N = 9;
        int insert = 1, remove = 2, copy = 1;
        System.out.println(minTimeForWritingChars(N, insert, remove, copy));
    }
}",169
"class
GFG{ 




public
static
int
sumOfSubstrings(String num) 

{ 

int
n = num.length(); 




int
sumofdigit[] = 
new
int
[n]; 




sumofdigit[
0
] = num.charAt(
0
)-
'0'
; 

int
res = sumofdigit[
0
]; 




for
(
int
i = 
1
; i < n; i++) 

{ 

int
numi = num.charAt(i)-
'0'
; 




sumofdigit[i] = (i+
1
) * numi + 

10
* sumofdigit[i-
1
]; 




res += sumofdigit[i]; 

} 


return
res; 

} 




public
static
void
main(String[] args) 

{ 

String num = 
""1234""
; 


System.out.println(sumOfSubstrings(num)); 


} 
}","class GFG {
    public static int sumOfSubstrings(String num) {
        int n = num.length();
        int[] sumofdigit = new int[n];
        sumofdigit[0] = num.charAt(0) - '0';
        int res = sumofdigit[0];
        for (int i = 1; i < n; i++) {
            int numi = num.charAt(i) - '0';
            sumofdigit[i] = (i + 1) * numi + 10 * sumofdigit[i - 1];
            res += sumofdigit[i];
        }
        return res;
    }

    public static void main(String[] args) {
        String num = ""1234"";
        System.out.println(sumOfSubstrings(num));
    }
}",170
"class
GFG 
{ 



static
int
maxLoot(
int
hval[], 
int
n) 

{ 

if
(n == 
0
) 

return
0
; 

if
(n == 
1
) 

return
hval[
0
]; 

if
(n == 
2
) 

return
Math.max(hval[
0
], hval[
1
]); 






int
[] dp = 
new
int
[n]; 




dp[
0
] = hval[
0
]; 

dp[
1
] = Math.max(hval[
0
], hval[
1
]); 




for
(
int
i = 
2
; i<n; i++) 

dp[i] = Math.max(hval[i]+dp[i-
2
], dp[i-
1
]); 


return
dp[n-
1
]; 

} 




public
static
void
main (String[] args) 

{ 

int
hval[] = {
6
, 
7
, 
1
, 
3
, 
8
, 
2
, 
4
}; 

int
n = hval.length; 

System.out.println(
""Maximum loot value : ""
+ maxLoot(hval, n)); 

} 
}","class GFG { static int maxLoot(int[] hval, int n) { if (n == 0) return 0; if (n == 1) return hval[0]; if (n == 2) return Math.max(hval[0], hval[1]); int[] dp = new int[n]; dp[0] = hval[0]; dp[1] = Math.max(hval[0], hval[1]); for (int i = 2; i < n; i++) dp[i] = Math.max(hval[i] + dp[i-2], dp[i-1]); return dp[n-1]; } public static void main(String[] args) { int hval[] = { 6, 7, 1, 3, 8, 2, 4 }; int n = hval.length; System.out.println(""Maximum loot value : "" + maxLoot(hval, n)); } }",171
"class
GFG 
{ 



static
int
maxLoot(
int
hval[], 
int
n) 

{ 

if
(n == 
0
) 

return
0
; 


int
value1 = hval[
0
]; 

if
(n == 
1
) 

return
value1; 


int
value2 = Math.max(hval[
0
], hval[
1
]); 

if
(n == 
2
) 

return
value2; 




int
max_val = 
0
; 




for
(
int
i=
2
; i<n; i++) 

{ 

max_val = Math.max(hval[i]+value1, value2); 

value1 = value2; 

value2 = max_val; 

} 


return
max_val; 

} 




public
static
void
main (String[] args) 

{ 

int
hval[] = {
6
, 
7
, 
1
, 
3
, 
8
, 
2
, 
4
}; 

int
n = hval.length; 

System.out.println(
""Maximum loot value : ""
+ maxLoot(hval, n)); 

} 
}","class GFG { static int maxLoot(int hval[], int n) { if (n == 0) return 0; int value1 = hval[0]; if (n == 1) return value1; int value2 = Math.max(hval[0], hval[1]); if (n == 2) return value2; int max_val = 0; for (int i = 2; i < n; i++) { max_val = Math.max(hval[i] + value1, value2); value1 = value2; value2 = max_val; } return max_val; } public static void main(String[] args) { int hval[] = { 6, 7, 1, 3, 8, 2, 4 }; int n = hval.length; System.out.println(""Maximum loot value : "" + maxLoot(hval, n)); } }",172
"class
GFG { 








static
int
countWays(
int
n) 

{ 

int
DP[] = 
new
int
[n + 
1
]; 




DP[
0
] = DP[
1
] = DP[
2
] = 
1
; 

DP[
3
] = 
2
; 




for
(
int
i = 
4
; i <= n; i++) 

DP[i] = DP[i - 
1
] + DP[i - 
3
] 

+ DP[i - 
4
]; 


return
DP[n]; 

} 




public
static
void
main(String[] args) 

{ 

int
n = 
10
; 

System.out.println(countWays(n)); 

} 
}","class GFG {
    static int countWays(int n) {
        int DP[] = new int[n + 1];
        DP[0] = DP[1] = DP[2] = 1;
        DP[3] = 2;
        for (int i = 4; i <= n; i++)
            DP[i] = DP[i - 1] + DP[i - 3] + DP[i - 4];
        return DP[n];
    }

    public static void main(String[] args) {
        int n = 10;
        System.out.println(countWays(n));
    }
}",173
"public
class
GFG { 




static
long
countWays(
int
n) { 

long
dp[][] = 
new
long
[
2
][n + 
1
]; 




dp[
0
][
1
] = 
1
; 

dp[
1
][
1
] = 
2
; 


for
(
int
i = 
2
; i <= n; i++) { 






dp[
0
][i] = dp[
0
][i - 
1
] + dp[
1
][i - 
1
]; 






dp[
1
][i] = dp[
0
][i - 
1
] * 
2
+ dp[
1
][i - 
1
]; 

} 




return
dp[
0
][n] + dp[
1
][n]; 

} 



public
static
void
main(String[] args) { 


int
n = 
5
; 

System.out.print(
""Total no of ways with n = ""
+ n 

+ 
"" are: ""
+ countWays(n)); 

} 

}","public class GFG { static long countWays(int n) { long[][] dp = new long[2][n + 1]; dp[0][1] = 1; dp[1][1] = 2; for (int i = 2; i <= n; i++) { dp[0][i] = dp[0][i - 1] + dp[1][i - 1]; dp[1][i] = dp[0][i - 1] * 2 + dp[1][i - 1]; } return dp[0][n] + dp[1][n]; } public static void main(String[] args) { int n = 5; System.out.print(""Total no of ways with n = "" + n + "" are: "" + countWays(n)); } }",174
"class
GFG { 



static
int
countWays(
int
n, 
int
m) 

{ 





int
count[] = 
new
int
[n + 
1
]; 

count[
0
] = 
0
; 




int
i; 

for
(i = 
1
; i <= n; i++) { 



if
(i > m) 

count[i] = count[i - 
1
] + count[i - m]; 




else
if
(i < m) 

count[i] = 
1
; 




else

count[i] = 
2
; 

} 




return
count[n]; 

} 




public
static
void
main(String[] args) 

{ 

int
n = 
7
; 

int
m = 
4
; 

System.out.println(
""Number of ways = ""

+ countWays(n, m)); 

} 
}","class GFG { static int countWays(int n, int m) { int count[] = new int[n + 1]; count[0] = 0; int i; for (i = 1; i <= n; i++) { if (i > m) count[i] = count[i - 1] + count[i - m]; else if (i < m) count[i] = 1; else count[i] = 2; } return count[n]; } public static void main(String[] args) { int n = 7; int m = 4; System.out.println(""Number of ways = "" + countWays(n, m)); } }",175
"class
Grid 
{ 





static
int
count(
int
n) 

{ 





int
[] dp = 
new
int
[n+
1
]; 

dp[
0
] = 
0
; 



for
(
int
i=
1
;i<=n;i++) 

{ 



if
(i >= 
1
&& i <= 
3
) 

dp[i] = 
1
; 

else
if
(i==
4
) 

dp[i] = 
2
; 


else

{ 









dp[i] = dp[i-
1
] + dp[i-
4
]; 

} 

} 

return
dp[n]; 

} 




public
static
void
main (String[] args) 

{ 

int
n = 
5
; 

System.out.println(
""Count of ways is: ""
+ count(n)); 

} 
}","class Grid { static int count(int n) { int[] dp = new int[n + 1]; dp[0] = 0; for (int i = 1; i <= n; i++) { if (i >= 1 && i <= 3) dp[i] = 1; else if (i == 4) dp[i] = 2; else { dp[i] = dp[i - 1] + dp[i - 4]; } } return dp[n]; } public static void main(String[] args) { int n = 5; System.out.println(""Count of ways is: "" + count(n)); } }",176
"class
GFG { 






static
int
nonDecNums(
int
n) 

{ 





int
[][] a = 
new
int
[n + 
1
][
10
]; 




for
(
int
i = 
0
; i <= 
9
; i++) 

a[
0
][i] = 
1
; 






for
(
int
i = 
1
; i <= n; i++) 

a[i][
9
] = 
1
; 








for
(
int
i = 
1
; i <= n; i++) 

for
(
int
j = 
8
; j >= 
0
; j--) 

a[i][j] = a[i - 
1
][j] + a[i][j + 
1
]; 


return
a[n][
0
]; 

} 




public
static
void
main(String[] args) 

{ 

int
n = 
2
; 

System.out.println(
""Non-decreasing digits = ""
+ nonDecNums(n)); 

} 
}","class GFG { static int nonDecNums(int n) { int[][] a = new int[n + 1][10]; for (int i = 0; i <= 9; i++) a[0][i] = 1; for (int i = 1; i <= n; i++) a[i][9] = 1; for (int i = 1; i <= n; i++) for (int j = 8; j >= 0; j--) a[i][j] = a[i - 1][j] + a[i][j + 1]; return a[n][0]; } public static void main(String[] args) { int n = 2; System.out.println(""Non-decreasing digits = "" + nonDecNums(n)); } }",177
"class
GFG 
{ 

static
int
maxRevenue(
int
m, 
int
[] x, 

int
[] revenue, 

int
n, 
int
t) 
{ 






int
[] maxRev = 
new
int
[m + 
1
]; 

for
(
int
i = 
0
; i < m + 
1
; i++) 

maxRev[i] = 
0
; 






int
nxtbb = 
0
; 

for
(
int
i = 
1
; i <= m; i++) 

{ 





if
(nxtbb < n) 

{ 







if
(x[nxtbb] != i) 

maxRev[i] = maxRev[i - 
1
]; 




else

{ 












if
(i <= t) 

maxRev[i] = Math.max(maxRev[i - 
1
], 

revenue[nxtbb]); 






else

maxRev[i] = Math.max(maxRev[i - t - 
1
] + 

revenue[nxtbb], 

maxRev[i - 
1
]); 


nxtbb++; 

} 

} 

else

maxRev[i] = maxRev[i - 
1
]; 

} 


return
maxRev[m]; 
} 


public
static
void
main(String []args) 
{ 

int
m = 
20
; 

int
[] x = 
new
int
[]{
6
, 
7
, 
12
, 
13
, 
14
}; 

int
[] revenue = 
new
int
[]{
5
, 
6
, 
5
, 
3
, 
1
}; 

int
n = x.length; 

int
t = 
5
; 

System.out.println(maxRevenue(m, x, revenue, n, t)); 
} 
}","class GFG { static int maxRevenue(int m, int[] x, int[] revenue, int n, int t) { int[] maxRev = new int[m + 1]; for (int i = 0; i < m + 1; i++) maxRev[i] = 0; int nxtbb = 0; for (int i = 1; i <= m; i++) { if (nxtbb < n) { if (x[nxtbb] != i) maxRev[i] = maxRev[i - 1]; else { if (i <= t) maxRev[i] = Math.max(maxRev[i - 1], revenue[nxtbb]); else maxRev[i] = Math.max(maxRev[i - t - 1] + revenue[nxtbb], maxRev[i - 1]); nxtbb++; } } else maxRev[i] = maxRev[i - 1]; } return maxRev[m]; } public static void main(String[] args) { int m = 20; int[] x = new int[]{6, 7, 12, 13, 14}; int[] revenue = new int[]{5, 6, 5, 3, 1}; int n = x.length; int t = 5; System.out.println(maxRevenue(m, x, revenue, n, t)); } }",178
"public
class
Main { 








public
static
void
rearrange(
int
arr[], 
int
n) 

{ 





int
max_ele = arr[n - 
1
]; 

int
min_ele = arr[
0
]; 



for
(
int
i = 
0
; i < n; i++) { 



if
(i % 
2
== 
0
) { 

arr[i] = max_ele; 

max_ele -= 
1
; 

} 




else
{ 

arr[i] = min_ele; 

min_ele += 
1
; 

} 

} 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = { 
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
, 
8
, 
9
}; 

int
n = arr.length; 


System.out.println(
""Original Array""
); 

for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 


rearrange(arr, n); 


System.out.print(
""\nModified Array\n""
); 

for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 
}","public class Main {
    public static void rearrange(int arr[], int n) {
        int max_ele = arr[n - 1];
        int min_ele = arr[0];
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                arr[i] = max_ele;
                max_ele -= 1;
            } else {
                arr[i] = min_ele;
                min_ele += 1;
            }
        }
    }
    public static void main(String args[]) {
        int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int n = arr.length;
        System.out.println(""Original Array"");
        for (int i = 0; i < n; i++)
            System.out.print(arr[i] + "" "");
        rearrange(arr, n);
        System.out.print(""\nModified Array\n"");
        for (int i = 0; i < n; i++)
            System.out.print(arr[i] + "" "");
    }
}",179
"public
class
LisTree 
{ 



static
class
node 

{ 

int
data, liss; 

node left, right; 


public
node(
int
data) 

{ 

this
.data = data; 

this
.liss = 
0
; 

} 

} 








static
int
liss(node root) 

{ 

if
(root == 
null
) 

return
0
; 

if
(root.liss != 
0
) 

return
root.liss; 

if
(root.left == 
null
&& root.right == 
null
) 

return
root.liss = 
1
; 






int
liss_excl = liss(root.left) + liss(root.right); 






int
liss_incl = 
1
; 

if
(root.left != 
null
) 

{ 

liss_incl += (liss(root.left.left) + liss(root.left.right)); 

} 

if
(root.right != 
null
) 

{ 

liss_incl += (liss(root.right.left) + liss(root.right.right)); 

} 






return
root.liss = Math.max(liss_excl, liss_incl); 

} 


public
static
void
main(String[] args) 

{ 






node root = 
new
node(
20
); 

root.left = 
new
node(
8
); 

root.left.left = 
new
node(
4
); 

root.left.right = 
new
node(
12
); 

root.left.right.left = 
new
node(
10
); 

root.left.right.right = 
new
node(
14
); 

root.right = 
new
node(
22
); 

root.right.right = 
new
node(
25
); 

System.out.println(
""Size of the Largest Independent Set is ""
+ liss(root)); 

} 
}","public class LisTree { static class node { int data, liss; node left, right; public node(int data) { this.data = data; this.liss = 0; } } static int liss(node root) { if (root == null) return 0; if (root.liss != 0) return root.liss; if (root.left == null && root.right == null) return root.liss = 1; int liss_excl = liss(root.left) + liss(root.right); int liss_incl = 1; if (root.left != null) { liss_incl += (liss(root.left.left) + liss(root.left.right)); } if (root.right != null) { liss_incl += (liss(root.right.left) + liss(root.right.right)); } return root.liss = Math.max(liss_excl, liss_incl); } public static void main(String[] args) { node root = new node(20); root.left = new node(8); root.left.left = new node(4); root.left.right = new node(12); root.left.right.left = new node(10); root.left.right.right = new node(14); root.right = new node(22); root.right.right = new node(25); System.out.println('Size of the Largest Independent Set is ' + liss(root)); } }",180
"class
GFG 
{ 


static
int
max(
int
x, 
int
y) 
{ 

return
(x > y ? x : y); 
} 



static
int
maxTasks(
int
[]high, 
int
[]low, 
int
n) 
{ 





int
[] task_dp = 
new
int
[n + 
1
]; 




task_dp[
0
] = 
0
; 






task_dp[
1
] = high[
0
]; 






for
(
int
i = 
2
; i <= n; i++) 

task_dp[i] = Math.max(high[i - 
1
] + task_dp[i - 
2
], 

low[i - 
1
] + task_dp[i - 
1
]); 

return
task_dp[n]; 
} 


public
static
void
main(String[] args) 
{ 

int
n = 
5
; 

int
[]high = {
3
, 
6
, 
8
, 
7
, 
6
}; 

int
[]low = {
1
, 
5
, 
4
, 
5
, 
3
}; 

System.out.println(maxTasks(high, low, n)); 
} 
}","class GFG { static int max(int x, int y) { return (x > y ? x : y); } static int maxTasks(int[] high, int[] low, int n) { int[] task_dp = new int[n + 1]; task_dp[0] = 0; task_dp[1] = high[0]; for (int i = 2; i <= n; i++) task_dp[i] = Math.max(high[i - 1] + task_dp[i - 2], low[i - 1] + task_dp[i - 1]); return task_dp[n]; } public static void main(String[] args) { int n = 5; int[] high = {3, 6, 8, 7, 6}; int[] low = {1, 5, 4, 5, 3}; System.out.println(maxTasks(high, low, n)); } }",181
"class
GFG { 






static
void
segregateElements(
int
arr[], 
int
n) 

{ 




int
temp[] = 
new
int
[n]; 






int
j = 
0
; 



for
(
int
i = 
0
; i < n; i++) 

if
(arr[i] >= 
0
) 

temp[j++] = arr[i]; 






if
(j == n || j == 
0
) 

return
; 




for
(
int
i = 
0
; i < n; i++) 

if
(arr[i] < 
0
) 

temp[j++] = arr[i]; 




for
(
int
i = 
0
; i < n; i++) 

arr[i] = temp[i]; 

} 




public
static
void
main(String arg[]) 

{ 

int
arr[] = { 
1
, -
1
, -
3
, -
2
, 
7
, 
5
, 
11
, 
6
}; 

int
n = arr.length; 


segregateElements(arr, n); 


for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 
}","class GFG { static void segregateElements(int arr[], int n) { int temp[] = new int[n]; int j = 0; for (int i = 0; i < n; i++) if (arr[i] >= 0) temp[j++] = arr[i]; if (j == n || j == 0) return; for (int i = 0; i < n; i++) if (arr[i] < 0) temp[j++] = arr[i]; for (int i = 0; i < n; i++) arr[i] = temp[i]; } public static void main(String arg[]) { int arr[] = { 1, -1, -3, -2, 7, 5, 11, 6 }; int n = arr.length; segregateElements(arr, n); for (int i = 0; i < n; i++) System.out.print(arr[i] + "" ""); } }",182
"class
Node 
{ 

int
key; 

Node left, right; 


public
Node(
int
item) 

{ 

key = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 



Node root; 


BinaryTree() 

{ 

root = 
null
; 

} 




void
printPostorder(Node node) 

{ 

if
(node == 
null
) 

return
; 




printPostorder(node.left); 




printPostorder(node.right); 




System.out.print(node.key + 
"" ""
); 

} 




void
printInorder(Node node) 

{ 

if
(node == 
null
) 

return
; 




printInorder(node.left); 




System.out.print(node.key + 
"" ""
); 




printInorder(node.right); 

} 




void
printPreorder(Node node) 

{ 

if
(node == 
null
) 

return
; 




System.out.print(node.key + 
"" ""
); 




printPreorder(node.left); 




printPreorder(node.right); 

} 




void
printPostorder() { printPostorder(root); } 

void
printInorder() { printInorder(root); } 

void
printPreorder() { printPreorder(root); } 




public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
5
); 


System.out.println(
""Preorder traversal of binary tree is ""
); 

tree.printPreorder(); 


System.out.println(
""\nInorder traversal of binary tree is ""
); 

tree.printInorder(); 


System.out.println(
""\nPostorder traversal of binary tree is ""
); 

tree.printPostorder(); 

} 
}","class Node { int key; Node left, right; public Node(int item) { key = item; left = right = null; } } class BinaryTree { Node root; BinaryTree() { root = null; } void printPostorder(Node node) { if (node == null) return; printPostorder(node.left); printPostorder(node.right); System.out.print(node.key + "" ""); } void printInorder(Node node) { if (node == null) return; printInorder(node.left); System.out.print(node.key + "" ""); printInorder(node.right); } void printPreorder(Node node) { if (node == null) return; System.out.print(node.key + "" ""); printPreorder(node.left); printPreorder(node.right); } void printPostorder() { printPostorder(root); } void printInorder() { printInorder(root); } void printPreorder() { printPreorder(root); } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(1); tree.root.left = new Node(2); tree.root.right = new Node(3); tree.root.left.left = new Node(4); tree.root.left.right = new Node(5); System.out.println(""Preorder traversal of binary tree is ""); tree.printPreorder(); System.out.println(""\nInorder traversal of binary tree is ""); tree.printInorder(); System.out.println(""\nPostorder traversal of binary tree is ""); tree.printPostorder(); } }",183
"class
Solution 
{ 
static
class
INT 
{ 

int
data; 

INT(
int
d) 

{ 

data=d; 

} 
} 



static
void
findPostOrderUtil(
int
pre[], 
int
n, 
int
minval, 

int
maxval, INT preIndex) 
{ 








if
(preIndex.data == n) 

return
; 






if
(pre[preIndex.data] < minval || pre[preIndex.data] > maxval) { 

return
; 

} 










int
val = pre[preIndex.data]; 

preIndex.data++; 






findPostOrderUtil(pre, n, minval, val, preIndex); 






findPostOrderUtil(pre, n, val, maxval, preIndex); 


System.out.print( val + 
"" ""
); 
} 


static
void
findPostOrder(
int
pre[], 
int
n) 
{ 










INT preIndex = 
new
INT(
0
); 


findPostOrderUtil(pre, n, Integer.MIN_VALUE, 

Integer.MAX_VALUE, preIndex); 
} 


public
static
void
main(String args[]) 
{ 

int
pre[] = { 
40
, 
30
, 
35
, 
80
, 
100
}; 


int
n = pre.length; 




findPostOrder(pre, n); 
} 
}","class Solution { static class INT { int data; INT(int d) { data = d; } } static void findPostOrderUtil(int[] pre, int n, int minval, int maxval, INT preIndex) { if (preIndex.data == n) return; if (pre[preIndex.data] < minval || pre[preIndex.data] > maxval) { return; } int val = pre[preIndex.data]; preIndex.data++; findPostOrderUtil(pre, n, minval, val, preIndex); findPostOrderUtil(pre, n, val, maxval, preIndex); System.out.print(val + "" ""); } static void findPostOrder(int[] pre, int n) { INT preIndex = new INT(0); findPostOrderUtil(pre, n, Integer.MIN_VALUE, Integer.MAX_VALUE, preIndex); } public static void main(String args[]) { int pre[] = { 40, 30, 35, 80, 100 }; int n = pre.length; findPostOrder(pre, n); } }",184
"class
Solution 
{ 


static
class
Node { 

int
data; 

Node left, right; 
} 


static
class
INT 
{ 

int
data; 
} 


static
Node getNode(
int
data) 
{ 



Node new_node =
new
Node(); 




new_node.data = data; 

new_node.left = new_node.right = 
null
; 


return
new_node; 
} 



static
void
storeInorderTraversal( Node root, 

Vector<Integer> arr) 
{ 



if
(root==
null
) 

return
; 




storeInorderTraversal(root.left, arr); 




arr.add(root.data); 




storeInorderTraversal(root.right, arr); 
} 



static
void
replaceNodeWithSum( Node root, 

Vector<Integer> arr, INT i) 
{ 



if
(root==
null
) 

return
; 




replaceNodeWithSum(root.left, arr, i); 






root.data = arr.get(i.data - 
1
) + arr.get(i.data + 
1
); 




i.data++; 




replaceNodeWithSum(root.right, arr, i); 
} 




static
void
replaceNodeWithSumUtil( Node root) 
{ 



if
(root==
null
) 

return
; 


Vector<Integer> arr= 
new
Vector<Integer>(); 






arr.add(
0
); 




storeInorderTraversal(root, arr); 






arr.add(
0
); 




INT i = 
new
INT(); 


i.data=
1
; 


replaceNodeWithSum(root, arr, i); 
} 



static
void
preorderTraversal( Node root) 
{ 



if
(root==
null
) 

return
; 




System.out.print( root.data + 
"" ""
); 




preorderTraversal(root.left); 




preorderTraversal(root.right); 
} 


public
static
void
main(String args[]) 
{ 



Node root = getNode(
1
); 


root.left = getNode(
2
); 


root.right = getNode(
3
); 


root.left.left = getNode(
4
); 


root.left.right = getNode(
5
); 


root.right.left = getNode(
6
); 

root.right.right = getNode(
7
); 


System.out.println( 
""Preorder Traversal before tree modification:""
); 

preorderTraversal(root); 


replaceNodeWithSumUtil(root); 


System.out.println(
""\nPreorder Traversal after tree modification:""
); 

preorderTraversal(root); 

} 
}","class Solution { static class Node { int data; Node left, right; } static class INT { int data; } static Node getNode(int data) { Node new_node = new Node(); new_node.data = data; new_node.left = new_node.right = null; return new_node; } static void storeInorderTraversal(Node root, java.util.Vector<Integer> arr) { if (root == null) return; storeInorderTraversal(root.left, arr); arr.add(root.data); storeInorderTraversal(root.right, arr); } static void replaceNodeWithSum(Node root, java.util.Vector<Integer> arr, INT i) { if (root == null) return; replaceNodeWithSum(root.left, arr, i); root.data = arr.get(i.data - 1) + arr.get(i.data + 1); i.data++; replaceNodeWithSum(root.right, arr, i); } static void replaceNodeWithSumUtil(Node root) { if (root == null) return; java.util.Vector<Integer> arr = new java.util.Vector<Integer>(); arr.add(0); storeInorderTraversal(root, arr); arr.add(0); INT i = new INT(); i.data = 1; replaceNodeWithSum(root, arr, i); } static void preorderTraversal(Node root) { if (root == null) return; System.out.print(root.data + "" ""); preorderTraversal(root.left); preorderTraversal(root.right); } public static void main(String args[]) { Node root = getNode(1); root.left = getNode(2); root.right = getNode(3); root.left.left = getNode(4); root.left.right = getNode(5); root.right.left = getNode(6); root.right.right = getNode(7); System.out.println(""Preorder Traversal before tree modification:""); preorderTraversal(root); replaceNodeWithSumUtil(root); System.out.println(""\nPreorder Traversal after tree modification:""); preorderTraversal(root); } }",185
"class
GFG { 


static
void
rearrange(
int
arr[], 
int
n) 

{ 


int
temp; 

for
(
int
i = 
0
; i < n - 
1
; i++) { 

if
(i % 
2
== 
0
&& arr[i] > arr[i + 
1
]) { 

temp = arr[i]; 

arr[i] = arr[i + 
1
]; 

arr[i + 
1
] = temp; 

} 

if
(i % 
2
!= 
0
&& arr[i] < arr[i + 
1
]) { 

temp = arr[i]; 

arr[i] = arr[i + 
1
]; 

arr[i + 
1
] = temp; 

} 

} 

} 




static
void
printArray(
int
arr[], 
int
size) 

{ 

for
(
int
i = 
0
; i < size; i++) 

System.out.print(arr[i] + 
"" ""
); 


System.out.println(); 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
6
, 
4
, 
2
, 
1
, 
8
, 
3
}; 

int
n = arr.length; 


System.out.print(
""Before rearranging: \n""
); 

printArray(arr, n); 


rearrange(arr, n); 


System.out.print(
""After rearranging: \n""
); 

printArray(arr, n); 

} 
}","class GFG { static void rearrange(int[] arr, int n) { int temp; for (int i = 0; i < n - 1; i++) { if (i % 2 == 0 && arr[i] > arr[i + 1]) { temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; } if (i % 2 != 0 && arr[i] < arr[i + 1]) { temp = arr[i]; arr[i] = arr[i + 1]; arr[i + 1] = temp; } } } static void printArray(int[] arr, int size) { for (int i = 0; i < size; i++) System.out.print(arr[i] + ",186
"class
Solution 
{ 


static
class
Node 
{ 

int
data; 

Node left, right; 
} 


static
Node temp = 
new
Node(); 


static
Node newNode(
int
data) 

{ 

Node temp = 
new
Node(); 

temp.data = data; 

temp.left = temp.right = 
null
; 

return
temp; 
} 


static
Node leftMostNode(Node node) 

{ 

while
(node != 
null
&& node.left != 
null
) 

node = node.left; 

return
node; 
} 


static
Node rightMostNode(Node node) 

{ 

while
(node != 
null
&& node.right != 
null
) 

node = node.right; 

return
node; 
} 



static
Node findInorderRecursive(Node root, Node x ) 

{ 

if
(root==
null
) 

return
null
; 


if
(root==x || (temp = findInorderRecursive(root.left,x))!=
null
|| 

(temp = findInorderRecursive(root.right,x))!=
null
) 

{ 

if
(temp!=
null
) 

{ 

if
(root.left == temp) 

{ 

System.out.print( 
""Inorder Successor of ""
+x.data); 

System.out.print( 
"" is ""
+ root.data + 
""\n""
); 

return
null
; 

} 

} 


return
root; 

} 


return
null
; 
} 



static
void
inorderSuccesor(Node root, Node x) 

{ 



if
(x.right != 
null
) 

{ 

Node inorderSucc = leftMostNode(x.right); 

System.out.print(
""Inorder Successor of ""
+x.data+
"" is ""
); 

System.out.print(inorderSucc.data+
""\n""
); 

} 




if
(x.right == 
null
) 

{ 

int
f = 
0
; 


Node rightMost = rightMostNode(root); 




if
(rightMost == x) 

System.out.print(
""No inorder successor! Right most node.\n""
); 

else

findInorderRecursive(root, x); 

} 
} 


public
static
void
main(String args[]) 
{ 






Node root = newNode(
1
); 

root.left = newNode(
2
); 

root.right = newNode(
3
); 

root.left.left = newNode(
4
); 

root.left.right = newNode(
5
); 

root.right.right = newNode(
6
); 




inorderSuccesor(root, root.right); 




inorderSuccesor(root, root.left.left); 




inorderSuccesor(root, root.right.right); 

} 
}","class Solution { static class Node { int data; Node left, right; } static Node temp = new Node(); static Node newNode(int data) { Node temp = new Node(); temp.data = data; temp.left = temp.right = null; return temp; } static Node leftMostNode(Node node) { while (node != null && node.left != null) node = node.left; return node; } static Node rightMostNode(Node node) { while (node != null && node.right != null) node = node.right; return node; } static Node findInorderRecursive(Node root, Node x ) { if (root==null) return null; if (root==x || (temp = findInorderRecursive(root.left,x))!=null || (temp = findInorderRecursive(root.right,x))!=null) { if (temp!=null) { if (root.left == temp) { System.out.print( ""Inorder Successor of ""+x.data); System.out.print( "" is ""+ root.data + ""\n""); return null; } } return root; } return null; } static void inorderSuccesor(Node root, Node x) { if (x.right != null) { Node inorderSucc = leftMostNode(x.right); System.out.print(""Inorder Successor of ""+x.data+"" is ""); System.out.print(inorderSucc.data+""\n""); } if (x.right == null) { int f = 0 ; Node rightMost = rightMostNode(root); if (rightMost == x) System.out.print(""No inorder successor! Right most node.\n""); else findInorderRecursive(root, x); } } public static void main(String args[]) { Node root = newNode(1); root.left = newNode(2); root.right = newNode(3); root.left.left = newNode(4); root.left.right = newNode(5); root.right.right = newNode(6); inorderSuccesor(root, root.right); inorderSuccesor(root, root.left.left); inorderSuccesor(root, root.right.right); } }",187
"class
Solution 
{ 
static
int
count =
0
; 

static
class
Node { 

int
data; 

Node left; 

Node right; 
} 



static
Node newNode(
int
data) 
{ 

Node node = 
new
Node(); 

node.data = data; 

node.left = 
null
; 

node.right = 
null
; 


return
(node); 
} 



static
void
NthInorder( Node node, 
int
n) 
{ 

if
(node == 
null
) 

return
; 


if
(count <= n) { 



NthInorder(node.left, n); 

count++; 




if
(count == n) 

System.out.printf(
""%d ""
, node.data); 




NthInorder(node.right, n); 

} 
} 


public
static
void
main(String args[]) 
{ 

Node root = newNode(
10
); 

root.left = newNode(
20
); 

root.right = newNode(
30
); 

root.left.left = newNode(
40
); 

root.left.right = newNode(
50
); 


int
n = 
4
; 


NthInorder(root, n); 
} 
}","class Solution { static int count = 0; static class Node { int data; Node left; Node right; } static Node newNode(int data) { Node node = new Node(); node.data = data; node.left = null; node.right = null; return (node); } static void NthInorder(Node node, int n) { if (node == null) return; if (count <= n) { NthInorder(node.left, n); count++; if (count == n) System.out.printf(""%d "", node.data); NthInorder(node.right, n); } } public static void main(String args[]) { Node root = newNode(10); root.left = newNode(20); root.right = newNode(30); root.left.left = newNode(40); root.left.right = newNode(50); int n = 4; NthInorder(root, n); } }",188
"public
class
NthNodePostOrder { 


static
int
flag = 
0
; 






public
static
void
NthPostordernode(Node root, 
int
N) 

{ 


if
(root == 
null
) 

return
; 


if
(flag <= N) 

{ 



NthPostordernode(root.left, N); 



NthPostordernode(root.right, N); 

flag++; 



if
(flag == N) 

System.out.print(root.data); 

} 

} 



public
static
void
main(String args[]) { 

Node root = 
new
Node(
25
); 

root.left = 
new
Node(
20
); 

root.right = 
new
Node(
30
); 

root.left.left = 
new
Node(
18
); 

root.left.right = 
new
Node(
22
); 

root.right.left = 
new
Node(
24
); 

root.right.right = 
new
Node(
32
); 


int
N = 
6
; 




NthPostordernode(root, N); 

} 
} 


class
Node 
{ 

int
data; 

Node left, right; 

Node(
int
data) 

{ 

this
.data=data; 

} 
};","public class NthNodePostOrder {
    static int flag = 0;

    public static void NthPostordernode(Node root, int N) {
        if (root == null) return;

        if (flag <= N) {
            NthPostordernode(root.left, N);
            NthPostordernode(root.right, N);
            flag++;

            if (flag == N) System.out.print(root.data);
        }
    }

    public static void main(String args[]) {
        Node root = new Node(25);
        root.left = new Node(20);
        root.right = new Node(30);
        root.left.left = new Node(18);
        root.left.right = new Node(22);
        root.right.left = new Node(24);
        root.right.right = new Node(32);

        int N = 6;

        NthPostordernode(root, N);
    }
}

class Node {
    int data;
    Node left, right;

    Node(int data) {
        this.data = data;
    }
};",189
"class
Node { 

int
data; 

Node left, right; 


public
Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree { 


static
Node root; 


void
printSpiral(Node node) 

{ 

if
(node == 
null
) 

return
; 







Stack<Node> s1 = 
new
Stack<Node>(); 



Stack<Node> s2 = 
new
Stack<Node>(); 




s1.push(node); 




while
(!s1.empty() || !s2.empty()) { 





while
(!s1.empty()) { 

Node temp = s1.peek(); 

s1.pop(); 

System.out.print(temp.data + 
"" ""
); 




if
(temp.right != 
null
) 

s2.push(temp.right); 


if
(temp.left != 
null
) 

s2.push(temp.left); 

} 






while
(!s2.empty()) { 

Node temp = s2.peek(); 

s2.pop(); 

System.out.print(temp.data + 
"" ""
); 




if
(temp.left != 
null
) 

s1.push(temp.left); 

if
(temp.right != 
null
) 

s1.push(temp.right); 

} 

} 

} 


public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
7
); 

tree.root.left.right = 
new
Node(
6
); 

tree.root.right.left = 
new
Node(
5
); 

tree.root.right.right = 
new
Node(
4
); 

System.out.println(
""Spiral Order traversal of Binary Tree is ""
); 

tree.printSpiral(root); 

} 
}","class Node {

    int data;
    Node left, right;

    public Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree {

    static Node root;

    void printSpiral(Node node) {
        if (node == null)
            return;

        Stack<Node> s1 = new Stack<Node>();
        Stack<Node> s2 = new Stack<Node>();

        s1.push(node);

        while (!s1.empty() || !s2.empty()) {

            while (!s1.empty()) {
                Node temp = s1.peek();
                s1.pop();
                System.out.print(temp.data + "" "");

                if (temp.right != null)
                    s2.push(temp.right);
                if (temp.left != null)
                    s2.push(temp.left);
            }

            while (!s2.empty()) {
                Node temp = s2.peek();
                s2.pop();
                System.out.print(temp.data + "" "");

                if (temp.left != null)
                    s1.push(temp.left);
                if (temp.right != null)
                    s1.push(temp.right);
            }
        }
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(7);
        tree.root.left.right = new Node(6);
        tree.root.right.left = new Node(5);
        tree.root.right.right = new Node(4);

        System.out.println(""Spiral Order traversal of Binary Tree is "");
        tree.printSpiral(root);
    }
}",190
"public
class
GFG { 

static
class
Node { 

int
data; 

Node left; 

Node right; 


Node(
int
data) { 

this
.data = data; 

left = 
null
; 

right = 
null
; 

} 

} 






static
void
levelOrder(Node root) { 

if
(root == 
null
) 

return
; 


Queue<Node> q = 
new
LinkedList<>(); 




q.add(root); 




q.add(
null
); 






while
(!q.isEmpty()) { 


Node curr = q.poll(); 






if
(curr == 
null
) { 

if
(!q.isEmpty()) { 

q.add(
null
); 

System.out.println(); 

} 

} 
else
{ 



if
(curr.left != 
null
) 

q.add(curr.left); 




if
(curr.right != 
null
) 

q.add(curr.right); 


System.out.print(curr.data + 
"" ""
); 

} 

} 

} 




public
static
void
main(String[] args) { 


Node root = 
new
Node(
1
); 

root.left = 
new
Node(
2
); 

root.right = 
new
Node(
3
); 

root.left.left = 
new
Node(
4
); 

root.left.right = 
new
Node(
5
); 

root.right.right = 
new
Node(
6
); 


levelOrder(root); 

} 
}","public class GFG { static class Node { int data; Node left; Node right; Node(int data) { this.data = data; left = null; right = null; } } static void levelOrder(Node root) { if (root == null) return; Queue<Node> q = new LinkedList<>(); q.add(root); q.add(null); while (!q.isEmpty()) { Node curr = q.poll(); if (curr == null) { if (!q.isEmpty()) { q.add(null); System.out.println(); } } else { if (curr.left != null) q.add(curr.left); if (curr.right != null) q.add(curr.right); System.out.print(curr.data + "" ""); } } } public static void main(String[] args) { Node root = new Node(1); root.left = new Node(2); root.right = new Node(3); root.left.left = new Node(4); root.left.right = new Node(5); root.right.right = new Node(6); levelOrder(root); } }",191
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right; 

} 
} 

class
BinaryTree 
{ 

Node root; 




void
reverseLevelOrder(Node node) 

{ 

Stack<Node> S = 
new
Stack(); 

Queue<Node> Q = 
new
LinkedList(); 

Q.add(node); 










while
(Q.isEmpty() == 
false
) 

{ 



node = Q.peek(); 

Q.remove(); 

S.push(node); 




if
(node.right != 
null
) 



Q.add(node.right); 




if
(node.left != 
null
) 

Q.add(node.left); 

} 




while
(S.empty() == 
false
) 

{ 

node = S.peek(); 

System.out.print(node.data + 
"" ""
); 

S.pop(); 

} 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 




tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
5
); 

tree.root.right.left = 
new
Node(
6
); 

tree.root.right.right = 
new
Node(
7
); 


System.out.println(
""Level Order traversal of binary tree is :""
); 

tree.reverseLevelOrder(tree.root); 


} 
}","class Node {

    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right;
    }
}

class BinaryTree {

    Node root;

    void reverseLevelOrder(Node node) {
        Stack<Node> stack = new Stack<>();
        Queue<Node> queue = new LinkedList<>();
        queue.add(node);
        while (!queue.isEmpty()) {
            node = queue.peek();
            queue.remove();
            stack.push(node);
            if (node.right != null) {
                queue.add(node.right);
            }
            if (node.left != null) {
                queue.add(node.left);
            }
        }
        while (!stack.isEmpty()) {
            node = stack.peek();
            System.out.print(node.data + "" "");
            stack.pop();
        }
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);
        System.out.println(""Level Order traversal of binary tree is :"");
        tree.reverseLevelOrder(tree.root);
    }
}",192
"class
Node 
{ 

int
data; 

Node left, right; 


public
Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




void
printSpecificLevelOrder(Node node) 

{ 

if
(node == 
null
) 

return
; 




System.out.print(node.data); 




if
(node.left != 
null
) 

System.out.print(
"" ""
+ node.left.data + 
"" ""
+ node.right.data); 






if
(node.left.left == 
null
) 

return
; 




Queue<Node> q = 
new
LinkedList<Node>(); 

q.add(node.left); 

q.add(node.right); 






Node first = 
null
, second = 
null
; 




while
(!q.isEmpty()) 

{ 



first = q.peek(); 

q.remove(); 

second = q.peek(); 

q.remove(); 




System.out.print(
"" ""
+ first.left.data + 
"" ""
+second.right.data); 

System.out.print(
"" ""
+ first.right.data + 
"" ""
+second.left.data); 






if
(first.left.left != 
null
) 

{ 

q.add(first.left); 

q.add(second.right); 

q.add(first.right); 

q.add(second.left); 

} 

} 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 


tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
5
); 

tree.root.right.left = 
new
Node(
6
); 

tree.root.right.right = 
new
Node(
7
); 


tree.root.left.left.left = 
new
Node(
8
); 

tree.root.left.left.right = 
new
Node(
9
); 

tree.root.left.right.left = 
new
Node(
10
); 

tree.root.left.right.right = 
new
Node(
11
); 

tree.root.right.left.left = 
new
Node(
12
); 

tree.root.right.left.right = 
new
Node(
13
); 

tree.root.right.right.left = 
new
Node(
14
); 

tree.root.right.right.right = 
new
Node(
15
); 


tree.root.left.left.left.left = 
new
Node(
16
); 

tree.root.left.left.left.right = 
new
Node(
17
); 

tree.root.left.left.right.left = 
new
Node(
18
); 

tree.root.left.left.right.right = 
new
Node(
19
); 

tree.root.left.right.left.left = 
new
Node(
20
); 

tree.root.left.right.left.right = 
new
Node(
21
); 

tree.root.left.right.right.left = 
new
Node(
22
); 

tree.root.left.right.right.right = 
new
Node(
23
); 

tree.root.right.left.left.left = 
new
Node(
24
); 

tree.root.right.left.left.right = 
new
Node(
25
); 

tree.root.right.left.right.left = 
new
Node(
26
); 

tree.root.right.left.right.right = 
new
Node(
27
); 

tree.root.right.right.left.left = 
new
Node(
28
); 

tree.root.right.right.left.right = 
new
Node(
29
); 

tree.root.right.right.right.left = 
new
Node(
30
); 

tree.root.right.right.right.right = 
new
Node(
31
); 


System.out.println(
""Specific Level Order traversal of binary""

+
""tree is ""
); 

tree.printSpecificLevelOrder(tree.root); 

} 
}","class Node { int data; Node left, right; public Node(int item) { data = item; left = right = null; } } class BinaryTree { Node root; void printSpecificLevelOrder(Node node) { if (node == null) return; System.out.print(node.data); if (node.left != null) System.out.print("" "" + node.left.data + "" "" + node.right.data); if (node.left.left == null) return; Queue<Node> q = new LinkedList<Node>(); q.add(node.left); q.add(node.right); Node first = null, second = null; while (!q.isEmpty()) { first = q.peek(); q.remove(); second = q.peek(); q.remove(); System.out.print("" "" + first.left.data + "" "" + second.right.data); System.out.print("" "" + first.right.data + "" "" + second.left.data); if (first.left.left != null) { q.add(first.left); q.add(second.right); q.add(first.right); q.add(second.left); } } } public static void main(String args[]) { BinaryTree tree = new BinaryTree(); tree.root = new Node(1); tree.root.left = new Node(2); tree.root.right = new Node(3); tree.root.left.left = new Node(4); tree.root.left.right = new Node(5); tree.root.right.left = new Node(6); tree.root.right.right = new Node(7); tree.root.left.left.left = new Node(8); tree.root.left.left.right = new Node(9); tree.root.left.right.left = new Node(10); tree.root.left.right.right = new Node(11); tree.root.right.left.left = new Node(12); tree.root.right.left.right = new Node(13); tree.root.right.right.left = new Node(14); tree.root.right.right.right = new Node(15); tree.root.left.left.left.left = new Node(16); tree.root.left.left.left.right = new Node(17); tree.root.left.left.right.left = new Node(18); tree.root.left.left.right.right = new Node(19); tree.root.left.right.left.left = new Node(20); tree.root.left.right.left.right = new Node(21); tree.root.left.right.right.left = new Node(22); tree.root.left.right.right.right = new Node(23); tree.root.right.left.left.left = new Node(24); tree.root.right.left.left.right = new Node(25); tree.root.right.left.right.left = new Node(26); tree.root.right.left.right.right = new Node(27); tree.root.right.right.left.left = new Node(28); tree.root.right.right.left.right = new Node(29); tree.root.right.right.right.left = new Node(30); tree.root.right.right.right.right = new Node(31); System.out.println(""Specific Level Order traversal of binary tree is ""); tree.printSpecificLevelOrder(tree.root); } }",193
"class
Multipy 
{ 

static
void
modify(
int
arr[], 
int
n) 

{ 



if
(n <= 
1
) 

return
; 




int
prev = arr[
0
]; 

arr[
0
] = arr[
0
] * arr[
1
]; 




for
(
int
i=
1
; i<n-
1
; i++) 

{ 



int
curr = arr[i]; 




arr[i] = prev * arr[i+
1
]; 




prev = curr; 

} 




arr[n-
1
] = prev * arr[n-
1
]; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
2
, 
3
, 
4
, 
5
, 
6
}; 

int
n = arr.length; 

modify(arr, n); 

for
(
int
i=
0
; i<n; i++) 

System.out.print(arr[i]+
"" ""
); 

} 
}","class Multiply {

    static void modify(int[] arr, int n) {
        if (n <= 1) {
            return;
        }

        int prev = arr[0];
        arr[0] = arr[0] * arr[1];

        for (int i = 1; i < n - 1; i++) {
            int curr = arr[i];
            arr[i] = prev * arr[i + 1];
            prev = curr;
        }

        arr[n - 1] = prev * arr[n - 1];
    }

    public static void main(String[] args) {
        int arr[] = {2, 3, 4, 5, 6};
        int n = arr.length;
        modify(arr, n);

        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + "" "");
        }
    }
}",194
"class
Node { 


char
data; 

Node left, right; 


Node(
char
item) { 

data = item; 

left = right = 
null
; 

} 
} 


class
Index { 


int
index; 
} 

class
BinaryTree { 


Node root; 

Index index_obj = 
new
Index(); 




void
storeAlternate(Node node, 
char
arr[], Index index, 
int
l) { 



if
(node == 
null
) { 

return
; 

} 



storeAlternate(node.left, arr, index, l + 
1
); 




if
(l % 
2
!= 
0
) { 

arr[index.index] = node.data; 

index.index++; 

} 


storeAlternate(node.right, arr, index, l + 
1
); 

} 






void
modifyTree(Node node, 
char
arr[], Index index, 
int
l) { 




if
(node == 
null
) { 

return
; 

} 




modifyTree(node.left, arr, index, l + 
1
); 




if
(l % 
2
!= 
0
) { 

node.data = arr[index.index]; 

(index.index)++; 

} 




modifyTree(node.right, arr, index, l + 
1
); 

} 






void
reverse(
char
arr[], 
int
n) { 

int
l = 
0
, r = n - 
1
; 

while
(l < r) { 

char
temp = arr[l]; 

arr[l] = arr[r]; 

arr[r] = temp; 

l++; 

r--; 

} 

} 


void
reverseAlternate() { 

reverseAlternate(root); 

} 




void
reverseAlternate(Node node) { 




char
[] arr = 
new
char
[
100
]; 




storeAlternate(node, arr, index_obj, 
0
); 







reverse(arr, index_obj.index); 




index_obj.index = 
0
; 

modifyTree(node, arr, index_obj, 
0
); 

} 


void
printInorder() { 

printInorder(root); 

} 






void
printInorder(Node node) { 

if
(node == 
null
) { 

return
; 

} 

printInorder(node.left); 

System.out.print(node.data + 
"" ""
); 

printInorder(node.right); 

} 




public
static
void
main(String args[]) { 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
'a'
); 

tree.root.left = 
new
Node(
'b'
); 

tree.root.right = 
new
Node(
'c'
); 

tree.root.left.left = 
new
Node(
'd'
); 

tree.root.left.right = 
new
Node(
'e'
); 

tree.root.right.left = 
new
Node(
'f'
); 

tree.root.right.right = 
new
Node(
'g'
); 

tree.root.left.left.left = 
new
Node(
'h'
); 

tree.root.left.left.right = 
new
Node(
'i'
); 

tree.root.left.right.left = 
new
Node(
'j'
); 

tree.root.left.right.right = 
new
Node(
'k'
); 

tree.root.right.left.left = 
new
Node(
'l'
); 

tree.root.right.left.right = 
new
Node(
'm'
); 

tree.root.right.right.left = 
new
Node(
'n'
); 

tree.root.right.right.right = 
new
Node(
'o'
); 

System.out.println(
""Inorder Traversal of given tree""
); 

tree.printInorder(); 


tree.reverseAlternate(); 

System.out.println(
""""
); 

System.out.println(
""""
); 

System.out.println(
""Inorder Traversal of modified tree""
); 

tree.printInorder(); 

} 
}","class Node {
    char data;
    Node left, right;

    Node(char item) {
        data = item;
        left = right = null;
    }
}

class Index {
    int index;
}

class BinaryTree {
    Node root;
    Index index_obj = new Index();

    void storeAlternate(Node node, char arr[], Index index, int l) {
        if (node == null) {
            return;
        }

        storeAlternate(node.left, arr, index, l + 1);

        if (l % 2 != 0) {
            arr[index.index] = node.data;
            index.index++;
        }

        storeAlternate(node.right, arr, index, l + 1);
    }

    void modifyTree(Node node, char arr[], Index index, int l) {
        if (node == null) {
            return;
        }

        modifyTree(node.left, arr, index, l + 1);

        if (l % 2 != 0) {
            node.data = arr[index.index];
            index.index++;
        }

        modifyTree(node.right, arr, index, l + 1);
    }

    void reverse(char arr[], int n) {
        int l = 0, r = n - 1;

        while (l < r) {
            char temp = arr[l];
            arr[l] = arr[r];
            arr[r] = temp;
            l++;
            r--;
        }
    }

    void reverseAlternate() {
        reverseAlternate(root);
    }

    void reverseAlternate(Node node) {
        char[] arr = new char[100];

        storeAlternate(node, arr, index_obj, 0);

        reverse(arr, index_obj.index);

        index_obj.index = 0;

        modifyTree(node, arr, index_obj, 0);
    }

    void printInorder() {
        printInorder(root);
    }

    void printInorder(Node node) {
        if (node == null) {
            return;
        }

        printInorder(node.left);
        System.out.print(node.data + "" "");
        printInorder(node.right);
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();

        tree.root = new Node('a');
        tree.root.left = new Node('b');
        tree.root.right = new Node('c');
        tree.root.left.left = new Node('d');
        tree.root.left.right = new Node('e');
        tree.root.right.left = new Node('f');
        tree.root.right.right = new Node('g');
        tree.root.left.left.left = new Node('h');
        tree.root.left.left.right = new Node('i');
        tree.root.left.right.left = new Node('j');
        tree.root.left.right.right = new Node('k');
        tree.root.right.left.left = new Node('l');
        tree.root.right.left.right = new Node('m');
        tree.root.right.right.left = new Node('n');
        tree.root.right.right.right = new Node('o');

        System.out.println(""Inorder Traversal of given tree"");
        tree.printInorder();

        tree.reverseAlternate();

        System.out.println("""");
        System.out.println("""");
        System.out.println(""Inorder Traversal of modified tree"");
        tree.printInorder();
    }
}",195
"class
Sol 
{ 

static
class
Node 
{ 

char
key; 

Node left, right; 
}; 

static
void
preorder( Node root1, Node root2, 
int
lvl) 
{ 



if
(root1 == 
null
|| root2==
null
) 

return
; 




if
(lvl % 
2
== 
0
) 

{ 

char
t = root1.key; 

root1.key = root2.key; 

root2.key = t; 

} 








preorder(root1.left, root2.right, lvl+
1
); 

preorder(root1.right, root2.left, lvl+
1
); 
} 



static
void
reverseAlternate( Node root) 
{ 

preorder(root.left, root.right, 
0
); 
} 



static
void
printInorder( Node root) 
{ 

if
(root == 
null
) 

return
; 

printInorder(root.left); 

System.out.print( root.key + 
"" ""
); 

printInorder(root.right); 
} 


static
Node newNode(
int
key) 
{ 

Node temp = 
new
Node(); 

temp.left = temp.right = 
null
; 

temp.key = (
char
)key; 

return
temp; 
} 


public
static
void
main(String args[]) 
{ 

Node root = newNode(
'a'
); 

root.left = newNode(
'b'
); 

root.right = newNode(
'c'
); 

root.left.left = newNode(
'd'
); 

root.left.right = newNode(
'e'
); 

root.right.left = newNode(
'f'
); 

root.right.right = newNode(
'g'
); 

root.left.left.left = newNode(
'h'
); 

root.left.left.right = newNode(
'i'
); 

root.left.right.left = newNode(
'j'
); 

root.left.right.right = newNode(
'k'
); 

root.right.left.left = newNode(
'l'
); 

root.right.left.right = newNode(
'm'
); 

root.right.right.left = newNode(
'n'
); 

root.right.right.right = newNode(
'o'
); 


System.out.print(
""Inorder Traversal of given tree\n""
); 

printInorder(root); 


reverseAlternate(root); 


System.out.print(
""\n\nInorder Traversal of modified tree\n""
); 

printInorder(root); 

} 
}","class Sol { static class Node { char key; Node left, right; }; static void preorder(Node root1, Node root2, int lvl) { if(root1 == null || root2==null) return; if(lvl % 2 == 0) { char t = root1.key; root1.key = root2.key; root2.key = t; } preorder(root1.left, root2.right, lvl+1); preorder(root1.right, root2.left, lvl+1); } static void reverseAlternate(Node root) { preorder(root.left, root.right, 0); } static void printInorder(Node root) { if(root == null) return; printInorder(root.left); System.out.print( root.key + "" ""); printInorder(root.right); } static Node newNode(int key) { Node temp = new Node(); temp.left = temp.right = null; temp.key = (char)key; return temp; } public static void main(String args[]) { Node root = newNode('a'); root.left = newNode('b'); root.right = newNode('c'); root.left.left = newNode('d'); root.left.right = newNode('e'); root.right.left = newNode('f'); root.right.right = newNode('g'); root.left.left.left = newNode('h'); root.left.left.right = newNode('i'); root.left.right.left = newNode('j'); root.left.right.right = newNode('k'); root.right.left.left = newNode('l'); root.right.left.right = newNode('m'); root.right.right.left = newNode('n'); root.right.right.right = newNode('o'); System.out.print(""Inorder Traversal of given tree\n""); printInorder(root); reverseAlternate(root); System.out.print(""\n\nInorder Traversal of modified tree\n""); printInorder(root); } }",196
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right; 

} 
} 

class
BinaryTree 
{ 

Node root; 

ArrayList<Integer> list = 
new
ArrayList<Integer>(); 






ArrayList<Integer> postOrderIterative(Node node) 

{ 

Stack<Node> S = 
new
Stack<Node>(); 




if
(node == 
null
) 

return
list; 

S.push(node); 

Node prev = 
null
; 

while
(!S.isEmpty()) 

{ 

Node current = S.peek(); 




if
(prev == 
null
|| prev.left == current || 

prev.right == current) 

{ 

if
(current.left != 
null
) 

S.push(current.left); 

else
if
(current.right != 
null
) 

S.push(current.right); 

else

{ 

S.pop(); 

list.add(current.data); 

} 




} 

else
if
(current.left == prev) 

{ 

if
(current.right != 
null
) 

S.push(current.right); 

else

{ 

S.pop(); 

list.add(current.data); 

} 




} 

else
if
(current.right == prev) 

{ 

S.pop(); 

list.add(current.data); 

} 


prev = current; 

} 


return
list; 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 




tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
5
); 

tree.root.right.left = 
new
Node(
6
); 

tree.root.right.right = 
new
Node(
7
); 


ArrayList<Integer> mylist = tree.postOrderIterative(tree.root); 


System.out.println(
""Post order traversal of binary tree is :""
); 

System.out.println(mylist); 

} 
}","class Node {

    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right;
    }
}

class BinaryTree {

    Node root;
    ArrayList<Integer> list = new ArrayList<Integer>();

    ArrayList<Integer> postOrderIterative(Node node) {
        Stack<Node> S = new Stack<Node>();

        if (node == null)
            return list;

        S.push(node);
        Node prev = null;

        while (!S.isEmpty()) {
            Node current = S.peek();

            if (prev == null || prev.left == current || prev.right == current) {
                if (current.left != null)
                    S.push(current.left);
                else if (current.right != null)
                    S.push(current.right);
                else {
                    S.pop();
                    list.add(current.data);
                }
            } else if (current.left == prev) {
                if (current.right != null)
                    S.push(current.right);
                else {
                    S.pop();
                    list.add(current.data);
                }
            } else if (current.right == prev) {
                S.pop();
                list.add(current.data);
            }
            prev = current;
        }

        return list;
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();

        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.left = new Node(6);
        tree.root.right.right = new Node(7);

        ArrayList<Integer> mylist = tree.postOrderIterative(tree.root);

        System.out.println(""Post order traversal of binary tree is :"");
        System.out.println(mylist);
    }
}",197
"class
Node { 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree { 

Node root; 




void
printLeaves(Node node) 

{ 

if
(node != 
null
) { 

printLeaves(node.left); 




if
(node.left == 
null
&& node.right == 
null
) 

System.out.print(node.data + 
"" ""
); 

printLeaves(node.right); 

} 

} 






void
printBoundaryLeft(Node node) 

{ 

if
(node != 
null
) { 

if
(node.left != 
null
) { 






System.out.print(node.data + 
"" ""
); 

printBoundaryLeft(node.left); 

} 

else
if
(node.right != 
null
) { 

System.out.print(node.data + 
"" ""
); 

printBoundaryLeft(node.right); 

} 






} 

} 






void
printBoundaryRight(Node node) 

{ 

if
(node != 
null
) { 

if
(node.right != 
null
) { 





printBoundaryRight(node.right); 

System.out.print(node.data + 
"" ""
); 

} 

else
if
(node.left != 
null
) { 

printBoundaryRight(node.left); 

System.out.print(node.data + 
"" ""
); 

} 





} 

} 




void
printBoundary(Node node) 

{ 

if
(node != 
null
) { 

System.out.print(node.data + 
"" ""
); 




printBoundaryLeft(node.left); 




printLeaves(node.left); 

printLeaves(node.right); 




printBoundaryRight(node.right); 

} 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
20
); 

tree.root.left = 
new
Node(
8
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
12
); 

tree.root.left.right.left = 
new
Node(
10
); 

tree.root.left.right.right = 
new
Node(
14
); 

tree.root.right = 
new
Node(
22
); 

tree.root.right.right = 
new
Node(
25
); 

tree.printBoundary(tree.root); 

} 
}","class Node {

int data;
Node left, right;

Node(int item) {
    data = item;
    left = right = null;
}
}

class BinaryTree {

Node root;

void printLeaves(Node node) {
    if (node != null) {
        printLeaves(node.left);

        if (node.left == null && node.right == null)
            System.out.print(node.data + "" "");

        printLeaves(node.right);
    }
}

void printBoundaryLeft(Node node) {
    if (node != null) {
        if (node.left != null) {
            System.out.print(node.data + "" "");
            printBoundaryLeft(node.left);
        } else if (node.right != null) {
            System.out.print(node.data + "" "");
            printBoundaryLeft(node.right);
        }
    }
}

void printBoundaryRight(Node node) {
    if (node != null) {
        if (node.right != null) {
            printBoundaryRight(node.right);
            System.out.print(node.data + "" "");
        } else if (node.left != null) {
            printBoundaryRight(node.left);
            System.out.print(node.data + "" "");
        }
    }
}

void printBoundary(Node node) {
    if (node != null) {
        System.out.print(node.data + "" "");

        printBoundaryLeft(node.left);

        printLeaves(node.left);
        printLeaves(node.right);

        printBoundaryRight(node.right);
    }
}

public static void main(String args[]) {
    BinaryTree tree = new BinaryTree();
    tree.root = new Node(20);
    tree.root.left = new Node(8);
    tree.root.left.left = new Node(4);
    tree.root.left.right = new Node(12);
    tree.root.left.right.left = new Node(10);
    tree.root.left.right.right = new Node(14);
    tree.root.right = new Node(22);
    tree.root.right.right = new Node(25);
    tree.printBoundary(tree.root);
}",198
"class
ListNode 
{ 

int
data; 

ListNode next; 

ListNode(
int
d) 

{ 

data = d; 

next = 
null
; 

} 
} 


class
BinaryTreeNode 
{ 

int
data; 

BinaryTreeNode left, right = 
null
; 

BinaryTreeNode(
int
data) 

{ 

this
.data = data; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

ListNode head; 

BinaryTreeNode root; 






void
push(
int
new_data) 

{ 



ListNode new_node = 
new
ListNode(new_data); 




new_node.next = head; 




head = new_node; 

} 








BinaryTreeNode convertList2Binary(BinaryTreeNode node) 

{ 



Queue<BinaryTreeNode> q = 

new
LinkedList<BinaryTreeNode>(); 




if
(head == 
null
) 

{ 

node = 
null
; 

return
null
; 

} 






node = 
new
BinaryTreeNode(head.data); 

q.add(node); 




head = head.next; 






while
(head != 
null
) 

{ 





BinaryTreeNode parent = q.peek(); 

BinaryTreeNode pp = q.poll(); 












BinaryTreeNode leftChild = 
null
, rightChild = 
null
; 

leftChild = 
new
BinaryTreeNode(head.data); 

q.add(leftChild); 

head = head.next; 

if
(head != 
null
) 

{ 

rightChild = 
new
BinaryTreeNode(head.data); 

q.add(rightChild); 

head = head.next; 

} 






parent.left = leftChild; 

parent.right = rightChild; 

} 


return
node; 

} 






void
inorderTraversal(BinaryTreeNode node) 

{ 

if
(node != 
null
) 

{ 

inorderTraversal(node.left); 

System.out.print(node.data + 
"" ""
); 

inorderTraversal(node.right); 

} 

} 




public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.push(
36
); 


tree.push(
30
); 

tree.push(
25
); 

tree.push(
15
); 

tree.push(
12
); 

tree.push(
10
); 


BinaryTreeNode node = tree.convertList2Binary(tree.root); 


System.out.println(
""Inorder Traversal of the""
+ 

"" constructed Binary Tree is:""
); 

tree.inorderTraversal(node); 

} 
}","class ListNode { int data; ListNode next; ListNode(int d) { data = d; next = null; } } class BinaryTreeNode { int data; BinaryTreeNode left, right = null; BinaryTreeNode(int data) { this.data = data; left = right = null; } } class BinaryTree { ListNode head; BinaryTreeNode root; void push(int new_data) { ListNode new_node = new ListNode(new_data); new_node.next = head; head = new_node; } BinaryTreeNode convertList2Binary(BinaryTreeNode node) { Queue<BinaryTreeNode> q = new LinkedList<BinaryTreeNode>(); if (head == null) { node = null; return null; } node = new BinaryTreeNode(head.data); q.add(node); head = head.next; while (head != null) { BinaryTreeNode parent = q.peek(); BinaryTreeNode pp = q.poll(); BinaryTreeNode leftChild = null, rightChild = null; leftChild = new BinaryTreeNode(head.data); q.add(leftChild); head = head.next; if (head != null) { rightChild = new BinaryTreeNode(head.data); q.add(rightChild); head = head.next; } parent.left = leftChild; parent.right = rightChild; } return node; } void inorderTraversal(BinaryTreeNode node) { if (node != null) { inorderTraversal(node.left); System.out.print(node.data + ",199
"public
class
Tree { 

Node root; 




static
class
Node { 

int
data; 

Node left, right; 

Node(
int
data) 

{ 

this
.data = data; 

this
.left = 
null
; 

this
.right = 
null
; 

} 

} 




public
Node insertLevelOrder(
int
[] arr, Node root, 

int
i) 

{ 



if
(i < arr.length) { 

Node temp = 
new
Node(arr[i]); 

root = temp; 




root.left = insertLevelOrder(arr, root.left, 

2
* i + 
1
); 




root.right = insertLevelOrder(arr, root.right, 

2
* i + 
2
); 

} 

return
root; 

} 




public
void
inOrder(Node root) 

{ 

if
(root != 
null
) { 

inOrder(root.left); 

System.out.print(root.data + 
"" ""
); 

inOrder(root.right); 

} 

} 




public
static
void
main(String args[]) 

{ 

Tree t2 = 
new
Tree(); 

int
arr[] = { 
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
6
, 
6
, 
6
}; 

t2.root = t2.insertLevelOrder(arr, t2.root, 
0
); 

t2.inOrder(t2.root); 

} 
}","public class Tree { Node root; static class Node { int data; Node left, right; Node(int data) { this.data = data; this.left = null; this.right = null; } } public Node insertLevelOrder(int[] arr, Node root, int i) { if (i < arr.length) { Node temp = new Node(arr[i]); root = temp; root.left = insertLevelOrder(arr, root.left, 2 * i + 1); root.right = insertLevelOrder(arr, root.right, 2 * i + 2); } return root; } public void inOrder(Node root) { if (root != null) { inOrder(root.left); System.out.print(root.data + "" ""); inOrder(root.right); } } public static void main(String args[]) { Tree t2 = new Tree(); int arr[] = { 1, 2, 3, 4, 5, 6, 6, 6, 6 }; t2.root = t2.insertLevelOrder(arr, t2.root, 0); t2.inOrder(t2.root); } }",200
"class
PairInSortedRotated 
{ 





static
boolean
pairInSortedRotated(
int
arr[], 

int
n, 
int
x) 

{ 



int
i; 

for
(i = 
0
; i < n - 
1
; i++) 

if
(arr[i] > arr[i+
1
]) 

break
; 


int
l = (i + 
1
) % n; 





int
r = i; 







while
(l != r) 

{ 





if
(arr[l] + arr[r] == x) 

return
true
; 






if
(arr[l] + arr[r] < x) 

l = (l + 
1
) % n; 


else


r = (n + r - 
1
) % n; 

} 

return
false
; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
11
, 
15
, 
6
, 
8
, 
9
, 
10
}; 

int
sum = 
16
; 

int
n = arr.length; 


if
(pairInSortedRotated(arr, n, sum)) 

System.out.print(
""Array has two elements""
+ 

"" with sum 16""
); 

else

System.out.print(
""Array doesn't have two""
+ 

"" elements with sum 16 ""
); 

} 
}","class PairInSortedRotated {
    static boolean pairInSortedRotated(int arr[], int n, int x) {
        int i;
        for (i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i+1]) {
                break;
            }
        }
        int l = (i + 1) % n;
        int r = i;
        while (l != r) {
            if (arr[l] + arr[r] == x) {
                return true;
            }
            if (arr[l] + arr[r] < x) {
                l = (l + 1) % n;
            } else {
                r = (n + r - 1) % n;
            }
        }
        return false;
    }

    public static void main(String[] args) {
        int arr[] = {11, 15, 6, 8, 9, 10};
        int sum = 16;
        int n = arr.length;
        if (pairInSortedRotated(arr, n, sum)) {
            System.out.print(""Array has two elements"" + "" with sum 16"");
        } else {
            System.out.print(""Array doesn't have two"" + "" elements with sum 16 "");
        }
    }
}",201
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
Index 
{ 

int
index = 
0
; 
} 

class
BinaryTree 
{ 

Node root; 

Index myindex = 
new
Index(); 




Node constructTreeUtil(
int
pre[], 
char
preLN[], Index index_ptr, 

int
n, Node temp) 

{ 



int
index = index_ptr.index; 




if
(index == n) 

return
null
; 






temp = 
new
Node(pre[index]); 

(index_ptr.index)++; 






if
(preLN[index] == 
'N'
) 

{ 

temp.left = constructTreeUtil(pre, preLN, index_ptr, n, 

temp.left); 

temp.right = constructTreeUtil(pre, preLN, index_ptr, n, 

temp.right); 

} 


return
temp; 

} 




Node constructTree(
int
pre[], 
char
preLN[], 
int
n, Node node) 

{ 





int
index = 
0
; 


return
constructTreeUtil(pre, preLN, myindex, n, node); 

} 




void
printInorder(Node node) 

{ 

if
(node == 
null
) 

return
; 




printInorder(node.left); 




System.out.print(node.data + 
"" ""
); 




printInorder(node.right); 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

int
pre[] = 
new
int
[]{
10
, 
30
, 
20
, 
5
, 
15
}; 

char
preLN[] = 
new
char
[]{
'N'
, 
'N'
, 
'L'
, 
'L'
, 
'L'
}; 

int
n = pre.length; 




Node mynode = tree.constructTree(pre, preLN, n, tree.root); 




System.out.println(
""Following is Inorder Traversal of the""

+ 
""Constructed Binary Tree: ""
); 

tree.printInorder(mynode); 

} 
}","class Node { int data; Node left, right; Node(int item) { data = item; left = right = null; } } class Index { int index = 0; } class BinaryTree { Node root; Index myindex = new Index(); Node constructTreeUtil(int pre[], char preLN[], Index index_ptr, int n, Node temp) { int index = index_ptr.index; if (index == n) return null; temp = new Node(pre[index]); (index_ptr.index)++; if (preLN[index] == 'N') { temp.left = constructTreeUtil(pre, preLN, index_ptr, n, temp.left); temp.right = constructTreeUtil(pre, preLN, index_ptr, n, temp.right); } return temp; } Node constructTree(int pre[], char preLN[], int n, Node node) { int index = 0; return constructTreeUtil(pre, preLN, myindex, n, node); } void printInorder(Node node) { if (node == null) return; printInorder(node.getLeft()); System.out.print(node.getData() + ' '); printInorder(node.getRight()); } public static void main(String args[]) { BinaryTree tree = new BinaryTree(); int pre[] = new int[]{ 10, 30, 20, 5, 15 }; char preLN[] = new char[]{ 'N', 'N', 'L', 'L', 'L' }; int n = pre.length; Node mynode = tree.constructTree(pre, preLN, n, tree.root); System.out.println(""Following is Inorder Traversal of the"" + ""Constructed Binary Tree: ""); tree.printInorder(mynode); } }",202
"public
class
BinaryTreeToDLL 
{ 

static
class
node 

{ 

int
data; 

node left, right; 


public
node(
int
data) 

{ 

this
.data = data; 

} 

} 


static
node prev; 












static
void
fixPrevptr(node root) 

{ 

if
(root == 
null
) 

return
; 


fixPrevptr(root.left); 

root.left = prev; 

prev = root; 

fixPrevptr(root.right); 


} 






static
node fixNextptr(node root) 

{ 





while
(root.right != 
null
) 

root = root.right; 








while
(root != 
null
&& root.left != 
null
) 

{ 

node left = root.left; 

left.right = root; 

root = root.left; 

} 




return
root; 

} 


static
node BTTtoDLL(node root) 

{ 

prev = 
null
; 




fixPrevptr(root); 




return
fixNextptr(root); 

} 




static
void
printlist(node root) 

{ 

while
(root != 
null
) 

{ 

System.out.print(root.data + 
"" ""
); 

root = root.right; 

} 

} 




static
void
inorder(node root) 

{ 

if
(root == 
null
) 

return
; 

inorder(root.left); 

System.out.print(root.data + 
"" ""
); 

inorder(root.right); 

} 


public
static
void
main(String[] args) 

{ 



node root = 
new
node(
10
); 

root.left = 
new
node(
12
); 

root.right = 
new
node(
15
); 

root.left.left = 
new
node(
25
); 

root.left.right = 
new
node(
30
); 

root.right.left = 
new
node(
36
); 


System.out.println(
""Inorder Tree Traversal""
); 

inorder(root); 


node head = BTTtoDLL(root); 


System.out.println(
""\nDLL Traversal""
); 

printlist(head); 

} 
}","public class BinaryTreeToDLL {

    static class node {

        int data;
        node left, right;

        public node(int data) {
            this.data = data;
        }
    }

    static node prev;

    static void fixPrevptr(node root) {
        if (root == null) return;

        fixPrevptr(root.left);
        root.left = prev;
        prev = root;
        fixPrevptr(root.right);
    }

    static node fixNextptr(node root) {
        while (root.right != null) root = root.right;

        while (root != null && root.left != null) {
            node left = root.left;
            left.right = root;
            root = root.left;
        }

        return root;
    }

    static node BTTtoDLL(node root) {
        prev = null;

        fixPrevptr(root);

        return fixNextptr(root);
    }

    static void printlist(node root) {
        while (root != null) {
            System.out.print(root.data + "" "");
            root = root.right;
        }
    }

    static void inorder(node root) {
        if (root == null) return;

        inorder(root.left);
        System.out.print(root.data + "" "");
        inorder(root.right);
    }

    public static void main(String[] args) {
        node root = new node(10);
        root.left = new node(12);
        root.right = new node(15);
        root.left.left = new node(25);
        root.left.right = new node(30);
        root.right.left = new node(36);

        System.out.println(""Inorder Tree Traversal"");
        inorder(root);

        node head = BTTtoDLL(root);

        System.out.println(""\nDLL Traversal"");
        printlist(head);
    }",203
"class
Node 
{ 

int
data; 

Node left, right; 


public
Node(
int
data) 

{ 

this
.data = data; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




Node head; 








static
Node prev = 
null
; 








void
BinaryTree2DoubleLinkedList(Node root) 

{ 



if
(root == 
null
) 

return
; 




BinaryTree2DoubleLinkedList(root.left); 




if
(prev == 
null
) 

head = root; 

else

{ 

root.left = prev; 

prev.right = root; 

} 

prev = root; 




BinaryTree2DoubleLinkedList(root.right); 

} 




void
printList(Node node) 

{ 

while
(node != 
null
) 

{ 

System.out.print(node.data + 
"" ""
); 

node = node.right; 

} 

} 




public
static
void
main(String[] args) 

{ 



BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
10
); 

tree.root.left = 
new
Node(
12
); 

tree.root.right = 
new
Node(
15
); 

tree.root.left.left = 
new
Node(
25
); 

tree.root.left.right = 
new
Node(
30
); 

tree.root.right.left = 
new
Node(
36
); 




tree.BinaryTree2DoubleLinkedList(tree.root); 




tree.printList(tree.head); 


} 
}","class Node {

    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

class BinaryTree {

    Node root;
    Node head;
    static Node prev = null;

    void BinaryTree2DoubleLinkedList(Node root) {
        if (root == null)
            return;

        BinaryTree2DoubleLinkedList(root.left);

        if (prev == null)
            head = root;
        else {
            root.left = prev;
            prev.right = root;
        }
        prev = root;

        BinaryTree2DoubleLinkedList(root.right);
    }

    void printList(Node node) {
        while (node != null) {
            System.out.print(node.data + "" "");
            node = node.right;
        }
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(10);
        tree.root.left = new Node(12);
        tree.root.right = new Node(15);
        tree.root.left.left = new Node(25);
        tree.root.left.right = new Node(30);
        tree.root.right.left = new Node(36);

        tree.BinaryTree2DoubleLinkedList(tree.root);

        tree.printList(tree.head);
    }
}",204
"class
Node 
{ 

int
data; 

Node left, right; 


public
Node(
int
data) 

{ 

this
.data = data; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 



Node root; 






Node head; 






void
BToDLL(Node root) 

{ 



if
(root == 
null
) 

return
; 




BToDLL(root.right); 




root.right = head; 




if
(head != 
null
) 

(head).left = root; 




head = root; 




BToDLL(root.left); 

} 




void
printList(Node head) 

{ 

System.out.println(
""Extracted Double Linked List is : ""
); 

while
(head != 
null
) 

{ 

System.out.print(head.data + 
"" ""
); 

head = head.right; 

} 

} 




public
static
void
main(String[] args) 

{ 




BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
5
); 

tree.root.left = 
new
Node(
3
); 

tree.root.right = 
new
Node(
6
); 

tree.root.left.right = 
new
Node(
4
); 

tree.root.left.left = 
new
Node(
1
); 

tree.root.right.right = 
new
Node(
8
); 

tree.root.left.left.right = 
new
Node(
2
); 

tree.root.left.left.left = 
new
Node(
0
); 

tree.root.right.right.left = 
new
Node(
7
); 

tree.root.right.right.right = 
new
Node(
9
); 


tree.BToDLL(tree.root); 

tree.printList(tree.head); 

} 
}","class Node { int data; Node left, right; public Node(int data) { this.data = data; left = right = null; } } class BinaryTree { Node root; Node head; void BToDLL(Node root) { if (root == null) return; BToDLL(root.right); root.right = head; if (head != null) (head).left = root; head = root; BToDLL(root.left); } void printList(Node head) { System.out.println(""Extracted Double Linked List is : ""); while (head != null) { System.out.print(head.data + "" ""); head = head.right; } } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(5); tree.root.left = new Node(3); tree.root.right = new Node(6); tree.root.left.right = new Node(4); tree.root.left.left = new Node(1); tree.root.right.right = new Node(8); tree.root.left.left.right = new Node(2); tree.root.left.left.left = new Node(0); tree.root.right.right.left = new Node(7); tree.root.right.right.right = new Node(9); tree.BToDLL(tree.root); tree.printList(tree.head); } }",205
"class
GFG 
{ 


static
class
node 
{ 

int
key; 

node left, right; 

node(
int
key) 

{ 

this
.key = key; 

this
.left = 
null
; 

this
.right = 
null
; 

} 
} 




static
void
convert(node root) 
{ 



if
(root == 
null
) 
return
; 






convert(root.left); 

convert(root.right); 






if
(root.left == 
null
) 

root.left = root.right; 






else

root.left.right = root.right; 




root.right = 
null
; 
} 



static
void
downRightTraversal(node root) 
{ 

if
(root != 
null
) 

{ 

System.out.print(root.key + 
"" ""
); 

downRightTraversal(root.right); 

downRightTraversal(root.left); 

} 
} 



static
node newNode(
int
key) 
{ 

node temp = 
new
node(
0
); 

temp.key = key; 

temp.left = 
null
; 

temp.right = 
null
; 

return
temp; 
} 


public
static
void
main(String[] args) 
{ 







node root = 
new
node(
1
); 

root.left = newNode(
2
); 

root.right = newNode(
3
); 

root.right.left = newNode(
4
); 

root.right.right = newNode(
5
); 

root.right.left.left = newNode(
6
); 

root.right.right.left = newNode(
7
); 

root.right.right.right = newNode(
8
); 


convert(root); 


System.out.println(
""Traversal of the tree ""
+ 

""converted to down-right form""
); 

downRightTraversal(root); 
} 
}","class GFG { static class node { int key; node left, right; node(int key) { this.key = key; this.left = null; this.right = null; } } static void convert(node root) { if (root == null) return; convert(root.left); convert(root.right); if (root.left == null) root.left = root.right; else root.left.right = root.right; root.right = null; } static void downRightTraversal(node root) { if (root != null) { System.out.print(root.key + "" ""); downRightTraversal(root.right); downRightTraversal(root.left); } } static node newNode(int key) { node temp = new node(0); temp.key = key; temp.left = null; temp.right = null; return temp; } public static void main(String[] args) { node root = new node(1); root.left = newNode(2); root.right = newNode(3); root.right.left = newNode(4); root.right.right = newNode(5); root.right.left.left = newNode(6); root.right.right.left = newNode(7); root.right.right.right = newNode(8); convert(root); System.out.println(""Traversal of the tree "" + ""converted to down-right form""); downRightTraversal(root); } }",206
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 






int
toSumTree(Node node) 

{ 



if
(node == 
null
) 

return
0
; 




int
old_val = node.data; 






node.data = toSumTree(node.left) + toSumTree(node.right); 






return
node.data + old_val; 

} 




void
printInorder(Node node) 

{ 

if
(node == 
null
) 

return
; 

printInorder(node.left); 

System.out.print(node.data + 
"" ""
); 

printInorder(node.right); 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 




tree.root = 
new
Node(
10
); 

tree.root.left = 
new
Node(-
2
); 

tree.root.right = 
new
Node(
6
); 

tree.root.left.left = 
new
Node(
8
); 

tree.root.left.right = 
new
Node(-
4
); 

tree.root.right.left = 
new
Node(
7
); 

tree.root.right.right = 
new
Node(
5
); 


tree.toSumTree(tree.root); 






System.out.println(
""Inorder Traversal of the resultant tree is:""
); 

tree.printInorder(tree.root); 

} 
}","class Node {

    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree {

    Node root;

    int toSumTree(Node node) {

        if (node == null)
            return 0;

        int old_val = node.data;

        node.data = toSumTree(node.left) + toSumTree(node.right);

        return node.data + old_val;
    }

    void printInorder(Node node) {

        if (node == null)
            return;

        printInorder(node.left);
        System.out.print(node.data + "" "");
        printInorder(node.right);
    }

    public static void main(String args[]) {

        BinaryTree tree = new BinaryTree();

        tree.root = new Node(10);
        tree.root.left = new Node(-2);
        tree.root.right = new Node(6);
        tree.root.left.left = new Node(8);
        tree.root.left.right = new Node(-4);
        tree.root.right.left = new Node(7);
        tree.root.right.right = new Node(5);

        tree.toSumTree(tree.root);

        System.out.println(""Inorder Traversal of the resultant tree is:"");
        tree.printInorder(tree.root);
    }
}",207
"class
GfG { 


static
class
node 
{ 

int
data; 

node left, right; 
} 




static
int
updatetree(node root) 
{ 



if
(root == 
null
) 

return
0
; 

if
(root.left == 
null
&& root.right == 
null
) 

return
root.data; 




int
leftsum = updatetree(root.left); 

int
rightsum = updatetree(root.right); 




root.data += leftsum; 




return
root.data + rightsum; 
} 


static
void
inorder(node node) 
{ 

if
(node == 
null
) 

return
; 

inorder(node.left); 

System.out.print(node.data + 
"" ""
); 

inorder(node.right); 
} 


static
node newNode(
int
data) 
{ 

node node = 
new
node(); 

node.data = data; 

node.left = 
null
; 

node.right = 
null
; 

return
(node); 
} 


public
static
void
main(String[] args) 
{ 



node root = newNode(
1
); 

root.left = newNode(
2
); 

root.right = newNode(
3
); 

root.left.left = newNode(
4
); 

root.left.right = newNode(
5
); 

root.right.right = newNode(
6
); 


updatetree(root); 



System.out.println(
""Inorder traversal of the modified tree is""
); 

inorder(root); 
} 
}","class GfG {static class node {int data;node left, right;}    static int updatetree(node root) {if (root == null) return 0;if (root.left == null && root.right == null) return root.data;int leftsum = updatetree(root.left);int rightsum = updatetree(root.right);root.data += leftsum;return root.data + rightsum;}static void inorder(node node) {if (node == null) return;inorder(node.left);System.out.print(node.data + "" "");inorder(node.right);}static node newNode(int data) {node node = new node();node.data = data;node.left = null;node.right = null;return (node);}public static void main(String[] args) {node root = newNode(1);root.left = newNode(2);root.right = newNode(3);root.left.left = newNode(4);root.left.right = newNode(5);root.right.right = newNode(6);updatetree(root);System.out.println(""Inorder traversal of the modified tree is"");inorder(root);}}",208
"class
GFG 
{ 

static
int
N = 
12
,ans; 


static
Vector<Vector<Integer>> tree=
new
Vector<Vector<Integer>>(); 






static
int
dfs( 
int
visit[], 
int
node) 

{ 

int
num = 
0
, temp = 
0
; 




visit[node] = 
1
; 






for
(
int
i = 
0
; i < tree.get(node).size(); i++) 

{ 

if
(visit[tree.get(node).get(i)] == 
0
) 

{ 





temp = dfs( visit, tree.get(node).get(i)); 








if
(temp%
2
!=
0
) 

num += temp; 

else

ans++; 

} 

} 


return
num+
1
; 

} 






static
int
minEdge( 
int
n) 

{ 

int
visit[] = 
new
int
[n+
2
]; 

ans = 
0
; 


dfs( visit, 
1
); 


return
ans; 

} 




public
static
void
main(String args[]) 

{ 

int
n = 
10
; 




for
(
int
i = 
0
; i < n + 
2
;i++) 

tree.add(
new
Vector<Integer>()); 


tree.get(
1
).add(
3
); 

tree.get(
3
).add(
1
); 


tree.get(
1
).add(
6
); 

tree.get(
6
).add(
1
); 


tree.get(
1
).add(
2
); 

tree.get(
2
).add(
1
); 


tree.get(
3
).add(
4
); 

tree.get(
4
).add(
3
); 


tree.get(
6
).add(
8
); 

tree.get(
8
).add(
6
); 


tree.get(
2
).add(
7
); 

tree.get(
7
).add(
2
); 


tree.get(
2
).add(
5
); 

tree.get(
5
).add(
2
); 


tree.get(
4
).add(
9
); 

tree.get(
9
).add(
4
); 


tree.get(
4
).add(
10
); 

tree.get(
10
).add(
4
); 


System.out.println( minEdge( n)); 

} 
}","class GFG {static int N = 12,ans;static Vector<Vector<Integer>> tree=new Vector<Vector<Integer>>();static int dfs(int visit[], int node){int num = 0, temp = 0;visit[node] = 1;for(int i = 0; i < tree.get(node).size(); i++){if(visit[tree.get(node).get(i)] == 0){temp = dfs( visit, tree.get(node).get(i));if(temp%2!=0) num += temp;else ans++;}}return num+1;}static int minEdge(int n){int visit[] = new int[n+2];ans = 0;dfs( visit, 1);return ans;}public static void main(String args[]){int n = 10;for(int i = 0; i < n + 2;i++) tree.add(new Vector<Integer>());tree.get(1).add(3);tree.get(3).add(1);tree.get(1).add(6);tree.get(6).add(1);tree.get(1).add(2);tree.get(2).add(1);tree.get(3).add(4);tree.get(4).add(3);tree.get(6).add(8);tree.get(8).add(6);tree.get(2).add(7);tree.get(7).add(2);tree.get(2).add(5);tree.get(5).add(2);tree.get(4).add(9);tree.get(9).add(4);tree.get(4).add(10);tree.get(10).add(4);System.out.println( minEdge( n));}}",209
"class
Node 
{ 

char
data; 

Node left, right; 


public
Node(
char
item) 

{ 

data = item; 

left = 
null
; 

right = 
null
; 

} 
} 


class
BinaryTree 
{ 





Node convertExpression(
char
[] expression, 
int
i) 

{ 



if
(i >= expression.length) 

return
null
; 






Node root = 
new
Node(expression[i]); 




++i; 








if
(i < expression.length && expression[i]==
'?'
) 

root.left = convertExpression(expression, i+
1
); 






else
if
(i < expression.length) 

root.right = convertExpression(expression, i+
1
); 


return
root; 

} 




public
void
printTree( Node root) 

{ 

if
(root == 
null
) 

return
; 


System.out.print(root.data +
"" ""
); 

printTree(root.left); 

printTree(root.right); 

} 



public
static
void
main(String args[]) 

{ 

String exp = 
""a?b?c:d:e""
; 

BinaryTree tree = 
new
BinaryTree(); 

char
[] expression=exp.toCharArray(); 

Node root = tree.convertExpression(expression, 
0
); 

tree.printTree(root) ; 

} 
}","class Node { char data; Node left, right; public Node(char item) { data = item; left = null; right = null; } } class BinaryTree { Node convertExpression(char[] expression, int i) { if (i >= expression.length) return null; Node root = new Node(expression[i]); ++i; if (i < expression.length && expression[i]=='?') root.left = convertExpression(expression, i+1); else if (i < expression.length) root.right = convertExpression(expression, i+1); return root; } public void printTree(Node root) { if (root == null) return; System.out.print(root.data + "" ""); printTree(root.left); printTree(root.right); } public static void main(String args[]) { String exp = ""a?b?c:d:e""; BinaryTree tree = new BinaryTree(); char[] expression=exp.toCharArray(); Node root = tree.convertExpression(expression, 0); tree.printTree(root); } }",210
"public
class
FlipTree { 




public
static
Node flipBinaryTree(Node root) 

{ 

if
(root == 
null
) 

return
root; 

if
(root.left == 
null
&& root.right ==
null
) 

return
root; 




Node flippedRoot=flipBinaryTree(root.left); 






root.left.left=root.right; 

root.left.right=root; 

root.left=root.right=
null
; 

return
flippedRoot; 

} 






public
static
void
printLevelOrder(Node root) 

{ 



if
(root==
null
) 

return
; 




Queue<Node> q=
new
LinkedList<>(); 



q.add(root); 

while
(
true
) 

{ 





int
nodeCount = q.size(); 

if
(nodeCount == 
0
) 

break
; 






while
(nodeCount > 
0
) 

{ 

Node node = q.remove(); 

System.out.print(node.data+
"" ""
); 

if
(node.left != 
null
) 

q.add(node.left); 

if
(node.right != 
null
) 

q.add(node.right); 

nodeCount--; 

} 

System.out.println(); 

} 

} 


public
static
void
main(String args[]) { 

Node root=
new
Node(
1
); 

root.left=
new
Node(
2
); 

root.right=
new
Node(
1
); 

root.right.left = 
new
Node(
4
); 

root.right.right = 
new
Node(
5
); 

System.out.println(
""Level order traversal of given tree""
); 

printLevelOrder(root); 


root = flipBinaryTree(root); 

System.out.println(
""Level order traversal of flipped tree""
); 

printLevelOrder(root); 

} 
} 


class
Node 
{ 

int
data; 

Node left, right; 

Node(
int
data) 

{ 

this
.data=data; 

} 
};","public class FlipTree {


public static Node flipBinaryTree(Node root) {
if (root == null)
return root;
if (root.left == null && root.right == null)
return root;
Node flippedRoot = flipBinaryTree(root.left);
root.left.left = root.right;
root.left.right = root;
root.left = root.right = null;
return flippedRoot;
}

public static void printLevelOrder(Node root) {
if (root == null)
return;
Queue<Node> q = new LinkedList<>();
q.add(root);
while (true) {
int nodeCount = q.size();
if (nodeCount == 0)
break;
while (nodeCount > 0) {
Node node = q.remove();
System.out.print(node.data + "" "");
if (node.left != null)
q.add(node.left);
if (node.right != null)
q.add(node.right);
nodeCount--;
}
System.out.println();
}
}

public static void main(String args[]) {
Node root = new Node(1);
root.left = new Node(2);
root.right = new Node(1);
root.right.left = new Node(4);
root.right.right = new Node(5);
System.out.println(""Level order traversal of given tree"");
printLevelOrder(root);
root = flipBinaryTree(root);
System.out.println(""Level order traversal of flipped tree"");
printLevelOrder(root);
}
}

class Node {
int data;
Node left, right;
Node(int data) {
this.data = data;
}
};",211
"class
GFG 
{ 


static
class
Node 
{ 

int
data; 

Node left, right; 
}; 




static
Node newNode(
int
data) 
{ 

Node temp = 
new
Node(); 

temp.data = data; 

temp.left = temp.right = 
null
; 

return
temp; 
} 


static
Node flipBinaryTree(Node root) 
{ 



Node curr = root; 

Node next = 
null
; 

Node temp = 
null
; 

Node prev = 
null
; 




while
(curr != 
null
) 

{ 

next = curr.left; 













curr.left = temp; 




temp = curr.right; 






curr.right = prev; 


prev = curr; 

curr = next; 

} 

return
prev; 
} 




static
void
printLevelOrder(Node root) 
{ 



if
(root == 
null
) 
return
; 






Queue<Node> q = 
new
LinkedList<Node>(); 






q.add(root); 


while
(
true
) 

{ 







int
nodeCount = q.size(); 

if
(nodeCount == 
0
) 

break
; 








while
(nodeCount > 
0
) 

{ 

Node node = q.peek(); 

System.out.print(node.data + 
"" ""
); 

q.remove(); 


if
(node.left != 
null
) 

q.add(node.left); 


if
(node.right != 
null
) 

q.add(node.right); 

nodeCount--; 

} 

System.out.println(); 

} 
} 


public
static
void
main(String args[]) 
{ 

Node root = newNode(
1
); 

root.left = newNode(
2
); 

root.right = newNode(
3
); 

root.right.left = newNode(
4
); 

root.right.right = newNode(
5
); 


System.out.print(
""Level order traversal ""
+ 

""of given tree\n""
); 

printLevelOrder(root); 


root = flipBinaryTree(root); 


System.out.print(
""\nLevel order traversal ""
+ 

""of the flipped tree\n""
); 

printLevelOrder(root); 
} 
}","class GFG { static class Node { int data; Node left, right; }; static Node newNode(int data) { Node temp = new Node(); temp.data = data; temp.left = temp.right = null; return temp; } static Node flipBinaryTree(Node root) { Node curr = root; Node next = null; Node temp = null; Node prev = null; while (curr != null) { next = curr.left; curr.left = temp; temp = curr.right; curr.right = prev; prev = curr; curr = next; } return prev; } static void printLevelOrder(Node root) { if (root == null) return; Queue<Node> q = new LinkedList<Node>(); q.add(root); while (true) { int nodeCount = q.size(); if (nodeCount == 0) break; while (nodeCount > 0) { Node node = q.peek(); System.out.print(node.data + "" ""); q.remove(); if (node.left != null) q.add(node.left); if (node.right != null) q.add(node.right); nodeCount--; } System.out.println(); } } public static void main(String args[]) { Node root = newNode(1); root.left = newNode(2); root.right = newNode(3); root.right.left = newNode(4); root.right.right = newNode(5); System.out.print(""Level order traversal "" + ""of given tree\n""); printLevelOrder(root); root = flipBinaryTree(root); System.out.print(""\nLevel order traversal "" + ""of the flipped tree\n""); printLevelOrder(root); } }",212
"class
Node 
{ 

int
data; 

Node left, right; 


public
Node(
int
d) 

{ 

data = d; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




int
isSumProperty(Node node) 

{ 




int
left_data = 
0
, right_data = 
0
; 




if
(node == 
null

|| (node.left == 
null
&& node.right == 
null
)) 

return
1
; 

else

{ 




if
(node.left != 
null
) 

left_data = node.left.data; 




if
(node.right != 
null
) 

right_data = node.right.data; 




if
((node.data == left_data + right_data) 

&& (isSumProperty(node.left)!=
0
) 

&& isSumProperty(node.right)!=
0
) 

return
1
; 

else

return
0
; 

} 

} 




public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
10
); 

tree.root.left = 
new
Node(
8
); 

tree.root.right = 
new
Node(
2
); 

tree.root.left.left = 
new
Node(
3
); 

tree.root.left.right = 
new
Node(
5
); 

tree.root.right.right = 
new
Node(
2
); 

if
(tree.isSumProperty(tree.root) != 
0
) 

System.out.println(
""The given tree satisfies children""

+ 
"" sum property""
); 

else

System.out.println(
""The given tree does not satisfy children""

+ 
"" sum property""
); 

} 
}","class Node { 

    int data; 
    Node left, right; 


    public Node(int d) { 
        data = d; 
        left = right = null; 
    } 
} 

class BinaryTree { 

    Node root; 

    int isSumProperty(Node node) { 
        int left_data = 0, right_data = 0; 

        if (node == null || (node.left == null && node.right == null)) 
            return 1; 
        else { 
            if (node.left != null) 
                left_data = node.left.data; 
            if (node.right != null) 
                right_data = node.right.data; 
            if ((node.data == left_data + right_data) && (isSumProperty(node.left) != 0) && isSumProperty(node.right) != 0) 
                return 1; 
            else 
                return 0; 
        } 
    } 

    public static void main(String[] args) { 
        BinaryTree tree = new BinaryTree(); 
        tree.root = new Node(10); 
        tree.root.left = new Node(8); 
        tree.root.right = new Node(2); 
        tree.root.left.left = new Node(3); 
        tree.root.left.right = new Node(5); 
        tree.root.right.right = new Node(2); 
        if (tree.isSumProperty(tree.root) != 0) 
            System.out.println(""The given tree satisfies children"" + "" sum property""); 
        else 
            System.out.println(""The given tree does not satisfy children"" + "" sum property""); 
    } 
}",213
"class
Node 
{ 

int
data; 

Node left, right, nextRight; 


Node(
int
item) 

{ 

data = item; 

left = right = nextRight = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




int
isLeaf(Node node) 

{ 

if
(node == 
null
) 

return
0
; 

if
(node.left == 
null
&& node.right == 
null
) 

return
1
; 

return
0
; 

} 




int
isSumTree(Node node) 

{ 

int
ls; 


int
rs; 





if
(node == 
null
|| isLeaf(node) == 
1
) 

return
1
; 


if
(isSumTree(node.left) != 
0
&& isSumTree(node.right) != 
0
) 

{ 



if
(node.left == 
null
) 

ls = 
0
; 

else
if
(isLeaf(node.left) != 
0
) 

ls = node.left.data; 

else

ls = 
2
* (node.left.data); 




if
(node.right == 
null
) 

rs = 
0
; 

else
if
(isLeaf(node.right) != 
0
) 

rs = node.right.data; 

else

rs = 
2
* (node.right.data); 




if
((node.data == rs + ls)) 

return
1
; 

else

return
0
; 

} 


return
0
; 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
26
); 

tree.root.left = 
new
Node(
10
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
6
); 

tree.root.right.right = 
new
Node(
3
); 


if
(tree.isSumTree(tree.root) != 
0
) 

System.out.println(
""The given tree is a sum tree""
); 

else

System.out.println(
""The given tree is not a sum tree""
); 

} 
}","class Node {

    int data;

    Node left, right, nextRight;

    Node(int item) {
        data = item;
        left = right = nextRight = null;
    }
}

class BinaryTree {

    Node root;

    int isLeaf(Node node) {
        if (node == null)
            return 0;
        if (node.left == null && node.right == null)
            return 1;
        return 0;
    }

    int isSumTree(Node node) {
        int ls;
        int rs;

        if (node == null || isLeaf(node) == 1)
            return 1;

        if (isSumTree(node.left) != 0 && isSumTree(node.right) != 0) {
            if (node.left == null)
                ls = 0;
            else if (isLeaf(node.left) != 0)
                ls = node.left.data;
            else
                ls = 2 * (node.left.data);

            if (node.right == null)
                rs = 0;
            else if (isLeaf(node.right) != 0)
                rs = node.right.data;
            else
                rs = 2 * (node.right.data);

            if ((node.data == rs + ls))
                return 1;
            else
                return 0;
        }

        return 0;
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(26);
        tree.root.left = new Node(10);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(6);
        tree.root.right.right = new Node(3);

        if (tree.isSumTree(tree.root) != 0)
            System.out.println(""The given tree is a sum tree"");
        else
            System.out.println(""The given tree is not a sum tree"");
    }
}",214
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 






boolean
isSibling(Node node, Node a, Node b) 

{ 



if
(node == 
null
) 

return
false
; 


return
((node.left == a && node.right == b) || 

(node.left == b && node.right == a) || 

isSibling(node.left, a, b) || 

isSibling(node.right, a, b)); 

} 






int
level(Node node, Node ptr, 
int
lev) 

{ 



if
(node == 
null
) 

return
0
; 


if
(node == ptr) 

return
lev; 




int
l = level(node.left, ptr, lev + 
1
); 

if
(l != 
0
) 

return
l; 




return
level(node.right, ptr, lev + 
1
); 

} 




boolean
isCousin(Node node, Node a, Node b) 

{ 











return
((level(node, a, 
1
) == level(node, b, 
1
)) && 

(!isSibling(node, a, b))); 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
5
); 

tree.root.left.right.right = 
new
Node(
15
); 

tree.root.right.left = 
new
Node(
6
); 

tree.root.right.right = 
new
Node(
7
); 

tree.root.right.left.right = 
new
Node(
8
); 


Node Node1, Node2; 

Node1 = tree.root.left.left; 

Node2 = tree.root.right.right; 

if
(tree.isCousin(tree.root, Node1, Node2)) 

System.out.println(
""Yes""
); 

else

System.out.println(
""No""
); 

} 
}","class Node  { int data; Node left, right; Node(int item) { data = item; left = right = null; } } class BinaryTree { Node root; boolean isSibling(Node node, Node a, Node b) { if (node == null) return false; return ((node.left == a && node.right == b) || (node.left == b && node.right == a) || isSibling(node.left, a, b) || isSibling(node.right, a, b)); } int level(Node node, Node ptr, int lev) { if (node == null) return 0; if (node == ptr) return lev; int l = level(node.left, ptr, lev + 1); if (l != 0) return l; return level(node.right, ptr, lev + 1); } boolean isCousin(Node node, Node a, Node b) { return ((level(node, a, 1) == level(node, b, 1)) && (!isSibling(node, a, b))); } public static void main(String args[]) { BinaryTree tree = new BinaryTree(); tree.root = new Node(1); tree.root.left = new Node(2); tree.root.right = new Node(3); tree.root.left.left = new Node(4); tree.root.left.right = new Node(5); tree.root.left.right.right = new Node(15); tree.root.right.left = new Node(6); tree.root.right.right = new Node(7); tree.root.right.left.right = new Node(8); Node Node1, Node2; Node1 = tree.root.left.left; Node2 = tree.root.right.right; if (tree.isCousin(tree.root, Node1, Node2)) System.out.println(""Yes""); else System.out.println(""No""); } }",215
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
Leaf 
{ 

int
leaflevel=
0
; 
} 

class
BinaryTree 
{ 

Node root; 

Leaf mylevel = 
new
Leaf(); 




boolean
checkUtil(Node node, 
int
level, Leaf leafLevel) 

{ 



if
(node == 
null
) 

return
true
; 




if
(node.left == 
null
&& node.right == 
null
) 

{ 



if
(leafLevel.leaflevel == 
0
) 

{ 



leafLevel.leaflevel = level; 

return
true
; 

} 






return
(level == leafLevel.leaflevel); 

} 






return
checkUtil(node.left, level + 
1
, leafLevel) 

&& checkUtil(node.right, level + 
1
, leafLevel); 

} 




boolean
check(Node node) 

{ 

int
level = 
0
; 

return
checkUtil(node, level, mylevel); 

} 


public
static
void
main(String args[]) 

{ 



BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
12
); 

tree.root.left = 
new
Node(
5
); 

tree.root.left.left = 
new
Node(
3
); 

tree.root.left.right = 
new
Node(
9
); 

tree.root.left.left.left = 
new
Node(
1
); 

tree.root.left.right.left = 
new
Node(
1
); 

if
(tree.check(tree.root)) 

System.out.println(
""Leaves are at same level""
); 

else

System.out.println(
""Leaves are not at same level""
); 

} 
}","class Node { int data; Node left, right; Node(int item) { data = item; left = right = null; } } class Leaf { int leaflevel=0; } class BinaryTree { Node root; Leaf mylevel = new Leaf(); boolean checkUtil(Node node, int level, Leaf leafLevel) { if(node == null) return true; if(node.left == null && node.right == null) { if(leafLevel.leaflevel == 0) { leafLevel.leaflevel = level; return true; } return (level == leafLevel.leaflevel); } return checkUtil(node.left, level + 1, leafLevel) && checkUtil(node.right, level + 1, leafLevel); } boolean check(Node node) { int level = 0; return checkUtil(node, level, mylevel); } public static void main(String args[]) { BinaryTree tree = new BinaryTree(); tree.root = new Node(12); tree.root.left = new Node(5); tree.root.left.left = new Node(3); tree.root.left.right = new Node(9); tree.root.left.left.left = new Node(1); tree.root.left.right.left = new Node(1); if(tree.check(tree.root)) System.out.println(""Leaves are at same level""); else System.out.println(""Leaves are not at same level""); } }",216
"class
Node { 

int
data; 

Node left, right; 




Node(
int
key) { 

int
data = key; 

left = right = 
null
; 

} 
} 

class
GFG { 






static
boolean
checkLevelLeafNode(Node root) 

{ 

if
(root == 
null
) 

return
true
; 




Queue<Node> q = 
new
LinkedList<>(); 

q.add(root); 


int
result = Integer.MAX_VALUE; 

int
level = 
0
; 




while
(q.size() != 
0
) { 

int
size = q.size(); 

level++; 




while
(size > 
0
) { 

Node temp = q.remove(); 




if
(temp.left != 
null
) { 

q.add(temp.left); 




if
(temp.left.left == 
null
&& temp.left.right == 
null
) { 




if
(result == Integer.MAX_VALUE) 

result = level; 






else
if
(result != level) 

return
false
; 

} 

} 




if
(temp.right != 
null
) { 

q.add(temp.right); 




if
(temp.right.left == 
null
&& temp.right.right == 
null
) { 




if
(result == Integer.MAX_VALUE) 

result = level; 






else
if
(result != level) 

return
false
; 

} 

} 

size--; 

} 


} 

return
true
; 

} 




public
static
void
main(String args[]) 

{ 



Node root = 
new
Node(
1
); 

root.left = 
new
Node(
2
); 

root.right = 
new
Node(
3
); 

root.left.right = 
new
Node(
4
); 

root.right.left = 
new
Node(
5
); 

root.right.right = 
new
Node(
6
); 


boolean
result = checkLevelLeafNode(root); 

if
(result == 
true
) 

System.out.println(
""All leaf nodes are at same level""
); 

else

System.out.println(
""Leaf nodes not at same level""
); 

} 
}","class Node { int data; Node left, right; Node(int key) { int data = key; left = right = null; } } class GFG { static boolean checkLevelLeafNode(Node root) { if (root == null) return true; Queue<Node> q = new LinkedList<>(); q.add(root); int result = Integer.MAX_VALUE; int level = 0; while (q.size() != 0) { int size = q.size(); level++; while (size > 0) { Node temp = q.remove(); if (temp.left != null) { q.add(temp.left); if (temp.left.left == null && temp.left.right == null) { if (result == Integer.MAX_VALUE) result = level; else if (result != level) return false; } } if (temp.right != null) { q.add(temp.right); if (temp.right.left == null && temp.right.right == null) { if (result == Integer.MAX_VALUE) result = level; else if (result != level) return false; } } size--; } } return true; } public static void main(String args[]) { Node root = new Node(1); root.left = new Node(2); root.right = new Node(3); root.left.right = new Node(4); root.right.left = new Node(5); root.right.right = new Node(6); boolean result = checkLevelLeafNode(root); if (result == true) System.out.println(""All leaf nodes are at same level""); else System.out.println(""Leaf nodes not at same level""); } }",217
"class
Node 
{ 

int
key; 

Node left, right; 


public
Node(
int
key) 

{ 

this
.key = key; 

left = right = 
null
; 

} 
} 

class
Res 
{ 

boolean
res = 
false
; 
} 

class
BinaryTree 
{ 

Node root; 




int
count(Node node) 

{ 

if
(node == 
null
) 

return
0
; 


return
count(node.left) + count(node.right) + 
1
; 

} 










int
checkRec(Node root, 
int
n, Res res) 

{ 



if
(root == 
null
) 

return
0
; 




int
c = checkRec(root.left, n, res) + 
1

+ checkRec(root.right, n, res); 






if
(c == n - c) 

res.res = 
true
; 




return
c; 

} 




boolean
check(Node root) 

{ 



int
n = count(root); 




Res res = 
new
Res(); 

checkRec(root, n, res); 


return
res.res; 

} 




public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
5
); 

tree.root.left = 
new
Node(
1
); 

tree.root.right = 
new
Node(
6
); 

tree.root.left.left = 
new
Node(
3
); 

tree.root.right.left = 
new
Node(
7
); 

tree.root.right.right = 
new
Node(
4
); 

if
(tree.check(tree.root) == 
true
) 

System.out.println(
""YES""
); 

else

System.out.println(
""NO""
); 

} 
}","class Node { int key; Node left, right; public Node(int key) { this.key = key; left = right = null; } } class Res { boolean res = false; } class BinaryTree { Node root; int count(Node node) { if (node == null) return 0; return count(node.left) + count(node.right) + 1; } int checkRec(Node root, int n, Res res) { if (root == null) return 0; int c = checkRec(root.left, n, res) + 1 + checkRec(root.right, n, res); if (c == n - c) res.res = true; return c; } boolean check(Node root) { int n = count(root); Res res = new Res(); checkRec(root, n, res); return res.res; } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(5); tree.root.left = new Node(1); tree.root.right = new Node(6); tree.root.left.left = new Node(3); tree.root.right.left = new Node(7); tree.root.right.right = new Node(4); if (tree.check(tree.root) == true) System.out.println(""YES""); else System.out.println(""NO""); } }",218
"class
GfG { 


static
class
Node 
{ 

int
key; 

Node left, right; 
} 


static
int
findADepth(Node node) 
{ 
int
d = 
0
; 
while
(node != 
null
) 
{ 

d++; 

node = node.left; 
} 
return
d; 
} 


static
boolean
isPerfectRec(Node root, 
int
d, 
int
level) 
{ 



if
(root == 
null
) 

return
true
; 






if
(root.left == 
null
&& root.right == 
null
) 

return
(d == level+
1
); 




if
(root.left == 
null
|| root.right == 
null
) 

return
false
; 




return
isPerfectRec(root.left, d, level+
1
) && isPerfectRec(root.right, d, level+
1
); 
} 


static
boolean
isPerfect(Node root) 
{ 
int
d = findADepth(root); 
return
isPerfectRec(root, d, 
0
); 
} 


static
Node newNode(
int
k) 
{ 

Node node = 
new
Node(); 

node.key = k; 

node.right = 
null
; 

node.left = 
null
; 

return
node; 
} 


public
static
void
main(String args[]) 
{ 

Node root = 
null
; 

root = newNode(
10
); 

root.left = newNode(
20
); 

root.right = newNode(
30
); 


root.left.left = newNode(
40
); 

root.left.right = newNode(
50
); 

root.right.left = newNode(
60
); 

root.right.right = newNode(
70
); 


if
(isPerfect(root) == 
true
) 

System.out.println(
""Yes""
); 

else

System.out.println(
""No""
); 
} 
}","class GfG { static class Node { int key; Node left, right; } static int findADepth(Node node) { int d = 0; while (node != null) { d++; node = node.left; } return d; } static boolean isPerfectRec(Node root, int d, int level) { if (root == null) return true; if (root.left == null && root.right == null) return (d == level + 1); if (root.left == null || root.right == null) return false; return isPerfectRec(root.left, d, level + 1) && isPerfectRec(root.right, d, level + 1); } static boolean isPerfect(Node root) { int d = findADepth(root); return isPerfectRec(root, d, 0); } static Node newNode(int k) { Node node = new Node(); node.key = k; node.right = null; node.left = null; return node; } public static void main(String args[]) { Node root = null; root = newNode(10); root.left = newNode(20); root.right = newNode(30); root.left.left = newNode(40); root.left.right = newNode(50); root.right.left = newNode(60); root.right.right = newNode(70); if (isPerfect(root) == true) System.out.println(""Yes""); else System.out.println(""No""); } }",219
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




boolean
isFullTree(Node node) 

{ 



if
(node == 
null
) 

return
true
; 




if
(node.left == 
null
&& node.right == 
null
) 

return
true
; 






if
((node.left!=
null
) && (node.right!=
null
)) 

return
(isFullTree(node.left) && isFullTree(node.right)); 




return
false
; 

} 





public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
10
); 

tree.root.left = 
new
Node(
20
); 

tree.root.right = 
new
Node(
30
); 

tree.root.left.right = 
new
Node(
40
); 

tree.root.left.left = 
new
Node(
50
); 

tree.root.right.left = 
new
Node(
60
); 

tree.root.left.left.left = 
new
Node(
80
); 

tree.root.right.right = 
new
Node(
70
); 

tree.root.left.left.right = 
new
Node(
90
); 

tree.root.left.right.left = 
new
Node(
80
); 

tree.root.left.right.right = 
new
Node(
90
); 

tree.root.right.left.left = 
new
Node(
80
); 

tree.root.right.left.right = 
new
Node(
90
); 

tree.root.right.right.left = 
new
Node(
80
); 

tree.root.right.right.right = 
new
Node(
90
); 


if
(tree.isFullTree(tree.root)) 

System.out.print(
""The binary tree is full""
); 

else

System.out.print(
""The binary tree is not full""
); 

} 
}","class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree {
    Node root;

    boolean isFullTree(Node node) {
        if (node == null) return true;

        if (node.left == null && node.right == null) return true;

        if ((node.left != null) && (node.right != null))
            return (isFullTree(node.left) && isFullTree(node.right));

        return false;
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(10);
        tree.root.left = new Node(20);
        tree.root.right = new Node(30);
        tree.root.left.right = new Node(40);
        tree.root.left.left = new Node(50);
        tree.root.right.left = new Node(60);
        tree.root.left.left.left = new Node(80);
        tree.root.right.right = new Node(70);
        tree.root.left.left.right = new Node(90);
        tree.root.left.right.left = new Node(80);
        tree.root.left.right.right = new Node(90);
        tree.root.right.left.left = new Node(80);
        tree.root.right.left.right = new Node(90);
        tree.root.right.right.left = new Node(80);
        tree.root.right.right.right = new Node(90);

        if (tree.isFullTree(tree.root))
            System.out.print(""The binary tree is full"");
        else
            System.out.print(""The binary tree is not full"");
    }
}",220
"public
class
CompleteBTree 
{ 



static
class
Node 

{ 

int
data; 

Node left; 

Node right; 




Node(
int
d) 

{ 

data = d; 

left = 
null
; 

right = 
null
; 

} 

} 




static
boolean
isCompleteBT(Node root) 

{ 



if
(root == 
null
) 

return
true
; 




Queue<Node> queue =
new
LinkedList<>(); 






boolean
flag = 
false
; 




queue.add(root); 

while
(!queue.isEmpty()) 

{ 

Node temp_node = queue.remove(); 




if
(temp_node.left != 
null
) 

{ 







if
(flag == 
true
) 

return
false
; 




queue.add(temp_node.left); 

} 



else

flag = 
true
; 




if
(temp_node.right != 
null
) 

{ 







if
(flag == 
true
) 

return
false
; 




queue.add(temp_node.right); 


} 



else

flag = 
true
; 

} 



return
true
; 

} 




public
static
void
main(String[] args) 

{ 





Node root = 
new
Node(
1
); 

root.left = 
new
Node(
2
); 

root.right = 
new
Node(
3
); 

root.left.left = 
new
Node(
4
); 

root.left.right = 
new
Node(
5
); 

root.right.right = 
new
Node(
6
); 


if
(isCompleteBT(root) == 
true
) 

System.out.println(
""Complete Binary Tree""
); 

else

System.out.println(
""NOT Complete Binary Tree""
); 

} 

}","public
class
CompleteBTree 
{ 

static
class
Node 
{ 

int
data; 
Node left; 
Node right; 
Node(
int
d) 
{ 
data = d; 
left = 
null
; 
right = 
null
; 
} 
} 
static
boolean
isCompleteBT(Node root) 
{ 
if
(root == 
null
) 
return
true
; 
Queue<Node> queue =
new
LinkedList<>(); 
boolean flag = 
false
; 
queue.add(root); 
while
(!queue.isEmpty()) 
{ 
Node temp_node = queue.remove(); 
if
(temp_node.left != 
null
) 
{ 
if
(flag == 
true
) 
return
false
; 
queue.add(temp_node.left); 
} 
else
flag = 
true
; 
if
(temp_node.right != 
null
) 
{ 
if
(flag == 
true
) 
return
false
; 
queue.add(temp_node.right); 
} 
else
flag = 
true
; 
} 
return
true
; 
} 
public
static
void
main(String[] args) 
{ 
Node root = 
new
Node(
1
); 
root.left = 
new
Node(
2
); 
root.right = 
new
Node(
3
); 
root.left.left = 
new
Node(
4
); 
root.left.right = 
new
Node(
5
); 
root.right.right = 
new
Node(
6
); 
if
(isCompleteBT(root) == 
true
) 
System.out.println(
""Complete Binary Tree""
); 
else
System.out.println(
""NOT Complete Binary Tree""
); 
} 
}",221
"class
Node { 


char
data; 

Node left, right; 


Node(
char
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
Passing { 


int
i; 

int
m = 
0
; 

int
n = 
0
; 
} 

class
BinaryTree { 


static
Node root; 

Passing p = 
new
Passing(); 


String strstr(String haystack, String needle) 

{ 

if
(haystack == 
null
|| needle == 
null
) { 

return
null
; 

} 

int
hLength = haystack.length(); 

int
nLength = needle.length(); 

if
(hLength < nLength) { 

return
null
; 

} 

if
(nLength == 
0
) { 

return
haystack; 

} 

for
(
int
i = 
0
; i <= hLength - nLength; i++) { 

if
(haystack.charAt(i) == needle.charAt(
0
)) { 

int
j = 
0
; 

for
(; j < nLength; j++) { 

if
(haystack.charAt(i + j) != needle.charAt(j)) { 

break
; 

} 

} 

if
(j == nLength) { 

return
haystack.substring(i); 

} 

} 

} 

return
null
; 

} 






void
storeInorder(Node node, 
char
arr[], Passing i) 

{ 

if
(node == 
null
) { 

arr[i.i++] = 
'$'
; 

return
; 

} 

storeInorder(node.left, arr, i); 

arr[i.i++] = node.data; 

storeInorder(node.right, arr, i); 

} 






void
storePreOrder(Node node, 
char
arr[], Passing i) 

{ 

if
(node == 
null
) { 

arr[i.i++] = 
'$'
; 

return
; 

} 

arr[i.i++] = node.data; 

storePreOrder(node.left, arr, i); 

storePreOrder(node.right, arr, i); 

} 




boolean
isSubtree(Node T, Node S) 

{ 



if
(S == 
null
) { 

return
true
; 

} 

if
(T == 
null
) { 

return
false
; 

} 






char
inT[] = 
new
char
[
100
]; 

String op1 = String.valueOf(inT); 

char
inS[] = 
new
char
[
100
]; 

String op2 = String.valueOf(inS); 

storeInorder(T, inT, p); 

storeInorder(S, inS, p); 

inT[p.m] = 
'\0'
; 

inS[p.m] = 
'\0'
; 




if
(strstr(op1, op2) != 
null
) { 

return
false
; 

} 






p.m = 
0
; 

p.n = 
0
; 

char
preT[] = 
new
char
[
100
]; 

char
preS[] = 
new
char
[
100
]; 

String op3 = String.valueOf(preT); 

String op4 = String.valueOf(preS); 

storePreOrder(T, preT, p); 

storePreOrder(S, preS, p); 

preT[p.m] = 
'\0'
; 

preS[p.n] = 
'\0'
; 






return
(strstr(op3, op4) != 
null
); 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

Node T = 
new
Node(
'a'
); 

T.left = 
new
Node(
'b'
); 

T.right = 
new
Node(
'd'
); 

T.left.left = 
new
Node(
'c'
); 

T.right.right = 
new
Node(
'e'
); 


Node S = 
new
Node(
'a'
); 

S.left = 
new
Node(
'b'
); 

S.right = 
new
Node(
'd'
); 

S.left.left = 
new
Node(
'c'
); 


if
(tree.isSubtree(T, S)) { 

System.out.println(
""Yes, S is a subtree of T""
); 

} 

else
{ 

System.out.println(
""No, S is not a subtree of T""
); 

} 

} 
}","class Node {

    char data;
    Node left, right;

    Node(char item) {
        data = item;
        left = right = null;
    }
}

class Passing {

    int i;
    int m = 0;
    int n = 0;
}

class BinaryTree {

    static Node root;
    Passing p = new Passing();

    String strstr(String haystack, String needle) {
        if (haystack == null || needle == null) {
            return null;
        }
        int hLength = haystack.length();
        int nLength = needle.length();
        if (hLength < nLength) {
            return null;
        }
        if (nLength == 0) {
            return haystack;
        }
        for (int i = 0; i <= hLength - nLength; i++) {
            if (haystack.charAt(i) == needle.charAt(0)) {
                int j = 0;
                for (; j < nLength; j++) {
                    if (haystack.charAt(i + j) != needle.charAt(j)) {
                        break;
                    }
                }
                if (j == nLength) {
                    return haystack.substring(i);
                }
            }
        }
        return null;
    }

    void storeInorder(Node node, char arr[], Passing i) {
        if (node == null) {
            arr[i.i++] = '$';
            return;
        }
        storeInorder(node.left, arr, i);
        arr[i.i++] = node.data;
        storeInorder(node.right, arr, i);
    }

    void storePreOrder(Node node, char arr[], Passing i) {
        if (node == null) {
            arr[i.i++] = '$';
            return;
        }
        arr[i.i++] = node.data;
        storePreOrder(node.left, arr, i);
        storePreOrder(node.right, arr, i);
    }

    boolean isSubtree(Node T, Node S) {
        if (S == null) {
            return true;
        }
        if (T == null) {
            return false;
        }
        char inT[] = new char[100];
        String op1 = String.valueOf(inT);
        char inS[] = new char[100];
        String op2 = String.valueOf(inS);
        storeInorder(T, inT, p);
        storeInorder(S, inS, p);
        inT[p.m] = '\0';
        inS[p.m] = '\0';
        if (strstr(op1, op2) != null) {
            return false;
        }
        p.m = 0;
        p.n = 0;
        char preT[] = new char[100];
        char preS[] = new char[100];
        String op3 = String.valueOf(preT);
        String op4 = String.valueOf(preS);
        storePreOrder(T, preT, p);
        storePreOrder(S, preS, p);
        preT[p.m] = '\0';
        preS[p.n] = '\0';
        return (strstr(op3, op4) != null);
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();

        Node T = new Node('a');
        T.left = new Node('b');
        T.right = new Node('d');
        T.left.left = new Node('c');
        T.right.right = new Node('e');

        Node S = new Node('a');
        S.left = new Node('b');
        S.right = new Node('d');
        S.left.left = new Node('c');

        if (tree.isSubtree(T, S)) {
            System.out.println(""Yes, S is a subtree of T"");
        } else {
            System.out.println(""No, S is not a subtree of T"");
        }
    }
}",222
"class
Node 
{ 

int
data; 

Node left, right; 


public
Node(
int
data) 

{ 

this
.data = data; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node a, b; 




boolean
areMirror(Node a, Node b) 

{ 



if
(a == 
null
&& b == 
null
) 

return
true
; 




if
(a == 
null
|| b == 
null
) 

return
false
; 




return
a.data == b.data 

&& areMirror(a.left, b.right) 

&& areMirror(a.right, b.left); 

} 




public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

Node a = 
new
Node(
1
); 

Node b = 
new
Node(
1
); 

a.left = 
new
Node(
2
); 

a.right = 
new
Node(
3
); 

a.left.left = 
new
Node(
4
); 

a.left.right = 
new
Node(
5
); 


b.left = 
new
Node(
3
); 

b.right = 
new
Node(
2
); 

b.right.left = 
new
Node(
5
); 

b.right.right = 
new
Node(
4
); 


if
(tree.areMirror(a, b) == 
true
) 

System.out.println(
""Yes""
); 

else

System.out.println(
""No""
); 


} 
}","class Node {

    int data;
    Node left, right;

    public Node(int data) {
        this.data = data;
        left = right = null;
    }
}

class BinaryTree {

    Node a, b;

    public boolean areMirror(Node a, Node b) {

        if (a == null && b == null)
            return true;

        if (a == null || b == null)
            return false;

        return a.data == b.data && areMirror(a.left, b.right) && areMirror(a.right, b.left);
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        Node a = new Node(1);
        Node b = new Node(1);
        a.left = new Node(2);
        a.right = new Node(3);
        a.left.left = new Node(4);
        a.left.right = new Node(5);
        b.left = new Node(3);
        b.right = new Node(2);
        b.right.left = new Node(5);
        b.right.right = new Node(4);

        if (tree.areMirror(a, b) == true)
            System.out.println(""Yes"");
        else
            System.out.println(""No"");
    }
}",223
"class
GFG 
{ 





static
int
findMedian(
int
arr[], 
int
i,
int
n) 
{ 

if
(i <= n) 

Arrays.sort(arr, i, n); 


else

Arrays.sort(arr, n, i); 

return
arr[n/
2
]; 

} 





static
int
kthSmallest(
int
arr[], 
int
l, 
int
r, 
int
k) 
{ 





if
(k > 
0
&& k <= r - l + 
1
) 

{ 

int
n = r - l + 
1
; 









int
i; 




int
[]median = 
new
int
[(n + 
4
) / 
5
]; 

for
(i = 
0
; i < n/
5
; i++) 

median[i] = findMedian(arr,l + i * 
5
, 
5
); 




if
(i*
5
< n) 

{ 

median[i] = findMedian(arr,l + i * 
5
, n % 
5
); 

i++; 

} 








int
medOfMed = (i == 
1
)? median[i - 
1
]: 

kthSmallest(median, 
0
, i - 
1
, i / 
2
); 






int
pos = partition(arr, l, r, medOfMed); 




if
(pos-l == k - 
1
) 

return
arr[pos]; 

if
(pos-l > k - 
1
) 


return
kthSmallest(arr, l, pos - 
1
, k); 




return
kthSmallest(arr, pos + 
1
, r, k - pos + l - 
1
); 

} 




return
Integer.MAX_VALUE; 
} 

static
int
[] swap(
int
[]arr, 
int
i, 
int
j) 
{ 

int
temp = arr[i]; 

arr[i] = arr[j]; 

arr[j] = temp; 

return
arr; 
} 



static
int
partition(
int
arr[], 
int
l, 

int
r, 
int
x) 
{ 



int
i; 

for
(i = l; i < r; i++) 

if
(arr[i] == x) 

break
; 

swap(arr, i, r); 




i = l; 

for
(
int
j = l; j <= r - 
1
; j++) 

{ 

if
(arr[j] <= x) 

{ 

swap(arr, i, j); 

i++; 

} 

} 

swap(arr, i, r); 

return
i; 
} 


public
static
void
main(String[] args) 
{ 

int
arr[] = {
12
, 
3
, 
5
, 
7
, 
4
, 
19
, 
26
}; 

int
n = arr.length, k = 
3
; 

System.out.println(
""K'th smallest element is ""

+ kthSmallest(arr, 
0
, n - 
1
, k)); 
} 
}","class GFG { static int findMedian(int[] arr, int i, int n) { if (i <= n) Arrays.sort(arr, i, n); else Arrays.sort(arr, n, i); return arr[n / 2]; } static int kthSmallest(int[] arr, int l, int r, int k) { if (k > 0 && k <= r - l + 1) { int n = r - l + 1; int i; int[] median = new int[(n + 4) / 5]; for (i = 0; i < n / 5; i++) median[i] = findMedian(arr, l + i * 5, 5); if (i * 5 < n) { median[i] = findMedian(arr, l + i * 5, n % 5); i++; } int medOfMed = (i == 1) ? median[i - 1] : kthSmallest(median, 0, i - 1, i / 2); int pos = partition(arr, l, r, medOfMed); if (pos - l == k - 1) return arr[pos]; if (pos - l > k - 1) return kthSmallest(arr, l, pos - 1, k); return kthSmallest(arr, pos + 1, r, k - pos + l - 1); } return Integer.MAX_VALUE; } static int[] swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; return arr; } static int partition(int[] arr, int l, int r, int x) { int i; for (i = l; i < r; i++) if (arr[i] == x) break; swap(arr, i, r); i = l; for (int j = l; j <= r - 1; j++) { if (arr[j] <= x) { swap(arr, i, j); i++; } } swap(arr, i, r); return i; } public static void main(String[] args) { int arr[] = { 12, 3, 5, 7, 4, 19, 26 }; int n = arr.length, k = 3; System.out.println(""K'th smallest element is "" + kthSmallest(arr, 0, n - 1, k)); } }",224
"class
GfG { 


static
class
Node 
{ 

int
data; 

Node left, right; 
} 



static
Node newNode(
int
data) 
{ 

Node temp = 
new
Node(); 

temp.data = data; 

temp.left = 
null
; 

temp.right = 
null
; 

return
temp; 
} 



static
String areMirrors(Node root1, Node root2) 
{ 

Stack<Node> st1 = 
new
Stack<Node> (); 

Stack<Node> st2 = 
new
Stack<Node> (); 

while
(
true
) 

{ 





while
(root1 != 
null
&& root2 != 
null
) 

{ 







if
(root1.data != root2.data) 

return
""No""
; 


st1.push(root1); 

st2.push(root2); 

root1 = root1.left; 

root2 = root2.right; 

} 










if
(!(root1 == 
null
&& root2 == 
null
)) 

return
""No""
; 


if
(!st1.isEmpty() && !st2.isEmpty()) 

{ 

root1 = st1.peek(); 

root2 = st2.peek(); 

st1.pop(); 

st2.pop(); 




root1 = root1.right; 




root2 = root2.left; 

} 




else

break
; 

} 




return
""Yes""
; 
} 


public
static
void
main(String[] args) 
{ 



Node root1 = newNode(
1
); 


root1.left = newNode(
3
); 


root1.right = newNode(
2
); 


root1.right.left = newNode(
5
); 


root1.right.right = newNode(
4
); 





Node root2 = newNode(
1
); 


root2.left = newNode(
2
); 


root2.right = newNode(
3
); 


root2.left.left = newNode(
4
); 


root2.left.right = newNode(
5
); 



System.out.println(areMirrors(root1, root2)); 
} 
}","class GfG { static class Node { int data; Node left, right; } static Node newNode(int data) { Node temp = new Node(); temp.data = data; temp.left = null; temp.right = null; return temp; } static String areMirrors(Node root1, Node root2) { Stack<Node> st1 = new Stack<Node> (); Stack<Node> st2 = new Stack<Node> (); while(true) { while(root1 != null && root2 != null) { if(root1.data != root2.data) return ""No""; st1.push(root1); st2.push(root2); root1 = root1.left; root2 = root2.right; } if(!(root1 == null && root2 == null)) return ""No""; if(!st1.isEmpty() && !st2.isEmpty()) { root1 = st1.peek(); root2 = st2.peek(); st1.pop(); st2.pop(); root1 = root1.right; root2 = root2.left; } else break; } return ""Yes""; } public static void main(String[] args) { Node root1 = newNode(1); root1.left = newNode(3); root1.right = newNode(2); root1.right.left = newNode(5); root1.right.right = newNode(4); Node root2 = newNode(1); root2.left = newNode(2); root2.right = newNode(3); root2.left.left = newNode(4); root2.left.right = newNode(5); System.out.println(areMirrors(root1, root2)); } }",225
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root1, root2; 




boolean
identicalTrees(Node a, Node b) 

{ 



if
(a == 
null
&& b == 
null
) 

return
true
; 




if
(a != 
null
&& b != 
null
) 

return
(a.data == b.data 

&& identicalTrees(a.left, b.left) 

&& identicalTrees(a.right, b.right)); 




return
false
; 

} 




public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 


tree.root1 = 
new
Node(
1
); 

tree.root1.left = 
new
Node(
2
); 

tree.root1.right = 
new
Node(
3
); 

tree.root1.left.left = 
new
Node(
4
); 

tree.root1.left.right = 
new
Node(
5
); 


tree.root2 = 
new
Node(
1
); 

tree.root2.left = 
new
Node(
2
); 

tree.root2.right = 
new
Node(
3
); 

tree.root2.left.left = 
new
Node(
4
); 

tree.root2.left.right = 
new
Node(
5
); 


if
(tree.identicalTrees(tree.root1, tree.root2)) 

System.out.println(
""Both trees are identical""
); 

else

System.out.println(
""Trees are not identical""
); 


} 
}","class Node { int data; Node left, right; Node(int item) { data = item; left = right = null; } }

class BinaryTree { Node root1, root2; boolean identicalTrees(Node a, Node b) { if (a == null && b == null) return true; if (a != null && b != null) return (a.data == b.data && identicalTrees(a.left, b.left) && identicalTrees(a.right, b.right)); return false; } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root1 = new Node(1); tree.root1.left = new Node(2); tree.root1.right = new Node(3); tree.root1.left.left = new Node(4); tree.root1.left.right = new Node(5); tree.root2 = new Node(1); tree.root2.left = new Node(2); tree.root2.right = new Node(3); tree.root2.left.left = new Node(4); tree.root2.left.right = new Node(5); if (tree.identicalTrees(tree.root1, tree.root2)) System.out.println(""Both trees are identical""); else System.out.println(""Trees are not identical""); } }",226
"public
class
CheckForPath { 










public
static
boolean
existPath(Node root, 
int
arr[], 
int
index) 

{ 





if
(root==
null
) 

{ 

return
arr.length==
0
; 

} 






if
((root.left==
null
&& root.right==
null
) && (root.data==arr[index] 

&& root.data==arr[arr.length-
1
])) 

{ 

return
true
; 

} 










return
(index<arr.length && (root.data==arr[index] && 

(existPath(root.left,arr,index+
1
) || 

existPath(root.right, arr, index+
1
)))); 

} 


public
static
void
main(String args[]) { 



int
arr[] = {
5
, 
8
, 
6
, 
7
}; 

Node root=
new
Node(
5
); 

root.left=
new
Node(
3
); 

root.right=
new
Node(
8
); 

root.left.left = 
new
Node(
2
); 

root.left.right = 
new
Node(
4
); 

root.left.left.left = 
new
Node(
1
); 

root.right.left = 
new
Node(
6
); 

root.right.left.right = 
new
Node(
7
); 


if
(existPath(root, arr, 
0
)) 

{ 

System.out.print(
""Path Exists""
); 

} 

else

{ 

System.out.print(
""Path does not Exist""
); 

} 

} 
} 


class
Node 
{ 

int
data; 

Node left, right; 

Node(
int
data) 

{ 

this
.data=data; 

left=right=
null
; 

} 
};","public class CheckForPath {
    public static boolean existPath(Node root, int[] arr, int index) {
        if (root == null) {
            return arr.length == 0;
        }
        if ((root.left == null && root.right == null) && (root.data == arr[index] && root.data == arr[arr.length - 1])) {
            return true;
        }
        return (index < arr.length && (root.data == arr[index] && (existPath(root.left, arr, index + 1) || existPath(root.right, arr, index + 1))));
    }
    public static void main(String args[]) {
        int arr[] = {5, 8, 6, 7};
        Node root = new Node(5);
        root.left = new Node(3);
        root.right = new Node(8);
        root.left.left = new Node(2);
        root.left.right = new Node(4);
        root.left.left.left = new Node(1);
        root.right.left = new Node(6);
        root.right.left.right = new Node(7);
        if (existPath(root, arr, 0)) {
            System.out.print(""Path Exists"");
        } else {
            System.out.print(""Path does not Exist"");
        }
    }
}
class Node {
    int data;
    Node left, right;
    Node(int data) {
        this.data = data;
        left = right = null;
    }
};",227
"class
GfG { 


static
class
Node 
{ 

int
data; 

Node left, right; 
} 



static
Node newNode(
int
item) 
{ 

Node temp = 
new
Node(); 

temp.data = item; 

temp.left = 
null
; 

temp.right = 
null
; 

return
temp; 
} 


static
int
getLevel(Node root, Node node, 
int
level) 
{ 



if
(root == 
null
) 

return
0
; 

if
(root == node) 

return
level; 




int
downlevel = getLevel(root.left, node, level+
1
); 

if
(downlevel != 
0
) 

return
downlevel; 




return
getLevel(root.right, node, level+
1
); 
} 


static
void
printGivenLevel(Node root, Node node, 
int
level) 
{ 



if
(root == 
null
|| level < 
2
) 

return
; 






if
(level == 
2
) 

{ 

if
(root.left == node || root.right == node) 

return
; 

if
(root.left != 
null
) 

System.out.print(root.left.data + 
"" ""
); 

if
(root.right != 
null
) 

System.out.print(root.right.data + 
"" ""
); 

} 




else
if
(level > 
2
) 

{ 

printGivenLevel(root.left, node, level-
1
); 

printGivenLevel(root.right, node, level-
1
); 

} 
} 


static
void
printCousins(Node root, Node node) 
{ 



int
level = getLevel(root, node, 
1
); 




printGivenLevel(root, node, level); 
} 


public
static
void
main(String[] args) 
{ 

Node root = newNode(
1
); 

root.left = newNode(
2
); 

root.right = newNode(
3
); 

root.left.left = newNode(
4
); 

root.left.right = newNode(
5
); 

root.left.right.right = newNode(
15
); 

root.right.left = newNode(
6
); 

root.right.right = newNode(
7
); 

root.right.left.right = newNode(
8
); 


printCousins(root, root.left.right); 
} 
}","class GfG { static class Node { int data; Node left, right; } static Node newNode(int item) { Node temp = new Node(); temp.data = item; temp.left = null; temp.right = null; return temp; } static int getLevel(Node root, Node node, int level) { if (root == null) return 0; if (root == node) return level; int downlevel = getLevel(root.left, node, level+1); if (downlevel != 0) return downlevel; return getLevel(root.right, node, level+1); } static void printGivenLevel(Node root, Node node, int level) { if (root == null || level < 2) return; if (level == 2) { if (root.left == node || root.right == node) return; if (root.left != null) System.out.print(root.left.data + ",228
"public
class
PrintPath { 








public
static
boolean
hasPath(Node root, ArrayList<Integer> arr, 
int
x) 

{ 





if
(root==
null
) 

return
false
; 




arr.add(root.data); 






if
(root.data == x) 

return
true
; 








if
(hasPath(root.left, arr, x) || 

hasPath(root.right, arr, x)) 

return
true
; 










arr.remove(arr.size()-
1
); 

return
false
; 

} 






public
static
void
printPath(Node root, 
int
x) 

{ 



ArrayList<Integer> arr=
new
ArrayList<>(); 






if
(hasPath(root, arr, x)) 

{ 

for
(
int
i=
0
; i<arr.size()-
1
; i++) 

System.out.print(arr.get(i)+
""->""
); 

System.out.print(arr.get(arr.size() - 
1
)); 

} 




else

System.out.print(
""No Path""
); 

} 


public
static
void
main(String args[]) { 

Node root=
new
Node(
1
); 

root.left = 
new
Node(
2
); 

root.right = 
new
Node(
3
); 

root.left.left = 
new
Node(
4
); 

root.left.right = 
new
Node(
5
); 

root.right.left = 
new
Node(
6
); 

root.right.right = 
new
Node(
7
); 

int
x=
5
; 

printPath(root, x); 

} 
} 


class
Node 
{ 

int
data; 

Node left, right; 

Node(
int
data) 

{ 

this
.data=data; 

left=right=
null
; 

} 
};","public class PrintPath { public static boolean hasPath(Node root, ArrayList<Integer> arr, int x) { if (root == null) return false; arr.add(root.data); if (root.data == x) return true; if (hasPath(root.left, arr, x) || hasPath(root.right, arr, x)) return true; arr.remove(arr.size() - 1); return false; } public static void printPath(Node root, int x) { ArrayList<Integer> arr = new ArrayList<>(); if (hasPath(root, arr, x)) { for (int i = 0; i < arr.size() - 1; i++) System.out.print(arr.get(i) + ""->""); System.out.print(arr.get(arr.size() - 1)); } else System.out.print(""No Path""); } public static void main(String args[]) { Node root = new Node(1); root.left = new Node(2); root.right = new Node(3); root.left.left = new Node(4); root.left.right = new Node(5); root.right.left = new Node(6); root.right.right = new Node(7); int x = 5; printPath(root, x); } } class Node { int data; Node left, right; Node(int data) { this.data = data; left = right = null; } };",229
"class
GfG { 

static
class
Node { 

int
data; 

Node left, right; 
} 

static
void
printOddNodes(Node root, 
boolean
isOdd) 
{ 



if
(root == 
null
) 

return
; 




if
(isOdd == 
true
) 

System.out.print(root.data + 
"" ""
); 






printOddNodes(root.left, !isOdd); 

printOddNodes(root.right, !isOdd); 
} 


static
Node newNode(
int
data) 
{ 

Node node = 
new
Node(); 

node.data = data; 

node.left = 
null
; 

node.right = 
null
; 

return
(node); 
} 


public
static
void
main(String[] args) 
{ 

Node root = newNode(
1
); 

root.left = newNode(
2
); 

root.right = newNode(
3
); 

root.left.left = newNode(
4
); 

root.left.right = newNode(
5
); 

printOddNodes(root, 
true
); 

} 
}","class GfG { static class Node { int data; Node left, right; } static void printOddNodes(Node root, boolean isOdd) { if (root == null) return; if (isOdd == true) System.out.print(root.data + "" ""); printOddNodes(root.left, !isOdd); printOddNodes(root.right, !isOdd); } static Node newNode(int data) { Node node = new Node(); node.data = data; node.left = null; node.right = null; return (node); } public static void main(String[] args) { Node root = newNode(1); root.left = newNode(2); root.right = newNode(3); root.left.left = newNode(4); root.left.right = newNode(5); printOddNodes(root, true); } }",230
"class
GfG { 

static
class
Node { 

int
data; 

Node left, right; 
} 


static
void
printOddNodes(Node root) 
{ 



if
(root == 
null
) 
return
; 






Queue<Node> q = 
new
LinkedList<Node> (); 




q.add(root); 

boolean
isOdd = 
true
; 


while
(
true
) 

{ 





int
nodeCount = q.size(); 

if
(nodeCount == 
0
) 

break
; 






while
(nodeCount > 
0
) 

{ 

Node node = q.peek(); 

if
(isOdd == 
true
) 

System.out.print(node.data + 
"" ""
); 

q.remove(); 

if
(node.left != 
null
) 

q.add(node.left); 

if
(node.right != 
null
) 

q.add(node.right); 

nodeCount--; 

} 


isOdd = !isOdd; 

} 
} 


static
Node newNode(
int
data) 
{ 

Node node = 
new
Node(); 

node.data = data; 

node.left = 
null
; 

node.right = 
null
; 

return
(node); 
} 


public
static
void
main(String[] args) 
{ 

Node root = newNode(
1
); 

root.left = newNode(
2
); 

root.right = newNode(
3
); 

root.left.left = newNode(
4
); 

root.left.right = newNode(
5
); 

printOddNodes(root); 
} 
}","class GfG { static class Node { int data; Node left, right; } static void printOddNodes(Node root) { if (root == null) return; Queue<Node> q = new LinkedList<Node> (); q.add(root); boolean isOdd = true; while (true) { int nodeCount = q.size(); if (nodeCount == 0) break; while (nodeCount > 0) { Node node = q.peek(); if (isOdd == true) System.out.print(node.data + "" ""); q.remove(); if (node.left != null) q.add(node.left); if (node.right != null) q.add(node.right); nodeCount--; } isOdd = !isOdd; } } static Node newNode(int data) { Node node = new Node(); node.data = data; node.left = null; node.right = null; return(node); } public static void main(String[] args) { Node root = newNode(1); root.left = newNode(2); root.right = newNode(3); root.left.left = newNode(4); root.left.right = newNode(5); printOddNodes(root); } }",231
"public
class
FullNodes { 








public
static
void
findFullNode(Node root) 

{ 

if
(root != 
null
) 

{ 

findFullNode(root.left); 

if
(root.left != 
null
&& root.right != 
null
) 

System.out.print(root.data+
"" ""
); 

findFullNode(root.right); 

} 

} 


public
static
void
main(String args[]) { 

Node root = 
new
Node(
1
); 

root.left = 
new
Node(
2
); 

root.right = 
new
Node(
3
); 

root.left.left = 
new
Node(
4
); 

root.right.left = 
new
Node(
5
); 

root.right.right = 
new
Node(
6
); 

root.right.left.right = 
new
Node(
7
); 

root.right.right.right = 
new
Node(
8
); 

root.right.left.right.left = 
new
Node(
9
); 

findFullNode(root); 

} 
} 


class
Node 
{ 

int
data; 

Node left, right; 

Node(
int
data) 

{ 

left=right=
null
; 

this
.data=data; 

} 
};","public class FullNodes {

    public static void findFullNode(Node root) {
        if (root != null) {
            findFullNode(root.left);
            if (root.left != null && root.right != null)
                System.out.print(root.data + "" "");
            findFullNode(root.right);
        }
    }

    public static void main(String args[]) {
        Node root = new Node(1);
        root.left = new Node(2);
        root.right = new Node(3);
        root.left.left = new Node(4);
        root.right.left = new Node(5);
        root.right.right = new Node(6);
        root.right.left.right = new Node(7);
        root.right.right.right = new Node(8);
        root.right.left.right.left = new Node(9);
        findFullNode(root);
    }
}


class Node {
    int data;
    Node left, right;

    Node(int data) {
        left = right = null;
        this.data = data;
    }
};",232
"class
GFG 
{ 

static
int
sum = 
0
; 



static
class
Node 
{ 

int
data; 

Node left, right; 
}; 


static
Node getNode(
int
data) 
{ 



Node newNode = 
new
Node(); 




newNode.data = data; 

newNode.left = newNode.right = 
null
; 

return
newNode; 
} 



static
void
sumOfParentOfX(Node root, 
int
x) 
{ 



if
(root == 
null
) 

return
; 








if
((root.left != 
null
&& root.left.data == x) || 

(root.right != 
null
&& root.right.data == x)) 

sum += root.data; 








sumOfParentOfX(root.left, x); 

sumOfParentOfX(root.right, x); 

} 




static
int
sumOfParentOfXUtil(Node root, 

int
x) 
{ 

sum = 
0
; 

sumOfParentOfX(root, x); 




return
sum; 
} 


public
static
void
main(String args[]) 
{ 



Node root = getNode(
4
); 


root.left = getNode(
2
); 


root.right = getNode(
5
); 


root.left.left = getNode(
7
); 


root.left.right = getNode(
2
); 


root.right.left = getNode(
2
); 

root.right.right = getNode(
3
); 


int
x = 
2
; 


System.out.println( 
""Sum = ""
+ 

sumOfParentOfXUtil(root, x)); 
} 
}","class GFG { static int sum = 0; static class Node { int data; Node left, right; }; static Node getNode(int data) { Node newNode = new Node(); newNode.data = data; newNode.left = newNode.right = null; return newNode; } static void sumOfParentOfX(Node root, int x) { if (root == null) return; if ((root.left != null && root.left.data == x) || (root.right != null && root.right.data == x)) sum += root.data; sumOfParentOfX(root.left, x); sumOfParentOfX(root.right, x); } static int sumOfParentOfXUtil(Node root, int x) { sum = 0; sumOfParentOfX(root, x); return sum; } public static void main(String args[]) { Node root = getNode(4); root.left = getNode(2); root.right = getNode(5); root.left.left = getNode(7); root.left.right = getNode(2); root.right.left = getNode(2); root.right.right = getNode(3); int x = 2; System.out.println( ""Sum = ""+ sumOfParentOfXUtil(root, x)); } }",233
"class
LinkedList { 




static
LNode head; 




class
LNode 

{ 

int
data; 

LNode next, prev; 


LNode(
int
d) 

{ 

data = d; 

next = prev = 
null
; 

} 

} 




class
TNode 

{ 

int
data; 

TNode left, right; 


TNode(
int
d) 

{ 

data = d; 

left = right = 
null
; 

} 

} 




TNode sortedListToBST() 

{ 



int
n = countNodes(head); 




return
sortedListToBSTRecur(n); 

} 




TNode sortedListToBSTRecur(
int
n) 

{ 



if
(n <= 
0
) 

return
null
; 




TNode left = sortedListToBSTRecur(n / 
2
); 




TNode root = 
new
TNode(head.data); 




root.left = left; 




head = head.next; 




root.right = sortedListToBSTRecur(n - n / 
2
- 
1
); 


return
root; 

} 






int
countNodes(LNode head) 

{ 

int
count = 
0
; 

LNode temp = head; 

while
(temp != 
null
) 

{ 

temp = temp.next; 

count++; 

} 

return
count; 

} 




void
push(
int
new_data) 

{ 



LNode new_node = 
new
LNode(new_data); 




new_node.prev = 
null
; 




new_node.next = head; 




if
(head != 
null
) 

head.prev = new_node; 




head = new_node; 

} 




void
printList(LNode node) 

{ 

while
(node != 
null
) 

{ 

System.out.print(node.data + 
"" ""
); 

node = node.next; 

} 

} 




void
preOrder(TNode node) 

{ 

if
(node == 
null
) 

return
; 

System.out.print(node.data + 
"" ""
); 

preOrder(node.left); 

preOrder(node.right); 

} 




public
static
void
main(String[] args) { 

LinkedList llist = 
new
LinkedList(); 




llist.push(
7
); 

llist.push(
6
); 

llist.push(
5
); 

llist.push(
4
); 

llist.push(
3
); 

llist.push(
2
); 

llist.push(
1
); 


System.out.println(
""Given Linked List ""
); 

llist.printList(head); 




TNode root = llist.sortedListToBST(); 

System.out.println(
""""
); 

System.out.println(
""Pre-Order Traversal of constructed BST ""
); 

llist.preOrder(root); 

} 
}","class LinkedList { static LNode head; class LNode { int data; LNode next, prev; LNode(int d) { data = d; next = prev = null; } } class TNode { int data; TNode left, right; TNode(int d) { data = d; left = right = null; } } TNode sortedListToBST() { int n = countNodes(head); return sortedListToBSTRecur(n); } TNode sortedListToBSTRecur(int n) { if (n <= 0) return null; TNode left = sortedListToBSTRecur(n / 2); TNode root = new TNode(head.data); root.left = left; head = head.next; root.right = sortedListToBSTRecur(n - n / 2 - 1); return root; } int countNodes(LNode head) { int count = 0; LNode temp = head; while (temp != null) { temp = temp.next; count++; } return count; } void push(int new_data) { LNode new_node = new LNode(new_data); new_node.prev = null; new_node.next = head; if (head != null) head.prev = new_node; head = new_node; } void printList(LNode node) { while (node != null) { System.out.print(node.data + "" ""); node = node.next; } } void preOrder(TNode node) { if (node == null) return; System.out.print(node.data + "" ""); preOrder(node.left); preOrder(node.right); } public static void main(String[] args) { LinkedList llist = new LinkedList(); llist.push(7); llist.push(6); llist.push(5); llist.push(4); llist.push(3); llist.push(2); llist.push(1); System.out.println(""Given Linked List ""); llist.printList(head); TNode root = llist.sortedListToBST(); System.out.println(""""); System.out.println(""Pre-Order Traversal of constructed BST ""); llist.preOrder(root); } }",234
"class
Test 
{ 

static
int
arr[] = {
10
, 
324
, 
45
, 
90
, 
9808
}; 




static
int
largest() 

{ 

int
i; 




int
max = arr[
0
]; 






for
(i = 
1
; i < arr.length; i++) 

if
(arr[i] > max) 

max = arr[i]; 


return
max; 

} 




public
static
void
main(String[] args) 

{ 

System.out.println(
""Largest in given array is ""
+ largest()); 

} 

}","class Test { static int arr[] = {10, 324, 45, 90, 9808}; static int largest() { int i; int max = arr[0]; for (i = 1; i < arr.length; i++) if (arr[i] > max) max = arr[i]; return max; } public static void main(String[] args) { System.out.println(""Largest in given array is "" + largest()); } }",235
"class
Node { 


int
data; 

Node left, right; 


Node(
int
d) { 

data = d; 

left = right = 
null
; 

} 
} 

class
BinaryTree { 


static
Node root; 




Node sortedArrayToBST(
int
arr[], 
int
start, 
int
end) { 




if
(start > end) { 

return
null
; 

} 




int
mid = (start + end) / 
2
; 

Node node = 
new
Node(arr[mid]); 




node.left = sortedArrayToBST(arr, start, mid - 
1
); 




node.right = sortedArrayToBST(arr, mid + 
1
, end); 


return
node; 

} 




void
preOrder(Node node) { 

if
(node == 
null
) { 

return
; 

} 

System.out.print(node.data + 
"" ""
); 

preOrder(node.left); 

preOrder(node.right); 

} 


public
static
void
main(String[] args) { 

BinaryTree tree = 
new
BinaryTree(); 

int
arr[] = 
new
int
[]{
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
}; 

int
n = arr.length; 

root = tree.sortedArrayToBST(arr, 
0
, n - 
1
); 

System.out.println(
""Preorder traversal of constructed BST""
); 

tree.preOrder(root); 

} 
}",ERROR,236
"class
Node { 


int
data; 

Node left, right; 


Node(
int
d) { 

data = d; 

left = right = 
null
; 

} 
} 

class
Sum { 


int
sum = 
0
; 
} 

class
BinaryTree { 


static
Node root; 

Sum summ = 
new
Sum(); 






void
addGreaterUtil(Node node, Sum sum_ptr) { 




if
(node == 
null
) { 

return
; 

} 






addGreaterUtil(node.right, sum_ptr); 




sum_ptr.sum = sum_ptr.sum + node.data; 




node.data = sum_ptr.sum; 






addGreaterUtil(node.left, sum_ptr); 

} 






Node addGreater(Node node) { 

addGreaterUtil(node, summ); 

return
node; 

} 




void
printInorder(Node node) { 

if
(node == 
null
) { 

return
; 

} 

printInorder(node.left); 

System.out.print(node.data + 
"" ""
); 

printInorder(node.right); 

} 




public
static
void
main(String[] args) { 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
5
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
13
); 


System.out.println(
""Inorder traversal of given tree ""
); 

tree.printInorder(root); 

Node node = tree.addGreater(root); 

System.out.println(
""""
); 

System.out.println(
""Inorder traversal of modified tree ""
); 

tree.printInorder(node); 

} 
}","class Node { int data; Node left, right; Node(int d) { data = d; left = right = null; } } class Sum { int sum = 0; } class BinaryTree { static Node root; Sum summ = new Sum(); void addGreaterUtil(Node node, Sum sum_ptr) { if (node == null) { return; } addGreaterUtil(node.right, sum_ptr); sum_ptr.sum = sum_ptr.sum + node.data; node.data = sum_ptr.sum; addGreaterUtil(node.left, sum_ptr); } Node addGreater(Node node) { addGreaterUtil(node, summ); return node; } void printInorder(Node node) { if (node == null) { return; } printInorder(node.left); System.out.print(node.data + "" ""); printInorder(node.right); } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(5); tree.root.left = new Node(2); tree.root.right = new Node(13); System.out.println(""Inorder traversal of given tree ""); tree.printInorder(root); Node node = tree.addGreater(root); System.out.println(""""); System.out.println(""Inorder traversal of modified tree ""); tree.printInorder(node); } }",237
"class
Node { 


int
data; 

Node left, right; 


Node(
int
d) { 

data = d; 

left = right = 
null
; 

} 
} 

class
BinaryTree { 


static
Node head; 




Node insert(Node node, 
int
data) { 




if
(node == 
null
) { 

return
(
new
Node(data)); 

} 
else
{ 




if
(data <= node.data) { 

node.left = insert(node.left, data); 

} 
else
{ 

node.right = insert(node.right, data); 

} 




return
node; 

} 

} 




int
minvalue(Node node) { 

Node current = node; 




while
(current.left != 
null
) { 

current = current.left; 

} 

return
(current.data); 

} 




public
static
void
main(String[] args) { 

BinaryTree tree = 
new
BinaryTree(); 

Node root = 
null
; 

root = tree.insert(root, 
4
); 

tree.insert(root, 
2
); 

tree.insert(root, 
1
); 

tree.insert(root, 
3
); 

tree.insert(root, 
6
); 

tree.insert(root, 
5
); 


System.out.println(
""Minimum value of BST is ""
+ tree.minvalue(root)); 

} 
}","class Node { int data; Node left, right; Node(int d) { data = d; left = right = null; } } class BinaryTree { static Node head; Node insert(Node node, int data) { if (node == null) { return (new Node(data)); } else { if (data <= node.data) { node.left = insert(node.left, data); } else { node.right = insert(node.right, data); } return node; } } int minvalue(Node node) { Node current = node; while (current.left != null) { current = current.left; } return (current.data); } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); Node root = null; root = tree.insert(root, 4); tree.insert(root, 2); tree.insert(root, 1); tree.insert(root, 3); tree.insert(root, 6); tree.insert(root, 5); System.out.println(""Minimum value of BST is "" + tree.minvalue(root)); } }",238
"class
Solution 
{ 





static
class
NodeDetails 
{ 

int
data; 

int
min, max; 
}; 




static
boolean
levelOrderIsOfBST(
int
arr[], 
int
n) 
{ 



if
(n == 
0
) 

return
true
; 




Queue<NodeDetails> q = 
new
LinkedList<NodeDetails>(); 




int
i = 
0
; 






NodeDetails newNode=
new
NodeDetails(); 

newNode.data = arr[i++]; 

newNode.min = Integer.MIN_VALUE; 

newNode.max = Integer.MAX_VALUE; 

q.add(newNode); 






while
(i != n && q.size() > 
0
) 

{ 





NodeDetails temp = q.peek(); 

q.remove(); 

newNode = 
new
NodeDetails(); 








if
(i < n && (arr[i] < (
int
)temp.data && 

arr[i] > (
int
)temp.min)) 

{ 





newNode.data = arr[i++]; 

newNode.min = temp.min; 

newNode.max = temp.data; 

q.add(newNode); 

} 


newNode=
new
NodeDetails(); 








if
(i < n && (arr[i] > (
int
)temp.data && 

arr[i] < (
int
)temp.max)) 

{ 





newNode.data = arr[i++]; 

newNode.min = temp.data; 

newNode.max = temp.max; 

q.add(newNode); 

} 

} 






if
(i == n) 

return
true
; 






return
false
; 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = {
7
, 
4
, 
12
, 
3
, 
6
, 
8
, 
1
, 
5
, 
10
}; 

int
n = arr.length; 

if
(levelOrderIsOfBST(arr, n)) 

System.out.print( 
""Yes""
); 

else

System.out.print( 
""No""
); 

} 
}","class Solution { static class NodeDetails { int data; int min, max; } static boolean levelOrderIsOfBST(int arr[], int n) { if (n == 0) return true; Queue<NodeDetails> q = new LinkedList<NodeDetails>(); int i = 0; NodeDetails newNode = new NodeDetails(); newNode.data = arr[i++]; newNode.min = Integer.MIN_VALUE; newNode.max = Integer.MAX_VALUE; q.add(newNode); while (i != n && q.size() > 0) { NodeDetails temp = q.peek(); q.remove(); newNode = new NodeDetails(); if ( i < n && (arr[i] < (int)temp.data && arr[i] > (int)temp.min)) { newNode.data = arr[i++]; newNode.min = temp.min; newNode.max = temp.data; q.add(newNode); } newNode = new NodeDetails(); if ( i < n && (arr[i] > (int)temp.data && arr[i] < (int)temp.max)) { newNode.data = arr[i++]; newNode.min = temp.data; newNode.max = temp.max; q.add(newNode); } } if (i == n) return true; return false; } public static void main(String args[]) { int arr[] = { 7, 4, 12, 3, 6, 8, 1, 5, 10 }; int n = arr.length; if (levelOrderIsOfBST(arr, n)) System.out.print( ",239
"class
GfG 
{ 

static
class
Node 
{ 

int
data; 

Node left, right; 
} 


static
Node newNode(
int
data) 
{ 

Node temp = 
new
Node(); 

temp.data = data; 

temp.right = 
null
; 

temp.left = 
null
; 

return
temp; 
} 

static
Node KthLargestUsingMorrisTraversal(Node root, 
int
k) 
{ 

Node curr = root; 

Node Klargest = 
null
; 




int
count = 
0
; 


while
(curr != 
null
) 

{ 



if
(curr.right == 
null
) 

{ 




if
(++count == k) 

Klargest = curr; 




curr = curr.left; 

} 


else

{ 




Node succ = curr.right; 


while
(succ.left != 
null
&& succ.left != curr) 

succ = succ.left; 


if
(succ.left == 
null
) 

{ 






succ.left = curr; 




curr = curr.right; 

} 






else

{ 


succ.left = 
null
; 


if
(++count == k) 

Klargest = curr; 




curr = curr.left; 

} 

} 

} 

return
Klargest; 
} 


public
static
void
main(String[] args) 
{ 






Node root = newNode(
4
); 

root.left = newNode(
2
); 

root.right = newNode(
7
); 

root.left.left = newNode(
1
); 

root.left.right = newNode(
3
); 

root.right.left = newNode(
6
); 

root.right.right = newNode(
10
); 


System.out.println(
""Finding K-th largest Node in BST : ""
+ 

KthLargestUsingMorrisTraversal(root, 
2
).data); 
} 
}","class GfG { static class Node { int data; Node left, right; } static Node createNewNode(int data) { Node temp = new Node(); temp.data = data; temp.right = null; temp.left = null; return temp; } static Node findKthLargestUsingMorrisTraversal(Node root, int k) { Node current = root; Node kLargest = null; int count = 0; while (current != null) { if (current.right == null) { if (++count == k) kLargest = current; current = current.left; } else { Node successor = current.right; while (successor.left != null && successor.left != current) successor = successor.left; if (successor.left == null) { successor.left = current; current = current.right; } else { successor.left = null; if (++count == k) kLargest = current; current = current.left; } } } return kLargest; } public static void main(String[] args) { Node root = createNewNode(4); root.left = createNewNode(2); root.right = createNewNode(7); root.left.left = createNewNode(1); root.left.right = createNewNode(3); root.right.left = createNewNode(6); root.right.right = createNewNode(10); System.out.println(""Finding K-th largest Node in BST : "" + findKthLargestUsingMorrisTraversal(root, 2).data); } }",240
"class
Node { 


int
data; 

Node left, right; 


Node(
int
d) 

{ 

data = d; 

left = right = 
null
; 

} 
} 

class
BinarySearchTree { 




Node root; 




BinarySearchTree() 

{ 

root = 
null
; 

} 




public
void
insert(
int
data) 

{ 

this
.root = 
this
.insertRec(
this
.root, data); 

} 




Node insertRec(Node node, 
int
data) 

{ 



if
(node == 
null
) { 

this
.root = 
new
Node(data); 

return
this
.root; 

} 




if
(data < node.data) { 

node.left = 
this
.insertRec(node.left, data); 

} 
else
{ 

node.right = 
this
.insertRec(node.right, data); 

} 

return
node; 

} 




public
class
count { 

int
c = 
0
; 

} 




void
secondLargestUtil(Node node, count C) 

{ 





if
(node == 
null
|| C.c >= 
2
) 

return
; 






this
.secondLargestUtil(node.right, C); 




C.c++; 




if
(C.c == 
2
) { 

System.out.print(
""2nd largest element is ""
+ 

node.data); 

return
; 

} 




this
.secondLargestUtil(node.left, C); 

} 




void
secondLargest(Node node) 

{ 



count C = 
new
count(); 

this
.secondLargestUtil(
this
.root, C); 

} 




public
static
void
main(String[] args) 

{ 

BinarySearchTree tree = 
new
BinarySearchTree(); 





tree.insert(
50
); 

tree.insert(
30
); 

tree.insert(
20
); 

tree.insert(
40
); 

tree.insert(
70
); 

tree.insert(
60
); 

tree.insert(
80
); 


tree.secondLargest(tree.root); 

} 
}","class Node {

    int data;
    Node left, right;

    Node(int d) {
        data = d;
        left = right = null;
    }
}

class BinarySearchTree {

    Node root;

    BinarySearchTree() {
        root = null;
    }

    public void insert(int data) {
        this.root = this.insertRec(this.root, data);
    }

    Node insertRec(Node node, int data) {
        if (node == null) {
            this.root = new Node(data);
            return this.root;
        }
        if (data < node.data) {
            node.left = this.insertRec(node.left, data);
        } else {
            node.right = this.insertRec(node.right, data);
        }
        return node;
    }

    public class count {

        int c = 0;
    }

    void secondLargestUtil(Node node, count C) {
        if (node == null || C.c >= 2)
            return;
        this.secondLargestUtil(node.right, C);
        C.c++;
        if (C.c == 2) {
            System.out.print(""2nd largest element is "" + node.data);
            return;
        }
        this.secondLargestUtil(node.left, C);
    }

    void secondLargest(Node node) {
        count C = new count();
        this.secondLargestUtil(this.root, C);
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();

        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        tree.secondLargest(tree.root);
    }
}",241
"class
GfG { 


static
class
Node 
{ 

int
key; 

Node left, right; 
} 


static
int
KSmallestUsingMorris(Node root, 
int
k) 
{ 





int
count = 
0
; 


int
ksmall = Integer.MIN_VALUE; 


Node curr = root; 



while
(curr != 
null
) 

{ 











if
(curr.left == 
null
) 

{ 

count++; 






if
(count==k) 

ksmall = curr.key; 




curr = curr.right; 

} 

else

{ 





Node pre = curr.left; 

while
(pre.right != 
null
&& pre.right != curr) 

pre = pre.right; 




if
(pre.right== 
null
) 

{ 



pre.right = curr; 

curr = curr.left; 

} 








else

{ 





pre.right = 
null
; 


count++; 






if
(count==k) 

ksmall = curr.key; 


curr = curr.right; 

} 

} 

} 

return
ksmall; 

} 


static
Node newNode(
int
item) 
{ 

Node temp = 
new
Node(); 

temp.key = item; 

temp.left = 
null
; 

temp.right = 
null
; 

return
temp; 
} 


static
Node insert(Node node, 
int
key) 
{ 



if
(node == 
null
) 
return
newNode(key); 




if
(key < node.key) 

node.left = insert(node.left, key); 

else
if
(key > node.key) 

node.right = insert(node.right, key); 




return
node; 
} 


public
static
void
main(String[] args) 
{ 



Node root = 
null
; 

root = insert(root, 
50
); 

insert(root, 
30
); 

insert(root, 
20
); 

insert(root, 
40
); 

insert(root, 
70
); 

insert(root, 
60
); 

insert(root, 
80
); 


for
(
int
k=
1
; k<=
7
; k++) 

System.out.print(KSmallestUsingMorris(root, k) + 
"" ""
); 

} 
}","class GfG { static class Node { int key; Node left, right; } static int KSmallestUsingMorris(Node root, int k) { int count = 0; int ksmall = Integer.MIN_VALUE; Node curr = root; while (curr != null) { if (curr.left == null) { count++; if (count==k) ksmall = curr.key; curr = curr.right; } else { Node pre = curr.left; while (pre.right != null && pre.right != curr) pre = pre.right; if (pre.right== null) { pre.right = curr; curr = curr.left; } else { pre.right = null; count++; if (count==k) ksmall = curr.key; curr = curr.right; } } } return ksmall; } static Node newNode(int item) { Node temp = new Node(); temp.key = item; temp.left = null; temp.right = null; return temp; } static Node insert(Node node, int key) { if (node == null) return newNode(key); if (key < node.key) node.left = insert(node.left, key); else if (key > node.key) node.right = insert(node.right, key); return node; } public static void main(String[] args) { Node root = null; root = insert(root, 50); insert(root, 30); insert(root, 20); insert(root, 40); insert(root, 70); insert(root, 60); insert(root, 80); for (int k=1; k<=7; k++) System.out.print(KSmallestUsingMorris(root, k) + "" ""); } }",242
"class
GFG { 




static
boolean
isInorder(
int
[] arr, 
int
n) { 



if
(n == 
0
|| n == 
1
) { 

return
true
; 

} 


for
(
int
i = 
1
; i < n; i++) 


{ 

if
(arr[i - 
1
] > arr[i]) { 

return
false
; 

} 

} 




return
true
; 

} 



public
static
void
main(String[] args) { 

int
arr[] = {
19
, 
23
, 
25
, 
30
, 
45
}; 

int
n = arr.length; 

if
(isInorder(arr, n)) { 

System.out.println(
""Yes""
); 

} 
else
{ 

System.out.println(
""Non""
); 

} 

} 
}","class GFG { static boolean isInorder(int[] arr, int n) { if (n == 0 || n == 1) { return true; } for (int i = 1; i < n; i++) { if (arr[i - 1] > arr[i]) { return false; } } return true; } public static void main(String[] args) { int arr[] = {19, 23, 25, 30, 45}; int n = arr.length; if (isInorder(arr, n)) { System.out.println(""Yes""); } else { System.out.println(""Non""); } } }",243
"class
PrintLargest 
{ 



static
void
print3largest(
int
arr[], 
int
arr_size) 

{ 

int
i, first, second, third; 




if
(arr_size < 
3
) 

{ 

System.out.print(
"" Invalid Input ""
); 

return
; 

} 


third = first = second = Integer.MIN_VALUE; 

for
(i = 
0
; i < arr_size ; i ++) 

{ 



if
(arr[i] > first) 

{ 

third = second; 

second = first; 

first = arr[i]; 

} 




else
if
(arr[i] > second) 

{ 

third = second; 

second = arr[i]; 

} 


else
if
(arr[i] > third) 

third = arr[i]; 

} 


System.out.println(
""Three largest elements are ""
+ 

first + 
"" ""
+ second + 
"" ""
+ third); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
12
, 
13
, 
1
, 
10
, 
34
, 
1
}; 

int
n = arr.length; 

print3largest(arr, n); 

} 
}","class PrintLargest { static void print3largest(int[] arr, int arr_size) { int i, first, second, third; if (arr_size < 3) { System.out.print("" Invalid Input ""); return; } third = first = second = Integer.MIN_VALUE; for (i = 0; i < arr_size; i++) { if (arr[i] > first) { third = second; second = first; first = arr[i]; } else if (arr[i] > second) { third = second; second = arr[i]; } else if (arr[i] > third) third = arr[i]; } System.out.println(""Three largest elements are "" + first + "" "" + second + "" "" + third); } public static void main(String[] args) { int arr[] = { 12, 13, 1, 10, 34, 1 }; int n = arr.length; print3largest(arr, n); } }",244
"public
class
GFG { 




static
class
Node { 

int
data; 

Node left, right; 




public
Node(
int
data) { 

this
.data = data; 

left = 
null
; 

right = 
null
; 

} 

} 


static
Node root1; 

static
Node root2; 





static
int
countPairs(Node root1, Node root2, 

int
x) 

{ 



if
(root1 == 
null
|| root2 == 
null
) 

return
0
; 












Stack<Node> st1 = 
new
Stack<>(); 

Stack<Node> st2 = 
new
Stack<>(); 

Node top1, top2; 


int
count = 
0
; 






while
(
true
) { 






while
(root1 != 
null
) { 

st1.push(root1); 

root1 = root1.left; 

} 






while
(root2 != 
null
) { 

st2.push(root2); 

root2 = root2.right; 

} 






if
(st1.empty() || st2.empty()) 

break
; 


top1 = st1.peek(); 

top2 = st2.peek(); 




if
((top1.data + top2.data) == x) { 



count++; 




st1.pop(); 

st2.pop(); 






root1 = top1.right; 

root2 = top2.left; 

} 






else
if
((top1.data + top2.data) < x) { 

st1.pop(); 

root1 = top1.right; 

} 






else
{ 

st2.pop(); 

root2 = top2.left; 

} 

} 




return
count; 

} 




public
static
void
main(String args[]) 

{ 



root1 = 
new
Node(
5
); 


root1.left = 
new
Node(
3
); 


root1.right = 
new
Node(
7
); 


root1.left.left = 
new
Node(
2
); 


root1.left.right = 
new
Node(
4
); 


root1.right.left = 
new
Node(
6
); 

root1.right.right = 
new
Node(
8
); 




root2 = 
new
Node(
10
); 


root2.left = 
new
Node(
6
); 


root2.right = 
new
Node(
15
); 


root2.left.left = 
new
Node(
3
); 


root2.left.right = 
new
Node(
8
); 


root2.right.left = 
new
Node(
11
); 

root2.right.right = 
new
Node(
18
); 


int
x = 
16
; 

System.out.println(
""Pairs = ""

+ countPairs(root1, root2, x)); 

} 
}","public class GFG { static class Node { int data; Node left, right; public Node(int data) { this.data = data; left = null; right = null; } } static Node root1; static Node root2; static int countPairs(Node root1, Node root2, int x) { if (root1 == null || root2 == null) return 0; Stack<Node> st1 = new Stack<>(); Stack<Node> st2 = new Stack<>(); Node top1, top2; int count = 0; while (true) { while (root1 != null) { st1.push(root1); root1 = root1.left; } while (root2 != null) { st2.push(root2); root2 = root2.right; } if (st1.empty() || st2.empty()) break; top1 = st1.peek(); top2 = st2.peek(); if ((top1.data + top2.data) == x) { count++; st1.pop(); st2.pop(); root1 = top1.right; root2 = top2.left; } else if ((top1.data + top2.data) < x) { st1.pop(); root1 = top1.right; } else { st2.pop(); root2 = top2.left; } } return count; } public static void main(String args[]) { root1 = new Node(5); root1.left = new Node(3); root1.right = new Node(7); root1.left.left = new Node(2); root1.left.right = new Node(4); root1.right.left = new Node(6); root1.right.right = new Node(8); root2 = new Node(10); root2.left = new Node(6); root2.right = new Node(15); root2.left.left = new Node(3); root2.left.right = new Node(8); root2.right.left = new Node(11); root2.right.right = new Node(18); int x = 16; System.out.println(""Pairs = "" + countPairs(root1, root2, x)); } }",245
"class
Node 
{ 

int
key; 

Node left; 

Node right; 
} 

class
GFG 
{ 







private
static
Node removeOutsideRange(Node root, 

int
min, 
int
max) 

{ 



if
(root == 
null
) 

{ 

return
null
; 

} 






root.left = removeOutsideRange(root.left, 

min, max); 

root.right = removeOutsideRange(root.right, 

min, max); 










if
(root.key < min) 

{ 

Node rchild = root.right; 

root = 
null
; 

return
rchild; 

} 






if
(root.key > max) 

{ 

Node lchild = root.left; 

root = 
null
; 

return
lchild; 

} 




return
root; 

} 


public
static
Node newNode(
int
num) 

{ 

Node temp = 
new
Node(); 

temp.key = num; 

temp.left = 
null
; 

temp.right = 
null
; 

return
temp; 

} 


public
static
Node insert(Node root, 

int
key) 

{ 

if
(root == 
null
) 

{ 

return
newNode(key); 

} 

if
(root.key > key) 

{ 

root.left = insert(root.left, key); 

} 

else

{ 

root.right = insert(root.right, key); 

} 

return
root; 

} 


private
static
void
inorderTraversal(Node root) 

{ 

if
(root != 
null
) 

{ 

inorderTraversal(root.left); 

System.out.print(root.key + 
"" ""
); 

inorderTraversal(root.right); 

} 

} 




public
static
void
main(String[] args) 

{ 

Node root = 
null
; 

root = insert(root, 
6
); 

root = insert(root, -
13
); 

root = insert(root, 
14
); 

root = insert(root, -
8
); 

root = insert(root, 
15
); 

root = insert(root, 
13
); 

root = insert(root, 
7
); 


System.out.print(
""Inorder Traversal of ""
+ 

""the given tree is: ""
); 

inorderTraversal(root); 


root = removeOutsideRange(root, -
10
, 
13
); 


System.out.print(
""\nInorder traversal of ""
+ 

""the modified tree: ""
); 

inorderTraversal(root); 

} 
}","class Node {

    int key;

    Node left;

    Node right;
}

class GFG {

    private static Node removeOutsideRange(Node root, int min, int max) {

        if (root == null) {

            return null;
        }

        root.left = removeOutsideRange(root.left, min, max); 

        root.right = removeOutsideRange(root.right, min, max);

        if (root.key < min) {

            Node rchild = root.right;

            root = null;
            return rchild;
        }

        if (root.key > max) {

            Node lchild = root.left;

            root = null;
            return lchild;
        }

        return root;
    }

    public static Node newNode(int num) {

        Node temp = new Node();
        temp.key = num;
        temp.left = null;
        temp.right = null;

        return temp;
    }

    public static Node insert(Node root, int key) {

        if (root == null) {

            return newNode(key);
        }

        if (root.key > key) {

            root.left = insert(root.left, key);
        } else {

            root.right = insert(root.right, key);
        }

        return root;
    }

    private static void inorderTraversal(Node root) {

        if (root != null) {

            inorderTraversal(root.left);
            System.out.print(root.key + "" "");
            inorderTraversal(root.right);
        }
    }

    public static void main(String[] args) {

        Node root = null;
        root = insert(root, 6);
        root = insert(root, -13);
        root = insert(root, 14);
        root = insert(root, -8);
        root = insert(root, 15);
        root = insert(root, 13);
        root = insert(root, 7);

        System.out.print(""Inorder Traversal of the given tree is: "");
        inorderTraversal(root);

        root = removeOutsideRange(root, -10, 13);

        System.out.print(""\nInorder traversal of the modified tree: "");
        inorderTraversal(root);
    }
}",246
"class
Node { 


int
data; 

Node left, right; 


Node(
int
d) 

{ 

data = d; 

left = right = 
null
; 

} 
} 

class
BinarySearchTree { 




Node root; 




BinarySearchTree() 

{ 

root = 
null
; 

} 




void
inorder() 

{ 

inorderUtil(
this
.root); 

} 




void
inorderUtil(Node node) 

{ 

if
(node == 
null
) 

return
; 


inorderUtil(node.left); 

System.out.print(node.data + 
"" ""
); 

inorderUtil(node.right); 

} 




void
insert(
int
key) 

{ 

root = insertRec(root, key); 

} 




Node insertRec(Node root, 
int
data) 

{ 




if
(root == 
null
) { 

root = 
new
Node(data); 

return
root; 

} 




if
(data < root.data) 

root.left = insertRec(root.left, data); 

else
if
(data > root.data) 

root.right = insertRec(root.right, data); 


return
root; 

} 






ArrayList<Integer> treeToList(Node node, ArrayList<Integer> 

list) 

{ 



if
(node == 
null
) 

return
list; 


treeToList(node.left, list); 

list.add(node.data); 

treeToList(node.right, list); 


return
list; 

} 




boolean
isPairPresent(Node node, 
int
target) 

{ 







ArrayList<Integer> a1 = 
new
ArrayList<>(); 






ArrayList<Integer> a2 = treeToList(node, a1); 


int
start = 
0
; 



int
end = a2.size() - 
1
; 



while
(start < end) { 


if
(a2.get(start) + a2.get(end) == target) 


{ 

System.out.println(
""Pair Found: ""
+ a2.get(start) + 
"" + ""
+ a2.get(end) + 
"" ""

+ 
""= ""
+ target); 

return
true
; 

} 


if
(a2.get(start) + a2.get(end) > target) 


{ 

end--; 

} 


if
(a2.get(start) + a2.get(end) < target) 


{ 

start++; 

} 

} 


System.out.println(
""No such values are found!""
); 

return
false
; 

} 




public
static
void
main(String[] args) 

{ 

BinarySearchTree tree = 
new
BinarySearchTree(); 



tree.insert(
15
); 

tree.insert(
10
); 

tree.insert(
20
); 

tree.insert(
8
); 

tree.insert(
12
); 

tree.insert(
16
); 

tree.insert(
25
); 


tree.isPairPresent(tree.root, 
33
); 

} 
}","class Node { int data; Node left, right; Node(int d) { data = d; left = right = null; } } class BinarySearchTree { Node root; BinarySearchTree() { root = null; } void inorder() { inorderUtil(this.root); } void inorderUtil(Node node) { if (node == null) return; inorderUtil(node.left); System.out.print(node.data + "" ""); inorderUtil(node.right); } void insert(int key) { root = insertRec(root, key); } Node insertRec(Node root, int data) { if (root == null) { root = new Node(data); return root; } if (data < root.data) root.left = insertRec(root.left, data); else if (data > root.data) root.right = insertRec(root.right, data); return root; } ArrayList<Integer> treeToList(Node node, ArrayList<Integer> list) { if (node == null) return list; treeToList(node.left, list); list.add(node.data); treeToList(node.right, list); return list; } boolean isPairPresent(Node node, int target) { ArrayList<Integer> a1 = new ArrayList<>(); ArrayList<Integer> a2 = treeToList(node, a1); int start = 0; int end = a2.size() - 1; while (start < end) { if (a2.get(start) + a2.get(end) == target) { System.out.println(""Pair Found: "" + a2.get(start) + "" + "" + a2.get(end) + "" = "" + target); return true; } if (a2.get(start) + a2.get(end) > target) { end--; } if (a2.get(start) + a2.get(end) < target) { start++; } } System.out.println(""No such values are found!""); return false; } public static void main(String[] args) { BinarySearchTree tree = new BinarySearchTree(); tree.insert(15); tree.insert(10); tree.insert(20); tree.insert(8); tree.insert(12); tree.insert(16); tree.insert(25); tree.isPairPresent(tree.root, 33); } }",247
"class
Solution 
{ 

static
class
Node 
{ 

Node left, right; 

int
data; 
} 


static
Node createNode(
int
x) 
{ 

Node p = 
new
Node(); 

p . data = x; 

p . left = p . right = 
null
; 

return
p; 
} 


static
void
insertNode( Node root, 
int
x) 
{ 

Node p = root, q = 
null
; 


while
(p != 
null
) 

{ 

q = p; 

if
(p . data < x) 

p = p . right; 

else

p = p . left; 

} 


if
(q == 
null
) 

p = createNode(x); 

else

{ 

if
(q . data < x) 

q . right = createNode(x); 

else

q . left = createNode(x); 

} 
} 



static
int
maxelpath(Node q, 
int
x) 
{ 

Node p = q; 


int
mx = -
1
; 






while
(p . data != x) 

{ 

if
(p . data > x) 

{ 

mx = Math.max(mx, p . data); 

p = p . left; 

} 

else

{ 

mx = Math.max(mx, p . data); 

p = p . right; 

} 

} 


return
Math.max(mx, x); 
} 



static
int
maximumElement( Node root, 
int
x, 
int
y) 
{ 

Node p = root; 




while
((x < p . data && y < p . data) || 

(x > p . data && y > p . data)) 

{ 





if
(x < p . data && y < p . data) 

p = p . left; 






else
if
(x > p . data && y > p . data) 

p = p . right; 

} 






return
Math.max(maxelpath(p, x), maxelpath(p, y)); 
} 



public
static
void
main(String args[]) 
{ 

int
arr[] = { 
18
, 
36
, 
9
, 
6
, 
12
, 
10
, 
1
, 
8
}; 

int
a = 
1
, b = 
10
; 

int
n =arr.length; 




Node root = createNode(arr[
0
]); 




for
(
int
i = 
1
; i < n; i++) 

insertNode(root, arr[i]); 


System.out.println( maximumElement(root, a, b) ); 

} 
}","class Solution { static class Node { Node left, right; int data; } static Node createNode(int x) { Node p = new Node(); p.data = x; p.left = p.right = null; return p; } static void insertNode(Node root, int x) { Node p = root, q = null; while (p != null) { q = p; if (p.data < x) p = p.right; else p = p.left; } if (q == null) p = createNode(x); else { if (q.data < x) q.right = createNode(x); else q.left = createNode(x); } } static int maxelpath(Node q, int x) { Node p = q; int mx = -1; while (p.data != x) { if (p.data > x) { mx = Math.max(mx, p.data); p = p.left; } else { mx = Math.max(mx, p.data); p = p.right; } } return Math.max(mx, x); } static int maximumElement(Node root, int x, int y) { Node p = root; while ((x < p.data && y < p.data) || (x > p.data && y > p.data)) { if (x < p.data && y < p.data) p = p.left; else if (x > p.data && y > p.data) p = p.right; } return Math.max(maxelpath(p, x), maxelpath(p, y)); } public static void main(String args[]) { int arr[] = { 18, 36, 9, 6, 12, 10, 1, 8 }; int a = 1, b = 10; int n = arr.length; Node root = createNode(arr[0]); for (int i = 1; i < n; i++) insertNode(root, arr[i]); System.out.println(maximumElement(root, a, b)); } }",248
"class
solution 
{ 


static
class
Node 
{ 

int
data; 

Node left, right; 
}; 



static
Node newNode(
int
num) 
{ 

Node temp = 
new
Node(); 

temp.data = num; 

temp.left = temp.right = 
null
; 

return
temp; 
} 


static
Node insert(Node root, 
int
key) 
{ 

if
(root == 
null
) 

return
newNode(key); 

if
(root.data > key) 

root.left = insert(root.left, key); 

else

root.right = insert(root.right, key); 

return
root; 
} 


static
void
storeInorder(Node ptr, Vector<Integer> vect) 
{ 

if
(ptr==
null
) 

return
; 

storeInorder(ptr.left, vect); 

vect.add(ptr.data); 

storeInorder(ptr.right, vect); 
} 




static
void
pairSumUtil(Vector<Integer> vect1, Vector<Integer> vect2, 

int
sum) 
{ 





int
left = 
0
; 

int
right = vect2.size() - 
1
; 




while
(left < vect1.size() && right >= 
0
) 

{ 



if
(vect1.get(left) + vect2.get(right) == sum) 

{ 

System.out.print( 
""(""
+vect1.get(left) + 
"", ""
+ vect2.get(right) + 
""), ""
); 

left++; 

right--; 

} 






else
if
(vect1.get(left) + vect2.get(right) < sum) 

left++; 






else

right--; 

} 
} 




static
void
pairSum(Node root1, Node root2, 
int
sum) 
{ 





Vector<Integer> vect1= 
new
Vector<Integer>(), vect2= 
new
Vector<Integer>(); 

storeInorder(root1, vect1); 

storeInorder(root2, vect2); 








pairSumUtil(vect1, vect2, sum); 
} 


public
static
void
main(String args[]) 
{ 



Node root1 = 
null
; 

root1 = insert(root1, 
8
); 

root1 = insert(root1, 
10
); 

root1 = insert(root1, 
3
); 

root1 = insert(root1, 
6
); 

root1 = insert(root1, 
1
); 

root1 = insert(root1, 
5
); 

root1 = insert(root1, 
7
); 

root1 = insert(root1, 
14
); 

root1 = insert(root1, 
13
); 




Node root2 = 
null
; 

root2 = insert(root2, 
5
); 

root2 = insert(root2, 
18
); 

root2 = insert(root2, 
2
); 

root2 = insert(root2, 
1
); 

root2 = insert(root2, 
3
); 

root2 = insert(root2, 
4
); 


int
sum = 
10
; 

pairSum(root1, root2, sum); 
} 
}","class Solution { static class Node { int data; Node left, right; }; static Node newNode(int num) { Node temp = new Node(); temp.data = num; temp.left = temp.right = null; return temp; } static Node insert(Node root, int key) { if (root == null) return newNode(key); if (root.data > key) root.left = insert(root.left, key); else root.right = insert(root.right, key); return root; } static void storeInorder(Node ptr, Vector<Integer> vect) { if (ptr==null) return; storeInorder(ptr.left, vect); vect.add(ptr.data); storeInorder(ptr.right, vect); } static void pairSumUtil(Vector<Integer> vect1, Vector<Integer> vect2, int sum) { int left = 0; int right = vect2.size() - 1; while (left < vect1.size() && right >= 0) { if (vect1.get(left) + vect2.get(right) == sum) { System.out.print(""("" + vect1.get(left) + "", "" + vect2.get(right) + ""), ""); left++; right--; } else if (vect1.get(left) + vect2.get(right) < sum) left++; else right--; } } static void pairSum(Node root1, Node root2, int sum) { Vector<Integer> vect1= new Vector<Integer>(), vect2= new Vector<Integer>(); storeInorder(root1, vect1); storeInorder(root2, vect2); pairSumUtil(vect1, vect2, sum); } public static void main(String args[]) { Node root1 = null; root1 = insert(root1, 8); root1 = insert(root1, 10); root1 = insert(root1, 3); root1 = insert(root1, 6); root1 = insert(root1, 1); root1 = insert(root1, 5); root1 = insert(root1, 7); root1 = insert(root1, 14); root1 = insert(root1, 13); Node root2 = null; root2 = insert(root2, 5); root2 = insert(root2, 18); root2 = insert(root2, 2); root2 = insert(root2, 1); root2 = insert(root2, 3); root2 = insert(root2, 4); int sum = 10; pairSum(root1, root2, sum); } }",249
"class
Node { 


int
data; 

Node left, right; 


Node(
int
d) 

{ 

data = d; 

left = right = 
null
; 

} 
} 

class
BinarySearchTree { 




Node root; 




BinarySearchTree() 

{ 

root = 
null
; 

} 




void
inorder() 

{ 

inorderUtil(
this
.root); 

} 






void
inorderUtil(Node node) 

{ 

if
(node == 
null
) 

return
; 


inorderUtil(node.left); 

System.out.print(node.data + 
"" ""
); 

inorderUtil(node.right); 

} 




public
void
insert(
int
data) 

{ 

this
.root = 
this
.insertRec(
this
.root, data); 

} 




Node insertRec(Node node, 
int
data) 

{ 



if
(node == 
null
) { 

this
.root = 
new
Node(data); 

return
this
.root; 

} 




if
(data <= node.data) { 

node.left = 
this
.insertRec(node.left, data); 

} 
else
{ 

node.right = 
this
.insertRec(node.right, data); 

} 

return
node; 

} 




public
class
Sum { 

int
sum = 
0
; 

} 






void
modifyBSTUtil(Node node, Sum S) 

{ 



if
(node == 
null
) 

return
; 




this
.modifyBSTUtil(node.right, S); 






S.sum = S.sum + node.data; 

node.data = S.sum; 




this
.modifyBSTUtil(node.left, S); 

} 




void
modifyBST(Node node) 

{ 

Sum S = 
new
Sum(); 

this
.modifyBSTUtil(node, S); 

} 




public
static
void
main(String[] args) 

{ 

BinarySearchTree tree = 
new
BinarySearchTree(); 





tree.insert(
50
); 

tree.insert(
30
); 

tree.insert(
20
); 

tree.insert(
40
); 

tree.insert(
70
); 

tree.insert(
60
); 

tree.insert(
80
); 


tree.modifyBST(tree.root); 




tree.inorder(); 

} 
}","class Node {
    int data;
    Node left, right;

    Node(int d) {
        data = d;
        left = right = null;
    }
}

class BinarySearchTree {
    Node root;

    BinarySearchTree() {
        root = null;
    }

    void inorder() {
        inorderUtil(this.root);
    }

    void inorderUtil(Node node) {
        if (node == null)
            return;

        inorderUtil(node.left);
        System.out.print(node.data + "" "");
        inorderUtil(node.right);
    }

    public void insert(int data) {
        this.root = this.insertRec(this.root, data);
    }

    Node insertRec(Node node, int data) {
        if (node == null) {
            this.root = new Node(data);
            return this.root;
        }

        if (data <= node.data) {
            node.left = this.insertRec(node.left, data);
        } else {
            node.right = this.insertRec(node.right, data);
        }

        return node;
    }

    public class Sum {
        int sum = 0;
    }

    void modifyBSTUtil(Node node, Sum S) {
        if (node == null)
            return;

        this.modifyBSTUtil(node.right, S);

        S.sum = S.sum + node.data;
        node.data = S.sum;

        this.modifyBSTUtil(node.left, S);
    }

    void modifyBST(Node node) {
        Sum S = new Sum();
        this.modifyBSTUtil(node, S);
    }

    public static void main(String[] args) {
        BinarySearchTree tree = new BinarySearchTree();

        tree.insert(50);
        tree.insert(30);
        tree.insert(20);
        tree.insert(40);
        tree.insert(70);
        tree.insert(60);
        tree.insert(80);

        tree.modifyBST(tree.root);

        tree.inorder();
    }
}",250
"class
GFG { 






static
int
n, p; 






static
int
rd[] = 
new
int
[
1100
]; 






static
int
wt[] = 
new
int
[
1100
]; 






static
int
cd[] = 
new
int
[
1100
]; 






static
List <Integer> a = 

new
ArrayList<Integer>(); 


static
List <Integer> b = 

new
ArrayList<Integer>(); 


static
List <Integer> c = 

new
ArrayList<Integer>(); 


static
int
ans; 


static
int
dfs(
int
w) 

{ 

if
(cd[w] == 
0
) 

return
w; 

if
(wt[w] < ans) 

ans = wt[w]; 


return
dfs(cd[w]); 

} 




static
void
solve(
int
arr[][]) 

{ 

int
i = 
0
; 


while
(i < p) 

{ 


int
q = arr[i][
0
]; 

int
h = arr[i][
1
]; 

int
t = arr[i][
2
]; 


cd[q] = h; 

wt[q] = t; 

rd[h] = q; 

i++; 

} 


a=
new
ArrayList<Integer>(); 

b=
new
ArrayList<Integer>(); 

c=
new
ArrayList<Integer>(); 


for
(
int
j = 
1
; j <= n; ++j) 




if
(rd[j] == 
0
&& cd[j]>
0
) { 

ans = 
1000000000
; 

int
w = dfs(j); 








a.add(j); 

b.add(w); 

c.add(ans); 

} 


System.out.println(a.size()); 


for
(
int
j = 
0
; j < a.size(); ++j) 

System.out.println(a.get(j) + 
"" ""

+ b.get(j) + 
"" ""
+ c.get(j)); 

} 




public
static
void
main(String args[]) 

{ 

n = 
9
; 

p = 
6
; 






for
(
int
i = 
0
; i < 
1100
; i++) 

rd[i] = cd[i] = wt[i] = 
0
; 


int
arr[][] = { { 
7
, 
4
, 
98
}, 

{ 
5
, 
9
, 
72
}, 

{ 
4
, 
6
, 
10
}, 

{ 
2
, 
8
, 
22
}, 

{ 
9
, 
7
, 
17
}, 

{ 
3
, 
1
, 
66
} }; 

solve(arr); 

} 
}","class GFG { static int n, p; static int rd[] = new int[1100]; static int wt[] = new int[1100]; static int cd[] = new int[1100]; static List<Integer> a = new ArrayList<Integer>(); static List<Integer> b = new ArrayList<Integer>(); static List<Integer> c = new ArrayList<Integer>(); static int ans; static int dfs(int w) { if (cd[w] == 0) return w; if (wt[w] < ans) ans = wt[w]; return dfs(cd[w]); } static void solve(int arr[][]) { int i = 0; while (i < p) { int q = arr[i][0]; int h = arr[i][1]; int t = arr[i][2]; cd[q] = h; wt[q] = t; rd[h] = q; i++; } a = new ArrayList<Integer>(); b = new ArrayList<Integer>(); c = new ArrayList<Integer>(); for (int j = 1; j <= n; ++j) if (rd[j] == 0 && cd[j] > 0) { ans = 1000000000; int w = dfs(j); a.add(j); b.add(w); c.add(ans); } System.out.println(a.size()); for (int j = 0; j < a.size(); ++j) System.out.println(a.get(j) + "" "" + b.get(j) + "" "" + c.get(j)); } public static void main(String args[]) { n = 9; p = 6; for (int i = 0; i < 1100; i++) rd[i] = cd[i] = wt[i] = 0; int arr[][] = { { 7, 4, 98 }, { 5, 9, 72 }, { 4, 6, 10 }, { 2, 8, 22 }, { 9, 7, 17 }, { 3, 1, 66 } }; solve(arr); } }",251
"class
GFG 
{ 





static
int
policeThief(
char
arr[], 
int
n, 
int
k) 

{ 

int
res = 
0
; 

ArrayList<Integer> thi = 
new
ArrayList<Integer>(); 

ArrayList<Integer> pol = 
new
ArrayList<Integer>(); 




for
(
int
i = 
0
; i < n; i++) { 

if
(arr[i] == 
'P'
) 

pol.add(i); 

else
if
(arr[i] == 
'T'
) 

thi.add(i); 

} 






int
l = 
0
, r = 
0
; 

while
(l < thi.size() && r < pol.size()) { 




if
(Math.abs(thi.get(l) - pol.get(r)) <= k) { 

res++; 

l++; 

r++; 

} 




else
if
(thi.get(l) < pol.get(r)) 

l++; 

else

r++; 

} 

return
res; 

} 




public
static
void
main(String args[]) 

{ 

int
k, n; 

char
arr1[] =
new
char
[] { 
'P'
, 
'T'
, 
'T'
, 

'P'
, 
'T'
}; 

k = 
2
; 

n = arr1.length; 

System.out.println(
""Maximum thieves caught: ""

+policeThief(arr1, n, k)); 


char
arr2[] =
new
char
[] { 
'T'
, 
'T'
, 
'P'
, 
'P'
, 

'T'
, 
'P'
}; 

k = 
2
; 

n = arr2.length; 

System.out.println(
""Maximum thieves caught: ""

+policeThief(arr2, n, k)); 


char
arr3[] = 
new
char
[]{ 
'P'
, 
'T'
, 
'P'
, 
'T'
, 

'T'
, 
'P'
}; 

k = 
3
; 

n = arr3.length; 

System.out.println(
""Maximum thieves caught: ""

+policeThief(arr3, n, k)); 

} 
}","class GFG { static int policeThief(char arr[], int n, int k) { int res = 0; ArrayList<Integer> thi = new ArrayList<Integer>(); ArrayList<Integer> pol = new ArrayList<Integer>(); for (int i = 0; i < n; i++) { if (arr[i] == 'P') pol.add(i); else if (arr[i] == 'T') thi.add(i); } int l = 0, r = 0; while (l < thi.size() && r < pol.size()) { if (Math.abs(thi.get(l) - pol.get(r)) <= k) { res++; l++; r++; } else if (thi.get(l) < pol.get(r)) l++; else r++; } return res; } public static void main(String args[]) { int k, n; char arr1[] = new char[] { 'P', 'T', 'T', 'P', 'T' }; k = 2; n = arr1.length; System.out.println(""Maximum thieves caught: ""+policeThief(arr1, n, k)); char arr2[] = new char[] { 'T', 'T', 'P', 'P', 'T', 'P' }; k = 2; n = arr2.length; System.out.println(""Maximum thieves caught: ""+policeThief(arr2, n, k)); char arr3[] = new char[]{ 'P', 'T', 'P', 'T', 'T', 'P' }; k = 3; n = arr3.length; System.out.println(""Maximum thieves caught: ""+policeThief(arr3, n, k)); } }",252
"class
GFG { 


static
int
minProductSubset(
int
a[], 
int
n) 

{ 

if
(n == 
1
) 

return
a[
0
]; 












int
negmax = Integer.MIN_VALUE; 

int
posmin = Integer.MAX_VALUE; 

int
count_neg = 
0
, count_zero = 
0
; 

int
product = 
1
; 


for
(
int
i = 
0
; i < n; i++) 

{ 






if
(a[i] == 
0
){ 

count_zero++; 

continue
; 

} 






if
(a[i] < 
0
) 

{ 

count_neg++; 

negmax = Math.max(negmax, a[i]); 

} 




if
(a[i] > 
0
&& a[i] < posmin) 

posmin = a[i]; 


product *= a[i]; 

} 








if
(count_zero == n || 

(count_neg == 
0
&& count_zero > 
0
)) 

return
0
; 




if
(count_neg == 
0
) 

return
posmin; 






if
(count_neg % 
2
== 
0
&& count_neg != 
0
) 

{ 








product = product / negmax; 

} 


return
product; 

} 




public
static
void
main(String[] args) 

{ 


int
a[] = { -
1
, -
1
, -
2
, 
4
, 
3
}; 

int
n = 
5
; 


System.out.println(minProductSubset(a, n)); 

} 
}","class GFG { static int minProductSubset(int[] a, int n) { if (n == 1) return a[0]; int negmax = Integer.MIN_VALUE; int posmin = Integer.MAX_VALUE; int count_neg = 0, count_zero = 0; int product = 1; for (int i = 0; i < n; i++) { if (a[i] == 0) { count_zero++; continue; } if (a[i] < 0) { count_neg++; negmax = Math.max(negmax, a[i]); } if (a[i] > 0 && a[i] < posmin) posmin = a[i]; product *= a[i]; } if (count_zero == n || (count_neg == 0 && count_zero > 0)) return 0; if (count_neg == 0) return posmin; if (count_neg % 2 == 0 && count_neg != 0) { product = product / negmax; } return product; } public static void main(String[] args) { int a[] = { -1, -1, -2, 4, 3 }; int n = 5; System.out.println(minProductSubset(a, n)); } }",253
"class
GFG { 


static
int
maxProductSubset(
int
a[], 
int
n) { 

if
(n == 
1
) { 

return
a[
0
]; 

} 








int
max_neg = Integer.MIN_VALUE; 

int
count_neg = 
0
, count_zero = 
0
; 

int
prod = 
1
; 

for
(
int
i = 
0
; i < n; i++) { 






if
(a[i] == 
0
) { 

count_zero++; 

continue
; 

} 






if
(a[i] < 
0
) { 

count_neg++; 

max_neg = Math.max(max_neg, a[i]); 

} 


prod = prod * a[i]; 

} 




if
(count_zero == n) { 

return
0
; 

} 






if
(count_neg % 
2
== 
1
) { 






if
(count_neg == 
1

&& count_zero > 
0

&& count_zero + count_neg == n) { 

return
0
; 

} 








prod = prod / max_neg; 

} 


return
prod; 

} 



public
static
void
main(String[] args) { 

int
a[] = {-
1
, -
1
, -
2
, 
4
, 
3
}; 

int
n = a.length; 

System.out.println(maxProductSubset(a, n)); 


} 
}","public class GFG {
    static int maxProductSubset(int[] a, int n) {
        if (n == 1) {
            return a[0];
        }
        int max_neg = Integer.MIN_VALUE;
        int count_neg = 0, count_zero = 0;
        int prod = 1;
        for (int i = 0; i < n; i++) {
            if (a[i] == 0) {
                count_zero++;
                continue;
            }
            if (a[i] < 0) {
                count_neg++;
                max_neg = Math.max(max_neg, a[i]);
            }
            prod = prod * a[i];
        }
        if (count_zero == n) {
            return 0;
        }
        if (count_neg % 2 == 1) {
            if (count_neg == 1 && count_zero > 0 && count_zero + count_neg == n) {
                return 0;
            }
            prod = prod / max_neg;
        }
        return prod;
    }

    public static void main(String[] args) {
        int a[] = {-1, -1, -2, 4, 3};
        int n = a.length;
        System.out.println(maxProductSubset(a, n));
    }
}",254
"public
class
GFG { 




static
int
minSum(
int
[] A, 
int
n) { 

int
min_val = Arrays.stream(A).min().getAsInt(); 

return
(min_val * (n - 
1
)); 

} 




static
public
void
main(String[] args) { 

int
[] A = {
3
, 
6
, 
2
, 
8
, 
7
, 
5
}; 

int
n = A.length; 

System.out.println((minSum(A, n))); 


} 
}","public class GFG {

    static int minSum(int[] A, int n) {
        int min_val = Arrays.stream(A).min().getAsInt();
        return (min_val * (n - 1));
    }

    public static void main(String[] args) {
        int[] A = {3, 6, 2, 8, 7, 5};
        int n = A.length;
        System.out.println((minSum(A, n)));
    }
}",255
"class
GFG 
{ 
static
int
MinOperation(
int
a[], 

int
n, 
int
k) 
{ 


int
result = 
0
; 


for
(
int
i = 
0
; i < n; ++i) 

{ 




















if
(a[i] != 
1
&& a[i] > k) 

{ 

result = result + 

Math.min(a[i] % k, 

k - a[i] % k); 

} 

else

{ 










result = result + k - a[i]; 

} 

} 


return
result; 
} 


public
static
void
main (String[] args) 
{ 

int
arr[] = {
4
, 
5
, 
6
}; 

int
n = arr.length; 

int
k = 
5
; 

System.out.println(MinOperation(arr, n, k)); 
} 
}","class GFG { static int MinOperation(int a[], int n, int k) { int result = 0; for (int i = 0; i < n; ++i) { if (a[i] != 1 && a[i] > k) { result = result + Math.min(a[i] % k, k - a[i] % k); } else { result = result + k - a[i]; } } return result; } public static void main (String[] args) { int arr[] = {4, 5, 6}; int n = arr.length; int k = 5; System.out.println(MinOperation(arr, n, k)); } }",256
"class
GFG { 






public
static
int
maxSum(
int
stack1[], 
int
stack2[], 

int
stack3[], 
int
n1, 
int
n2, 

int
n3) 

{ 

int
sum1 = 
0
, sum2 = 
0
, sum3 = 
0
; 




for
(
int
i=
0
; i < n1; i++) 

sum1 += stack1[i]; 




for
(
int
i=
0
; i < n2; i++) 

sum2 += stack2[i]; 




for
(
int
i=
0
; i < n3; i++) 

sum3 += stack3[i]; 






int
top1 =
0
, top2 = 
0
, top3 = 
0
; 

int
ans = 
0
; 

while
(
true
) 

{ 



if
(top1 == n1 || top2 == n2 || top3 == n3) 

return
0
; 




if
(sum1 == sum2 && sum2 == sum3) 

return
sum1; 






if
(sum1 >= sum2 && sum1 >= sum3) 

sum1 -= stack1[top1++]; 

else
if
(sum2 >= sum3 && sum2 >= sum3) 

sum2 -= stack2[top2++]; 

else
if
(sum3 >= sum2 && sum3 >= sum1) 

sum3 -= stack3[top3++]; 

} 

} 




public
static
void
main(String[] args) 

{ 

int
stack1[] = { 
3
, 
2
, 
1
, 
1
, 
1
}; 

int
stack2[] = { 
4
, 
3
, 
2
}; 

int
stack3[] = { 
1
, 
1
, 
4
, 
1
}; 


int
n1 = stack1.length; 

int
n2 = stack2.length; 

int
n3 = stack3.length; 


System.out.println(maxSum(stack1, stack2, 

stack3, n1, n2, n3)); 

} 

}","public class GFG { public static int maxSum(int[] stack1, int[] stack2, int[] stack3, int n1, int n2, int n3) { int sum1 = 0, sum2 = 0, sum3 = 0; for (int i = 0; i < n1; i++) sum1 += stack1[i]; for (int i = 0; i < n2; i++) sum2 += stack2[i]; for (int i = 0; i < n3; i++) sum3 += stack3[i]; int top1 = 0, top2 = 0, top3 = 0; int ans = 0; while (true) { if (top1 == n1 || top2 == n2 || top3 == n3) return 0; if (sum1 == sum2 && sum2 == sum3) return sum1; if (sum1 >= sum2 && sum1 >= sum3) sum1 -= stack1[top1++]; else if (sum2 >= sum3 && sum2 >= sum1) sum2 -= stack2[top2++]; else if (sum3 >= sum2 && sum3 >= sum1) sum3 -= stack3[top3++]; } } public static void main(String[] args) { int[] stack1 = { 3, 2, 1, 1, 1 }; int[] stack2 = { 4, 3, 2 }; int[] stack3 = { 1, 1, 4, 1 }; int n1 = stack1.length; int n2 = stack2.length; int n3 = stack3.length; System.out.println(maxSum(stack1, stack2, stack3, n1, n2, n3)); } }",257
"class
GFG 
{ 



static
void
printVector(Vector<Integer> v) 

{ 



System.out.println(v.size()); 




for
(
int
i = 
0
; i < v.size(); i++) 

System.out.print(v.get(i) + 
"" ""
); 


System.out.println(); 

} 








static
void
findTwoGroup(
int
n) 

{ 



int
sum = n * (n + 
1
) / 
2
; 




int
group1Sum = sum / 
2
; 


Vector<Integer> group1 = 
new
Vector<Integer>(); 

Vector<Integer> group2 = 
new
Vector<Integer>(); 


for
(
int
i = n; i > 
0
; i--) { 








if
(group1Sum - i >= 
0
) { 


group1.add(i); 




group1Sum -= i; 

} 

else
{ 

group2.add(i); 

} 

} 




printVector(group1); 

printVector(group2); 

} 




public
static
void
main (String[] args) 

{ 

int
n = 
5
; 

findTwoGroup(n); 

} 
}","class GFG {

    static void printVector(Vector<Integer> v) {
        System.out.println(v.size());
        for (int i = 0; i < v.size(); i++)
            System.out.print(v.get(i) + "" "");
        System.out.println();
    }

    static void findTwoGroup(int n) {
        int sum = n * (n + 1) / 2;
        int group1Sum = sum / 2;
        Vector<Integer> group1 = new Vector<Integer>();
        Vector<Integer> group2 = new Vector<Integer>();
        for (int i = n; i > 0; i--) {
            if (group1Sum - i >= 0) {
                group1.add(i);
                group1Sum -= i;
            } else {
                group2.add(i);
            }
        }
        printVector(group1);
        printVector(group2);
    }

    public static void main(String[] args) {
        int n = 5;
        findTwoGroup(n);
    }
}",258
"public
class
GFG { 






static
int
cost(
int
[]a, 
int
n) 

{ 

int
min = a[
0
]; 






for
(
int
i = 
1
; i< a.length; i++) 

{ 

if
(a[i] < min) 

min = a[i]; 

} 






return
(n - 
1
) * min; 

} 






static
public
void
main (String[] args) 

{ 


int
[]a = { 
4
, 
3
, 
2
}; 

int
n = a.length; 


System.out.println(cost(a, n)); 

} 
}","public class GFG { static int cost(int[] a, int n) { int min = a[0]; for (int i = 1; i < a.length; i++) { if (a[i] < min) min = a[i]; } return (n - 1) * min; } public static void main(String[] args) { int[] a = { 4, 3, 2 }; int n = a.length; System.out.println(cost(a, n)); } }",259
"class
GFG 
{ 

static
void
digitsNum(
int
N) 
{ 



if
(N == 
0
) 

System.out.println(
""0""
); 







if
(N % 
9
!= 
0
) 

System.out.print((N % 
9
)); 





for
(
int
i = 
1
; i <= (N / 
9
); ++i) 

System.out.print(
""9""
); 







for
(
int
i = 
1
; i <= N; ++i) 

System.out.print(
""0""
); 

System.out.print(
""""
); 

} 




public
static
void
main (String[] args) 

{ 

int
N = 
5
; 

System.out.print(
""The number is : ""
); 

digitsNum(N); 

} 
}","class GFG { static void digitsNum(int N) { if (N == 0) System.out.println(""0""); if (N % 9 != 0) System.out.print((N % 9)); for (int i = 1; i <= (N / 9); ++i) System.out.print(""9""); for (int i = 1; i <= N; ++i) System.out.print(""0""); System.out.print(""""); } public static void main(String[] args) { int N = 5; System.out.print(""The number is : ""); digitsNum(N); } }",260
"class
GFG 
{ 





static
void
findSmallest(
int
m, 
int
s) 

{ 





if
(s == 
0
) 

{ 

System.out.print(m == 
1
? 
""Smallest number is 0""
: 
""Not possible""
); 


return
; 

} 




if
(s > 
9
*m) 

{ 

System.out.println(
""Not possible""
); 

return
; 

} 




int
[] res = 
new
int
[m]; 








s -= 
1
; 




for
(
int
i=m-
1
; i>
0
; i--) 

{ 





if
(s > 
9
) 

{ 

res[i] = 
9
; 

s -= 
9
; 

} 

else

{ 

res[i] = s; 

s = 
0
; 

} 

} 






res[
0
] = s + 
1
; 





System.out.print(
""Smallest number is ""
); 

for
(
int
i=
0
; i<m; i++) 

System.out.print(res[i]); 

} 




public
static
void
main (String[] args) 

{ 

int
s = 
9
, m = 
2
; 

findSmallest(m, s); 

} 
}","class GFG { static void findSmallest(int m, int s) { if (s == 0) { System.out.print(m == 1 ? ""Smallest number is 0"" : ""Not possible""); return; } if (s > 9 * m) { System.out.println(""Not possible""); return; } int[] res = new int[m]; s -= 1; for (int i = m - 1; i > 0; i--) { if (s > 9) { res[i] = 9; s -= 9; } else { res[i] = s; s = 0; } } res[0] = s + 1; System.out.print(""Smallest number is ""); for (int i = 0; i < m; i++) System.out.print(res[i]); } public static void main (String[] args) { int s = 9, m = 2; findSmallest(m, s); } }",261
"class
KeyComparator 
implements
Comparator<Key> { 




public
int
compare(Key k1, Key k2) 

{ 

if
(k1.freq < k2.freq) 

return
1
; 

else
if
(k1.freq > k2.freq) 

return
-
1
; 

return
0
; 

} 
} 

class
Key { 

int
freq; 


char
ch; 

Key(
int
val, 
char
c) 

{ 

freq = val; 

ch = c; 

} 
} 

class
GFG { 

static
int
MAX_CHAR = 
26
; 






static
void
rearrangeString(String str) 

{ 

int
n = str.length(); 




int
[] count = 
new
int
[MAX_CHAR]; 


for
(
int
i = 
0
; i < n; i++) 

count[str.charAt(i) - 
'a'
]++; 






PriorityQueue<Key> pq = 
new
PriorityQueue<>(
new

KeyComparator()); 

for
(
char
c = 
'a'
; c <= 
'z'
; c++) { 

int
val = c - 
'a'
; 

if
(count[val] > 
0
) 

pq.add(
new
Key(count[val], c)); 

} 




str = 
""""
; 








Key prev = 
new
Key(-
1
, 
'#'
); 




while
(pq.size() != 
0
) { 






Key k = pq.peek(); 

pq.poll(); 

str = str + k.ch; 








if
(prev.freq > 
0
) 

pq.add(prev); 






(k.freq)--; 

prev = k; 

} 






if
(n != str.length()) 

System.out.println(
"" Not valid String ""
); 

else

System.out.println(str); 

} 




public
static
void
main(String args[]) 

{ 

String str = 
""bbbaa""
; 

rearrangeString(str); 

} 
}","class KeyComparator implements Comparator<Key> { public int compare(Key k1, Key k2) { if (k1.freq < k2.freq) return 1; else if (k1.freq > k2.freq) return -1; return 0; } } class Key { int freq; char ch; Key(int val, char c) { freq = val; ch = c; } } class GFG { static int MAX_CHAR = 26; static void rearrangeString(String str) { int n = str.length(); int[] count = new int[MAX_CHAR]; for (int i = 0; i < n; i++) count[str.charAt(i) - 'a']++; PriorityQueue<Key> pq = new PriorityQueue<>(new KeyComparator()); for (char c = 'a'; c <= 'z'; c++) { int val = c - 'a'; if (count[val] > 0) pq.add(new Key(count[val], c)); } str = """"; Key prev = new Key(-1, '#'); while (!pq.isEmpty()) { Key k = pq.peek(); pq.poll(); str = str + k.ch; if (prev.freq > 0) pq.add(prev); k.freq--; prev = k; } if (n != str.length()) System.out.println("" Not valid String ""); else System.out.println(str); } public static void main(String args[]) { String str = ""bbbaa""; rearrangeString(str); } }",262
"public
class
GfG{ 




public
static
String noAdjacentDup(String s1) 

{ 

int
n = s1.length(); 

char
[] s = s1.toCharArray(); 

for
(
int
i = 
1
; i < n; i++) 

{ 





if
(s[i] == s[i - 
1
]) 

{ 



s[i] = 
'a'
; 








while
(s[i] == s[i - 
1
] || 

(i + 
1
< n && s[i] == s[i + 
1
])) 

s[i]++; 


i++; 

} 

} 

return
(
new
String(s)); 

} 




public
static
void
main(String argc[]){ 


String s = 
""geeksforgeeks""
; 

System.out.println(noAdjacentDup(s)); 


} 

}","public class GfG { public static String noAdjacentDup(String s1) { int n = s1.length(); char[] s = s1.toCharArray(); for (int i = 1; i < n; i++) { if (s[i] == s[i - 1]) { s[i] = 'a'; while (s[i] == s[i - 1] || (i + 1 < n && s[i] == s[i + 1])) s[i]++; i++; } } return (new String(s)); } public static void main(String argc[]) { String s = ""geeksforgeeks""; System.out.println(noAdjacentDup(s)); } }",263
"class
Test 
{ 

static
int
arr[] = {
12
, 
34
, 
54
, 
2
, 
3
}; 




static
int
recSearch(
int
arr[], 
int
l, 
int
r, 
int
x) 

{ 

if
(r < l) 

return
-
1
; 

if
(arr[l] == x) 

return
l; 

if
(arr[r] == x) 

return
r; 

return
recSearch(arr, l+
1
, r-
1
, x); 

} 




public
static
void
main(String[] args) 

{ 

int
x = 
3
; 




int
index = recSearch(arr, 
0
, arr.length-
1
, x); 

if
(index != -
1
) 

System.out.println(
""Element ""
+ x + 
"" is present at index ""
+ 

index); 

else

System.out.println(
""Element ""
+ x + 
"" is not present""
); 

} 

}","class Test { static int arr[] = {12, 34, 54, 2, 3}; static int recSearch(int arr[], int l, int r, int x) { if (r < l) return -1; if (arr[l] == x) return l; if (arr[r] == x) return r; return recSearch(arr, l+1, r-1, x); } public static void main(String[] args) { int x = 3; int index = recSearch(arr, 0, arr.length-1, x); if (index != -1) System.out.println(""Element "" + x + "" is present at index "" + index); else System.out.println(""Element "" + x + "" is not present""); } }",264
"class
Main { 



static
int
getMissingNo(
int
a[], 
int
n) 

{ 

int
i, total; 

total = (n + 
1
) * (n + 
2
) / 
2
; 

for
(i = 
0
; i < n; i++) 

total -= a[i]; 

return
total; 

} 




public
static
void
main(String args[]) 

{ 

int
a[] = { 
1
, 
2
, 
4
, 
5
, 
6
}; 

int
miss = getMissingNo(a, 
5
); 

System.out.println(miss); 

} 
}","class Main {

    static int getMissingNo(int a[], int n) {

        int i, total;

        total = (n + 1) * (n + 2) / 2;

        for (i = 0; i < n; i++)

            total -= a[i];

        return total;
    }

    public static void main(String args[]) {

        int a[] = {1, 2, 4, 5, 6};

        int miss = getMissingNo(a, 5);

        System.out.println(miss);
    }
}",265
"class
SecondSmallest 
{ 



static
void
print2Smallest(
int
arr[]) 

{ 

int
first, second, arr_size = arr.length; 




if
(arr_size < 
2
) 

{ 

System.out.println(
"" Invalid Input ""
); 

return
; 

} 


first = second = Integer.MAX_VALUE; 

for
(
int
i = 
0
; i < arr_size ; i ++) 

{ 



if
(arr[i] < first) 

{ 

second = first; 

first = arr[i]; 

} 




else
if
(arr[i] < second && arr[i] != first) 

second = arr[i]; 

} 

if
(second == Integer.MAX_VALUE) 

System.out.println(
""There is no second""
+ 

""smallest element""
); 

else

System.out.println(
""The smallest element is ""
+ 

first + 
"" and second Smallest""
+ 

"" element is ""
+ second); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
12
, 
13
, 
1
, 
10
, 
34
, 
1
}; 

print2Smallest(arr); 

} 
}","class SecondSmallest {
    static void print2Smallest(int[] arr) {
        int first, second, arr_size = arr.length;
        if (arr_size < 2) {
            System.out.println("" Invalid Input "");
            return;
        }
        first = second = Integer.MAX_VALUE;
        for (int i = 0; i < arr_size; i++) {
            if (arr[i] < first) {
                second = first;
                first = arr[i];
            } else if (arr[i] < second && arr[i] != first) {
                second = arr[i];
            }
        }
        if (second == Integer.MAX_VALUE)
            System.out.println(""There is no second"" + ""smallest element"");
        else
            System.out.println(""The smallest element is "" + first + "" and second Smallest"" + "" element is "" + second);
    }

    public static void main(String[] args) {
        int arr[] = {12, 13, 1, 10, 34, 1};
        print2Smallest(arr);
    }
}",266
"class
Main 
{ 



static
int
ceilSearch(
int
arr[], 
int
low, 
int
high, 
int
x) 

{ 

int
i; 




if
(x <= arr[low]) 

return
low; 




for
(i = low; i < high; i++) 

{ 

if
(arr[i] == x) 

return
i; 




if
(arr[i] < x && arr[i+
1
] >= x) 

return
i+
1
; 

} 




return
-
1
; 

} 





public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
2
, 
8
, 
10
, 
10
, 
12
, 
19
}; 

int
n = arr.length; 

int
x = 
3
; 

int
index = ceilSearch(arr, 
0
, n-
1
, x); 

if
(index == -
1
) 

System.out.println(
""Ceiling of ""
+x+
"" doesn't exist in array""
); 

else

System.out.println(
""ceiling of ""
+x+
"" is ""
+arr[index]); 

} 
}","class Main {

    static int ceilSearch(int arr[], int low, int high, int x) {
        int i;

        if (x <= arr[low])
            return low;

        for (i = low; i < high; i++) {

            if (arr[i] == x)
                return i;

            if (arr[i] < x && arr[i + 1] >= x)
                return i + 1;
        }

        return -1;
    }

    public static void main(String[] args) {
        int arr[] = { 1, 2, 8, 10, 10, 12, 19 };
        int n = arr.length;
        int x = 3;
        int index = ceilSearch(arr, 0, n - 1, x);

        if (index == -1)
            System.out.println(""Ceiling of "" + x + "" doesn't exist in array"");
        else
            System.out.println(""ceiling of "" + x + "" is "" + arr[index]);
    }
}",267
"class
Main 
{ 



static
int
countOccurrences(
int
arr[], 
int
n, 
int
x) 

{ 

int
res = 
0
; 

for
(
int
i=
0
; i<n; i++) 

if
(x == arr[i]) 

res++; 

return
res; 

} 


public
static
void
main(String args[]) 

{ 

int
arr[] = {
1
, 
2
, 
2
, 
2
, 
2
, 
3
, 
4
, 
7
,
8
,
8
}; 

int
n = arr.length; 

int
x = 
2
; 

System.out.println(countOccurrences(arr, n, x)); 

} 
}","class Main { static int countOccurrences(int arr[], int n, int x) { int res = 0; for (int i = 0; i < n; i++) { if (x == arr[i]) res++; } return res; } public static void main(String args[]) { int arr[] = {1, 2, 2, 2, 2, 3, 4, 7, 8, 8}; int n = arr.length; int x = 2; System.out.println(countOccurrences(arr, n, x)); } }",268
"class
GFG { 


static
void
printTwoElements(
int
arr[], 
int
size) 

{ 

int
i; 

System.out.print(
""The repeating element is ""
); 


for
(i = 
0
; i < size; i++) { 

int
abs_val = Math.abs(arr[i]); 

if
(arr[abs_val - 
1
] > 
0
) 

arr[abs_val - 
1
] = -arr[abs_val - 
1
]; 

else

System.out.println(abs_val); 

} 


System.out.print(
""And the missing element is ""
); 

for
(i = 
0
; i < size; i++) { 

if
(arr[i] > 
0
) 

System.out.println(i + 
1
); 

} 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
7
, 
3
, 
4
, 
5
, 
5
, 
6
, 
2
}; 

int
n = arr.length; 

printTwoElements(arr, n); 

} 
}","class GFG { static void printTwoElements(int arr[], int size) { int i; System.out.print(""The repeating element is ""); for (i = 0; i < size; i++) { int abs_val = Math.abs(arr[i]); if (arr[abs_val - 1] > 0) arr[abs_val - 1] = -arr[abs_val - 1]; else System.out.println(abs_val); } System.out.print(""And the missing element is ""); for (i = 0; i < size; i++) { if (arr[i] > 0) System.out.println(i + 1); } } public static void main(String[] args) { int arr[] = { 7, 3, 4, 5, 5, 6, 2 }; int n = arr.length; printTwoElements(arr, n); } }",269
"class
GFG { 

static
int
x, y; 


static
void
getTwoElements(
int
arr[], 
int
n) 

{ 



int
xor1; 




int
set_bit_no; 


int
i; 

x = 
0
; 

y = 
0
; 


xor1 = arr[
0
]; 




for
(i = 
1
; i < n; i++) 

xor1 = xor1 ^ arr[i]; 




for
(i = 
1
; i <= n; i++) 

xor1 = xor1 ^ i; 




set_bit_no = xor1 & ~(xor1 - 
1
); 




for
(i = 
0
; i < n; i++) { 

if
((arr[i] & set_bit_no) != 
0
) 



x = x ^ arr[i]; 


else



y = y ^ arr[i]; 

} 

for
(i = 
1
; i <= n; i++) { 

if
((i & set_bit_no) != 
0
) 



x = x ^ i; 


else



y = y ^ i; 

} 




} 



public
static
void
main(String[] args) 

{ 

int
arr[] = { 
1
, 
3
, 
4
, 
5
, 
1
, 
6
, 
2
}; 


int
n = arr.length; 

getTwoElements(arr, n); 

System.out.println(
"" The missing element is ""

+ x + 
""and the ""

+ 
""repeating number is ""

+ y); 

} 
}","class GFG { static int x, y; static void getTwoElements(int arr[], int n) { int xor1; int set_bit_no; int i; x = 0; y = 0; xor1 = arr[0]; for(i = 1; i < n; i++) xor1 = xor1 ^ arr[i]; for(i = 1; i <= n; i++) xor1 = xor1 ^ i; set_bit_no = xor1 & ~(xor1 - 1); for(i = 0; i < n; i++) { if((arr[i] & set_bit_no) != 0) x = x ^ arr[i]; else y = y ^ arr[i]; } for(i = 1; i <= n; i++) { if((i & set_bit_no) != 0) x = x ^ i; else y = y ^ i; } } public static void main(String[] args) { int arr[] = { 1, 3, 4, 5, 1, 6, 2}; int n = arr.length; getTwoElements(arr, n); System.out.println("" The missing element is "" + x + ""and the "" + ""repeating number is "" + y); } }",270
"class
Main 
{ 

static
int
linearSearch(
int
arr[], 
int
n) 

{ 

int
i; 

for
(i = 
0
; i < n; i++) 

{ 

if
(arr[i] == i) 

return
i; 

} 




return
-
1
; 

} 



public
static
void
main(String args[]) 

{ 

int
arr[] = {-
10
, -
1
, 
0
, 
3
, 
10
, 
11
, 
30
, 
50
, 
100
}; 

int
n = arr.length; 

System.out.println(
""Fixed Point is ""

+ linearSearch(arr, n)); 

} 
}","class Main { static int linearSearch(int arr[], int n) { int i = 0; while (i < n) { if (arr[i] == i) return i; i++; } return -1; } public static void main(String args[]) { int arr[] = {-10, -1, 0, 3, 10, 11, 30, 50, 100}; int n = arr.length; System.out.println(""Fixed Point is "" + linearSearch(arr, n)); } }",271
"class
Main 
{ 





static
int
findMaximum(
int
arr[], 
int
low, 
int
high) 

{ 

int
max = arr[low]; 

int
i; 

for
(i = low; i <= high; i++) 

{ 

if
(arr[i] > max) 

max = arr[i]; 

} 

return
max; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
30
, 
40
, 
50
, 
60
, 
70
, 
23
, 
20
}; 

int
n = arr.length; 

System.out.println(
""The maximum element is ""
+ 

findMaximum(arr, 
0
, n-
1
)); 

} 
}","class Main { static int findMaximum(int arr[], int low, int high) { int max = arr[low]; int i; for (i = low; i <= high; i++) { if (arr[i] > max) max = arr[i]; } return max; } public static void main (String[] args) { int arr[] = {1, 30, 40, 50, 60, 70, 23, 20}; int n = arr.length; System.out.print(""The maximum element is "" + findMaximum(arr, 0, n-1)); } }",272
"class
PairDifference 
{ 



static
boolean
findPair(
int
arr[],
int
n) 

{ 

int
size = arr.length; 




int
i = 
0
, j = 
1
; 




while
(i < size && j < size) 

{ 

if
(i != j && arr[j]-arr[i] == n) 

{ 

System.out.print(
""Pair Found: ""
+ 

""( ""
+arr[i]+
"", ""
+ arr[j]+
"" )""
); 

return
true
; 

} 

else
if
(arr[j] - arr[i] < n) 

j++; 

else

i++; 

} 


System.out.print(
""No such pair""
); 

return
false
; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
8
, 
30
, 
40
, 
100
}; 

int
n = 
60
; 

findPair(arr,n); 

} 
}","class PairDifference { static boolean findPair(int arr[], int n) { int size = arr.length; int i = 0, j = 1; while (i < size && j < size) { if (i != j && arr[j] - arr[i] == n) { System.out.print(""Pair Found: "" + ""( "" + arr[i] + "", "" + arr[j] + "" )""); return true; } else if (arr[j] - arr[i] < n) j++; else i++; } System.out.print(""No such pair""); return false; } public static void main (String[] args) { int arr[] = { 1, 8, 30, 40, 100 }; int n = 60; findPair(arr,n); } }",273
"class
GFG { 




public
static
void
print2largest(
int
arr[], 

int
arr_size) 

{ 

int
i, first, second; 




if
(arr_size < 
2
) 

{ 

System.out.print(
"" Invalid Input ""
); 

return
; 

} 


first = second = Integer.MIN_VALUE; 

for
(i = 
0
; i < arr_size ; i++) 

{ 



if
(arr[i] > first) 

{ 

second = first; 

first = arr[i]; 

} 




else
if
(arr[i] > second && arr[i] != first) 

second = arr[i]; 

} 


if
(second == Integer.MIN_VALUE) 

System.out.print(
""There is no second largest""
+ 

"" element\n""
); 

else

System.out.print(
""The second largest element""
+ 

"" is ""
+ second); 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
12
, 
35
, 
1
, 
10
, 
34
, 
1
}; 

int
n = arr.length; 

print2largest(arr, n); 

} 
}","class GFG {
    public static void print2largest(int[] arr, int arr_size) {
        int i, first, second;
        if (arr_size < 2) {
            System.out.print("" Invalid Input "");
            return;
        }
        first = second = Integer.MIN_VALUE;
        for (i = 0; i < arr_size ; i++) {
            if (arr[i] > first) {
                second = first;
                first = arr[i];
            }
            else if (arr[i] > second && arr[i] != first) {
                second = arr[i];
            }
        }
        if (second == Integer.MIN_VALUE) {
            System.out.print(""There is no second largest element\n"");
        }
        else {
            System.out.print(""The second largest element is "" + second);
        }
    }
    public static void main(String[] args) {
        int arr[] = {12, 35, 1, 10, 34, 1};
        int n = arr.length;
        print2largest(arr, n);
    }
}",274
"class
Main 
{ 



static
void
printFirstRepeating(
int
arr[]) 

{ 



int
min = -
1
; 




HashSet<Integer> set = 
new
HashSet<>(); 




for
(
int
i=arr.length-
1
; i>=
0
; i--) 

{ 



if
(set.contains(arr[i])) 

min = i; 


else


set.add(arr[i]); 

} 




if
(min != -
1
) 

System.out.println(
""The first repeating element is ""
+ arr[min]); 

else

System.out.println(
""There are no repeating elements""
); 

} 




public
static
void
main (String[] args) 
throws
java.lang.Exception 

{ 

int
arr[] = {
10
, 
5
, 
3
, 
4
, 
3
, 
5
, 
6
}; 

printFirstRepeating(arr); 

} 
}","class Main { static void printFirstRepeating(int[] arr) { int min = -1; HashSet<Integer> set = new HashSet<>(); for (int i = arr.length - 1; i >= 0; i--) { if (set.contains(arr[i])) min = i; else set.add(arr[i]); } if (min != -1) System.out.println(""The first repeating element is "" + arr[min]); else System.out.println(""There are no repeating elements""); } public static void main(String[] args) throws java.lang.Exception { int[] arr = {10, 5, 3, 4, 3, 5, 6}; printFirstRepeating(arr); } }",275
"class
FindCommon 
{ 



void
findCommon(
int
ar1[], 
int
ar2[], 
int
ar3[]) 

{ 



int
i = 
0
, j = 
0
, k = 
0
; 




while
(i < ar1.length && j < ar2.length && k < ar3.length) 

{ 





if
(ar1[i] == ar2[j] && ar2[j] == ar3[k]) 

{ System.out.print(ar1[i]+
"" ""
); i++; j++; k++; } 




else
if
(ar1[i] < ar2[j]) 

i++; 




else
if
(ar2[j] < ar3[k]) 

j++; 




else

k++; 

} 

} 




public
static
void
main(String args[]) 

{ 

FindCommon ob = 
new
FindCommon(); 


int
ar1[] = {
1
, 
5
, 
10
, 
20
, 
40
, 
80
}; 

int
ar2[] = {
6
, 
7
, 
20
, 
80
, 
100
}; 

int
ar3[] = {
3
, 
4
, 
15
, 
20
, 
30
, 
70
, 
80
, 
120
}; 


System.out.print(
""Common elements are ""
); 

ob.findCommon(ar1, ar2, ar3); 

} 
}","class FindCommon { void findCommon(int ar1[], int ar2[], int ar3[]) { int i = 0, j = 0, k = 0; while (i < ar1.length && j < ar2.length && k < ar3.length) { if (ar1[i] == ar2[j] && ar2[j] == ar3[k]) { System.out.print(ar1[i]+"" ""); i++; j++; k++; } else if (ar1[i] < ar2[j]) i++; else if (ar2[j] < ar3[k]) j++; else k++; } } public static void main(String args[]) { FindCommon ob = new FindCommon(); int ar1[] = { 1, 5, 10, 20, 40, 80 }; int ar2[] = { 6, 7, 20, 80, 100 }; int ar3[] = { 3, 4, 15, 20, 30, 70, 80, 120 }; System.out.print(""Common elements are ""); ob.findCommon(ar1, ar2, ar3); } }",276
"class
CloseSum { 




static
void
printClosest(
int
arr[], 
int
n, 
int
x) 

{ 

int
res_l=
0
, res_r=
0
; 







int
l = 
0
, r = n-
1
, diff = Integer.MAX_VALUE; 




while
(r > l) 

{ 



if
(Math.abs(arr[l] + arr[r] - x) < diff) 

{ 

res_l = l; 

res_r = r; 

diff = Math.abs(arr[l] + arr[r] - x); 

} 




if
(arr[l] + arr[r] > x) 

r--; 

else


l++; 

} 


System.out.println(
"" The closest pair is ""
+arr[res_l]+
"" and ""
+ arr[res_r]); 
} 





public
static
void
main(String[] args) 

{ 

int
arr[] = {
10
, 
22
, 
28
, 
29
, 
30
, 
40
}, x = 
54
; 

int
n = arr.length; 

printClosest(arr, n, x); 

} 
}","class CloseSum { static void printClosest(int[] arr, int n, int x) { int res_l = 0, res_r = 0; int l = 0, r = n-1, diff = Integer.MAX_VALUE; while (r > l) { if (Math.abs(arr[l] + arr[r] - x) < diff) { res_l = l; res_r = r; diff = Math.abs(arr[l] + arr[r] - x); } if (arr[l] + arr[r] > x) r--; else l++; } System.out.println("" The closest pair is ""+arr[res_l]+"" and ""+ arr[res_r]); } public static void main(String[] args) { int arr[] = {10, 22, 28, 29, 30, 40}, x = 54; int n = arr.length; printClosest(arr, n, x); } }",277
"class
ClosestPair 
{ 









void
printClosest(
int
ar1[], 
int
ar2[], 
int
m, 
int
n, 
int
x) 

{ 



int
diff = Integer.MAX_VALUE; 






int
res_l = 
0
, res_r = 
0
; 




int
l = 
0
, r = n-
1
; 

while
(l<m && r>=
0
) 

{ 





if
(Math.abs(ar1[l] + ar2[r] - x) < diff) 

{ 

res_l = l; 

res_r = r; 

diff = Math.abs(ar1[l] + ar2[r] - x); 

} 






if
(ar1[l] + ar2[r] > x) 

r--; 

else


l++; 

} 




System.out.print(
""The closest pair is [""
+ ar1[res_l] + 

"", ""
+ ar2[res_r] + 
""]""
); 

} 




public
static
void
main(String args[]) 

{ 

ClosestPair ob = 
new
ClosestPair(); 

int
ar1[] = {
1
, 
4
, 
5
, 
7
}; 

int
ar2[] = {
10
, 
20
, 
30
, 
40
}; 

int
m = ar1.length; 

int
n = ar2.length; 

int
x = 
38
; 

ob.printClosest(ar1, ar2, m, n, x); 

} 
}","class ClosestPair { void printClosest(int ar1[], int ar2[], int m, int n, int x) { int diff = Integer.MAX_VALUE; int res_l = 0, res_r = 0; int l = 0, r = n-1; while (l<m && r>=0) { if (Math.abs(ar1[l] + ar2[r] - x) < diff) { res_l = l; res_r = r; diff = Math.abs(ar1[l] + ar2[r] - x); } if (ar1[l] + ar2[r] > x) r--; else l++; } System.out.print(""The closest pair is [""+ ar1[res_l] + "", ""+ ar2[res_r] + ""]""); } public static void main(String args[]) { ClosestPair ob = new ClosestPair(); int ar1[] = {1, 4, 5, 7}; int ar2[] = {10, 20, 30, 40}; int m = ar1.length; int n = ar2.length; int x = 38; ob.printClosest(ar1, ar2, m, n, x); } }",278
"class
PairInSortedRotated 
{ 





static
boolean
pairInSortedRotated(
int
arr[], 

int
n, 
int
x) 

{ 



int
i; 

for
(i = 
0
; i < n - 
1
; i++) 

if
(arr[i] > arr[i+
1
]) 

break
; 


int
l = (i + 
1
) % n; 





int
r = i; 







while
(l != r) 

{ 





if
(arr[l] + arr[r] == x) 

return
true
; 






if
(arr[l] + arr[r] < x) 

l = (l + 
1
) % n; 


else


r = (n + r - 
1
) % n; 

} 

return
false
; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
11
, 
15
, 
6
, 
8
, 
9
, 
10
}; 

int
sum = 
16
; 

int
n = arr.length; 


if
(pairInSortedRotated(arr, n, sum)) 

System.out.print(
""Array has two elements""
+ 

"" with sum 16""
); 

else

System.out.print(
""Array doesn't have two""
+ 

"" elements with sum 16 ""
); 

} 
}","class PairInSortedRotated { static boolean pairInSortedRotated(int arr[], int n, int x) { int i; for (i = 0; i < n - 1; i++) if (arr[i] > arr[i+1]) break; int l = (i + 1) % n; int r = i; while (l != r) { if (arr[l] + arr[r] == x) return true; if (arr[l] + arr[r] < x) l = (l + 1) % n; else r = (n + r - 1) % n; } return false; } public static void main(String[] args) { int arr[] = { 11, 15, 6, 8, 9, 10 }; int sum = 16; int n = arr.length; if (pairInSortedRotated(arr, n, sum)) System.out.print(""Array has two elements""+ "" with sum 16""); else System.out.print(""Array doesn't have two""+ "" elements with sum 16 ""); } }",279
"class
Test 
{ 

static
int
arr[] = 
new
int
[]{
12
, 
34
, 
10
, 
6
, 
40
}; 




static
int
findLargestSumPair() 

{ 



int
first, second; 

if
(arr[
0
] > arr[
1
]) 

{ 

first = arr[
0
]; 

second = arr[
1
]; 

} 

else

{ 

first = arr[
1
]; 

second = arr[
0
]; 

} 






for
(
int
i = 
2
; i<arr.length; i ++) 

{ 



if
(arr[i] > first) 

{ 

second = first; 

first = arr[i]; 

} 




else
if
(arr[i] > second && arr[i] != first) 

second = arr[i]; 

} 

return
(first + second); 

} 



public
static
void
main(String[] args) 

{ 


System.out.println(
""Max Pair Sum is ""
+ findLargestSumPair()); 


} 
}","class Test {
    static int arr[] = new int[]{12, 34, 10, 6, 40};

    static int findLargestSumPair() {
        int first, second;

        if (arr[0] > arr[1]) {
            first = arr[0];
            second = arr[1];
        } else {
            first = arr[1];
            second = arr[0];
        }

        for (int i = 2; i < arr.length; i++) {
            if (arr[i] > first) {
                second = first;
                first = arr[i];
            } else if (arr[i] > second && arr[i] != first) {
                second = arr[i];
            }
        }

        return (first + second);
    }

    public static void main(String[] args) {
        System.out.println(""Max Pair Sum is "" + findLargestSumPair());
    }
}",280
"class
SecondSmallest 
{ 



static
void
print2Smallest(
int
arr[]) 

{ 

int
first, second, arr_size = arr.length; 




if
(arr_size < 
2
) 

{ 

System.out.println(
"" Invalid Input ""
); 

return
; 

} 


first = second = Integer.MAX_VALUE; 

for
(
int
i = 
0
; i < arr_size ; i ++) 

{ 



if
(arr[i] < first) 

{ 

second = first; 

first = arr[i]; 

} 




else
if
(arr[i] < second && arr[i] != first) 

second = arr[i]; 

} 

if
(second == Integer.MAX_VALUE) 

System.out.println(
""There is no second""
+ 

""smallest element""
); 

else

System.out.println(
""The smallest element is ""
+ 

first + 
"" and second Smallest""
+ 

"" element is ""
+ second); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
12
, 
13
, 
1
, 
10
, 
34
, 
1
}; 

print2Smallest(arr); 

} 
}",ERROR,281
"public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner s = new Scanner(System.in);
		int n = Integer.parseInt(s.nextLine());
		int ans = 0;
		String inp = s.nextLine();
		for(int i=0;i<n;i++) {
			char k = inp.charAt(i);
			if (k == '+')
				ans++;
			if (k == '-') {
				if (ans>0)
					ans--;
			}
		}
		System.out.println(ans);
	}
}","public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner s = new Scanner(System.in);
		int n = Integer.parseInt(s.nextLine());
		int ans = 0;
		String inp = s.nextLine();
		int i = 0;
		while (i < n) {
			char k = inp.charAt(i);
			if (k == '+')
				ans++;
			if (k == '-') {
				if (ans>0)
					ans--;
			}
			i++;
		}
		System.out.println(ans);
	}
}",282
"public class Main
{
	public static void main (String[] args) throws java.lang.Exception
	{
		Scanner s = new Scanner(System.in);
		int n = Integer.parseInt(s.nextLine());
		int ans = Integer.MAX_VALUE;
		int arr[] = new int[n];
		for(int i=0;i<n;i++) {
			arr[i] = s.nextInt();
		}
		for (int i=1;i<n;i++) {
			ans = Math.min(ans, Math.min(arr[i],arr[0])/i);
		}
		for (int i=n-2;i>=0;i--){
			ans = Math.min(ans, Math.min(arr[n-1],arr[i])/(n-i-1));
		}
		System.out.println(ans);
	}
}","public class Main {
	public static void main(String[] args) throws Exception {
		Scanner s = new Scanner(System.in);
		int n = Integer.parseInt(s.nextLine());
		int ans = Integer.MAX_VALUE;
		int[] arr = new int[n];
		for (int i = 0; i < n; i++) {
			arr[i] = s.nextInt();
		}
		for (int i = 1; i < n; i++) {
			ans = Math.min(ans, Math.min(arr[i], arr[0]) / i);
		}
		for (int i = n - 2; i >= 0; i--) {
			ans = Math.min(ans, Math.min(arr[n - 1], arr[i]) / (n - i - 1));
		}
		System.out.println(ans);
	}
}",283
"public class Main {
	public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int tmp;
		int min=Integer.MAX_VALUE;
		for(int i=0;i<n;i++) {
			tmp=sc.nextInt();
			if(i>n-1-i) {
				tmp=tmp/i;
			}else {
				tmp=tmp/(n-1-i);
			}
			if(tmp<min) {
				min=tmp;
			}
		}
		System.out.println(min);
	}
}","public class Main {
	public static void main(String args[]) {
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int tmp;
		int min=Integer.MAX_VALUE;
		for(int i=0;i<n;i++) {
			tmp=sc.nextInt();
			if(2*i>n-1) {
				tmp=tmp/i;
			}else {
				tmp=tmp/(n-1-i);
			}
			if(tmp<min) {
				min=tmp;
			}
		}
		System.out.println(min);
	}
}",284
"public class Main{
	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int k=sc.nextInt();
        if(n==k){
            String s=new String();
            for(int i=0;i<k;i++){
                s=s+""1"";
            }
            System.out.println(s);
        }
        else{
            int a=(n-k)/2;
            String s=new String();
                for(int i=0;i<a && s.length()<n;i++){
                    s=s+""1"";
                }
                if(s.length()<n){
                    s=s+""0"";
                }
            while(s.length()<n){
                s=s+s;
            }
            String s1=new String();
            for(int i=0;i<n;i++){
                s1=s1+Character.toString(s.charAt(i));
            }
            System.out.println(s1);
        }
	}
}","public class Main{
	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int k=sc.nextInt();
        if(n==k){
            String s=new String();
            for(int i=0;i<k;i++){
                s=s+""1"";
            }
            System.out.println(s);
        }
        else{
            int a=(n-k)/2;
            String s=new String();
                for(int i=0;i<a && s.length()<n;i++){
                    s=s+""1"";
                }
                if(s.length()<n){
                    s=s+""0"";
                }
            while(s.length()<n){
                s=s+s;
            }
            String s1=new String();
            for(int i=0;i<n;i++){
                s1=s1+Character.toString(s.charAt(i));
            }
            System.out.println(s1);
        }
	}
}",285
"class
MaximumSum 
{ 



int
FindMaxSum(
int
arr[], 
int
n) 

{ 

int
incl = arr[
0
]; 

int
excl = 
0
; 

int
excl_new; 

int
i; 


for
(i = 
1
; i < n; i++) 

{ 



excl_new = (incl > excl) ? incl : excl; 




incl = excl + arr[i]; 

excl = excl_new; 

} 




return
((incl > excl) ? incl : excl); 

} 




public
static
void
main(String[] args) 

{ 

MaximumSum sum = 
new
MaximumSum(); 

int
arr[] = 
new
int
[]{
5
, 
5
, 
10
, 
100
, 
10
, 
5
}; 

System.out.println(sum.FindMaxSum(arr, arr.length)); 

} 
}","class MaximumSum { int FindMaxSum(int[] arr, int n) { int incl = arr[0]; int excl = 0; int excl_new; int i; for (i = 1; i < n; i++) { excl_new = (incl > excl) ? incl : excl; incl = excl + arr[i]; excl = excl_new; } return ((incl > excl) ? incl : excl); } public static void main(String[] args) { MaximumSum sum = new MaximumSum(); int arr[] = new int[]{5, 5, 10, 100, 10, 5}; System.out.println(sum.FindMaxSum(arr, arr.length)); } }",286
"public class Main{
	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int k=sc.nextInt();
        if(n==k){
            String s=new String();
            for(int i=0;i<k;i++){
                s=s+""1"";
            }
            System.out.println(s);
        }
        else{
            int a=(n-k)/2;
            String s=new String();
            while(s.length()<n){
                for(int i=0;i<a && s.length()<n;i++){
                    s=s+""1"";
                }
                if(s.length()<n){
                    s=s+""0"";
                }
            }
            System.out.println(s);
        }
	}
}","public class Main{
	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int k=sc.nextInt();
        if(n==k){
            StringBuilder sb=new StringBuilder();
            for(int i=0;i<k;i++){
                sb.append(""1"");
            }
            System.out.println(sb.toString());
        }
        else{
            int a=(n-k)/2;
            StringBuilder sb=new StringBuilder();
            while(sb.length()<n){
                for(int i=0;i<a && sb.length()<n;i++){
                    sb.append(""1"");
                }
                if(sb.length()<n){
                    sb.append(""0"");
                }
            }
            System.out.println(sb.toString());
        }
	}
}",287
"public class helloWorld 
{
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int m = in.nextInt();
		String str = in.next();
		boolean[] exist = new boolean[200];
		int dn[][] = new int[200][m+1];
		
		for(int i = 0; i < n; i++) {
			int a = str.charAt(i);
			exist[a] = true;
			dn[a][1] = a - 'a' + 1;
		}
		
		for(int k = 2; k <= m; k++) 
			for(int i = 'a'; i <= 'z'; i++)
				if(exist[i]) {
					int a = 0;
					for(int j = i+2; j <= 'z'; j++)
						if(dn[j][k-1] > 0 && (a == 0 || (a > dn[j][k-1]) ) ) 
							a = dn[j][k-1];
					if(a > 0)
						dn[i][k] = a + i - 'a' + 1; 
				}
		
		int ans = -1;
		for(int i = 'a'; i <= 'z'; i++)
			if(dn[i][m] > 0 && (ans == -1 || ans > dn[i][m]) )
				ans = dn[i][m];
		
		System.out.println(ans);
		
		in.close();
	}
}","public class helloWorld {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int m = in.nextInt();
		String str = in.next();
		boolean[] exist = new boolean[200];
		int[][] dn = new int[200][m+1];
		for (int i = 0; i < n; i++) {
			int a = str.charAt(i);
			exist[a] = true;
			dn[a][1] = a - 'a' + 1;
		}
		for (int k = 2; k <= m; k++)
			for (int i = 'a'; i <= 'z'; i++)
				if (exist[i]) {
					int a = 0;
					for (int j = i + 2; j <= 'z'; j++)
						if (dn[j][k - 1] > 0 && (a == 0 || (a > dn[j][k - 1])))
							a = dn[j][k - 1];
					if (a > 0)
						dn[i][k] = a + i - 'a' + 1;
				}
		int ans = -1;
		for (int i = 'a'; i <= 'z'; i++)
			if (dn[i][m] > 0 && (ans == -1 || ans > dn[i][m]))
				ans = dn[i][m];
		System.out.println(ans);
		in.close();
	}
}",288
"public class helloWorld 
{
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int cnt = 0;
		String ans = ""Yes"";
		
		for(int i = 0; i < n; i++)
			cnt += in.nextInt();
		for(int i = 0; i < n; i++)
			cnt -= in.nextInt();
		
		if(cnt < 0)
			ans = ""No"";
		
		System.out.println(ans);
				
		in.close();
	}
}","public class RevisedHelloWorld {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int cnt = 0;
		String ans = ""Yes"";
		
		for (int i = 0; i < n; i++) {
			cnt += in.nextInt();
		}
		
		for (int i = 0; i < n; i++) {
			cnt -= in.nextInt();
		}
		
		if (cnt < 0) {
			ans = ""No"";
		}
		
		System.out.println(ans);
		in.close();
	}
}",289
"public class Piles {
	static int summation(int arr[]) {
		int k, sum=0;
		for(k=0;k<arr.length;k++) {
			sum = sum + arr[k];
		}
		return sum;
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		if(n>=1 && n<=50) {
			int x[] = new int[n];
			int y[] = new int[n];
			
			for(int i=0;i<n;i++) {
				x[i] = sc.nextInt();
			}
			for(int j=0;j<n;j++) {
				y[j] = sc.nextInt();
			}
			int xsum = summation(x);
			int ysum = summation(y);
			if(xsum>=ysum) {
				System.out.println(""Yes"");
			}
			else {
				System.out.println(""No"");
			}
		}
		

	}

}","public class Piles {
    static int summation(int[] arr) {
        int sum = 0;
        for (int k = 0; k < arr.length; k++) {
            sum += arr[k];
        }
        return sum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n >= 1 && n <= 50) {
            int[] x = new int[n];
            int[] y = new int[n];

            for (int i = 0; i < n; i++) {
                x[i] = sc.nextInt();
            }

            for (int j = 0; j < n; j++) {
                y[j] = sc.nextInt();
            }

            int xsum = summation(x);
            int ysum = summation(y);

            if (xsum >= ysum) {
                System.out.println(""Yes"");
            } else {
                System.out.println(""No"");
            }
        }
    }
}",290
"class
GFG { 




public
static
int
findFrequency(
int
arr[], 
int
n, 

int
left, 
int
right, 

int
element) 

{ 

int
count = 
0
; 

for
(
int
i = left - 
1
; i < right; ++i) 

if
(arr[i] == element) 

++count; 

return
count; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
2
, 
8
, 
6
, 
9
, 
8
, 
6
, 
8
, 
2
, 
11
}; 

int
n = arr.length; 




System.out.println(
""Frequency of 2 from 1 to 6 = ""
+ 

findFrequency(arr, n, 
1
, 
6
, 
2
)); 




System.out.println(
""Frequency of 8 from 4 to 9 = ""
+ 

findFrequency(arr, n, 
4
, 
9
, 
8
)); 


} 

}","class GFG { public static int findFrequency(int arr[], int n, int left, int right, int element) { int count = 0; for (int i = left - 1; i < right; ++i) if (arr[i] == element) ++count; return count; } public static void main(String[] args) { int arr[] = { 2, 8, 6, 9, 8, 6, 8, 2, 11 }; int n = arr.length; System.out.println(""Frequency of 2 from 1 to 6 = "" + findFrequency(arr, n, 1, 6, 2)); System.out.println(""Frequency of 8 from 4 to 9 = "" + findFrequency(arr, n, 4, 9, 8)); } }",291
"public class Stones {
	public static void main(String[] args)
	{
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		int s1=0;
		int s2=0;
		for (int i=0;i<n;++i)
			s1+=input.nextInt();
		for (int i=0;i<n;++i)
			s2+=input.nextInt();
		if (s1 >= s2)
			System.out.println(""Yes"");
		else
			System.out.println(""No"");
	}
}","public class Stones {
	public static void main(String[] args)
	{
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		int s1=0;
		int s2=0;
		int i=0;
		while (i<n)
		{
			s1+=input.nextInt();
			i++;
		}
		i=0;
		while (i<n)
		{
			s2+=input.nextInt();
			i++;
		}
		if (s1 >= s2)
			System.out.println(""Yes"");
		else
			System.out.println(""No"");
	}
}",292
"public class Piles {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int[] a = new int[2]; int x = scan.nextInt();
		for(int i = 0; i < 2; i++) for(int j = 0; j < x; j++) a[i] += scan.nextInt();
		System.out.println(a[1] <= a[0] ? ""Yes"" : ""No"");

	}

}","public class Piles {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int[] a = new int[2];
		int x = scan.nextInt();
		for (int i = 0; i < 2; i++)
			for (int j = 0; j < x; j++)
				a[i] += scan.nextInt();
		System.out.println(a[1] <= a[0] ? ""Yes"" : ""No"");
	}

}",293
"public class SolutionB {
       
      public static void main(String args[])throws IOException{
              Scanner sc = new Scanner(System.in);
              int n = sc.nextInt();
              int k = sc.nextInt();
              Set<Integer> set1 = new HashSet<Integer>();
              Set<Integer> set2 = new HashSet<Integer>();
              int a[] = new int[n];
              for(int i = 0; i < n; i++){
                     a[i] = sc.nextInt();
                     if(!set1.contains(a[i])){
                            set1.add(a[i]);
                     }else{
                            System.out.println(0);
                            return;
                     }
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && set1.contains(b)){
                            System.out.println(1);
                            return;
                     }
                     
                            
                     
                       
                         
                     
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && set2.contains(b)){
                            System.out.println(2);
                            return;
                     }else{
                            set2.add(b);
                     }
              }
              System.out.println(-1);
      }
}","public class SolutionB {
       
      public static void main(String args[])throws IOException{
              Scanner sc = new Scanner(System.in);
              int n = sc.nextInt();
              int k = sc.nextInt();
              Set<Integer> set1 = new HashSet<Integer>();
              Set<Integer> set2 = new HashSet<Integer>();
              int a[] = new int[n];
              for(int i = 0; i < n; i++){
                     a[i] = sc.nextInt();
                     if(set1.contains(a[i])){
                            System.out.println(0);
                            return;
                     }
                     set1.add(a[i]);
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && set1.contains(b)){
                            System.out.println(1);
                            return;
                     }
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && set2.contains(b)){
                            System.out.println(2);
                            return;
                     }else{
                            set2.add(b);
                     }
              }
              System.out.println(-1);
      }
}",294
"public class B {
    public static void main(String[] args)throws Exception {
        FastReader in = new FastReader(System.in);
        PrintWriter pw = new PrintWriter(System.out);

        int ans = -1;
        int f[] = new int[(int)2e5+50];
        int g[] = new int[(int)2e5+50];

        int n = in.nextInt(), x = in.nextInt();

        int arr[] = new int[n+1];
        for (int i = 1; i <= n && ans == -1; i++) {
            int a = in.nextInt();
            if(f[a] > 0){
                ans = 0; break;
            }
            f[a]++;
            arr[i] = a;
        }

        for (int i = 1; i <= n && ans == -1; i++) {
            int a = arr[i] & x;
            if( (a == arr[i] && f[a] > 1) || (a != arr[i] && f[a] > 0)){
                ans = 1; break;
            }
            
            g[a]++;
        }

        for (int i = 1; i <= n && ans == -1; i++) {
            int a = arr[i] & x;
            if(g[a] > 1){
                ans = 2; break;
            }
            
        }

        pw.println(ans);



        pw.close();
    }

    static void debug(Object...obj) {
        System.err.println(Arrays.deepToString(obj));
    }

    static class FastReader {
        InputStream is;
        private byte[] inbuf = new byte[1024];
        private int lenbuf = 0, ptrbuf = 0;
        static final int ints[] = new int[128];

        public FastReader(InputStream is){
            for(int i='0';i<='9';i++) ints[i]=i-'0';
            this.is = is;
        }

        public int readByte(){
            if(lenbuf == -1)throw new InputMismatchException();
            if(ptrbuf >= lenbuf){
                ptrbuf = 0;
                try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
                if(lenbuf <= 0)return -1;
            }
            return inbuf[ptrbuf++];
        }

        public boolean isSpaceChar(int c) {
            return !(c >= 33 && c <= 126);
        }
        public int skip() {
            int b;
            while((b = readByte()) != -1 && isSpaceChar(b));
            return b;
        }

        public String next(){
            int b = skip();
            StringBuilder sb = new StringBuilder();
            while(!(isSpaceChar(b))){ 
                sb.appendCodePoint(b);
                b = readByte();
            }
            return sb.toString();
        }

        public int nextInt(){
            int num = 0, b;
            boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-'){
                minus = true;
                b = readByte();
            }

            while(true){
                if(b >= '0' && b <= '9'){
                    num = (num<<3) + (num<<1) + ints[b];
                }else{
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public long nextLong() {
            long num = 0;
            int b;
            boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-'){
                minus = true;
                b = readByte();
            }

            while(true){
                if(b >= '0' && b <= '9'){
                    num = (num<<3) + (num<<1) + ints[b];
                }else{
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }
       

        public char[] next(int n){
            char[] buf = new char[n];
            int b = skip(), p = 0;
            while(p < n && !(isSpaceChar(b))){
                buf[p++] = (char)b;
                b = readByte();
            }
            return n == p ? buf : Arrays.copyOf(buf, p);
        }

        
    }
}","public class B {
    public static void main(String[] args) throws Exception {
        FastReader in = new FastReader(System.in);
        PrintWriter pw = new PrintWriter(System.out);

        int ans = -1;
        int f[] = new int[(int)2e5 + 50];
        int g[] = new int[(int) 2e5 + 50];

        int n = in.nextInt(), x = in.nextInt();

        int arr[] = new int[n + 1];
        for (int i = 1; i <= n && ans == -1; i++) {
            int a = in.nextInt();
            if (f[a] > 0) {
                ans = 0;
                break;
            }
            f[a]++;
            arr[i] = a;
        }

        for (int i = 1; i <= n && ans == -1; i++) {
            int a = arr[i] & x;
            if ((a == arr[i] && f[a] > 1) || (a != arr[i] && f[a] > 0)) {
                ans = 1;
                break;
            }

            g[a]++;
        }

        for (int i = 1; i <= n && ans == -1; i++) {
            int a = arr[i] & x;
            if (g[a] > 1) {
                ans = 2;
                break;
            }

        }

        pw.println(ans); pw.close();
    }

    static class FastReader {
        InputStream is;
        private byte[] inbuf = new byte[1024];
        private int lenbuf = 0, ptrbuf = 0;
        static final int ints[] = new int[128];

        public FastReader(InputStream is) {
            for(int i='0';i<='9';i++) ints[i]=i-'0';
            this.is = is;
        }

        public int readByte() {
            if (lenbuf == -1) throw new InputMismatchException();
            if (ptrbuf >= lenbuf) {
                ptrbuf = 0;
                try {
                    lenbuf = is.read(inbuf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (lenbuf <= 0) return -1;
            }
            return inbuf[ptrbuf++];
        }

        public boolean isSpaceChar(int c) {
            return !(c >= 33 && c <= 126);
        }

        public int skip() {
            int b; while ((b = readByte()) != -1 && isSpaceChar(b)); return b;
        }

        public String next() {
            int b = skip(); StringBuilder sb = new StringBuilder();
            while(!(isSpaceChar(b))) {
                sb.appendCodePoint(b); b = readByte();
            }
            return sb.toString();
        }

        public int nextInt() {
            int num = 0, b; boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-') { minus = true; b = readByte(); }
            while(true) {
                if(b >= '0' && b <= '9') {
                    num = (num<<3) + (num<<1) + ints[b];
                } else {
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public long nextLong() {
            long num = 0; int b; boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-') { minus = true; b = readByte(); }
            while(true) {
                if(b >= '0' && b <= '9') {
                    num = (num<<3) + (num<<1) + ints[b];
                } else {
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public char[] next(int n) {
            char[] buf = new char[n]; int b = skip(), p = 0;
            while(p < n && !(isSpaceChar(b))) {
                buf[p++] = (char) b; b = readByte();
            }
            return n == p ? buf : Arrays.copyOf(buf, p);
        }

        
    }
}",295
"class
Test 
{ 

static
int
arr[] = 
new
int
[]{
10
, 
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
, 
8
, 
9
}; 




static
int
maxSum() 

{ 



int
arrSum = 
0
; 


int
currVal = 
0
; 


for
(
int
i=
0
; i<arr.length; i++) 

{ 

arrSum = arrSum + arr[i]; 

currVal = currVal+(i*arr[i]); 

} 




int
maxVal = currVal; 






for
(
int
j=
1
; j<arr.length; j++) 

{ 

currVal = currVal + arrSum-arr.length*arr[arr.length-j]; 

if
(currVal > maxVal) 

maxVal = currVal; 

} 




return
maxVal; 

} 




public
static
void
main(String[] args) 

{ 

System.out.println(
""Max sum is ""
+ maxSum()); 

} 
}","class Test {

    static int arr[] = new int[]{ 10 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9};

    static int maxSum() {

        int arrSum = 0;

        int currVal = 0;

        for (int i=0; i<arr.length; i++) {

            arrSum = arrSum + arr[i];

            currVal = currVal + (i * arr[i]);

        }

        int maxVal = currVal;

        for (int j=1; j<arr.length; j++) {

            currVal = currVal + arrSum - arr.length * arr[arr.length - j];

            if (currVal > maxVal)

                maxVal = currVal;

        }

        return maxVal;

    }

    public static void main(String[] args) {

        System.out.println(""Max sum is "" + maxSum());

    }

}",296
"public class TaskA {
	public static void main(String[] args) throws Exception {
		Scanner sc = new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);

		long i = sc.nextInt();
		long goal = sc.nextLong();

if(i>goal) {
	i=goal;
}
		int count = 0;
		while (goal >= 0) {
			if (goal - i >= 0) {
				goal = goal - i;
				count++;
			} else
				i--;
			if (goal == 0)
				break;
		}
		out.print(count);

		out.flush();

	}

	static class Scanner {
		StringTokenizer st;
		BufferedReader br;

		public Scanner(InputStream system) {
			br = new BufferedReader(new InputStreamReader(system));
		}

		public Scanner(String file) throws Exception {
			br = new BufferedReader(new FileReader(file));
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public String nextLine() throws IOException {
			return br.readLine();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}

		public char nextChar() throws IOException {
			return next().charAt(0);
		}

		public Long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public boolean ready() throws IOException {
			return br.ready();
		}

		public void waitForInput() throws InterruptedException {
			Thread.sleep(3000);
		}
	}
}","public class NewTaskA {
	public static void main(String[] args) throws Exception {
		Scanner sc = new Scanner(System.in);
		PrintWriter out = new PrintWriter(System.out);

		long i = sc.nextInt();
		long goal = sc.nextLong();

if(i>goal) {
	i=goal;
}
		int count = 0;
		while (goal >= 0) {
			if (goal - i >= 0) {
				goal = goal - i;
				count++;
			} else
				i--;
			if (goal == 0)
				break;
		}
		out.print(count);

		out.flush();

	}

	static class NewScanner {
		StringTokenizer st;
		BufferedReader br;

		public NewScanner(InputStream system) {
			br = new BufferedReader(new InputStreamReader(system));
		}

		public NewScanner(String file) throws Exception {
			br = new BufferedReader(new FileReader(file));
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public String nextLine() throws IOException {
			return br.readLine();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}

		public char nextChar() throws IOException {
			return next().charAt(0);
		}

		public Long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public boolean ready() throws IOException {
			return br.ready();
		}

		public void waitForInput() throws InterruptedException {
			Thread.sleep(3000);
		}
	}
}",297
"public class CoinsTask {
	
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int S = in.nextInt();
		int mCoins = 0;
		while(S/n != 0) {
			mCoins+=1;
			S-=n;
		}
		mCoins = S == 0? mCoins : mCoins+1;
		System.out.print(mCoins);
	}

}","public class CoinsTask {
	
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int S = in.nextInt();
		int mCoins = 0;
		while(S / n != 0) {
			mCoins += 1;
			S -= n;
		}
		mCoins = S == 0 ? mCoins : mCoins + 1;
		System.out.print(mCoins);
	}

}",298
"public class P1075A
{
	public static void main(String[] args)
	{
	 Scanner scan=new Scanner(System.in);
	 long n,x,y;
	 n=scan.nextLong();
	 x=scan.nextLong();
	 y=scan.nextLong();
	 boolean flag=true,flag1=false,flag2=false;
	 long w1,w2,b1,b2;
	 long W=0l,B=0l;
	 w1=w2=1;		b1=b2=n;
	 while(w1<n)
		{
		 if(w1==x)
			{flag1=true;	break;}
		 if(w2==y)
			break;
		 ++w1;	++w2;	++W;
		}
	 if(flag1)
		W+=(y-w2);
	 else
		W+=(x-w1);
	 while(b1>1)
		{
		 if(b1==x)
			{flag2=true;	break;}
		 if(b2==y)
			break;
		 --b1;	--b2;	++B;
		}
	 if(flag2)
		B+=(b2-y);
	 else
		B+=(b1-x);
	 if(B<W)
		System.out.println(""Black"");
	 else
		System.out.println(""White"");
	}
}","public class P1075A {
	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		long n, x, y;
		n = scan.nextLong();
		x = scan.nextLong();
		y = scan.nextLong();
		boolean flag = true, flag1 = false, flag2 = false;
		long w1, w2, b1, b2;
		long W = 0l, B = 0l;
		w1 = w2 = 1;
		b1 = b2 = n;
		while (w1 < n) {
			if (w1 == x) {
				flag1 = true;
				break;
			}
			if (w2 == y)
				break;
			++w1;
			++w2;
			++W;
		}
		if (flag1)
			W += (y - w2);
		else
			W += (x - w1);
		while (b1 > 1) {
			if (b1 == x) {
				flag2 = true;
				break;
			}
			if (b2 == y)
				break;
			--b1;
			--b2;
			++B;
		}
		if (flag2)
			B += (b2 - y);
		else
			B += (b1 - x);
		if (B < W)
			System.out.println(""Black"");
		else
			System.out.println(""White"");
	}
}",299
"public class kingrace {public static void main(String[] args) 
{ 
    Scanner input=new Scanner(System.in);
    long a = input.nextLong();
   input.nextLine();
    String [] coo = input.nextLine().split("" "");
    long xcoin = Long.parseLong(coo[0]);
    long ycoin = Long.parseLong(coo[1]);
    coordinates first = new coordinates(1,1,a);
    coordinates second = new coordinates(a,a,a);
    double x = (double)Math.sqrt(Math.abs((xcoin-1)*(xcoin-1)+(ycoin-1)*(ycoin-1)));
    double y = (double)Math.sqrt(Math.abs((xcoin-a)*(xcoin-a)+(ycoin-a)*(ycoin-a)));
   long c = 0;
   long d = 0;
    if (x>y)
    {
    	System.out.println(""Black"");
    }
    else if(x<y)
    {
    	System.out.println(""White"");
    }
    else {
    c = first.Distance(new coordinates(xcoin,ycoin,a));
    d = second.Distance(new coordinates(xcoin,ycoin,a));
    }
    if(d!=0&&c!=0)
    if (d<c)
    {
    	System.out.println(""Black"");
    	
    }
    else 
    {
    	System.out.println(""White"");
    }
  
  input.close();
} 

}
class coordinates{
	private long xcoord;
	private long ycoord;
	private long dim; 
	public coordinates(long x, long y, long dimensions)
	{
		xcoord = x;
		ycoord = y;
		dim = dimensions;
		
	}
	public void setCoordinates(long x, long y)
	{
		xcoord = x;
		ycoord = y;
		
	}
	public long Distance(coordinates num)
	{
		long distance = 0; 
		
		
		while ((this.xcoord!=num.xcoord||this.ycoord!=num.ycoord))
		{
		
			if (num.xcoord-this.xcoord==1 &&num.ycoord==this.ycoord)
			{
		
			distance ++; this.setCoordinates(this.xcoord+1, this.ycoord);
			}
			else if (num.xcoord-this.xcoord==-1 &&num.ycoord==this.ycoord)
			{
			
				distance ++; this.setCoordinates(this.xcoord-1, this.ycoord);
			}
			else if (num.xcoord-this.xcoord==0 &&num.ycoord-this.ycoord==1)
			{distance ++; this.setCoordinates(this.xcoord, this.ycoord+1);}
			else if (num.xcoord-this.xcoord==0 &&num.ycoord-this.ycoord==-1) {
				distance ++; this.setCoordinates(this.xcoord, this.ycoord-1);
			}
			
			else if (num.xcoord-this.xcoord>=0 &&num.ycoord-this.ycoord<=0)
			{
			
				distance ++; this.setCoordinates(this.xcoord+1, this.ycoord-1); 
			}
			else if (num.xcoord-this.xcoord>=0 &&num.ycoord-this.ycoord>=0)
			{
				distance ++; this.setCoordinates(this.xcoord+1, this.ycoord+1);
			}
			else if (num.xcoord-this.xcoord<=0 &&num.ycoord-this.ycoord<=0)
			
			{
				distance ++; this.setCoordinates(this.xcoord-1, this.ycoord-1);
			}
			else if (num.xcoord-this.xcoord<=0 &&num.ycoord-this.ycoord>=0)
					{distance ++; this.setCoordinates(this.xcoord-1, this.ycoord+1);
					}
				
		}
		
		return distance;
	}
	
	
}","public class kingrace {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        long a = input.nextLong();
        input.nextLine();
        String[] coo = input.nextLine().split("" "");
        long xcoin = Long.parseLong(coo[0]);
        long ycoin = Long.parseLong(coo[1]);
        coordinates first = new coordinates(1, 1, a);
        coordinates second = new coordinates(a, a, a);
        double x = (double) Math.sqrt(Math.abs((xcoin - 1) * (xcoin - 1) + (ycoin - 1) * (ycoin - 1)));
        double y = (double) Math.sqrt(Math.abs((xcoin - a) * (xcoin - a) + (ycoin - a) * (ycoin - a));
        long c = 0;
        long d = 0;
        if (x > y) {
            System.out.println(""Black"");
        } else if (x < y) {
            System.out.println(""White"");
        } else {
            c = first.Distance(new coordinates(xcoin, ycoin, a));
            d = second.Distance(new coordinates(xcoin, ycoin, a));
        }
        if (d != 0 && c != 0)
            if (d < c) {
                System.out.println(""Black"");
            } else {
                System.out.println(""White"");
            }
        input.close();
    }
}

class coordinates {
    private long xcoord;
    private long ycoord;
    private long dim;

    public coordinates(long x, long y, long dimensions) {
        xcoord = x;
        ycoord = y;
        dim = dimensions;

    }

    public void setCoordinates(long x, long y) {
        xcoord = x;
        ycoord = y;

    }

    public long Distance(coordinates num) {
        long distance = 0;

        while (this.xcoord != num.xcoord || this.ycoord != num.ycoord) {

            if (num.xcoord - this.xcoord == 1 && num.ycoord == this.ycoord) {

                distance++;
                this.setCoordinates(this.xcoord + 1, this.ycoord);
            } else if (num.xcoord - this.xcoord == -1 && num.ycoord == this.ycoord) {

                distance++;
                this.setCoordinates(this.xcoord - 1, this.ycoord);
            } else if (num.xcoord - this.xcoord == 0 && num.ycoord - this.ycoord == 1) {
                distance++;
                this.setCoordinates(this.xcoord, this.ycoord + 1);
            } else if (num.xcoord - this.xcoord == 0 && num.ycoord - this.ycoord == -1) {
                distance++;
                this.setCoordinates(this.xcoord, this.ycoord - 1);
            } else if (num.xcoord - this.xcoord >= 0 && num.ycoord - this.ycoord <= 0) {

                distance++;
                this.setCoordinates(this.xcoord + 1, this.ycoord - 1);
            } else if (num.xcoord - this.xcoord >= 0 && num.ycoord - this.ycoord >= 0) {

                distance++;
                this.setCoordinates(this.xcoord + 1, this.ycoord + 1);
            } else if (num.xcoord - this.xcoord <= 0 && num.ycoord - this.ycoord <= 0)

            {
                distance++;
                this.setCoordinates(this.xcoord - 1, this.ycoord - 1);
            } else if (num.xcoord - this.xcoord <= 0 && num.ycoord - this.ycoord >= 0)
            {distance++;
                this.setCoordinates(this.xcoord - 1, this.ycoord + 1);
            }

        }

        return distance;
    }

} ",300
"class
GFG { 






static
int
answer_query(
int
a[], 
int
n, 

int
l, 
int
r) 

{ 






int
count = 
0
; 

for
(
int
i = l; i < r; i++) 

if
(a[i] == a[i + 
1
]) 

count += 
1
; 


return
count; 

} 




public
static
void
main(String[] args) 

{ 

int
a[] = {
1
, 
2
, 
2
, 
2
, 
3
, 
3
, 
4
, 
4
, 
4
}; 

int
n = a.length; 




int
L, R; 

L = 
1
; 

R = 
8
; 


System.out.println( 

answer_query(a, n, L, R)); 




L = 
0
; 

R = 
4
; 

System.out.println( 

answer_query(a, n, L, R)); 

} 
}","class GFG { static int answer_query(int[] a, int n, int l, int r) { int count = 0; for (int i = l; i < r; i++) if (a[i] == a[i + 1]) count += 1; return count; } public static void main(String[] args) { int a[] = {1, 2, 2, 2, 3, 3, 4, 4, 4}; int n = a.length; int L, R; L = 1; R = 8; System.out.println(answer_query(a, n, L, R)); L = 0; R = 4; System.out.println(answer_query(a, n, L, R)); } }",301
"public class Solution {
	public static void main(String[] args) {
		
		Scanner sc= new Scanner(System.in);
		int n=sc.nextInt(),m=sc.nextInt();
		int loca[]=new int[n+m];
		int res[]=new int[m];
		for(int i=0;i<n+m;i++)
			loca[i]=sc.nextInt();
		
		int y=0;
		int driver[]=new int[m];
		for(int i=0;i<n+m;i++){
			int x=sc.nextInt();
			if(x==1)
				driver[y++]=i;
		}
		
		int i=0,j=0,p=0,q=0;
		for(i=0;i<m+n;i++) {
			if(i==driver[0])
				{i++;break;}
			if(loca[i]<loca[driver[0]])
				res[0]++;
			else
				break;
		}
		
		
		
		for(;i<n+m;i++){
			
			int coor=loca[i];
			
			
			
			if(j==m-1)
				break;
			
			p=driver[j];q=driver[j+1];		

			if(i==j)
				continue;
			
			int d1=coor-loca[p],d2=loca[q]-coor;
			
			if(d2==0)
				{j++;continue;}
			if(d1<=d2)
				res[j]++;
			else
				res[j+1]++;
			
			
			
		}
		
		for(;i<m+n;i++) {
			
			if(i==driver[j])
			{i++;break;}
			
			if(loca[i]>loca[driver[j]])
				res[j]++;
			else
				break;
		}
		
		for(i=0;i<m;i++)
			System.out.print(res[i]+"" "");
	}
}","public class Solution {     public static void main(String[] args) {         Scanner sc = new Scanner(System.in);         int n = sc.nextInt(), m = sc.nextInt();         int[] loca = new int[n + m];         int[] res = new int[m];         for (int i = 0; i < n + m; i++)             loca[i] = sc.nextInt();         int y = 0;         int[] driver = new int[m];         for (int i = 0; i < n + m; i++) {             int x = sc.nextInt();             if (x == 1)                 driver[y++] = i;         }         int i = 0, j = 0, p = 0, q = 0;         for (i = 0; i < m + n; i++) {             if (i == driver[0]) {                 i++;                 break;             }             if (loca[i] < loca[driver[0]])                 res[0]++;             else                 break;         }         for (; i < n + m; i++) {             int coor = loca[i];             if (j == m - 1)                 break;             p = driver[j];             q = driver[j + 1];             if (i == j)                 continue;             int d1 = coor - loca[p], d2 = loca[q] - coor;             if (d2 == 0) {j++;continue;}             if (d1 <= d2)                 res[j]++;             else                 res[j + 1]++;         }         for (; i < m + n; i++) {             if (i == driver[j]) {                 i++;                 break;             }             if (loca[i] > loca[driver[j]])                 res[j]++;             else                 break;         }         for (i = 0; i < m; i++)             System.out.print(res[i] + "" "");     } }",302
"class
GFG 
{ 


static
int
repeated_digit(
int
n) 
{ 

LinkedHashSet<Integer> s = 
new
LinkedHashSet<>(); 




while
(n != 
0
) 

{ 

int
d = n % 
10
; 








if
(s.contains(d)) 

{ 





return
0
; 

} 

s.add(d); 

n = n / 
10
; 

} 






return
1
; 
} 




static
int
calculate(
int
L, 
int
R) 
{ 

int
answer = 
0
; 




for
(
int
i = L; i < R + 
1
; ++i) 

{ 






answer = answer + repeated_digit(i); 

} 


return
answer; 
} 


public
static
void
main(String[] args) 
{ 

int
L = 
1
, R = 
100
; 




System.out.println(calculate(L, R)); 
} 
}","class GFG { static int repeated_digit(int n) { LinkedHashSet<Integer> s = new LinkedHashSet<>(); while (n != 0) { int d = n % 10; if (s.contains(d)) { return 0; } s.add(d); n = n / 10; } return 1; } static int calculate(int L, int R) { int answer = 0; for (int i = L; i < R + 1; ++i) { answer = answer + repeated_digit(i); } return answer; } public static void main(String[] args) { int L = 1, R = 100; System.out.println(calculate(L, R)); } }",303
"class
GFG { 






static
void
initializeDiffArray(
int
A[], 
int
D[]) 

{ 


int
n = A.length; 


D[
0
] = A[
0
]; 

D[n] = 
0
; 

for
(
int
i = 
1
; i < n; i++) 

D[i] = A[i] - A[i - 
1
]; 

} 




static
void
update(
int
D[], 
int
l, 
int
r, 
int
x) 

{ 

D[l] += x; 

D[r + 
1
] -= x; 

} 




static
int
printArray(
int
A[], 
int
D[]) 

{ 

for
(
int
i = 
0
; i < A.length; i++) { 


if
(i == 
0
) 

A[i] = D[i]; 






else

A[i] = D[i] + A[i - 
1
]; 


System.out.print(A[i] + 
"" ""
); 

} 


System.out.println(); 


return
0
; 

} 




public
static
void
main(String[] args) 

{ 



int
A[] = { 
10
, 
5
, 
20
, 
40
}; 

int
n = A.length; 







int
D[] = 
new
int
[n + 
1
]; 

initializeDiffArray(A, D); 






update(D, 
0
, 
1
, 
10
); 

printArray(A, D); 






update(D, 
1
, 
3
, 
20
); 

update(D, 
2
, 
2
, 
30
); 


printArray(A, D); 

} 
}","class GFG {
    static void initializeDiffArray(int[] A, int[] D) {
        int n = A.length;
        D[0] = A[0];
        D[n] = 0;
        for (int i = 1; i < n; i++) {
            D[i] = A[i] - A[i - 1];
        }
    }

    static void update(int[] D, int l, int r, int x) {
        D[l] += x;
        D[r + 1] -= x;
    }

    static int printArray(int[] A, int[] D) {
        for (int i = 0; i < A.length; i++) {
            if (i == 0) {
                A[i] = D[i];
            } else {
                A[i] = D[i] + A[i - 1];
            }
            System.out.print(A[i] + "" "");
        }
        System.out.println();
        return 0;
    }

    public static void main(String[] args) {
        int A[] = {10, 5, 20, 40};
        int n = A.length;
        int D[] = new int[n + 1];
        initializeDiffArray(A, D);
        update(D, 0, 1, 10);
        printArray(A, D);
        update(D, 1, 3, 20);
        update(D, 2, 2, 30);
        printArray(A, D);
    }
}",304
"public class Cf1003A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        StringTokenizer stk = new StringTokenizer(br.readLine());
        int[] arr = new int[100];
        int max = 0;
        int tmp;
        for (int i = 0; i < n; i++) {
            tmp = Integer.parseInt(stk.nextToken()) - 1;
           max = max < ++arr[tmp] ? arr[tmp] : max;
        }
        System.out.println(max);
    }
}","public class Cf1003A { 
    public static void main(String[] args) throws IOException { 
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
        int n = Integer.parseInt(br.readLine()); 
        StringTokenizer stk = new StringTokenizer(br.readLine()); 
        int[] arr = new int[100]; 
        int max = 0; 
        int tmp; 
        for (int i = 0; i < n; i++) { 
            tmp = Integer.parseInt(stk.nextToken()) - 1; 
            max = max < ++arr[tmp] ? arr[tmp] : max; 
        } 
        System.out.println(max); 
    } 
}",305
"public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        contest1 solver = new contest1();
        solver.solve(1, in, out);
        out.close();
    }

    static class contest1 {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int a = in.nextInt();
            int b = in.nextInt();
            int x = in.nextInt();
            String s = """";
            int count = 0;

            int copya = a;
            int copyb = b;
            int change = 0;

            if (x == 1) {
                if (copya > copyb) {
                    while (a > 0) {
                        s += '0';
                        a--;
                    }
                    while (b > 0) {
                        s += '1';
                        b--;
                    }
                } else {
                    while (b > 0) {
                        s += '1';
                        b--;
                    }
                    while (a > 0) {
                        s += '0';
                        a--;
                    }

                }

            } else {
                
                if (copya > copyb) {
                    while (change <= x - 1) {
                        if (change % 2 == 0) {
                            s += '0';
                            change++;
                            a--;
                        } else {
                            s += '1';
                            change++;
                            b--;
                        }
                    }

                } else if (copyb >= copya) {
                    
                    while (change <= x - 1) {
                        
                        if (change % 2 == 0) {
                            s += '1';
                            change++;
                            b--;
                        } else {
                            s += '0';
                            change++;
                            a--;
                        }
                    }
                }

                char z = s.charAt(s.length() - 1);
                
                if (z == '0') {
                    while (a > 0) {
                        s += '0';
                        a--;
                    }
                    while (b > 0) {
                        s += '1';
                        b--;
                    }
                } else {
                    while (b > 0) {
                        s += '1';
                        b--;
                    }
                    while (a > 0) {
                        s += '0';
                        a--;
                    }
                }
            }
            out.println(s);
        }

    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private InputReader.SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public int nextInt() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }

        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);

        }

    }
}","public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        contest1 solver = new contest1();
        solver.solve(1, in, out);
        out.close();
    }

    static class contest1 {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int a = in.nextInt();
            int b = in.nextInt();
            int x = in.nextInt();
            String s = """";
            int count = 0;

            int copya = a;
            int copyb = b;
            int change = 0;

             
            if (x == 1) {
                while (a > 0) {
                    s += '0';
                    a--;
                }
                while (b > 0) {
                    s += '1';
                    b--;
                }
            } else {
                if (copya > copyb) {
                    while (change <= x - 1) {
                        if (change % 2 == 0) {
                            s += '0';
                            change++;
                            a--;
                        } else {
                            s += '1';
                            change++;
                            b--;
                        }
                    }
                } else if (copyb >= copya) {
                    while (change <= x - 1) {
                        if (change % 2 == 0) {
                            s += '1';
                            change++;
                            b--;
                        } else {
                            s += '0';
                            change++;
                            a--;
                        }
                    }
                }

                char z = s.charAt(s.length() - 1);
                if (z == '0') {
                    while (a > 0) {
                        s += '0';
                        a--;
                    }
                    while (b > 0) {
                        s += '1';
                        b--;
                    }
                } else {
                    while (b > 0) {
                        s += '1';
                        b--;
                    }
                    while (a > 0) {
                        s += '0';
                        a--;
                    }
                }
            }
            out.println(s);
        }
    }
}",306
"public class programA {
   	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int d = Integer.parseInt(st.nextToken());
		int arr[] = new int[n];
		st = new StringTokenizer(br.readLine());
		for(int i=0;i<n;i++){
			arr[i] = Integer.parseInt(st.nextToken());
		}
		int s= 2;
		for(int i=0;i<n-1;i++){
			long dis = (long)2*d;
			long dis2 = Math.abs(arr[i]-arr[i+1]);
			if(dis2 == dis)s++;
			else if (dis2 > dis)s+=2;
		}
		System.out.println(s);
   		}
}","public class programA {
   	public static void main(String[] args)throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int n = Integer.parseInt(st.nextToken());
		int d = Integer.parseInt(st.nextToken());
		int arr[] = new int[n];
		st = new StringTokenizer(br.readLine());
		for(int i=0;i<n;i++){
			arr[i] = Integer.parseInt(st.nextToken());
		}
		int s= 2;
		for(int i=0;i<n-1;i++){
			long dis = (long) (2 * d);
			long dis2 = Math.abs(arr[i] - arr[i + 1]);
			if (dis2 == dis) s++;
			else if (dis2 > dis) s += 2;
		}
		System.out.println(s);
   		}
}",307
"public class Cf1005A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int numberOfStairs = 0;
        StringBuilder result = new StringBuilder("""");
        StringTokenizer stk = new StringTokenizer(br.readLine());
        int previousNum = 0;
        int tmp = 0;
        for (int i = 0; i < n; i++) {
            tmp = Integer.parseInt(stk.nextToken());
            if (tmp == 1){
                ++numberOfStairs;
                if (previousNum != 0)
                    result.append(previousNum + "" "");
            }
            previousNum = tmp;
        }
        result.append(previousNum);
        System.out.println(numberOfStairs);
        System.out.println(result);
    }
}","public class Cf1005A {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());
        int numberOfStairs = 0;
        StringBuilder result = new StringBuilder();
        StringTokenizer stk = new StringTokenizer(br.readLine());
        int previousNum = 0;
        int tmp = 0;
        for (int i = 0; i < n; i++) {
            tmp = Integer.parseInt(stk.nextToken());
            if (tmp == 1) {
                ++numberOfStairs;
                if (previousNum != 0)
                    result.append(previousNum + "" "");
            }
            previousNum = tmp;
        }
        result.append(previousNum);
        System.out.println(numberOfStairs);
        System.out.println(result);
    }
}",308
"class
Profit 
{ 





static
int
maxProfit(
int
price[], 
int
n) 

{ 



int
profit[] = 
new
int
[n]; 

for
(
int
i=
0
; i<n; i++) 

profit[i] = 
0
; 




int
max_price = price[n-
1
]; 

for
(
int
i=n-
2
;i>=
0
;i--) 

{ 



if
(price[i] > max_price) 

max_price = price[i]; 










profit[i] = Math.max(profit[i+
1
], max_price-price[i]); 

} 




int
min_price = price[
0
]; 

for
(
int
i=
1
; i<n; i++) 

{ 



if
(price[i] < min_price) 

min_price = price[i]; 










profit[i] = Math.max(profit[i-
1
], profit[i] + 

(price[i]-min_price) ); 

} 

int
result = profit[n-
1
]; 

return
result; 

} 



public
static
void
main(String args[]) 

{ 

int
price[] = {
2
, 
30
, 
15
, 
10
, 
8
, 
25
, 
80
}; 

int
n = price.length; 

System.out.println(
""Maximum Profit = ""
+ maxProfit(price, n)); 

} 

}","class Profit { static int maxProfit(int price[], int n) { int profit[] = new int[n]; for (int i=0; i<n; i++) profit[i] = 0; int max_price = price[n-1]; for (int i=n-2; i>=0; i--) { if (price[i] > max_price) max_price = price[i]; profit[i] = Math.max(profit[i+1], max_price-price[i]); } int min_price = price[0]; for (int i=1; i<n; i++) { if (price[i] < min_price) min_price = price[i]; profit[i] = Math.max(profit[i-1], profit[i] + (price[i]-min_price) ); } int result = profit[n-1]; return result; } public static void main(String args[]) { int price[] = {2, 30, 15, 10, 8, 25, 80}; int n = price.length; System.out.println(",309
"public class CodeForce {
    
    
        public static void main(String[] args) {
            Scanner sc=new Scanner(System.in);
            String s=sc.next();
            String t=sc.next();
            int count=s.length()+t.length();
            for(int i=0;i<Math.min(s.length(), t.length());i++){
                if(s.charAt(s.length()-1-i)==t.charAt(t.length()-1-i))count=count-2;
                else break;
            }
            System.out.println(count);
            
            
            
            
           
            
                
        }    
    }","public class CodeForce {
    
    
        public static void main(String[] args) {
            Scanner sc=new Scanner(System.in);
            String s=sc.next();
            String t=sc.next();
            int count=s.length()+t.length();
            for(int i=0;i<Math.min(s.length(), t.length());i++){
                if(s.charAt(s.length()-1-i)==t.charAt(t.length()-1-i))count=count-2;
                else break;
            }
            System.out.println(count);
            
            
            
            
           
            
                
        }    
    }",310
"public class Codeforces {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(System.out);
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for(int i = 0; i < n; i++){
            arr[i] = Integer.parseInt(st.nextToken());
        }
        for(int i = 0; i < n; i++){
            if(arr[i] % 2 == 0){
                arr[i]--;
            }
        }
        for(int i = 0; i < n; i++){
            pw.print(arr[i] + "" "");
        }
        pw.flush();
        pw.close();
    }
}","public class Codeforces {

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        PrintWriter pw = new PrintWriter(System.out);
        int n = Integer.parseInt(br.readLine());
        int[] arr = new int[n];
        StringTokenizer st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            arr[i] = Integer.parseInt(st.nextToken());
        }
        for (int i = 0; i < n; i++) {
            if (arr[i] % 2 == 0) {
                arr[i]--;
            }
        }
        for (int i = 0; i < n; i++) {
            pw.print(arr[i] + "" "");
        }
        pw.flush();
        pw.close();
    }
}",311
"public class Main
{
    public static void main(String[] args)
    {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        FastScanner in = new FastScanner(inputStream);
        FastPrinter out = new FastPrinter(outputStream);
        TaskC solver = new TaskC();
        solver.solve(1, in, out);
        out.close();
    }
    
    static class TaskC
    {
        public void solve(int testNumber, FastScanner in, FastPrinter out)
        {
            int n = in.nextInt();
            long[] a = new long[n];
            long[] b = new long[n];
            for (int i = 0; i < n; i++)
            {
                b[i] = a[i] = in.nextInt();
                if (i > 0)
                {
                    a[i] += a[i - 1];
                }
            }
            for (int i = n - 2; i >= 0; i--)
            {
                b[i] += b[i + 1];
            }
            
            long sum1 = 0;
            long sum3 = 0;
            long result = 0;
            for (int i = 0, j = n - 1; i < j; )
            {
                sum1 = a[i];
                sum3 = b[j];
                if (sum1 == sum3)
                {
                    result = Math.max(result, sum1);
                    i++;
                    j--;
                }
                else if (sum1 < sum3)
                {
                    i++;
                }
                else
                {
                    j--;
                }
            }
            out.println(result);
            
            
        }
        
    }
    
    static class FastScanner
    {
        public BufferedReader br;
        public StringTokenizer st;
        
        public FastScanner(InputStream is)
        {
            br = new BufferedReader(new InputStreamReader(is));
        }
        
        public FastScanner(File f)
        {
            try
            {
                br = new BufferedReader(new FileReader(f));
            } catch (FileNotFoundException e)
            {
                e.printStackTrace();
            }
        }
        
        public String next()
        {
            while (st == null || !st.hasMoreElements())
            {
                String s = null;
                try
                {
                    s = br.readLine();
                } catch (IOException e)
                {
                    e.printStackTrace();
                }
                if (s == null)
                {
                    return null;
                }
                st = new StringTokenizer(s);
            }
            return st.nextToken();
        }
        
        public int nextInt()
        {
            return Integer.parseInt(next());
        }
        
    }
    
    static class FastPrinter extends PrintWriter
    {
        public FastPrinter(OutputStream out)
        {
            super(out);
        }
        
        public FastPrinter(Writer out)
        {
            super(out);
        }
        
    }
}","public class Main { public static void main(String[] args) { InputStream inputStream = System.in; OutputStream outputStream = System.out; FastScanner in = new FastScanner(inputStream); FastPrinter out = new FastPrinter(outputStream); TaskC solver = new TaskC(); solver.solve(1, in, out); out.close(); } static class TaskC { public void solve(int testNumber, FastScanner in, FastPrinter out) { int n = in.nextInt(); long[] a = new long[n]; long[] b = new long[n]; for (int i = 0; i < n; i++) { b[i] = a[i] = in.nextInt(); if (i > 0) { a[i] += a[i - 1]; } } for (int i = n - 2; i >= 0; i--) { b[i] += b[i + 1]; } long sum1 = 0; long sum3 = 0; long result = 0; for (int i = 0, j = n - 1; i < j; ) { sum1 = a[i]; sum3 = b[j]; if (sum1 == sum3) { result = Math.max(result, sum1); i++; j--; } else if (sum1 < sum3) { i++; } else { j--; } } out.println(result); } } static class FastScanner { public BufferedReader br; public StringTokenizer st; public FastScanner(InputStream is) { br = new BufferedReader(new InputStreamReader(is)); } public FastScanner(File f) { try { br = new BufferedReader(new FileReader(f)); } catch (FileNotFoundException e) { e.printStackTrace(); } } public String next() { while (st == null || !st.hasMoreElements()) { String s = null; try { s = br.readLine(); } catch (IOException e) { e.printStackTrace(); } if (s == null) { return null; } st = new StringTokenizer(s); } return st.nextToken(); } public int nextInt() { return Integer.parseInt(next()); } } static class FastPrinter extends PrintWriter { public FastPrinter(OutputStream out) { super(out); } public FastPrinter(Writer out) { super(out); } } }",312
"public class Main {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n,ans=0;
		String sa,sb;
		char[] a,b;
		n=sc.nextInt();
		sa=sc.next();
		sb=sc.next();
		a=sa.toCharArray();
		b=sb.toCharArray();
		ans=0;
		for(int i=0;i<n;i++)
		{
			if(i==n/2)
			{
				if(a[i]!=b[i])
					ans++;
				continue;
			}
			int[] vis=new int[28];
			vis[a[i]-'a']++;
			vis[b[i]-'a']++;
			vis[a[n-1-i]-'a']++;
			vis[b[n-1-i]-'a']++;
			int num=0,ans1=0,ans2=0;
			for(int j=0;j<26;j++)
				if(vis[j]!=0)
				{
					num++;
					if(num==1)
						ans1=vis[j];
					else
						ans2=vis[j];
				}
			if(num==2)
			{
				if(ans1==1||ans2==1)
					ans++;
			}
			else if(num==3)
			{
				if(a[i]==a[n-i-1])
					ans+=2;
				else
					ans++;
			}
			else if(num==4)
				ans+=2;
			a[i]=b[i];
			a[n-1-i]=b[n-1-i];
		}
		System.out.println(ans);
	}
}","public class Main {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int n,ans=0;
		String sa,sb;
		char[] a,b;
		n=sc.nextInt();
		sa=sc.next();
		sb=sc.next();
		a=sa.toCharArray();
		b=sb.toCharArray();
		ans=0;
		for(int i=0;i<n;i++) {
			int[] vis=new int[28];
			vis[a[i]-'a']++;
			vis[b[i]-'a']++;
			vis[a[n-1-i]-'a']++;
			vis[b[n-1-i]-'a']++;
			int num=0,ans1=0,ans2=0;
			for(int j=0;j<26;j++)
				if(vis[j]!=0) {
					num++;
					if(num==1)
						ans1=vis[j];
					else
						ans2=vis[j];
				}
			if(num==2) {
				if(ans1==1||ans2==1)
					ans++;
			}
			else if(num==3) {
				if(a[i]==a[n-i-1])
					ans+=2;
				else
					ans++;
			}
			else if(num==4)
				ans+=2;
			a[i]=b[i];
			a[n-1-i]=b[n-1-i];
		}
		System.out.println(ans);
	}
}",313
"public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        FastScanner in = new FastScanner(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        EMilitaryProblem solver = new EMilitaryProblem();
        solver.solve(1, in, out);
        out.close();
    }

    static class EMilitaryProblem {
        ArrayList<Integer>[] adj;
        int[] sz;
        int[] preorder;
        int curPos;
        int[] pos;

        public void solve(int testNumber, FastScanner br, PrintWriter pw) {
            int n = br.nextInt();
            int q = br.nextInt();
            preorder = new int[n];
            sz = new int[n];
            pos = new int[n];
            curPos = 0;
            adj = new ArrayList[n];
            for (int i = 0; i < n; i++) adj[i] = new ArrayList<Integer>();
            for (int i = 1; i < n; i++) {
                int u = br.nextInt();
                u--;
                adj[u].add(i);
            }
            dfs(0);
            for (int i = 0; i < n; i++) {
                pos[preorder[i]] = i;
            }
            for (int i = 0; i < q; i++) {
                int u = br.nextInt();
                int k = br.nextInt();
                u--;
                if (sz[u] < k) {
                    pw.println(""-1"");
                } else {
                    pw.println(preorder[pos[u] + k - 1] + 1);
                }
            }
            pw.close();
        }

        public int dfs(int u) {
            preorder[curPos] = u;
            curPos++;
            sz[u]++;
            for (int e : adj[u]) {
                sz[u] += dfs(e);
            }
            return sz[u];
        }

    }

    static class FastScanner {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private FastScanner.SpaceCharFilter filter;

        public FastScanner(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public int nextInt() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }

        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);

        }

    }
}","class Main{public static void main(String[] args){InputStream inputStream=System.in;OutputStream outputStream=System.out;FastScanner in=new FastScanner(inputStream);PrintWriter out=new PrintWriter(outputStream);EMilitaryProblem solver=new EMilitaryProblem();solver.solve(1,in,out);out.close();}static class EMilitaryProblem{ArrayList<Integer>[] adj;int[] sz;int[] preorder;int curPos;int[] pos;public void solve(int testNumber,FastScanner br,PrintWriter pw){int n=br.nextInt();int q=br.nextInt();preorder=new int[n];sz=new int[n];pos=new int[n];curPos=0;adj=new ArrayList[n];for(int i=0;i<n;i++)adj[i]=new ArrayList<Integer>();for(int i=1;i<n;i++){int u=br.nextInt();u--;adj[u].add(i);}dfs(0);for(int i=0;i<n;i++){pos[preorder[i]]=i;}for(int i=0;i<q;i++){int u=br.nextInt();int k=br.nextInt();u--;if(sz[u]<k){pw.println(""-1"");}else{pw.println(preorder[pos[u]+k-1]+1);}}pw.close();}public int dfs(int u){preorder[curPos]=u;curPos++;sz[u]++;for(int e : adj[u]){sz[u]+=dfs(e);}return sz[u];}}static class FastScanner{private InputStream stream;private byte[] buf=new byte[1024];private int curChar;private int numChars;private FastScanner.SpaceCharFilter filter;public FastScanner(InputStream stream){this.stream=stream;}public int read(){if(numChars==-1){throw new InputMismatchException();}if(curChar>=numChars){curChar=0;try{numChars=stream.read(buf);}catch(IOException e){throw new InputMismatchException();}if(numChars<=0){return -1;}}return buf[curChar++];}public int nextInt(){int c=read();while(isSpaceChar(c)){c=read();}int sgn=1;if(c=='-'){sgn=-1;c=read();}int res=0;do{if(c<'0'||c>'9'){throw new InputMismatchException();}res*=10;res+=c-'0';c=read();}while(!isSpaceChar(c));return res*sgn;}public boolean isSpaceChar(int c){if(filter!=null){return filter.isSpaceChar(c);}return isWhitespace(c);}public static boolean isWhitespace(int c){return c==' '||c=='\n'||c=='\r'||c=='\t'||c==-1;}public interface SpaceCharFilter{public boolean isSpaceChar(int ch);}}}",314
"class
Test { 


static
int
arr[] = 
new
int
[] { 
3
, 
7
, 
90
, 
20
, 
10
, 
50
, 
40
}; 






static
void
findMinAvgSubarray(
int
n, 
int
k) 

{ 



if
(n < k) 

return
; 




int
res_index = 
0
; 




int
curr_sum = 
0
; 

for
(
int
i = 
0
; i < k; i++) 

curr_sum += arr[i]; 




int
min_sum = curr_sum; 




for
(
int
i = k; i < n; i++) 

{ 





curr_sum += arr[i] - arr[i - k]; 




if
(curr_sum < min_sum) { 

min_sum = curr_sum; 

res_index = (i - k + 
1
); 

} 

} 


System.out.println(
""Subarray between [""
+ 

res_index + 
"", ""
+ (res_index + k - 
1
) + 

""] has minimum average""
); 

} 




public
static
void
main(String[] args) 

{ 

int
k = 
3
; 


findMinAvgSubarray(arr.length, k); 

} 
}","class Test { static int[] arr = new int[] { 3, 7, 90, 20, 10, 50, 40}; static void findMinAvgSubarray(int n, int k) { if (n < k) return; int res_index = 0; int curr_sum = 0; for (int i = 0; i < k; i++) curr_sum += arr[i]; int min_sum = curr_sum; for (int i = k; i < n; i++) { curr_sum += arr[i] - arr[i - k]; if (curr_sum < min_sum) { min_sum = curr_sum; res_index = (i - k + 1); } } System.out.println(""Subarray between ["" + res_index + "", "" + (res_index + k - 1) + ""] has minimum average""); } public static void main(String[] args) { int k = 3; findMinAvgSubarray(arr.length, k); } }",315
"public class helloWorld 
{
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int m = in.nextInt();
		String str = in.next();
		boolean[] exist = new boolean[200];
		int dn[][] = new int[200][m+1];
		
		for(int i = 0; i < n; i++) {
			int a = str.charAt(i);
			exist[a] = true;
			dn[a][1] = a - 'a' + 1;
		}
		
		for(int k = 2; k <= m; k++) 
			for(int i = 'a'; i <= 'z'; i++)
				if(exist[i]) {
					int a = 0;
					for(int j = i+2; j <= 'z'; j++)
						if(dn[j][k-1] > 0 && (a == 0 || (a > dn[j][k-1]) ) ) 
							a = dn[j][k-1];
					if(a > 0)
						dn[i][k] = a + i - 'a' + 1; 
				}
		
		int ans = -1;
		for(int i = 'a'; i <= 'z'; i++)
			if(dn[i][m] > 0 && (ans == -1 || ans > dn[i][m]) )
				ans = dn[i][m];
		
		System.out.println(ans);
		
		in.close();
	}
}","public class helloWorld {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int m = in.nextInt();
        String str = in.next();
        boolean[] exist = new boolean[200];
        int[][] dn = new int[200][m + 1];

        for (int i = 0; i < n; i++) {
            int a = str.charAt(i);
            exist[a] = true;
            dn[a][1] = a - 'a' + 1;
        }

        for (int k = 2; k <= m; k++)
            for (int i = 'a'; i <= 'z'; i++)
                if (exist[i]) {
                    int a = 0;
                    for (int j = i + 2; j <= 'z'; j++)
                        if (dn[j][k - 1] > 0 && (a == 0 || (a > dn[j][k - 1])))
                            a = dn[j][k - 1];
                    if (a > 0)
                        dn[i][k] = a + i - 'a' + 1;
                }

        int ans = -1;
        for (int i = 'a'; i <= 'z'; i++)
            if (dn[i][m] > 0 && (ans == -1 || ans > dn[i][m]))
                ans = dn[i][m];

        System.out.println(ans);

        in.close();
    }
}",316
"class
MinimumDistance 
{ 

int
minDist(
int
arr[], 
int
n, 
int
x, 
int
y) 

{ 

int
i = 
0
; 

int
min_dist = Integer.MAX_VALUE; 

int
prev=
0
; 






for
(i = 
0
; i < n; i++) 

{ 

if
(arr[i] == x || arr[i] == y) 

{ 

prev = i; 

break
; 

} 

} 




for
(; i < n; i++) 

{ 

if
(arr[i] == x || arr[i] == y) 

{ 









if
(arr[prev] != arr[i] && (i - prev) < min_dist) 

{ 

min_dist = i - prev; 

prev = i; 

} 

else

prev = i; 

} 

} 


return
min_dist; 

} 




public
static
void
main(String[] args) { 

MinimumDistance min = 
new
MinimumDistance(); 

int
arr[] = {
3
, 
5
, 
4
, 
2
, 
6
, 
3
, 
0
, 
0
, 
5
, 
4
, 
8
, 
3
}; 

int
n = arr.length; 

int
x = 
3
; 

int
y = 
6
; 


System.out.println(
""Minimum distance between ""
+ x + 
"" and ""
+ y 

+ 
"" is ""
+ min.minDist(arr, n, x, y)); 

} 
}","class MinimumDistance {

    int minDist(int arr[], int n, int x, int y) {

        int i = 0;
        int min_dist = Integer.MAX_VALUE;
        int prev=0;

        for(i = 0; i < n; i++) {
            if(arr[i] == x || arr[i] == y) {
                prev = i;
                break;
            }
        }

        for(; i < n; i++) {
            if(arr[i] == x || arr[i] == y) {
                if(arr[prev] != arr[i] && (i - prev) < min_dist) {
                    min_dist = i - prev;
                    prev = i;
                }
                else
                    prev = i;
            }
        }

        return min_dist;
    }

    public static void main(String[] args) {
        MinimumDistance min = new MinimumDistance();
        int arr[] = {3, 5, 4, 2, 6, 3, 0, 0, 5, 4, 8, 3};
        int n = arr.length;
        int x = 3;
        int y = 6;

        System.out.println(""Minimum distance between "" + x + "" and "" + y + "" is "" + min.minDist(arr, n, x, y));
    }
}",317
"public class helloWorld 
{
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int cnt = 0;
		String ans = ""Yes"";
		
		for(int i = 0; i < n; i++)
			cnt += in.nextInt();
		for(int i = 0; i < n; i++)
			cnt -= in.nextInt();
		
		if(cnt < 0)
			ans = ""No"";
		
		System.out.println(ans);
				
		in.close();
	}
}","public class Solution {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		int cnt = 0;
		String ans = ""Yes"";
		for (int i = 0; i < n; i++) {
			cnt += in.nextInt();
		}
		for (int i = 0; i < n; i++) {
			cnt -= in.nextInt();
		}
		if (cnt < 0) {
			ans = ""No"";
		}
		System.out.println(ans);
		in.close();
	}
}",318
"public class Piles {
	static int summation(int arr[]) {
		int k, sum=0;
		for(k=0;k<arr.length;k++) {
			sum = sum + arr[k];
		}
		return sum;
	}
	
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		if(n>=1 && n<=50) {
			int x[] = new int[n];
			int y[] = new int[n];
			
			for(int i=0;i<n;i++) {
				x[i] = sc.nextInt();
			}
			for(int j=0;j<n;j++) {
				y[j] = sc.nextInt();
			}
			int xsum = summation(x);
			int ysum = summation(y);
			if(xsum>=ysum) {
				System.out.println(""Yes"");
			}
			else {
				System.out.println(""No"");
			}
		}
		

	}

}","public class Piles {
    static int summation(int arr[]) {
        int k, sum=0;
        for(k=0;k<arr.length;k++) {
            sum = sum + arr[k];
        }
        return sum;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if(n>=1 && n<=50) {
            int x[] = new int[n];
            int y[] = new int[n];

            for(int i=0;i<n;i++) {
                x[i] = sc.nextInt();
            }
            for(int j=0;j<n;j++) {
                y[j] = sc.nextInt();
            }
            int xsum = summation(x);
            int ysum = summation(y);
            if(xsum>=ysum) {
                System.out.println(""Yes"");
            }
            else {
                System.out.println(""No"");
            }
        }
    }
}",319
"public class Stones {
	public static void main(String[] args)
	{
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		int s1=0;
		int s2=0;
		for (int i=0;i<n;++i)
			s1+=input.nextInt();
		for (int i=0;i<n;++i)
			s2+=input.nextInt();
		if (s1 >= s2)
			System.out.println(""Yes"");
		else
			System.out.println(""No"");
	}
}","public class Stones {
	public static void main(String[] args)
	{
		Scanner input=new Scanner(System.in);
		int n=input.nextInt();
		int s1=0;
		int s2=0;
		int i=0;
		while(i<n)
		{
			s1+=input.nextInt();
			i++;
		}
		i=0;
		while(i<n)
		{
			s2+=input.nextInt();
			i++;
		}
		if (s1 >= s2)
			System.out.println(""Yes"");
		else
			System.out.println(""No"");
	}
}",320
"public class Piles {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int[] a = new int[2]; int x = scan.nextInt();
		for(int i = 0; i < 2; i++) for(int j = 0; j < x; j++) a[i] += scan.nextInt();
		System.out.println(a[1] <= a[0] ? ""Yes"" : ""No"");

	}

}","public class Piles {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		int[] a = new int[2];
		int x = scan.nextInt();
		int i = 0;
		while (i < 2) {
			int j = 0;
			int sum = 0;
			while (j < x) {
				sum += scan.nextInt();
				j++;
			}
			a[i] = sum;
			i++;
		}
		System.out.println(a[1] <= a[0] ? ""Yes"" : ""No"");
	}

}",321
"public class SolutionB {
       
      public static void main(String args[])throws IOException{
              Scanner sc = new Scanner(System.in);
              int n = sc.nextInt();
              int k = sc.nextInt();
              Set<Integer> set1 = new HashSet<Integer>();
              Set<Integer> set2 = new HashSet<Integer>();
              int a[] = new int[n];
              for(int i = 0; i < n; i++){
                     a[i] = sc.nextInt();
                     if(!set1.contains(a[i])){
                            set1.add(a[i]);
                     }else{
                            System.out.println(0);
                            return;
                     }
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && set1.contains(b)){
                            System.out.println(1);
                            return;
                     }
                     
                            
                     
                       
                         
                     
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && set2.contains(b)){
                            System.out.println(2);
                            return;
                     }else{
                            set2.add(b);
                     }
              }
              System.out.println(-1);
      }
}","public class SolutionB {
       
      public static void main(String args[])throws IOException{
              Scanner sc = new Scanner(System.in);
              int n = sc.nextInt();
              int k = sc.nextInt();
              Set<Integer> set1 = new HashSet<Integer>();
              Set<Integer> set2 = new HashSet<Integer>();
              int a[] = new int[n];
              for(int i = 0; i < n; i++){
                     a[i] = sc.nextInt();
                     if(set1.contains(a[i])){
                            System.out.println(0);
                            return;
                     }else{
                            set1.add(a[i]);
                     }
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && !set1.contains(b)){
                            System.out.println(1);
                            return;
                     }
                     
                            
                     
                       
                         
                     
              }
              for(int i = 0; i < n; i++){
                     int b = a[i] & k;
                     if(b != a[i] && set2.contains(b)){
                            System.out.println(2);
                            return;
                     }else{
                            set2.add(b);
                     }
              }
              System.out.println(-1);
      }
}",322
"public class B {
    public static void main(String[] args)throws Exception {
        FastReader in = new FastReader(System.in);
        PrintWriter pw = new PrintWriter(System.out);

        int ans = -1;
        int f[] = new int[(int)2e5+50];
        int g[] = new int[(int)2e5+50];

        int n = in.nextInt(), x = in.nextInt();

        int arr[] = new int[n+1];
        for (int i = 1; i <= n && ans == -1; i++) {
            int a = in.nextInt();
            if(f[a] > 0){
                ans = 0; break;
            }
            f[a]++;
            arr[i] = a;
        }

        for (int i = 1; i <= n && ans == -1; i++) {
            int a = arr[i] & x;
            if( (a == arr[i] && f[a] > 1) || (a != arr[i] && f[a] > 0)){
                ans = 1; break;
            }
            
            g[a]++;
        }

        for (int i = 1; i <= n && ans == -1; i++) {
            int a = arr[i] & x;
            if(g[a] > 1){
                ans = 2; break;
            }
            
        }

        pw.println(ans);



        pw.close();
    }

    static void debug(Object...obj) {
        System.err.println(Arrays.deepToString(obj));
    }

    static class FastReader {
        InputStream is;
        private byte[] inbuf = new byte[1024];
        private int lenbuf = 0, ptrbuf = 0;
        static final int ints[] = new int[128];

        public FastReader(InputStream is){
            for(int i='0';i<='9';i++) ints[i]=i-'0';
            this.is = is;
        }

        public int readByte(){
            if(lenbuf == -1)throw new InputMismatchException();
            if(ptrbuf >= lenbuf){
                ptrbuf = 0;
                try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
                if(lenbuf <= 0)return -1;
            }
            return inbuf[ptrbuf++];
        }

        public boolean isSpaceChar(int c) {
            return !(c >= 33 && c <= 126);
        }
        public int skip() {
            int b;
            while((b = readByte()) != -1 && isSpaceChar(b));
            return b;
        }

        public String next(){
            int b = skip();
            StringBuilder sb = new StringBuilder();
            while(!(isSpaceChar(b))){ 
                sb.appendCodePoint(b);
                b = readByte();
            }
            return sb.toString();
        }

        public int nextInt(){
            int num = 0, b;
            boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-'){
                minus = true;
                b = readByte();
            }

            while(true){
                if(b >= '0' && b <= '9'){
                    num = (num<<3) + (num<<1) + ints[b];
                }else{
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public long nextLong() {
            long num = 0;
            int b;
            boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-'){
                minus = true;
                b = readByte();
            }

            while(true){
                if(b >= '0' && b <= '9'){
                    num = (num<<3) + (num<<1) + ints[b];
                }else{
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }
       

        public char[] next(int n){
            char[] buf = new char[n];
            int b = skip(), p = 0;
            while(p < n && !(isSpaceChar(b))){
                buf[p++] = (char)b;
                b = readByte();
            }
            return n == p ? buf : Arrays.copyOf(buf, p);
        }

        
    }
}","public class B {
    public static void main(String[] args)throws Exception {
        FastReader in = new FastReader(System.in);
        PrintWriter pw = new PrintWriter(System.out);

        int ans = -1;
        int f[] = new int[(int)2e5+50];
        int g[] = new int[(int)2e5+50];

        int n = in.nextInt(), x = in.nextInt();

        int arr[] = new int[n+1];
        for (int i = 1; i <= n || ans == -1; i++) {
            int a = in.nextInt();
            if(f[a] > 0){
                ans = 0; break;
            }
            f[a]++;
            arr[i] = a;
        }

        for (int i = 1; i <= n || ans == -1; i++) {
            int a = arr[i] & x;
            if( (a == arr[i] && f[a] > 1) || (a != arr[i] && f[a] > 0)){
                ans = 1; break;
            }
            
            g[a]++;
        }

        for (int i = 1; i <= n || ans == -1; i++) {
            int a = arr[i] & x;
            if(g[a] > 1){
                ans = 2; break;
            }
            
        }

        pw.println(ans);



        pw.close();
    }

    static void debug(Object...obj) {
        System.err.println(Arrays.deepToString(obj));
    }

    static class FastReader {
        InputStream is;
        private byte[] inbuf = new byte[1024];
        private int lenbuf = 0, ptrbuf = 0;
        static final int ints[] = new int[128];

        public FastReader(InputStream is){
            for(int i='0';i<='9';i++) ints[i]=i-'0';
            this.is = is;
        }

        public int readByte(){
            if(lenbuf == -1)throw new InputMismatchException();
            if(ptrbuf >= lenbuf){
                ptrbuf = 0;
                try { lenbuf = is.read(inbuf); } catch (IOException e) { throw new InputMismatchException(); }
                if(lenbuf <= 0)return -1;
            }
            return inbuf[ptrbuf++];
        }

        public boolean isSpaceChar(int c) {
            return !(c >= 33 && c <= 126);
        }
        public int skip() {
            int b;
            while((b = readByte()) != -1 && isSpaceChar(b));
            return b;
        }

        public String next(){
            int b = skip();
            StringBuilder sb = new StringBuilder();
            while(!(isSpaceChar(b))){ 
                sb.appendCodePoint(b);
                b = readByte();
            }
            return sb.toString();
        }

        public int nextInt(){
            int num = 0, b;
            boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-'){
                minus = true;
                b = readByte();
            }

            while(true){
                if(b >= '0' && b <= '9'){
                    num = (num<<3) + (num<<1) + ints[b];
                }else{
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public long nextLong() {
            long num = 0;
            int b;
            boolean minus = false;
            while((b = readByte()) != -1 && !((b >= '0' && b <= '9') || b == '-'));
            if(b == '-'){
                minus = true;
                b = readByte();
            }

            while(true){
                if(b >= '0' && b <= '9'){
                    num = (num<<3) + (num<<1) + ints[b];
                }else{
                    return minus ? -num : num;
                }
                b = readByte();
            }
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }
       

        public char[] next(int n){
            char[] buf = new char[n];
            int b = skip(), p = 0;
            while(p < n && !(isSpaceChar(b))){
                buf[p++] = (char)b;
                b = readByte();
            }
            return n == p ? buf : Arrays.copyOf(buf, p);
        }

        
    }
}",323
"public class Main {

	public static void main(String[] args) throws IOException {
		FastReader in = new FastReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		long n = in.nextLong();
		long k = in.nextLong();
		long s = in.nextLong();
		if (k > s || k * (n - 1) < s) {
			out.println(""NO"");
		} else {
			out.println(""YES"");
			long cur = 1;
			while (k > 0) {
				long x = Math.min(n - 1, s - k + 1);
				cur = ( cur - x > 0 ? cur  - x : cur + x);
				out.print(cur + "" "");
				s -= x;
				k--;
			}

		}
		out.flush();
		out.close();
	}

	static class FastReader {
		StringTokenizer st;
		BufferedReader br;

		public FastReader(InputStream s) {
			br = new BufferedReader(new InputStreamReader(s));
		}

		public FastReader(FileReader fileReader) {
			br = new BufferedReader(fileReader);
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}

		public long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public String nextLine() throws IOException {
			return br.readLine();
		}

		public boolean ready() throws IOException {
			return br.ready();
		}
	}

}","public class Main {

	public static void main(String[] args) throws IOException {
		FastReader in = new FastReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		long n = in.nextLong();
		long k = in.nextLong();
		long s = in.nextLong();
		if (k > s || k * (n - 1) < s) {
			out.println(""NO"");
		} else {
			out.println(""YES"");
			long cur = 1;
			while (k > 0) {
				long x = Math.min(n - 1, s - k + 1);
				if (cur - x > 0) {
					cur = cur - x;
				} else {
					cur = cur + x;
				}
				out.print(cur + "" "");
				s -= x;
				k--;
			}

		}
		out.flush();
		out.close();
	}

	static class FastReader {
		StringTokenizer st;
		BufferedReader br;

		public FastReader(InputStream s) {
			br = new BufferedReader(new InputStreamReader(s));
		}

		public FastReader(FileReader fileReader) {
			br = new BufferedReader(fileReader);
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public double nextDouble() throws IOException {
			return Double.parseDouble(next());
		}

		public long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public String nextLine() throws IOException {
			return br.readLine();
		}

		public boolean ready() throws IOException {
			return br.ready();
		}
	}

}",324
"public class DeathNote {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		int m = nextInt();
		int[] a = intArray(n);
		
		StringBuffer sb = new StringBuffer();
		int x = 0;
		for (int i = 0; i < n; i++) {
			x += a[i];
			sb.append("" "" + (x/m));
			x %= m;
		}
		
		System.out.println(sb.toString().substring(1));
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class DeathNote {
    public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
    public static StringTokenizer st;
    
    public static void main(String[] args) throws IOException {
        int n = nextInt();
        int m = nextInt();
        int[] a = intArray(n);
        
        StringBuilder sb = new StringBuilder();
        int x = 0;
        for (int i = 0; i < n; i++) {
            x += a[i];
            sb.append("" "" + (x/m));
            x %= m;
        }
        
        System.out.println(sb.toString().substring(1));
    }
    
    public static String nextLine() throws IOException {
        return in.readLine();
    }

    public static String nextString() throws IOException {
        while (st == null || !st.hasMoreTokens())
            st = new StringTokenizer(in.readLine());
        return st.nextToken();
    }

    public static int nextInt() throws IOException {
        return Integer.parseInt(nextString());
    }

    public static long nextLong() throws IOException {
        return Long.parseLong(nextString());
    }

    public static int[] intArray(int n) throws IOException {
        int[] a = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = nextInt();
        return a;
    }

    public static int[][] intArray(int n, int m) throws IOException {
        int[][] a = new int[n][m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                a[i][j] = nextInt();
        return a;
    }

    public static long[] longArray(int n) throws IOException {
        long[] a = new long[n];
        for (int i = 0; i < n; i++)
            a[i] = nextLong();
        return a;
    }
}",325
"public class Main {

    static String S;

    public static void main(String[] args) {
        FastScanner sc = new FastScanner(System.in);
        S = sc.next();

        System.out.println(solve());
    }

    static int solve() {
        int ans = -1;
        int time = 1;
        int n = S.length();
        for (int i = 1; i < n*2; i++) {
            if( S.charAt((i-1)%n) != S.charAt(i%n) ) {
                time++;
            } else {
                ans = Math.max(time, ans);
                time = 1;
            }
        }
        ans = Math.max(time, ans);

        if( ans == n*2 ) {
            return n;
        } else {
            return ans;
        }
    }

    @SuppressWarnings(""unused"")
    static class FastScanner {
        private BufferedReader reader;
        private StringTokenizer tokenizer;

        FastScanner(InputStream in) {
            reader = new BufferedReader(new InputStreamReader(in));
            tokenizer = null;
        }

        String next() {
            if (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        String nextLine() {
            if (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    return reader.readLine();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken(""\n"");
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArray(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++)
                a[i] = nextInt();
            return a;
        }

        int[] nextIntArray(int n, int delta) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++)
                a[i] = nextInt() + delta;
            return a;
        }

        long[] nextLongArray(int n) {
            long[] a = new long[n];
            for (int i = 0; i < n; i++)
                a[i] = nextLong();
            return a;
        }
    }

    static <A> void writeLines(A[] as, Function<A, String> f) {
        PrintWriter pw = new PrintWriter(System.out);
        for (A a : as) {
            pw.println(f.apply(a));
        }
        pw.flush();
    }

    static void writeLines(int[] as) {
        PrintWriter pw = new PrintWriter(System.out);
        for (int a : as) pw.println(a);
        pw.flush();
    }

    static void writeLines(long[] as) {
        PrintWriter pw = new PrintWriter(System.out);
        for (long a : as) pw.println(a);
        pw.flush();
    }

    static int max(int... as) {
        int max = Integer.MIN_VALUE;
        for (int a : as) max = Math.max(a, max);
        return max;
    }

    static int min(int... as) {
        int min = Integer.MAX_VALUE;
        for (int a : as) min = Math.min(a, min);
        return min;
    }

    static void debug(Object... args) {
        StringJoiner j = new StringJoiner("" "");
        for (Object arg : args) {
            if (arg instanceof int[]) j.add(Arrays.toString((int[]) arg));
            else if (arg instanceof long[]) j.add(Arrays.toString((long[]) arg));
            else if (arg instanceof double[]) j.add(Arrays.toString((double[]) arg));
            else if (arg instanceof Object[]) j.add(Arrays.toString((Object[]) arg));
            else j.add(arg.toString());
        }
        System.err.println(j.toString());
    }
}","public class Main {

    static String S;

    public static void main(String[] args) {
        FastScanner sc = new FastScanner(System.in);
        S = sc.next();

        System.out.println(solve());
    }

    static int solve() {
        int ans = -1;
        int time = 1;
        int n = S.length();
        for (int i = 1; i < n * 2; i++) {
            if (S.charAt((i - 1) % n) != S.charAt(i % n)) {
                time++;
            } else {
                ans = Math.max(time, ans);
                time = 1;
            }
        }
        ans = Math.max(time, ans);

        if (ans == n * 2) {
            return n;
        } else {
            return ans;
        }
    }

    @SuppressWarnings(""unused"")
    static class FastScanner {
        private BufferedReader reader;
        private StringTokenizer tokenizer;

        FastScanner(InputStream in) {
            reader = new BufferedReader(new InputStreamReader(in));
            tokenizer = null;
        }

        String next() {
            if (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        String nextLine() {
            if (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    return reader.readLine();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken(""\n"");
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        int[] nextIntArray(int n) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++)
                a[i] = nextInt();
            return a;
        }

        int[] nextIntArray(int n, int delta) {
            int[] a = new int[n];
            for (int i = 0; i < n; i++)
                a[i] = nextInt() + delta;
            return a;
        }

        long[] nextLongArray(int n) {
            long[] a = new long[n];
            for (int i = 0; i < n; i++)
                a[i] = nextLong();
            return a;
        }
    }

    static <A> void writeLines(A[] as, Function<A, String> f) {
        PrintWriter pw = new PrintWriter(System.out);
        for (A a : as) {
            pw.println(f.apply(a));
        }
        pw.flush();
    }

    static void writeLines(int[] as) {
        PrintWriter pw = new PrintWriter(System.out);
        for (int a : as) pw.println(a);
        pw.flush();
    }

    static void writeLines(long[] as) {
        PrintWriter pw = new PrintWriter(System.out);
        for (long a : as) pw.println(a);
        pw.flush();
    }

    static int max(int... as) {
        int max = Integer.MIN_VALUE;
        for (int a : as) max = Math.max(a, max);
        return max;
    }

    static int min(int... as) {
        int min = Integer.MAX_VALUE;
        for (int a : as) min = Math.min(a, min);
        return min;
    }

    static void debug(Object... args) {
        StringJoiner j = new StringJoiner("" "");
        for (Object arg : args) {
            if (arg instanceof int[]) j.add(Arrays.toString((int[]) arg));
            else if (arg instanceof long[]) j.add(Arrays.toString((long[]) arg));
            else if (arg instanceof double[]) j.add(Arrays.toString((double[]) arg));
            else if (arg instanceof Object[]) j.add(Arrays.toString((Object[]) arg));
            else j.add(arg.toString());
        }
        System.err.println(j.toString());
    }
}",326
"public class Cheast {

    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        l[0] = sc.nextInt();
        int x=1;
        int c=1;
        for (int i=1;i<n;i++) {
            l[i] = sc.nextInt();
            if (l[i] <= l[i-1]*2) {
                c++;
                x = Math.max(x,c);
            }
            else
                c = 1;
        }
        System.out.println(x);



    }
}","public class Cheast {

    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] l = new int[n];
        l[0] = sc.nextInt();
        int x = 1;
        int c = 1;
        for (int i = 1; i < n; i++) {
            l[i] = sc.nextInt();
            if (l[i] <= l[i - 1] * 2) {
                c++;
                x = Math.max(x, c);
            } else {
                c = 1;
            }
        }
        System.out.println(x);
    }
}",327
"public class vasyaarray{
public static void main(String[] args)throws IOException {
    FastReader in=new FastReader(System.in);
        int n=in.nextInt();
        long arr1[]=new long[n];
        long pre1[]=new long[n];
        int i,j;
        arr1[0]=in.nextLong();
        pre1[0]=arr1[0];
        for(i=1;i<n;i++)
        {
            arr1[i]=in.nextLong();
            pre1[i]=pre1[i-1]+arr1[i];
        }
        int m=in.nextInt();
        long arr2[]=new long[m];
        long pre2[]=new long[m];
        arr2[0]=in.nextInt();
        pre2[0]=arr2[0];
        for(i=1;i<m;i++)
        {
            arr2[i]=in.nextInt();
            pre2[i]=pre2[i-1]+arr2[i];
        }
        
         
        if(pre1[n-1]!=pre2[m-1])
        System.out.println(""-1"");
        else
        {
            long s1=0,s2=0;
            i=j=0;
            int k=0;
            while(true)
            {
                if(s1==s2)
                {
                    if(s1==0)
                    {
                        s1=arr1[i++];
                        s2=arr2[j++];
                        
                    }
                    else
                    {
                        k++;
                        s1=s2=0;
                        
                        if(i==n && j==m)
                        break;
                    }
                }
                else if(s1>s2)
                {
                    s2+=arr2[j++];
                    
                }
                else
                {
                    s1+=arr1[i++];
                    
                }
            }
            System.out.println(k);
        }
    }
}
class FastReader {
 
    byte[] buf = new byte[2048];
    int index, total;
    InputStream in;
 
    FastReader(InputStream is) {
        in = is;
    }
 
    int scan() throws IOException {
        if (index >= total) {
            index = 0;
            total = in.read(buf);
            if (total <= 0) {
                return -1;
            }
        }
        return buf[index++];
    }
 
    String next() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan());
        StringBuilder sb = new StringBuilder();
        for (; c > 32; c = scan()) {
            sb.append((char) c);
        }
        return sb.toString();
    }
    String nextLine() throws IOException {
        int c;
        for (c = scan(); c <= 32; c = scan());
        StringBuilder sb = new StringBuilder();
        for (; c !=10; c = scan()) {
            sb.append((char) c);
        }
        return sb.toString();
    }
    char nextChar() throws IOException{
        int c;
         for (c = scan(); c <= 32; c = scan());
         return (char)c;
        }
 
    int nextInt() throws IOException {
        int c, val = 0;
        for (c = scan(); c <= 32; c = scan());
        boolean neg = c == '-';
        if (c == '-' || c == '+') {
            c = scan();
        }
        for (; c >= '0' && c <= '9'; c = scan()) {
            val = (val << 3) + (val << 1) + (c & 15);
        }
        return neg ? -val : val;
    }
 
    long nextLong() throws IOException {
        int c;
        long val = 0;
        for (c = scan(); c <= 32; c = scan());
        boolean neg = c == '-';
        if (c == '-' || c == '+') {
            c = scan();
        }
        for (; c >= '0' && c <= '9'; c = scan()) {
            val = (val << 3) + (val << 1) + (c & 15);
        }
        return neg ? -val : val;
    }
}","class vasyaarray {
public static void main(String[] args) throws IOException {
FastReader in = new FastReader(System.in);
int n = in.nextInt();
long[] arr1 = new long[n];
long[] pre1 = new long[n];
int i, j;
arr1[0] = in.nextLong();
pre1[0] = arr1[0];
for (i = 1; i < n; i++) {
arr1[i] = in.nextLong();
pre1[i] = pre1[i - 1] + arr1[i];
}
int m = in.nextInt();
long[] arr2 = new long[m];
long[] pre2 = new long[m];
arr2[0] = in.nextInt();
pre2[0] = arr2[0];
for (i = 1; i < m; i++) {
arr2[i] = in.nextInt();
pre2[i] = pre2[i - 1] + arr2[i];
}
if (pre1[n - 1] != pre2[m - 1])
System.out.println(""-1"");
else {
long s1 = 0, s2 = 0;
i = j = 0;
int k = 0;
while (true) {
if (s1 == s2) {
if (s1 == 0) {
s1 = arr1[i++];
s2 = arr2[j++];
}
else {
k++;
s1 = s2 = 0;
if (i == n && j == m)
break;
}
}
else if (s1 > s2) {
s2 += arr2[j++];
}
else {
s1 += arr1[i++];
}
}
System.out.println(k);
}
}
}
class FastReader {
byte[] buf = new byte[2048];
int index, total;
InputStream in;

FastReader(InputStream is) {
in = is;
}

int scan() throws IOException {
if (index >= total) {
index = 0;
total = in.read(buf);
if (total <= 0) {
return -1;
}
}
return buf[index++];
}

String next() throws IOException {
int c;
for (c = scan(); c <= 32; c = scan()) ;
StringBuilder sb = new StringBuilder();
for (; c > 32; c = scan()) {
sb.append((char) c);
}
return sb.toString();
}

String nextLine() throws IOException {
int c;
for (c = scan(); c <= 32; c = scan()) ;
StringBuilder sb = new StringBuilder();
for (; c != 10; c = scan()) {
sb.append((char) c);
}
return sb.toString();
}

char nextChar() throws IOException {
int c;
for (c = scan(); c <= 32; c = scan()) ;
return (char) c;
}

int nextInt() throws IOException {
int c, val = 0;
for (c = scan(); c <= 32; c = scan()) ;
boolean neg = c == '-';
if (c == '-' || c == '+') {
c = scan();
}
for (; c >= '0' && c <= '9'; c = scan()) {
val = (val << 3) + (val << 1) + (c & 15);
}
return neg ? -val : val;
}

long nextLong() throws IOException {
int c;
long val = 0;
for (c = scan(); c <= 32; c = scan()) ;
boolean neg = c == '-';
if (c == '-' || c == '+') {
c = scan();
}
for (; c >= '0' && c <= '9'; c = scan()) {
val = (val << 3) + (val << 1) + (c & 15);
}
return neg ? -val : val;
}
}",328
"public class helloWorld 
{
	static ArrayList<Integer> ar;
	public static void main(String[] args) 
	{		
		Scanner in = new Scanner(System.in);
		int n = in.nextInt();
		StringBuilder ans = new StringBuilder();
		if(n <= 2)
			ans.append(""No"");
		else if(n == 4) {
			ans.append(""Yes\n"");
			ans.append(""1 2\n"");
			ans.append(""3 1 3 4\n"");
		}
		else  {
			ans.append(""Yes\n"");
			if(n % 2 == 1) {
				int a = (n+1)/2;
				ans.append(""1 "");
				ans.append(a);
				ans.append(""\n"");
				ans.append(n-1);
				for(int i = 1; i < a; i++)
					ans.append("" "" + i);
				for(int i = a+1; i <= n; i++)
					ans.append("" "" + i);
			}
			else {
				int a = n/2;
				ans.append(""2 "");
				ans.append(a + "" "");
				ans.append(a+1 + "" \n"");
				ans.append(n-2);
				for(int i = 1; i < a; i++)
					ans.append("" "" + i);
				for(int i = a+2; i <= n; i++)
					ans.append("" "" + i);
			}
		}
		
		System.out.println(ans);
		
		in.close();
	}
}","public class HelloWorldBackTranslation {
    static ArrayList<Integer> ar;
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        StringBuilder ans = new StringBuilder();
        if (n <= 2)
            ans.append(""No"");
        else if (n == 4) { 
            ans.append(""Yes\n""); 
            ans.append(""1 2\n""); 
            ans.append(""3 1 3 4\n"");
        } else {
            ans.append(""Yes\n"");
            if (n % 2 == 1) {
                int a = (n + 1) / 2;
                ans.append(""1 "");
                ans.append(a); 
                ans.append(""\n"");
                ans.append(n - 1); 
                for (int i = 1; i < a; i++)
                    ans.append("" "" + i); 
                for (int i = a + 1; i <= n; i++)
                    ans.append("" "" + i); 
            } else {
                int a = n / 2;
                ans.append(""2 "");
                ans.append(a + "" "");
                ans.append(a + 1 + "" \n"");
                ans.append(n - 2);
                for (int i = 1; i < a; i++)
                    ans.append("" "" + i); 
                for (int i = a + 2; i <= n; i++)
                    ans.append("" "" + i); 
            }
        } 
        System.out.println(ans); 
        in.close(); 
    } 
}",329
"class
SmallestSubArraySum 
{ 





static
int
smallestSubWithSum(
int
arr[], 
int
n, 
int
x) 

{ 



int
curr_sum = 
0
, min_len = n + 
1
; 




int
start = 
0
, end = 
0
; 

while
(end < n) 

{ 





while
(curr_sum <= x && end < n) 

curr_sum += arr[end++]; 




while
(curr_sum > x && start < n) 

{ 



if
(end - start < min_len) 

min_len = end - start; 




curr_sum -= arr[start++]; 

} 

} 

return
min_len; 

} 



public
static
void
main(String[] args) 

{ 

int
arr1[] = {
1
, 
4
, 
45
, 
6
, 
10
, 
19
}; 

int
x = 
51
; 

int
n1 = arr1.length; 

int
res1 = smallestSubWithSum(arr1, n1, x); 

if
(res1 == n1+
1
) 

System.out.println(
""Not Possible""
); 

else

System.out.println(res1); 


int
arr2[] = {
1
, 
10
, 
5
, 
2
, 
7
}; 

int
n2 = arr2.length; 

x = 
9
; 

int
res2 = smallestSubWithSum(arr2, n2, x); 

if
(res2 == n2+
1
) 

System.out.println(
""Not Possible""
); 

else

System.out.println(res2); 


int
arr3[] = {
1
, 
11
, 
100
, 
1
, 
0
, 
200
, 
3
, 
2
, 
1
, 
250
}; 

int
n3 = arr3.length; 

x = 
280
; 

int
res3 = smallestSubWithSum(arr3, n3, x); 

if
(res3 == n3+
1
) 

System.out.println(
""Not Possible""
); 

else

System.out.println(res3); 

} 
}","class SmallestSubArraySum { static int smallestSubWithSum(int arr[], int n, int x) { int curr_sum = 0, min_len = n + 1; int start = 0, end = 0; while (end < n) { while (curr_sum <= x && end < n) curr_sum += arr[end++]; while (curr_sum > x && start < n) { if (end - start < min_len) min_len = end - start; curr_sum -= arr[start++]; } } return min_len; } public static void main(String[] args) { int arr1[] = { 1, 4, 45, 6, 10, 19 }; int x = 51; int n1 = arr1.length; int res1 = smallestSubWithSum(arr1, n1, x); if (res1 == n1 + 1) System.out.println(""Not Possible""); else System.out.println(res1); int arr2[] = { 1, 10, 5, 2, 7 }; int n2 = arr2.length; x = 9; int res2 = smallestSubWithSum(arr2, n2, x); if (res2 == n2 + 1) System.out.println(""Not Possible""); else System.out.println(res2); int arr3[] = { 1, 11, 100, 1, 0, 200, 3, 2, 1, 250 }; int n3 = arr3.length; x = 280; int res3 = smallestSubWithSum(arr3, n3, x); if (res3 == n3 + 1) System.out.println(""Not Possible""); else System.out.println(res3); } }",330
"public class A
   {
      public static void main(String args[]) throws Exception
      {
         BufferedReader infile = new BufferedReader(new InputStreamReader(System.in)); 
         StringTokenizer st = new StringTokenizer(infile.readLine());
         int N = Integer.parseInt(st.nextToken());
         int L = Integer.parseInt(st.nextToken());
         int A = Integer.parseInt(st.nextToken());
         int[] arr1 = new int[N];
         int[] arr2 = new int[N];
         for(int i=0; i < N; i++)
         {
            st = new StringTokenizer(infile.readLine());
            int x = Integer.parseInt(st.nextToken());
            int y = Integer.parseInt(st.nextToken())+x;
            arr1[i] = x;
            arr2[i] = y;
         }
         int res = 0;
         for(int i=1; i < N; i++)
            res += (arr1[i]-arr2[i-1])/A;
         if(N > 0)
            res += (L-arr2[N-1])/A+arr1[0]/A;
         else
            res += L/A;
         System.out.println(res);
      }
   }","public class A {
   public static void main(String args[]) throws Exception {
      BufferedReader infile = new BufferedReader(new InputStreamReader(System.in)); 
      StringTokenizer st = new StringTokenizer(infile.readLine());
      int N = Integer.parseInt(st.nextToken());
      int L = Integer.parseInt(st.nextToken());
      int A = Integer.parseInt(st.nextToken());
      int[] arr1 = new int[N];
      int[] arr2 = new int[N];
      for (int i = 0; i < N; i++) {
         st = new StringTokenizer(infile.readLine());
         int x = Integer.parseInt(st.nextToken());
         int y = Integer.parseInt(st.nextToken()) + x;
         arr1[i] = x;
         arr2[i] = y;
      }
      int res = 0;
      for (int i = 1; i < N; i++)
         res += (arr1[i] - arr2[i - 1]) / A;
      if (N > 0)
         res += (L - arr2[N - 1]) / A + arr1[0] / A;
      else
         res += L / A;
      System.out.println(res);
   }
}",331
"public class CodeForces
{
	public static void main(String[] args)
	{
		Scanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));

		int n = input.nextInt();
		String s = input.next();
		boolean done = false;
		for (int i = 0; i < s.length() - 1; i++)
		{
			if (s.charAt(i) != s.charAt(i + 1))
			{
				System.out.println(""YES"");
				System.out.println(s.charAt(i) + """" + s.charAt(i + 1));
				done = true;
				break;
			}
		}
		if (!done)
		{
			System.out.println(""NO"");
		}
	}
}","public class CodeForces
{
	public static void main(String[] args)
	{
		Scanner input = new Scanner(new BufferedReader(new InputStreamReader(System.in)));

		int n = input.nextInt();
		String s = input.next();
		boolean done = false;
		for (int i = 0; i < s.length() - 1; i++)
		{
			if (s.charAt(i) != s.charAt(i + 1))
			{
				System.out.println(""YES"");
				System.out.println(s.charAt(i) + """" + s.charAt(i + 1));
				done = true;
				break;
			}
		}
		if (!done)
		{
			System.out.println(""NO"");
		}
	}
}",332
"class
GFG { 








static
int
findMaxAverage(
int
[]arr, 

int
n, 
int
k) 

{ 




if
(k > n) 

return
-
1
; 










int
[]csum = 
new
int
[n]; 


csum[
0
] = arr[
0
]; 

for
(
int
i = 
1
; i < n; i++) 

csum[i] = csum[i - 
1
] + arr[i]; 






int
max_sum = csum[k - 
1
], 

max_end = k - 
1
; 








for
(
int
i = k; i < n; i++) 

{ 

int
curr_sum = csum[i] - 

csum[i - k]; 

if
(curr_sum > max_sum) 

{ 

max_sum = curr_sum; 

max_end = i; 

} 

} 









return
max_end - k + 
1
; 

} 




static
public
void
main (String[] args) 

{ 

int
[]arr = {
1
, 
12
, -
5
, -
6
, 
50
, 
3
}; 

int
k = 
4
; 

int
n = arr.length; 


System.out.println(
""The maximum ""

+ 
""average subarray of length ""

+ k + 
"" begins at index ""

+ findMaxAverage(arr, n, k)); 

} 
}","class GFG { static int findMaxAverage(int[] arr, int n, int k) { if(k > n) return -1; int[] csum = new int[n]; csum[0] = arr[0]; for(int i = 1; i < n; i++) csum[i] = csum[i - 1] + arr[i]; int max_sum = csum[k - 1], max_end = k - 1; for(int i = k; i < n; i++) { int curr_sum = csum[i] - csum[i - k]; if(curr_sum > max_sum) { max_sum = curr_sum; max_end = i; } } return max_end - k + 1; } static public void main(String[] args) { int[] arr = {1, 12, -5, -6, 50, 3}; int k = 4; int n = arr.length; System.out.println(""The maximum ""+ ""average subarray of length ""+ k + "" begins at index ""+ findMaxAverage(arr, n, k)); } }",333
"class
GFG { 






static
int
findMaxAverage(
int
arr[], 
int
n, 
int
k) 

{ 




if
(k > n) 

return
-
1
; 




int
sum = arr[
0
]; 

for
(
int
i = 
1
; i < k; i++) 

sum += arr[i]; 


int
max_sum = sum, max_end = k-
1
; 




for
(
int
i = k; i < n; i++) 

{ 

sum = sum + arr[i] - arr[i-k]; 

if
(sum > max_sum) 

{ 

max_sum = sum; 

max_end = i; 

} 

} 




return
max_end - k + 
1
; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
12
, -
5
, -
6
, 
50
, 
3
}; 

int
k = 
4
; 

int
n = arr.length; 

System.out.println( 
""The maximum average""

+ 
"" subarray of length ""
+ k 

+ 
"" begins at index ""

+ findMaxAverage(arr, n, k)); 

} 
}","class GFG { static int findMaxAverage(int arr[], int n, int k) { if (k > n) return -1; int sum = arr[0]; for (int i = 1; i < k; i++) sum += arr[i]; int max_sum = sum, max_end = k-1; for (int i = k; i < n; i++) { sum = sum + arr[i] - arr[i-k]; if (sum > max_sum) { max_sum = sum; max_end = i; } } return max_end - k + 1; } public static void main (String[] args) { int arr[] = {1, 12, -5, -6, 50, 3}; int k = 4; int n = arr.length; System.out.println(""The maximum average"" + "" subarray of length ""+ k + "" begins at index ""+ findMaxAverage(arr, n, k)); } }",334
"public class ehab3 {
    public static void main( String[] args ) {
        Scanner in = new Scanner( System.in );
	int n = in.nextInt();
	int[] a = new int[n];
	for ( int i = 0; i < n; i++ )
	    a[i] = in.nextInt();
	System.out.println( ( n + 1 ) );
	int c = 0;
	for ( int i = n - 1; i >= 0; i-- ) {
	    int cd = n + i - ( ( a[i] + c ) % n );
	    System.out.println( ""1 "" + ( i + 1 ) + "" "" + cd );
	    c += cd;
	}
	System.out.println( ""2 "" + n + "" "" + n );
    }
}","public class Ehab3 {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        System.out.println((n + 1));
        int c = 0;
        for (int i = n - 1; i >= 0; i--) {
            int cd = n + i - ((a[i] + c) % n);
            System.out.println(""1 "" + (i + 1) + "" "" + cd);
            c += cd;
        }
        System.out.println(""2 "" + n + "" "" + n);
    }
}",335
"public class Main {
	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int num=sc.nextInt();
		long sum1=0,sum2=0;
		for(int i=0;i<num*2;i++){
			sum1+=sc.nextInt();
			sum2+=sc.nextInt();
		}
		System.out.println(sum1/num+"" ""+sum2/num);
	}
}","public class Main {public static void main(String[] args) {Scanner sc=new Scanner(System.in);int num=sc.nextInt();long sum1=0;long sum2=0;for(int i=0;i<num*2;i++){sum1+=sc.nextInt();sum2+=sc.nextInt();}System.out.println(sum1/num+"" ""+sum2/num);}}",336
"public class UniformString {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int t = nextInt();
		for (int i = 0; i < t; i++) {
			int n = nextInt();
			int k = nextInt();
			String s = """";
			for (int j = 0; j < n; j++) 
				s += (char)('a' + (j%k)); 
			System.out.println(s);
		}
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class UniformString {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int t = nextInt();
		for (int i = 0; i < t; i++) {
			int n = nextInt();
			int k = nextInt();
			String s = """";
			for (int j = 0; j < n; j++) 
				s += (char)('a' + (j%k)); 
			System.out.println(s);
		}
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}
",337
"class
arr_rot 
{ 





static
void
leftRotate(
int
arr[], 
int
n, 

int
k) 

{ 



int
mod = k % n; 






for
(
int
i = 
0
; i < n; ++i) 

System.out.print(arr[(i + mod) % n] 

+ 
"" ""
); 


System.out.println(); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = { 
1
, 
3
, 
5
, 
7
, 
9
}; 

int
n = arr.length; 


int
k = 
2
; 

leftRotate(arr, n, k); 


k = 
3
; 

leftRotate(arr, n, k); 


k = 
4
; 

leftRotate(arr, n, k); 

} 
}","class arr_rot {

    static void leftRotate(int arr[], int n, int k) {
        int mod = k % n;

        for (int i = 0; i < n; ++i) {
            System.out.print(arr[(i + mod) % n] + "" "");
        }

        System.out.println();
    }

    public static void main(String[] args) {
        int arr[] = {1, 3, 5, 7, 9};
        int n = arr.length;

        int k = 2;
        leftRotate(arr, n, k);

        k = 3;
        leftRotate(arr, n, k);

        k = 4;
        leftRotate(arr, n, k);
    }
}",338
"class
GFG 
{ 





static
int
findMinOps(
int
[] arr, 
int
n) 

{ 

int
ans = 
0
; 





for
(
int
i=
0
,j=n-
1
; i<=j;) 

{ 





if
(arr[i] == arr[j]) 

{ 

i++; 

j--; 

} 






else
if
(arr[i] > arr[j]) 

{ 



j--; 

arr[j] += arr[j+
1
] ; 

ans++; 

} 




else

{ 

i++; 

arr[i] += arr[i-
1
]; 

ans++; 

} 

} 


return
ans; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = 
new
int
[]{
1
, 
4
, 
5
, 
9
, 
1
} ; 

System.out.println(
""Count of minimum operations is ""
+ 

findMinOps(arr, arr.length)); 


} 
}","class GFG {

static int findMinOps(int[] arr, int n) {
int ans = 0;
for (int i = 0, j = n - 1; i <= j;) {
if (arr[i] == arr[j]) {
i++;
j--;
} else if (arr[i] > arr[j]) {
j--;
arr[j] += arr[j+1];
ans++;
} else {
i++;
arr[i] += arr[i-1];
ans++;
}
}
return ans;
}

public static void main(String[] args) {
int arr[] = new int[]{1, 4, 5, 9, 1};
System.out.println(""Count of minimum operations is "" + findMinOps(arr, arr.length));
}
}",339
"public class GennadyAndACardGame {
	public static void main(String[] args) throws IOException {
		BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));
		String line =null;
		String[] n={};
		String s=""NO"";
		while((line=bufr.readLine())!=null)    {
			if(""over"".equals(line))
				break;
			n=bufr.readLine().split("" "");
			for(int i=0;i<n.length;i++){
				if(n[i].contains(line.substring(0,1)) || n[i].contains(line.substring(1))){
					s=""YES"";
				}
			}
			System.out.println(s);
			s=""NO"";
			bufw.flush();
		}
		bufw.close();                          
	}
}","public class GennadyAndACardGame {
	public static void main(String[] args) throws IOException {
		BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));
		String line =null;
		String[] n={};
		String s=""NO"";
		String input = null;
		while((line=bufr.readLine())!=null)    {
			if(""over"".equals(line))
				break;
			input = bufr.readLine();
			n=input.split("" "");
			for(int i=0;i<n.length;i++){
				if(n[i].contains(line.substring(0,1)) || n[i].contains(line.substring(1))){
					s=""YES"";
				}
			}
			System.out.println(s);
			s=""NO"";
			bufw.flush();
		}
		bufw.close();
	}
}",340
"class
FindSmallestInteger 
{ 





int
findSmallest(
int
arr[], 
int
n) 

{ 

int
res = 
1
; 







for
(
int
i = 
0
; i < n && arr[i] <= res; i++) 

res = res + arr[i]; 


return
res; 

} 




public
static
void
main(String[] args) 

{ 

FindSmallestInteger small = 
new
FindSmallestInteger(); 

int
arr1[] = {
1
, 
3
, 
4
, 
5
}; 

int
n1 = arr1.length; 

System.out.println(small.findSmallest(arr1, n1)); 


int
arr2[] = {
1
, 
2
, 
6
, 
10
, 
11
, 
15
}; 

int
n2 = arr2.length; 

System.out.println(small.findSmallest(arr2, n2)); 


int
arr3[] = {
1
, 
1
, 
1
, 
1
}; 

int
n3 = arr3.length; 

System.out.println(small.findSmallest(arr3, n3)); 


int
arr4[] = {
1
, 
1
, 
3
, 
4
}; 

int
n4 = arr4.length; 

System.out.println(small.findSmallest(arr4, n4)); 


} 
}","class FindSmallestInteger {
    int findSmallest(int[] arr, int n) {
        int res = 1;
        for (int i = 0; i < n && arr[i] <= res; i++)
            res = res + arr[i];
        return res;
    }

    public static void main(String[] args) {
        FindSmallestInteger small = new FindSmallestInteger();
        int[] arr1 = {1, 3, 4, 5};
        int n1 = arr1.length;
        System.out.println(small.findSmallest(arr1, n1));

        int[] arr2 = {1, 2, 6, 10, 11, 15};
        int n2 = arr2.length;
        System.out.println(small.findSmallest(arr2, n2));

        int[] arr3 = {1, 1, 1, 1};
        int n3 = arr3.length;
        System.out.println(small.findSmallest(arr3, n3));

        int[] arr4 = {1, 1, 3, 4};
        int n4 = arr4.length;
        System.out.println(small.findSmallest(arr4, n4));
    }
}",341
"public class CodeForces {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int d = in.nextInt(), sum = in.nextInt();
		List<Data> data = new ArrayList<>();
		
		for (int i = 0; i < d; ++i) {
			int min = in.nextInt(), max = in.nextInt();
			int centre = (min + max) / 2;
			data.add(new Data(centre - min, max - centre, centre));
			sum -= centre;
		}
		
		Iterator<Data> it = data.iterator();
		
		while (sum != 0) {
			if (!it.hasNext()) {
				System.out.println(""NO"");
				return;
			}
			
			Data da = it.next();

			if (sum > 0) {
				da.centre += da.above;
				sum -= da.above;
			} else {
				da.centre -= da.below;
				sum += da.below;
			}
		}
		
		System.out.println(""YES"");
		
		for (Data da : data) {
			System.out.print(da.centre + "" "");
		}
	}
}

class Data {
	int below, above, centre;
	
	Data(int below, int above, int centre) {
		this.below = below;
		this.above = above;
		this.centre = centre;
	}
}","public class CodeForces {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int d = in.nextInt(), sum = in.nextInt();
		List<Data> data = new ArrayList<>();
		for (int i = 0; i < d; i++) {
			int min = in.nextInt(), max = in.nextInt();
			int centre = (min + max) / 2;
			data.add(new Data(centre - min, max - centre, centre));
			sum -= centre;
		}
		Iterator<Data> it = data.iterator();
		while (sum != 0) {
			if(!it.hasNext()) {
				System.out.println(""NO"");
				return;
			}
			Data da = it.next();
			if (sum > 0) {
				da.centre += da.above;
				sum -= da.above;
			} else {
				da.centre -= da.below;
				sum += da.below;
			}
		}
		System.out.println(""YES"");
		for (Data da : data) {
			System.out.print(da.centre + "" "");
		}
	}
}
class Data {
	int below, above, centre;
	
	Data(int below, int above, int centre) {
		this.below = below;
		this.above = above;
		this.centre = centre;
	}
}",342
"public class Main {
    
    static Scanner in = new Scanner();
    static PrintWriter out = new PrintWriter(System.out);
    
    public static void main(String[] args) throws IOException {
        int n = in.nextInt(), l[] = new int[n],
            p = -1000000, d_min = 1000000, min = 1000000000;
        for(int i = 0; i < n; i++) {
            l[i] = in.nextInt();
            min = Math.min(min, l[i]);
        }
        for(int i = 0; i < n; i++)
            if(l[i] == min) {
                d_min = Math.min(d_min, i - p);
                p = i;
            }
        out.print(d_min);
        out.close();
    }
    
    static class Scanner {
        BufferedReader br;
        StringTokenizer st;
        
        public Scanner() {
            br = new BufferedReader(new InputStreamReader(System.in));
            st = new StringTokenizer("""");
        }
        
        public String next() throws IOException {
            if(!st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            return st.nextToken();
        }
        
        public String nextLine() throws IOException {
            while(!st.hasMoreTokens())
                st = new StringTokenizer(br.readLine());
            String r = st.nextToken(""\n"");
            st = new StringTokenizer(br.readLine(), "" "");
            return r;
        }
        
        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }
        
        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }
    }
}","public class Main {
    
    static Scanner in = new Scanner(System.in);
    static PrintWriter out = new PrintWriter(System.out);
    
    public static void main(String[] args) throws IOException {
        int n = in.nextInt(), l[] = new int[n], p = -1000000, d_min = 1000000, min = 1000000000;
        for (int i = 0; i < n; i++) {
            l[i] = in.nextInt();
            min = Math.min(min, l[i]);
        }
        int p = -1;
        int d_min = 1000000;
        int min = 1000000000;
        for (int i = 0; i < n; i++) {
            if (l[i] == min) {
                d_min = Math.min(d_min, i - p);
                p = i;
            }
        }
        out.println(d_min);
        out.close();
    }
    
    static class Scanner {
        Scanner() {
        }
        int nextInt() {
            return in.nextInt();
        }
    }
    
    static class PrintWriter {
        PrintWriter() {
        }
        void println(int num) {
            System.out.println(num);
        }
        void close() {
        }
    }
}",343
"public class Codechef {
     

  public static void main(String[] args) throws IOException {
	Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    int a=sc.nextInt();
    int b=sc.nextInt();
      int res=0;
     for(int i=1;i<n;i++)
     res=Math.max(res, Math.min(a/i, b/(n-i) ) );
     System.out.println(res);
  }

   }","public class Codechef {
     

  public static void main(String[] args) throws IOException {
    Scanner sc=new Scanner(System.in);
    int n=sc.nextInt();
    int a=sc.nextInt();
    int b=sc.nextInt();
      int res=0;
     int i=1;
     while(i<n) {
         res=Math.max(res, Math.min(a/i, b/(n-i)));
         i++;
     }
     System.out.println(res);
  }

   }",344
"public class practise {
    static final int N = 31;
    static Scanner sc = new Scanner(System.in);
    static PrintWriter out = new PrintWriter(System.out,true);
    static long c[] = new long[N];
    static int w[] = new int[N];
    public static void main(String[] args) {
        w[0] = 1;
        for(int i=1;i<N;i++) w[i] = w[i-1]*2;
        int n = sc.nextInt(); int l = sc.nextInt();
        for(int i=0;i<N;i++) c[i] = Long.MAX_VALUE;
        for(int i=0;i<n;i++) c[i] = sc.nextInt();
        for(int i=1;i<N;i++) {
            c[i] = min(c[i-1]*2,c[i]);
        }
        long ans = 0;
        for(int i=0;i<N;i++) {
            if( (l&w[i])!=0) {
                ans += c[i];
            }
        }
        long m = 0;
        for(int i=N - 1;i>=0;i--) {
            if((l&w[i])!=0) {
                m += c[i];
            } else {
                ans = min(ans,m+c[i]);
            }
        }
        out.println(ans);
    }

    static long min(long a,long b) {
        return a<b?a:b;
    }
}","public class Solution {
    static final int N = 31;
    static Scanner sc = new Scanner(System.in);
    static PrintWriter out = new PrintWriter(System.out,true);
    static long c[] = new long[N];
    static int w[] = new int[N];
    public static void main(String[] args) {
        w[0] = 1;
        for(int i = 1; i < N; i++) {
            w[i] = w[i - 1] * 2;
        }
        int n = sc.nextInt();
        int l = sc.nextInt();
        for(int i = 0; i < N; i++) {
            c[i] = Long.MAX_VALUE;
        }
        for(int i = 0; i < n; i++) {
            c[i] = sc.nextInt();
        }
        for(int i = 1; i < N; i++) {
            c[i] = min(c[i - 1] * 2, c[i]);
        }
        long ans = 0;
        for(int i = 0; i < N; i++) {
            if ((l & w[i]) != 0) {
                ans += c[i];
            }
        }
        long m = 0;
        for(int i = N - 1; i >= 0; i--) {
            if ((l & w[i]) != 0) {
                m += c[i];
            } else {
                ans = min(ans, m + c[i]);
            }
        }
        out.println(ans);
    }

    static long min(long a, long b) {
        return a < b ? a : b;
    }
}",345
"public class Main{
    public static void main(String [] args)
    {
        Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();
        char c[]=new char[n];
        Arrays.fill(c,'o');
        int x=1,y=1,z;
        while(y<=n)
        {
            c[y-1]='O';
            z=x+y;
            x=y;
            y=z;
        }
        String ans=new String(c);
        System.out.println(ans);
    }
}","public class Main{
    public static void main(String [] args)
    {
        Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();
        char c[]=new char[n];
        Arrays.fill(c,'o');
        int x=1,y=1,z;
        int count = 1;
        while(count <= n)
        {
            c[count-1]='O';
            z=x+count;
            x=count;
            count=z;
        }
        String ans=new String(c);
        System.out.println(ans);
    }
}",346
"public class java{
          public static void main(String[]arg) {
        	 Scanner sc=new Scanner(System.in); 
        	 int x=sc.nextInt();
        	 String s=sc.next();
        	 boolean f=true;
        	 boolean f2=true;
        	 boolean f3=true;
        	 boolean f4=true;
        	 int v=0;
        	 for(int i=0;i<s.length()-1;i++) {
        		 if(s.charAt(i)==s.charAt(i+1)&&(s.charAt(i)!='?'||s.charAt(i+1)!='?')) {
        			 f=false;
        			 break;
        		 }else {
        			 f=true;
        		 }
        	 }
        	
        	 
        	 for(int i=0;i<s.length();i++) {
        		 if(s.charAt(i)=='?') {
        			 
        			 if(i==0||i==s.length()-1) {
        				 f2=true; 
        				 v++;
        			 }else if(s.charAt(i)==s.charAt(i+1)) {
        					 f2=true;
        					 v++;
        			          }
        			 else if(s.charAt(i-1)==s.charAt(i+1)&&i!=0&&i!=s.length()-1) {
        					 f2=true;
        					 v++;
        			         }
        			 }else {
        				 if(v>0) f2=true;
        				 else f2=false;
        			 }
        		 }
        	 
        	if(f&&f2) {
        		System.out.println(""YES"");
        	}else {
        		System.out.println(""NO"");
        	}
          }
          
}","public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int x = sc.nextInt();
        String s = sc.next();
        boolean f = true;
        boolean f2 = true;
        boolean f3 = true;
        boolean f4 = true;
        int v = 0;
        for (int i = 0; i < s.length() - 1; i++) {
            if (s.charAt(i) == s.charAt(i + 1) && (s.charAt(i) != '?' || s.charAt(i + 1) != '?')) {
                f = false;
                break;
            } else {
                f = true;
            }
        }
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '?') {
                if (i == 0 || i == s.length() - 1) {
                    f2 = true;
                    v++;
                } else if (s.charAt(i) == s.charAt(i + 1)) {
                    f2 = true;
                    v++;
                } else if (s.charAt(i - 1) == s.charAt(i + 1) && i != 0 && i != s.length() - 1) {
                    f2 = true;
                    v++;
                }
            } else {
                if (v > 0) f2 = true;
                else f2 = false;
            }
        }
        if (f && f2) {
            System.out.println(""YES"");
        } else {
            System.out.println(""NO"");
        }
    }
}",347
"class
Test 
{ 

static
int
arr1[] = 
new
int
[]{
0
, 
1
, 
0
, 
1
, 
1
, 
1
, 
1
}; 

static
int
arr2[] = 
new
int
[]{
1
, 
1
, 
1
, 
1
, 
1
, 
0
, 
1
}; 






static
int
longestCommonSum(
int
n) 

{ 



int
maxLen = 
0
; 




int
preSum1 = 
0
, preSum2 = 
0
; 










int
diff[] = 
new
int
[
2
*n+
1
]; 




for
(
int
i = 
0
; i < diff.length; i++) { 

diff[i] = -
1
; 

} 




for
(
int
i=
0
; i<n; i++) 

{ 



preSum1 += arr1[i]; 

preSum2 += arr2[i]; 








int
curr_diff = preSum1 - preSum2; 

int
diffIndex = n + curr_diff; 








if
(curr_diff == 
0
) 

maxLen = i+
1
; 






else
if
( diff[diffIndex] == -
1
) 

diff[diffIndex] = i; 




else

{ 



int
len = i - diff[diffIndex]; 




if
(len > maxLen) 

maxLen = len; 

} 

} 

return
maxLen; 

} 




public
static
void
main(String[] args) 

{ 

System.out.print(
""Length of the longest common span with same sum is ""
); 

System.out.println(longestCommonSum(arr1.length)); 

} 
}","class Test { static int arr1[] = new int[]{ 0, 1, 0, 1, 1, 1, 1}; static int arr2[] = new int[]{ 1, 1, 1, 1, 1, 0, 1}; static int longestCommonSum(int n) { int maxLen = 0; int preSum1 = 0, preSum2 = 0; int diff[] = new int[2 * n + 1]; for (int i = 0; i < diff.length; i++) { diff[i] = -1; } for (int i = 0; i < n; i++) { preSum1 += arr1[i]; preSum2 += arr2[i]; int curr_diff = preSum1 - preSum2; int diffIndex = n + curr_diff; if (curr_diff == 0) maxLen = i + 1; else if ( diff[diffIndex] == -1) diff[diffIndex] = i; else { int len = i - diff[diffIndex]; if (len > maxLen) maxLen = len; } } return maxLen; } public static void main(String[] args) { System.out.print(""Length of the longest common span with same sum is ""); System.out.println(longestCommonSum(arr1.length)); } }",348
"public class Codeforces {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n, f[], c=0;
		n = in.nextInt();
		f = new int[n];
		while (--n>0){
			f[in.nextInt()-1] ++;
			f[in.nextInt()-1]++;
			in.nextLine();
		}
		for(int i=0; i<f.length; i++) if (f[i] == 1) c++;
		System.out.println(c);
	}

}","public class Codeforces {
	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		int n, f[], c=0;
		n = in.nextInt();
		f = new int[n];
		while (--n>0){
			int index1 = in.nextInt()-1;
			f[index1] ++;
			int index2 = in.nextInt()-1;
			f[index2]++;
			in.nextLine();
		}
		int c=0;
		for(int i=0; i<f.length; i++) 
			if (f[i] == 1) 
				c++;
		System.out.println(c);
	}

}",349
"public class loser
{
    static class InputReader {
        public BufferedReader br;
        public StringTokenizer token;
        public InputReader(InputStream stream)
        {
            br=new BufferedReader(new InputStreamReader(stream),32768);
            token=null;
        }

        public String next()
        {
            while(token==null || !token.hasMoreTokens())
            {
                try
                {
                    token=new StringTokenizer(br.readLine());
                }
                catch(IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return token.nextToken();
        }

        public int nextInt()
        {
            return Integer.parseInt(next());
        }

        public long nextLong()
        {
            return Long.parseLong(next());
        }
    }
    static class card{
        long a;
        int i;
        public card(long a,int i)
        {
            this.a=a;
            this.i=i;
        }
    }
    static class sort implements Comparator<pair>
    {
        public int compare(pair o1,pair o2)
        {
            if(o1.a!=o2.a)
                return (int)(o1.a-o2.a);
            else
                return (int)(o1.b-o2.b);
        }
    }
    static void shuffle(long a[])
    {
        List<Long> l=new ArrayList<>();
        for(int i=0;i<a.length;i++)
            l.add(a[i]);
        Collections.shuffle(l);
        for(int i=0;i<a.length;i++)
            a[i]=l.get(i);
    }

    
    
    static class pair{
        int a,b;
        public pair(int a,int b)
        {
            this.a=a;
            this.b=b;
        }
    }
    public  static void main(String[] args) 
    {
        InputReader sc=new InputReader(System.in);
        char c[]=sc.next().toCharArray();
        int l=c.length;
        int a[]=new int[3];
        for(int i=0;i<l;i++)
        {
            a[c[i]-'a']++;
           if(i>0 && c[i]<c[i-1])
           {
               System.out.println(""NO"");
               System.exit(0);
           }
        }
        if(a[0]>0 && a[1]>0 && (a[2]==a[1] || a[2]==a[0]))
        System.out.println(""YES"");
        else
        System.out.println(""NO"");
    }
}","class loser { static class InputReader { public BufferedReader br; public StringTokenizer token; public InputReader(InputStream stream) { br=new BufferedReader(new InputStreamReader(stream),32768); token=null; } public String next() { while(token==null || !token.hasMoreTokens()) { try { token=new StringTokenizer(br.readLine()); } catch(IOException e) { throw new RuntimeException(e); } } return token.nextToken(); } public int nextInt() { return Integer.parseInt(next()); } public long nextLong() { return Long.parseLong(next()); } } static class card{ long a; int i; public card(long a,int i) { this.a=a; this.i=i; } } static class sort implements Comparator<pair> { public int compare(pair o1,pair o2) { if(o1.a!=o2.a) return (int)(o1.a-o2.a); else return (int)(o1.b-o2.b); } } static void shuffle(long a[]) { List<Long> l=new ArrayList<>(); for(int i=0;i<a.length;i++) l.add(a[i]); Collections.shuffle(l); for(int i=0;i<a.length;i++) a[i]=l.get(i); } static class pair{ int a,b; public pair(int a,int b) { this.a=a; this.b=b; } } public static void main(String[] args) { InputReader sc=new InputReader(System.in); char c[]=sc.next().toCharArray(); int l=c.length; int a[]=new int[3]; for(int i=0;i<l;i++) { a[c[i]-'a']++; if(i>0 && c[i]<c[i-1]) { System.out.println(""NO""); System.exit(0); } } if(a[0]>0 && a[1]>0 && (a[2]==a[1]...NO""); } else System.out.println(""NO""); } }",350
"public class GFG {
	public static void main (String[] args) {
	    Scanner sc = new Scanner (System.in);
	    int n = sc.nextInt();
	    int a = sc.nextInt();
	    int b = sc.nextInt();
	    int c = sc.nextInt();
	    int ans = 0;
	    int t= sc.nextInt();
	    int arr[] = new int[n];
	    for(int i=0;i<n;i++){
	        int nn = sc.nextInt();
	        ans+=a;
	        if(b<c){
	            ans += (t-nn) * (c - b);
	        }
	    }
	    System.out.println(ans);
	}
}","public class GFG {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int a = sc.nextInt();
		int b = sc.nextInt();
		int c = sc.nextInt();
		int ans = 0;
		int t = sc.nextInt();
		int[] arr = new int[n];
		for (int i = 0; i < n; i++) {
			int nn = sc.nextInt();
			ans += a;
			if (b < c) {
				ans += (t - nn) * (c - b);
			}
		}
		System.out.println(ans);
	}
}",351
"public class C {
	public static void main(String[] args) throws IOException {

		
		Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
		
		
		int n = sc.nextInt();
		int[] counts = new int[60];
		ArrayList<ArrayDeque<Long>> nums = new ArrayList<>();
		for (int i = 0; i < 60; i++) {
			nums.add(new ArrayDeque<>());
		}
		for (int i = 0; i < n; i++) {
			long num = sc.nextLong();
			for (int j = 1; j <= 60; ++j) {
				if (num < (1L<<j)) {
					nums.get(j-1).add(num);
					++counts[j-1];
					break;
				}
			}
		}
		long curr = 0;
		StringBuilder ans = new StringBuilder();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j <= 60; ++j) {
				if (j==60) {
					System.out.println(""No"");
					return;
				}
				if (counts[j]==0||(curr&(1L<<j))!=0)
					continue;
				long num = nums.get(j).removeFirst();
				--counts[j];
				curr ^= num;
				if (i>0)
					ans.append("" "");
				ans.append(num);
				break;
			}
		}
		System.out.println(""Yes"");
		System.out.println(ans);
	}
}","class C {
	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
		int n = sc.nextInt();
		int[] counts = new int[60];
		ArrayList<ArrayDeque<Long>> nums = new ArrayList<>();
		for (int i = 0; i < 60; i++) {
			nums.add(new ArrayDeque<>());
		}
		for (int i = 0; i < n; i++) {
			long num = sc.nextLong();
			for (int j = 1; j <= 60; ++j) {
				if (num < (1L << j)) {
					nums.get(j - 1).add(num);
					++counts[j - 1];
					break;
				}
			}
		}
		long curr = 0;
		StringBuilder ans = new StringBuilder();
		for (int i = 0; i < n; i++) {
			for (int j = 0; j <= 60; ++j) {
				if (j == 60) {
					System.out.println(""No"");
					return;
				}
				if (counts[j] == 0 || (curr & (1L << j)) != 0)
					continue;
				long num = nums.get(j).removeFirst();
				--counts[j];
				curr ^= num;
				if (i > 0)
					ans.append("" "");
				ans.append(num);
				break;
			}
		}
		System.out.println(""Yes"");
		System.out.println(ans);
	}
}",352
"public class TwoGram {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        String s = sc.next();

        HashMap <String, Integer> hm = new HashMap<>();
        for (int i = 0; i < n - 1; i++) {
            String curr = s.substring(i, i + 2);

            if (hm.containsKey(curr)) {
                hm.put(curr, hm.get(curr) + 1);
            } else {
                hm.put(curr, 1);
            }
        }

        String ans = """";
        int currMax = 0;
        for (String twoGram : hm.keySet()) {
            if (hm.get(twoGram) > currMax) {
                ans = twoGram;
                currMax = hm.get(twoGram);
            }
        }

        System.out.println(ans);

        sc.close();
    }
}","public class TwoGramTranslator {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        String s = sc.next();

        Map<String, Integer> hm = new HashMap<>();
        for (int i = 0; i < n - 1; i++) {
            String curr = s.substring(i, i + 2);

            if (hm.containsKey(curr)) {
                hm.put(curr, hm.get(curr) + 1);
            } else {
                hm.put(curr, 1);
            }
        }

        String ans = """";
        int currMax = 0;
        for (String twoGram : hm.keySet()) {
            if (hm.get(twoGram) > currMax) {
                ans = twoGram;
                currMax = hm.get(twoGram);
            }
        }

        System.out.println(ans);

        sc.close();
    }
}",353
"public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
        int n=Integer.parseInt(bf.readLine());
        int[]f=new int[1001];
        int[]a=new int[n];
        StringTokenizer tk=new StringTokenizer(bf.readLine());
        for (int i = 0; i < n; i++) {
            int element=Integer.parseInt(tk.nextToken());
            a[i]=element;
            f[element]++;
        }
        PrintWriter pw=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        ArrayList<Integer> h=new ArrayList<>();
        int counter=0;
        for (int i = 0; i < n; i++) {
            if(f[a[i]]==1){counter++; h.add(a[i]);}
            else{f[a[i]]-=1;}
        }
        pw.write(counter+""\n"");
        for (int i = 0; i < h.size(); i++) {
            pw.write(h.get(i)+"" "");
        }
        pw.flush();
    }
}","public class Main {

    public static void main(String[] args) throws IOException {
        BufferedReader bf=new BufferedReader(new InputStreamReader(System.in));
        int n=Integer.parseInt(bf.readLine());
        int[]f=new int[1001];
        int[]a=new int[n];
        StringTokenizer tk=new StringTokenizer(bf.readLine());
        for (int i = 0; i < n; i++) {
            int element=Integer.parseInt(tk.nextToken());
            a[i]=element;
            f[element]++;
        }
        PrintWriter pw=new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
        ArrayList<Integer> h=new ArrayList<>();
        int counter=0;
        for (int i = 0; i < n; i++) {
            if(f[a[i]]==1){counter++; h.add(a[i]);}
            else{f[a[i]]-=1;}
        }
        pw.write(counter+""\\n"");
        for (int i = 0; i < h.size(); i++) {
            pw.write(h.get(i)+"" "");
        }
        pw.flush();
    }
}",354
"class
MergeArrays 
{ 



void
moveToEnd(
int
mPlusN[], 
int
size) 

{ 

int
i, j = size - 
1
; 

for
(i = size - 
1
; i >= 
0
; i--) 

{ 

if
(mPlusN[i] != -
1
) 

{ 

mPlusN[j] = mPlusN[i]; 

j--; 

} 

} 

} 




void
merge(
int
mPlusN[], 
int
N[], 
int
m, 
int
n) 

{ 

int
i = n; 




int
j = 
0
; 




int
k = 
0
; 




while
(k < (m + n)) 

{ 



if
((i < (m + n) && mPlusN[i] <= N[j]) || (j == n)) 

{ 

mPlusN[k] = mPlusN[i]; 

k++; 

i++; 

} 

else


{ 

mPlusN[k] = N[j]; 

k++; 

j++; 

} 

} 

} 




void
printArray(
int
arr[], 
int
size) 

{ 

int
i; 

for
(i = 
0
; i < size; i++) 

System.out.print(arr[i] + 
"" ""
); 


System.out.println(
""""
); 

} 


public
static
void
main(String[] args) 

{ 

MergeArrays mergearray = 
new
MergeArrays(); 




int
mPlusN[] = {
2
, 
8
, -
1
, -
1
, -
1
, 
13
, -
1
, 
15
, 
20
}; 

int
N[] = {
5
, 
7
, 
9
, 
25
}; 

int
n = N.length; 

int
m = mPlusN.length - n; 




mergearray.moveToEnd(mPlusN, m + n); 




mergearray.merge(mPlusN, N, m, n); 




mergearray.printArray(mPlusN, m + n); 

} 
}","class MergeArrays { void moveToEnd(int mPlusN[], int size) { int i, j = size - 1; for (i = size - 1; i >= 0; i--) { if (mPlusN[i] != -1) { mPlusN[j] = mPlusN[i]; j--; } } } void merge(int mPlusN[], int N[], int m, int n) { int i = n; int j = 0; int k = 0; while (k < (m + n)) { if ((i < (m + n) && mPlusN[i] <= N[j]) || (j == n)) { mPlusN[k] = mPlusN[i]; k++; i++; } else { mPlusN[k] = N[j]; k++; j++; } } } void printArray(int arr[], int size) { int i; for (i = 0; i < size; i++) System.out.print(arr[i] + "" ""); System.out.println(""""); } public static void main(String[] args) { MergeArrays mergearray = new MergeArrays(); int mPlusN[] = { 2, 8, -1, -1, -1, 13, -1, 15, 20 }; int N[] = { 5, 7, 9, 25 }; int n = N.length; int m = mPlusN.length - n; mergearray.moveToEnd(mPlusN, m + n); mergearray.merge(mPlusN, N, m, n); mergearray.printArray(mPlusN, m + n); } }",355
"public class Practice {
	
	   

		public static void main(String []args)
		{
			Scanner sc=new Scanner(System.in);
			
			
			String s=sc.nextLine();
			int n=0;
			int m=0;
			
			
			for(int i=0;i<s.length();i++)
			{
				if(s.charAt(i)=='-')
				{
					n++;
				}
				else
				{
					m++;
				}
			}
			if(m==0)
			{
				System.out.println(""YES"");
			}
			else
			{
			if(n%m==0)
			{
				System.out.println(""YES"");
			}
			else
			{
				System.out.println(""NO"");
			}
			}
			
			
			
			
			
			
			
			
	}

}","public class Practice {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		String s = sc.nextLine();
		int n = 0;
		int m = 0;

		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '-') {
				n++;
			} else {
				m++;
			}
		}

		if (m == 0) {
			System.out.println(""YES"");
		} else {
			if (n % m == 0) {
				System.out.println(""YES"");
			} else {
				System.out.println(""NO"");
			}
		}
	}

}",356
"class
Geeks 
{ 


static
void
rvereseArray(
int
arr[], 
int
start, 
int
end) 
{ 

while
(start < end) { 

int
temp = arr[start]; 

arr[start] = arr[end]; 

arr[end] = temp; 

start++; 

end--; 

} 
} 


static
void
printArray(
int
arr[], 
int
size) 
{ 

for
(
int
i = 
0
; i < size; i++) 

System.out.print(arr[i] +
"" ""
); 
} 


static
void
splitArr(
int
arr[], 
int
k, 
int
n) 
{ 

rvereseArray(arr, 
0
, n - 
1
); 

rvereseArray(arr, 
0
, n - k - 
1
); 

rvereseArray(arr, n - k, n - 
1
); 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = { 
12
, 
10
, 
5
, 
6
, 
52
, 
36
}; 

int
n = arr.length; 

int
k = 
2
; 




splitArr(arr, k, n); 

printArray(arr, n); 

} 

}","class Geeks { static void rvereseArray(int arr[], int start, int end) { while (start < end) { int temp = arr[start]; arr[start] = arr[end]; arr[end] = temp; start++; end--; } } static void printArray(int arr[], int size) { for (int i = 0; i < size; i++) System.out.print(arr[i] + "" ""); } static void splitArr(int arr[], int k, int n) { rvereseArray(arr, 0, n - 1); rvereseArray(arr, 0, n - k - 1); rvereseArray(arr, n - k, n - 1); } public static void main(String args[]) { int arr[] = {12, 10, 5, 6, 52, 36}; int n = arr.length; int k = 2; splitArr(arr, k, n); printArray(arr, n); } }",357
"public
class
GFG { 





static
void
sortit(
int
[]arr, 
int
n) 

{ 

for
(
int
i = 
0
; i < n; i++) 

{ 

arr[i]=i+
1
; 



} 

} 




public
static
void
main(String args[]) 

{ 

int
[]arr = {
10
, 
7
, 
9
, 
2
, 
8
, 

3
, 
5
, 
4
, 
6
, 
1
}; 

int
n = arr.length; 




sortit(arr, n); 






for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 
}","public

class
GFG
{

public


static

void

sortit
(
int
[]arr, 
int
n)


{

for
(
int
i = 0; i < n; i++)

{

arr[i] = i + 1;

}

}

public

static

void

main(String args[])

{

int
[]arr = {10, 7, 9, 2, 8, 3, 5, 4, 6, 1};

int
n = arr.length;

sortit(arr, n);

for
(
int
i = 0; i < n; i++)

System.out.print(arr[i] + "" "");

}

}",358
"public class mohamedy23
		{
	      public static void main (String args[])
		    {
		    	Scanner sc=new Scanner(System.in);
		    	int n=sc.nextInt();String s=sc.next();int i=s.length()-1;
		    	
		    	if(n==1) {
		    		if(s.charAt(0)=='1') {
		    			System.out.print(""YES"");return;
		    		}else {
		    			System.out.print(""NO"");return;
		    		}
		    	}else if(n==2) {
		    		if(s.contains(""00"")||s.contains(""11"")) {
		    			System.out.print(""NO"");return;
		    		}else {
		    			System.out.print(""Yes"");return;
		    		}
		    	}
		    	else if(s.contains(""000"")||s.contains(""11"")) {
		    		System.out.print(""NO"");return;
		    	}
		    	else	if(s.charAt(0)=='0'&&s.charAt(1)=='0'&&s.charAt(2)=='1') {
		    		System.out.print(""NO"");return;
		    	}
		    	else	if(s.charAt(i)=='0'&&s.charAt(i-1)=='0') {
		    		System.out.print(""NO"");
		    		return;
		    		}
		    	 System.out.print(""YES"");
		    }
		}","public class mohamedy23 {
	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		String s = sc.next();
		int i = s.length() - 1;
		if (n == 1) {
			if (s.charAt(0) == '1') {
				System.out.print(""YES"");
				return;
			} else {
				System.out.print(""NO"");
				return;
			}
		} else if (n == 2) {
			if (s.contains(""00"") || s.contains(""11"")) {
				System.out.print(""NO"");
				return;
			} else {
				System.out.print(""Yes"");
				return;
			}
		} else if (s.contains(""000"") || s.contains(""11"")) {
			System.out.print(""NO"");
			return;
		} else if (s.charAt(0) == '0' && s.charAt(1) == '0' && s.charAt(2) == '1') {
			System.out.print(""NO"");
			return;
		} else if (s.charAt(i) == '0' && s.charAt(i - 1) == '0') {
			System.out.print(""NO"");
			return;
		}
		System.out.print(""YES"");
	}
}",359
"public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        OutputWriter out = new OutputWriter(outputStream);
        D2C982_cut_them_all solver = new D2C982_cut_them_all();
        solver.solve(1, in, out);
        out.close();
    }

    static class D2C982_cut_them_all {
        int n;
        ArrayList<Integer>[] adj;
        int[] sizes = new int[n];
        boolean[] visited = new boolean[n];

        public void solve(int testNumber, InputReader in, OutputWriter out) {

            n = in.nextInt();
            if ((n & 1) == 1) {
                out.println(-1);
                return;
            }
            sizes = new int[n];
            visited = new boolean[n];
            adj = new ArrayList[n];
            for (int i = 0; i < n; i++) {
                adj[i] = new ArrayList<>();
            }

            for (int i = 1; i < n; i++) {
                int u = in.nextInt() - 1;
                int v = in.nextInt() - 1;
                adj[u].add(v);
                adj[v].add(u);
            }

            int root = 0;
            for (int i = 1; i < n; i++) {
                if (adj[i].size() > adj[root].size()) {
                    root = i;
                }
            }

            dfs(root);
            int cnt = 0;
            for (int i = 0; i < n; i++) {
                if ((sizes[i] & 1) == 0) cnt++;
            }
            out.println(cnt - 1);

        }

        int dfs(int u) {

            visited[u] = true;
            int cnt = 1;

            for (int w : adj[u])
                if (!visited[w])
                    cnt += dfs(w);

            sizes[u] = cnt;
            return cnt;
        }

    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private InputReader.SpaceCharFilter filter;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1) {
                throw new InputMismatchException();
            }
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0) {
                    return -1;
                }
            }
            return buf[curChar++];
        }

        public int nextInt() {
            int c = read();
            while (isSpaceChar(c)) {
                c = read();
            }
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9') {
                    throw new InputMismatchException();
                }
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public boolean isSpaceChar(int c) {
            if (filter != null) {
                return filter.isSpaceChar(c);
            }
            return isWhitespace(c);
        }

        public static boolean isWhitespace(int c) {
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }

        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);

        }

    }

    static class OutputWriter {
        private final PrintWriter writer;

        public OutputWriter(OutputStream outputStream) {
            writer = new PrintWriter(new BufferedWriter(new OutputStreamWriter(outputStream)));
        }

        public OutputWriter(Writer writer) {
            this.writer = new PrintWriter(writer);
        }

        public void close() {
            writer.close();
        }

        public void println(int i) {
            writer.println(i);
        }

    }
}","class Main {static class D2C982_cut_them_all {int n;ArrayList<Integer>[] adj;int[] sizes = new int[n];boolean[] visited = new boolean[n];public void solve(int testNumber, InputReader in, OutputWriter out) {n = in.nextInt();if ((n & 1) == 1) {out.println(-1);return;}sizes = new int[n];visited = new boolean[n];adj = new ArrayList[n];for (int i = 0; i < n; i++) {adj[i] = new ArrayList<>();}for (int i = 1; i < n; i++) {int u = in.nextInt() - 1;int v = in.nextInt() - 1;adj[u].add(v);adj[v].add(u);}int root = 0;for (int i = 1; i < n; i++) {if (adj[i].size() > adj[root].size()) {root = i;}}dfs(root);int cnt = 0;for (int i = 0; i < n; i++) {if ((sizes[i] & 1) == 0) cnt++;}out.println(cnt - 1);}int dfs(int u) {visited[u] = true;int cnt = 1;for (int w : adj[u]) if (!visited[w]) cnt += dfs(w);sizes[u] = cnt;return cnt;}}public static void main(String[] args) {InputStream inputStream = System.in;OutputStream outputStream = System.out;InputReader in = new InputReader(inputStream);OutputWriter out = new OutputWriter(outputStream);D2C982_cut_them_all solver = new D2C982_cut_them_all();solver.solve(1, in, out);out.close();}}",360
"class
GFG { 






static
boolean
sortedAfterSwap(
int
A[], 

boolean
B[], 
int
n) 

{ 

int
i, j; 






for
(i = 
0
; i < n - 
1
; i++) { 

if
(B[i]) { 

j = i; 

while
(B[j]) { 

j++; 

} 



Arrays.sort(A, i, 
1
+ j); 

i = j; 

} 

} 




for
(i = 
0
; i < n; i++) { 

if
(A[i] != i + 
1
) { 

return
false
; 

} 

} 


return
true
; 

} 




public
static
void
main(String[] args) 

{ 

int
A[] = { 
1
, 
2
, 
5
, 
3
, 
4
, 
6
}; 

boolean
B[] = { 
false
, 
true
, 
true
, 
true
, 
false
}; 

int
n = A.length; 


if
(sortedAfterSwap(A, B, n)) { 

System.out.println(
""A can be sorted""
); 

} 

else
{ 

System.out.println(
""A can not be sorted""
); 

} 

} 
}","class GFG {

    static boolean sortedAfterSwap(int[] A, boolean[] B, int n) {
        int i, j;
        for (i = 0; i < n - 1; i++) {
            if (B[i]) {
                j = i;
                while (B[j]) {
                    j++;
                }
                Arrays.sort(A, i, 1 + j);
                i = j;
            }
        }
        for (i = 0; i < n; i++) {
            if (A[i] != i + 1) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int[] A = {1, 2, 5, 3, 4, 6};
        boolean[] B = {false, true, true, true, false};
        int n = A.length;
        if (sortedAfterSwap(A, B, n)) {
            System.out.println(""A can be sorted"");
        } else {
            System.out.println(""A can not be sorted"");
        }
    }
}",361
"public class Main {

    static StringBuilder data = new StringBuilder();
    final static FastReader in = new FastReader();


    public static void main(String[] args) {
        int n = in.nextInt(), k = in.nextInt(), t;
        int[] a = new int[101];
        int answ = 0;
        for (long i = 0; i < n; i++) {
            t = in.nextInt();
            a[t]++;
            if (a[t] < 2) {
                if (answ < k) {
                    data.append(i + 1).append("" "");
                    answ++;
                }
            }

        }
        if (answ == k) {
            System.out.println(""YES"");
            System.out.println(data);
        } else {
            System.out.println(""NO"");
        }


    }


    static void fileOut(String s) {
        File out = new File(""output.txt"");
        try {
            FileWriter fw = new FileWriter(out);
            fw.write(s);
            fw.flush();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        public FastReader(String path) {
            try {
                br = new BufferedReader(new
                        InputStreamReader(new FileInputStream(path)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        float nextFloat() {
            return Float.parseFloat(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }


        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}","public class Main {

    static StringBuilder data = new StringBuilder();
    final static FastReader in = new FastReader();


    public static void main(String[] args) {
        int n = in.nextInt(), k = in.nextInt(), t;
        int[] a = new int[101];
        int answ = 0;
        for (long i = 0; i < n; i++) {
            t = in.nextInt();
            a[t]++;
            if (a[t] < 2) {
                if (answ < k) {
                    data.append(i + 1).append("" "");
                    answ++;
                }
            }

        }
        if (answ == k) {
            System.out.println(""YES"");
            System.out.println(data);
        } else {
            System.out.println(""NO"");
        }


    }


    static void fileOut(String s) {
        File out = new File(""output.txt"");
        try {
            FileWriter fw = new FileWriter(out);
            fw.write(s);
            fw.flush();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        public FastReader(String path) {
            try {
                br = new BufferedReader(new
                        InputStreamReader(new FileInputStream(path)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        float nextFloat() {
            return Float.parseFloat(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }


        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}",362
"public class Main {
    public static void main(String[] args) {
        IO io = new IO();
        String s=io.nextLine();
        if (s.length()<3)io.println(""No"");
        else {
            int[]b=new int[200];
            for (int i=2;i<s.length();i++){
                b['.']=b['A']=b['B']=b['C']=0;
                b[s.charAt(i-2)]=1;
                b[s.charAt(i-1)]=1;
                b[s.charAt(i)]=1;
                if (b['A']+b['B']+b['C']==3){io.println(""Yes"");return;}
            }
            io.println(""No"");
        }
    }


    static class IO {

        BufferedInputStream din;
        final int BUFFER_SIZE = 1 << 16;
        byte[] buffer;
        int byteRead, bufferPoint;

        StringBuilder builder;
        PrintWriter pw;

        public IO() {
            din = new BufferedInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPoint = byteRead = 0;

            builder = new StringBuilder();
            pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(
                    System.out
            )), true);
        }

        int read() {
            if (bufferPoint >= byteRead) {
                try {
                    byteRead = din.read(buffer, bufferPoint = 0, BUFFER_SIZE);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (byteRead == -1) buffer[0] = -1;
            }
            return buffer[bufferPoint++];
        }

        int peek() {
            if (byteRead == -1) return -1;
            if (bufferPoint >= byteRead) {
                try {
                    byteRead = din.read(buffer, bufferPoint = 0, BUFFER_SIZE);
                } catch (IOException e) {
                    return -1;
                }
                if (byteRead <= 0) return -1;
            }
            return buffer[bufferPoint];
        }

        boolean hasNext() {
            int c = peek();
            while (c != -1 && c <= ' ') {
                read();
                c = peek();
            }
            return c != -1;
        }

        char nextChar() {
            int c = read();
            while (c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1) {
                c = read();
            }
            return (char) c;
        }

        double nextDouble() {
            double ret = 0, div = 1;
            int c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }
            if (neg)
                return -ret;
            return ret;
        }

        String nextLine() {
            byte[] strBuf = new byte[64];
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    if (cnt == 0) {
                        continue;
                    } else {
                        break;
                    }
                }
                if (strBuf.length == cnt) {
                    strBuf = Arrays.copyOf(strBuf, strBuf.length * 2);
                }
                strBuf[cnt++] = (byte) c;
            }
            return new String(strBuf, 0, cnt);
        }


        String next() {
            byte[] strBuf = new byte[64];
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (Character.isWhitespace(c)) {
                    if (cnt == 0) {
                        continue;
                    } else {
                        break;
                    }
                }
                if (strBuf.length == cnt) {
                    strBuf = Arrays.copyOf(strBuf, strBuf.length * 2);
                }
                strBuf[cnt++] = (byte) c;
            }
            return new String(strBuf, 0, cnt);
        }

        int nextInt() {
            int ans = 0;
            int c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            do {
                ans = ans * 10 + c - '0';
            } while ('0' <= (c = read()) && c <= '9');
            bufferPoint--;
            return neg ? -ans : ans;
        }

        long nextLong() {
            long ans = 0;
            int c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            do {
                ans = ans * 10 + c - '0';
            } while ('0' <= (c = read()) && c <= '9');
            bufferPoint--;
            return neg ? -ans : ans;
        }

        void println(Object o) {
            pw.println(o);
        }

        void print(Object o) {
            pw.print(o);
        }

        void printf(String format, Object... objects) {
            pw.printf(format, objects);
        }

        void close() {
            pw.close();
        }

        void done(Object o) {
            print(o);
            close();
        }

    }
}","public class Main {
    public static void main(String[] args) {
        IO io = new IO();
        String s = io.nextLine();
        if (s.length() < 3) io.println(""No"");
        else {
            int[] b = new int[200];
            for (int i = 2; i < s.length(); i++) {
                b['.'] = b['A'] = b['B'] = b['C'] = 0;
                b[s.charAt(i - 2)] = 1;
                b[s.charAt(i - 1)] = 1;
                b[s.charAt(i)] = 1;
                if (b['A'] + b['B'] + b['C'] == 3) {
                    io.println(""Yes"");
                    return;
                }
            }
            io.println(""No"");
        }
    }

    static class IO {
        BufferedInputStream din;
        final int BUFFER_SIZE = 1 << 16;
        byte[] buffer;
        int byteRead, bufferPoint;

        StringBuilder builder;
        PrintWriter pw;

        public IO() {
            din = new BufferedInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPoint = byteRead = 0;

            builder = new StringBuilder();
            pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)), true);
        }

        int read() {
            if (bufferPoint >= byteRead) {
                try {
                    byteRead = din.read(buffer, bufferPoint = 0, BUFFER_SIZE);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                if (byteRead == -1) buffer[0] = -1;
            }
            return buffer[bufferPoint++];
        }

        int peek() {
            if (byteRead == -1) return -1;
            if (bufferPoint >= byteRead) {
                try {
                    byteRead = din.read(buffer, bufferPoint = 0, BUFFER_SIZE);
                } catch (IOException e) {
                    return -1;
                }
                if (byteRead <= 0) return -1;
            }
            return buffer[bufferPoint];
        }

        boolean hasNext() {
            int c = peek();
            while (c != -1 && c <= ' ') {
                read();
                c = peek();
            }
            return c != -1;
        }

        char nextChar() {
            int c = read();
            while (c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1) {
                c = read();
            }
            return (char) c;
        }

        double nextDouble() {
            double ret = 0, div = 1;
            int c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (c == '.') {
                while ((c = read()) >= '0' && c <= '9') {
                    ret += (c - '0') / (div *= 10);
                }
            }
            if (neg)
                return -ret;
            return ret;
        }

        String nextLine() {
            byte[] strBuf = new byte[64];
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (c == '\n') {
                    if (cnt == 0) {
                        continue;
                    } else {
                        break;
                    }
                }
                if (strBuf.length == cnt) {
                    strBuf = Arrays.copyOf(strBuf, strBuf.length * 2);
                }
                strBuf[cnt++] = (byte) c;
            }
            return new String(strBuf, 0, cnt);
        }

        String next() {
            byte[] strBuf = new byte[64];
            int cnt = 0, c;
            while ((c = read()) != -1) {
                if (Character.isWhitespace(c)) {
                    if (cnt == 0) {
                        continue;
                    } else {
                        break;
                    }
                }
                if (strBuf.length == cnt) {
                    strBuf = Arrays.copyOf(strBuf, strBuf.length * 2);
                }
                strBuf[cnt++] = (byte) c;
            }
            return new String(strBuf, 0, cnt);
        }

        int nextInt() {
            int ans = 0;
            int c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            do {
                ans = ans * 10 + c - '0';
            } while ('0' <= (c = read()) && c <= '9');
            bufferPoint--;
            return neg ? -ans : ans;
        }

        long nextLong() {
            long ans = 0;
            int c = read();
            while (c <= ' ') c = read();
            boolean neg = (c == '-');
            if (neg) c = read();
            do {
                ans = ans * 10 + c - '0';
            } while ('0' <= (c = read()) && c <= '9');
            bufferPoint--;
            return neg ? -ans : ans;
        }

        void println(Object o) {
            pw.println(o);
        }

        void print(Object o) {
            pw.print(o);
        }

        void printf(String format, Object... objects) {
            pw.printf(format, objects);
        }

        void close() {
            pw.close();
        }

        void done(Object o) {
            print(o);
            close();
        }
    }
}",363
"public class icpc
{
    public static void main(String[] args)throws IOException
    {

        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        String s1[] = in.readLine().split("" "");
        int  n = Integer.parseInt(s1[0]);
        int p = Integer.parseInt(s1[1]);
        String s = in.readLine();
        StringBuilder stringBuilder = new StringBuilder(s);
        boolean flag = false;
        for(int i=0;i<n;i++)
        {
            if(i + p < n)
            {
                if(s.charAt(i) != '.' && s.charAt(i + p) != '.' && s.charAt(i) != s.charAt(i + p))
                {
                    flag = true;
                    break;
                }
                else if(s.charAt(i) == '.' && s.charAt(i + p) != '.')
                {
                    int x = s.charAt(i + p) - '0';
                    char ch = (char)((x + 1) % 2 + 48);
                    stringBuilder.setCharAt(i, ch);
                    flag = true;
                    break;
                }
                else if(s.charAt(i) != '.' && s.charAt(i + p) == '.')
                {
                    int x = s.charAt(i) - '0';
                    char ch = (char)((x + 1) % 2 + 48);
                    stringBuilder.setCharAt(i + p, ch);
                    flag = true;
                    break;
                }
                else if(s.charAt(i) == '.' && s.charAt(i + p) == '.')
                {
                    stringBuilder.setCharAt(i, '1');
                    stringBuilder.setCharAt(i + p, '0');
                    flag = true;
                    break;
                }
            }
        }
        if(flag)
        {
            for(int i=0;i<stringBuilder.length();i++)
            {
                if(stringBuilder.charAt(i) == '.')
                {
                    stringBuilder.setCharAt(i, '0');
                }
            }
            System.out.println(stringBuilder);
        }
        else
            System.out.println(""No"");


    }
}
class StringAlgorithms
{
    public int[] calculateZ(char input[]) {
        int Z[] = new int[input.length];
        int left = 0;
        int right = 0;
        for(int k = 1; k < input.length; k++) {
            if(k > right) {
                left = right = k;
                while(right < input.length && input[right] == input[right - left]) {
                    right++;
                }
                Z[k] = right - left;
                right--;
            } else {
                
                int k1 = k - left;
                
                if(Z[k1] < right - k + 1) {
                    Z[k] = Z[k1];
                } else { 
                    left = k;
                    while(right < input.length && input[right] == input[right - left]) {
                        right++;
                    }
                    Z[k] = right - left;
                    right--;
                }
            }
        }
        return Z;
    }
    public ArrayList<Integer> matchPattern(char text[], char pattern[]) {
        char newString[] = new char[text.length + pattern.length + 1];
        int i = 0;
        for(char ch : pattern) {
            newString[i] = ch;
            i++;
        }
        newString[i] = '$';
        i++;
        for(char ch : text) {
            newString[i] = ch;
            i++;
        }
        ArrayList<Integer> result = new ArrayList<>();
        int Z[] = calculateZ(newString);

        for(i = 0; i < Z.length ; i++) {
            if(Z[i] == pattern.length) {
                result.add(i - pattern.length - 1);
            }
        }
        return result;
    }
}
class BasicFunctions
{
    public long min(long[] A)
    {
        long min = Long.MAX_VALUE;
        for(int i=0;i<A.length;i++)
        {
            min = Math.min(min, A[i]);
        }
        return min;
    }
    public long max(long[] A)
    {
        long max = Long.MAX_VALUE;
        for(int i=0;i<A.length;i++)
        {
            max = Math.max(max, A[i]);
        }
        return max;
    }
}
class Name implements Comparable<Name>
{
    int x;
    int y;

    public Name(int x, int y)
    {
        this.x = x;
        this.y = y;
    }
    @Override
    public int compareTo(Name ob)
    {
        if(this.x < ob.x)
            return -1;
        else if(this.x > ob.x)
            return 1;
        return 0;
    }
}
class Matrix
{
    long a;
    long b;
    long c;
    long d;

    public Matrix(long a, long b, long c, long d)
    {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
    }
}
class Game implements Comparable<Game>
{
    long x;
    long y;

    public Game(long x, long y)
    {
        this.x = x;
        this.y = y;
    }

    @Override
    public int compareTo(Game ob)
    {
        if(this.x < ob.x)
            return -1;
        else if(this.x > ob.x)
            return 1;
        else
        {
            if(this.y < ob.y)
                return -1;
            else if(this.y > ob.y)
                return 1;
            else
                return 0;
        }
    }
}
class MergeSortInt
{
    
    
    
    void merge(int arr[], int l, int m, int r) {
        
        int n1 = m - l + 1;
        int n2 = r - m;

        
        int L[] = new int[n1];
        int R[] = new int[n2];

        
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];


        

        
        int i = 0, j = 0;

        
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    
    
    void sort(int arr[], int l, int r) {
        if (l < r) {
            
            int m = (l + r) / 2;

            
            sort(arr, l, m);
            sort(arr, m + 1, r);

            
            merge(arr, l, m, r);
        }
    }

}
class MergeSortLong
{
    
    
    
    void merge(long arr[], int l, int m, int r) {
        
        int n1 = m - l + 1;
        int n2 = r - m;

        
        long L[] = new long[n1];
        long R[] = new long[n2];

        
        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];


        

        
        int i = 0, j = 0;

        
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    
    
    void sort(long arr[], int l, int r) {
        if (l < r) {
            
            int m = (l + r) / 2;

            
            sort(arr, l, m);
            sort(arr, m + 1, r);

            
            merge(arr, l, m, r);
        }
    }
}
class Node
{
    String a;
    String b;
    Node(String s1,String s2)
    {
        this.a = s1;
        this.b = s2;
    }
    @Override
    public boolean equals(Object ob)
    {
        if(ob == null)
            return false;
        if(!(ob instanceof Node))
            return false;
        if(ob == this)
            return true;
        Node obj = (Node)ob;
        if(this.a.equals(obj.a) && this.b.equals(obj.b))
            return true;
        return false;
    }

    @Override
    public int hashCode()
    {
        return (int)this.a.length();
    }
}
class Reader
{
    final private int BUFFER_SIZE = 1 << 16;
    private DataInputStream din;
    private byte[] buffer;
    private int bufferPointer, bytesRead;

    public Reader()
    {
        din = new DataInputStream(System.in);
        buffer = new byte[BUFFER_SIZE];
        bufferPointer = bytesRead = 0;
    }

    public Reader(String file_name) throws IOException
    {
        din = new DataInputStream(new FileInputStream(file_name));
        buffer = new byte[BUFFER_SIZE];
        bufferPointer = bytesRead = 0;
    }

    public String readLine() throws IOException
    {
        byte[] buf = new byte[64]; 
        int cnt = 0, c;
        while ((c = read()) != -1)
        {
            if (c == '\n')
                break;
            buf[cnt++] = (byte) c;
        }
        return new String(buf, 0, cnt);
    }

    public int nextInt() throws IOException
    {
        int ret = 0;
        byte c = read();
        while (c <= ' ')
            c = read();
        boolean neg = (c == '-');
        if (neg)
            c = read();
        do
        {
            ret = ret * 10 + c - '0';
        }  while ((c = read()) >= '0' && c <= '9');

        if (neg)
            return -ret;
        return ret;
    }

    public long nextLong() throws IOException
    {
        long ret = 0;
        byte c = read();
        while (c <= ' ')
            c = read();
        boolean neg = (c == '-');
        if (neg)
            c = read();
        do {
            ret = ret * 10 + c - '0';
        }
        while ((c = read()) >= '0' && c <= '9');
        if (neg)
            return -ret;
        return ret;
    }

    public double nextDouble() throws IOException
    {
        double ret = 0, div = 1;
        byte c = read();
        while (c <= ' ')
            c = read();
        boolean neg = (c == '-');
        if (neg)
            c = read();

        do {
            ret = ret * 10 + c - '0';
        }
        while ((c = read()) >= '0' && c <= '9');

        if (c == '.')
        {
            while ((c = read()) >= '0' && c <= '9')
            {
                ret += (c - '0') / (div *= 10);
            }
        }

        if (neg)
            return -ret;
        return ret;
    }

    private void fillBuffer() throws IOException
    {
        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
        if (bytesRead == -1)
            buffer[0] = -1;
    }

    private byte read() throws IOException
    {
        if (bufferPointer == bytesRead)
            fillBuffer();
        return buffer[bufferPointer++];
    }

    public void close() throws IOException
    {
        if (din == null)
            return;
        din.close();
    }
}
class FenwickTree
{
    public void update(long[] fenwickTree,long delta,int index)
    {
        index += 1;
        while(index < fenwickTree.length)
        {
            fenwickTree[index] += delta;
            index = index + (index & (-index));
        }
    }
    public long prefixSum(long[] fenwickTree,int index)
    {
        long sum = 0L;
        index += 1;
        while(index > 0)
        {
            sum += fenwickTree[index];
            index -= (index & (-index));
        }
        return sum;
    }
}
class SegmentTree
{
    public int nextPowerOfTwo(int num)
    {
        if(num == 0)
            return 1;
        if(num > 0 && (num & (num - 1)) == 0)
            return num;
        while((num &(num - 1)) > 0)
        {
            num = num & (num - 1);
        }
        return num << 1;
    }
    public int[] createSegmentTree(int[] input)
    {
        int np2 = nextPowerOfTwo(input.length);
        int[] segmentTree = new int[np2 * 2 - 1];

        for(int i=0;i<segmentTree.length;i++)
            segmentTree[i] = Integer.MIN_VALUE;

        constructSegmentTree(segmentTree,input,0,input.length-1,0);
        return segmentTree;

    }
    private void constructSegmentTree(int[] segmentTree,int[] input,int low,int high,int pos)
    {
        if(low == high)
        {
            segmentTree[pos] = input[low];
            return;
        }
        int mid = (low + high)/ 2;
        constructSegmentTree(segmentTree,input,low,mid,2*pos + 1);
        constructSegmentTree(segmentTree,input,mid+1,high,2*pos + 2);
        segmentTree[pos] = Math.max(segmentTree[2*pos + 1],segmentTree[2*pos + 2]);
    }
    public int rangeMinimumQuery(int []segmentTree,int qlow,int qhigh,int len)
    {
        return rangeMinimumQuery(segmentTree,0,len-1,qlow,qhigh,0);
    }
    private int rangeMinimumQuery(int segmentTree[],int low,int high,int qlow,int qhigh,int pos)
    {
        if(qlow <= low && qhigh >= high){
            return segmentTree[pos];
        }
        if(qlow > high || qhigh < low){
            return Integer.MIN_VALUE;
        }
        int mid = (low+high)/2;
        return Math.max(rangeMinimumQuery(segmentTree, low, mid, qlow, qhigh, 2 * pos + 1),
                rangeMinimumQuery(segmentTree, mid + 1, high, qlow, qhigh, 2 * pos + 2));
    }
}","class icpc {
    public static void main(String[] args) throws IOException {

        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

        String s1[] = in.readLine().split("" "");
        int n = Integer.parseInt(s1[0]);
        int p = Integer.parseInt(s1[1]);
        String s = in.readLine();
        StringBuilder stringBuilder = new StringBuilder(s);
        boolean flag = false;
        for (int i = 0; i < n; i++) {
            if (i + p < n) {
                if (s.charAt(i) != '.' && s.charAt(i + p) != '.' && s.charAt(i) != s.charAt(i + p)) {
                    flag = true;
                    break;
                } else if (s.charAt(i) == '.' && s.charAt(i + p) != '.') {
                    int x = s.charAt(i + p) - '0';
                    char ch = (char) ((x + 1) % 2 + 48);
                    stringBuilder.setCharAt(i, ch);
                    flag = true;
                    break;
                } else if (s.charAt(i) != '.' && s.charAt(i + p) == '.') {
                    int x = s.charAt(i) - '0';
                    char ch = (char) ((x + 1) % 2 + 48);
                    stringBuilder.setCharAt(i + p, ch);
                    flag = true;
                    break;
                } else if (s.charAt(i) == '.' && s.charAt(i + p) == '.') {
                    stringBuilder.setCharAt(i, '1');
                    stringBuilder.setCharAt(i + p, '0');
                    flag = true;
                    break;
                }
            }
        }
        if (flag) {
            for (int i = 0; i < stringBuilder.length(); i++) {
                if (stringBuilder.charAt(i) == '.') {
                    stringBuilder.setCharAt(i, '0');
                }
            }
            System.out.println(stringBuilder);
        } else
            System.out.println(""No"");


    }
}
}


class StringAlgorithms {
    public int[] calculateZ(char input[]) {
        int Z[] = new int[input.length];
        int left = 0;
        int right = 0;
        for (int k = 1; k < input.length; k++) {
            if (k > right) {
                left = right = k;
                while (right < input.length && input[right] == input[right - left]) {
                    right++;
                }
                Z[k] = right - left;
                right--;
            } else {

                int k1 = k - left;

                if (Z[k1] < right - k + 1) {
                    Z[k] = Z[k1];
                } else {
                    left = k;
                    while (right < input.length && input[right] == input[right - left]) {
                        right++;
                    }
                    Z[k] = right - left;
                    right--;
                }
            }
        }
        return Z;
    }

    public ArrayList<Integer> matchPattern(char text[], char pattern[]) {
        char newString[] = new char[text.length + pattern.length + 1];
        int i = 0;
        for (char ch : pattern) {
            newString[i] = ch;
            i++;
        }
        newString[i] = '$';
        i++;
        for (char ch : text) {
            newString[i] = ch;
            i++;
        }
        ArrayList<Integer> result = new ArrayList<>();
        int Z[] = calculateZ(newString);

        for (i = 0; i < Z.length; i++) {
            if (Z[i] == pattern.length) {
                result.add(i - pattern.length - 1);
            }
        }
        return result;
    }
}


class BasicFunctions {
    public long min(long[] A) {
        long min = Long.MAX_VALUE;
        for (int i = 0; i < A.length; i++) {
            min = Math.min(min, A[i]);
        }
        return min;
    }

    public long max(long[] A) {
        long max = Long.MAX_VALUE;
        for (int i = 0; i < A.length; i++) {
            max = Math.max(max, A[i]);
        }
        return max;
    }
}


class Name implements Comparable<Name> {
    int x;
    int y;

    public Name(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public int compareTo(Name ob) {
        if (this.x < ob.x)
            return -1;
        else if (this.x > ob.x)
            return 1;
        return 0;
    }
}

class Matrix {
    long a;
    long b;
    long c;
    long d;

    public Matrix(long a, long b, long c, long d) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
    }
}


class Game implements Comparable<Game> {
    long x;
    long y;

    public Game(long x, long y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public int compareTo(Game ob) {
        if (this.x < ob.x)
            return -1;
        else if (this.x > ob.x)
            return 1;
        else {
            if (this.y < ob.y)
                return -1;
            else if (this.y > ob.y)
                return 1;
            else
                return 0;
        }
    }
}

class MergeSortInt {
    void merge(int arr[], int l, int m, int r) {

        int n1 = m - l + 1;
        int n2 = r - m;

        int L[] = new int[n1];
        int R[] = new int[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        int i = 0, j = 0;

        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    void sort(int arr[], int l, int r) {
        if (l < r) {

            int m = (l + r) / 2;

            sort(arr, l, m);
            sort(arr, m + 1, r);

            merge(arr, l, m, r);
        }
    }
}

class MergeSortLong {
    void merge(long arr[], int l, int m, int r) {

        int n1 = m - l + 1;
        int n2 = r - m;

        long L[] = new long[n1];
        long R[] = new long[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[m + 1 + j];

        int i = 0, j = 0;

        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    void sort(long arr[], int l, int r) {
        if (l < r) {

            int m = (l + r) / 2;

            sort(arr, l, m);
            sort(arr, m + 1, r);

            merge(arr, l, m, r);
        }
    }
}

class Node {
    String a;
    String b;

    Node(String s1, String s2) {
        this.a = s1;
        this.b = s2;
    }

    @Override
    public boolean equals(Object ob) {
        if (ob == null)
            return false;
        if (!(ob instanceof Node))
            return false;
        if (ob == this)
            return true;
        Node obj = (Node) ob;
        if (this.a.equals(obj.a) && this.b.equals(obj.b))
            return true;
        return false;
    }

    @Override
    public int hashCode() {
        return (int) this.a.length();
    }
}

class Reader {
    final private int BUFFER_SIZE = 1 << 16;
    private DataInputStream din;
    private byte[] buffer;
    private int bufferPointer, bytesRead;

    public Reader() {
        din = new DataInputStream(System.in);
        buffer = new byte[BUFFER_SIZE];
        bufferPointer = bytesRead = 0;
    }

    public Reader(String file_name) throws IOException {
        din = new DataInputStream(new FileInputStream(file_name));
        buffer = new byte[BUFFER_SIZE];
        bufferPointer = bytesRead = 0;
    }

    public String readLine() throws IOException {
        byte[] buf = new byte[64];
        int cnt = 0, c;
        while ((c = read()) != -1) {
            if (c == '\n')
                break;
            buf[cnt++] = (byte) c;
        }
        return new String(buf, 0, cnt);
    }

    public int nextInt() throws IOException {
        int ret = 0;
        byte c = read();
        while (c <= ' ')
            c = read();
        boolean neg = (c == '-');
        if (neg)
            c = read();
        do {
            ret = ret * 10 + c - '0';
        } while ((c = read()) >= '0' && c <= '9');

        if (neg)
            return -ret;
        return ret;
    }

    public long nextLong() throws IOException {
        long ret = 0;
        byte c = read();
        while (c <= ' ')
            c = read();
        boolean neg = (c == '-');
        if (neg)
            c = read();
        do {
            ret = ret * 10 + c - '0';
        }
        while ((c = read()) >= '0' && c <= '9');
        if (neg)
            return -ret;
        return ret;
    }

    public double nextDouble() throws IOException {
        double ret = 0, div = 1;
        byte c = read();
        while (c <= ' ')
            c = read();
        boolean neg = (c == '-');
        if (neg)
            c = read();

        do {
            ret = ret * 10 + c - '0';
        }
        while ((c = read()) >= '0' && c <= '9');

        if (c == '.') {
            while ((c = read()) >= '0' && c <= '9') {
                ret += (c - '0') / (div *= 10);
            }
        }

        if (neg)
            return -ret;
        return ret;
    }

    private void fillBuffer() throws IOException {
        bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
        if (bytesRead == -1)
            buffer[0] = -1;
    }

    private byte read() throws IOException {
        if (bufferPointer == bytesRead)
            fillBuffer();
        return buffer[bufferPointer++];
    }

    public void close() throws IOException {
        if (din == null)
            return;
        din.close();
    }
}

class FenwickTree {
    public void update(long[] fenwickTree, long delta, int index) {
        index += 1;
        while (index < fenwickTree.length) {
            fenwickTree[index] += delta;
            index = index + (index & (-index));
        }
    }

    public long prefixSum(long[] fenwickTree, int index) {
        long sum = 0L;
        index += 1;
        while (index > 0) {
            sum += fenwickTree[index];
            index -= (index & (-index));
        }
        return sum;
    }
}

class SegmentTree {
    public int nextPowerOfTwo(int num) {
        if (num == 0)
            return 1;
        if (num > 0 && (num & (num - 1)) == 0)
            return num;
        while ((num & (num - 1)) > 0) {
            num = num & (num - 1);
        }
        return num << 1;
    }

    public int[] createSegmentTree(int[] input) {
        int np2 = nextPowerOfTwo(input.length);
        int[] segmentTree = new int[np2 * 2 - 1];

        for (int i = 0; i < segmentTree.length; i++)
            segmentTree[i] = Integer.MIN_VALUE;

        constructSegmentTree(segmentTree, input, 0, input.length - 1, 0);
        return segmentTree;

    }

    private void constructSegmentTree(int[] segmentTree, int[] input, int low, int high, int pos) {
        if (low == high) {
            segmentTree[pos] = input[low];
            return;
        }
        int mid = (low + high) / 2;
        constructSegmentTree(segmentTree, input, low, mid, 2 * pos + 1);
        constructSegmentTree(segmentTree, input, mid + 1, high, 2 * pos + 2);
        segmentTree[pos] = Math.max(segmentTree[2 * pos + 1], segmentTree[2 * pos + 2]);
    }

    public int rangeMinimumQuery(int[] segmentTree, int qlow, int qhigh, int len) {
        return rangeMinimumQuery(segmentTree, 0, len - 1, qlow, qhigh, 0);
    }

    private int rangeMinimumQuery(int segmentTree[], int low, int high, int qlow, int qhigh, int pos) {
        if (qlow <= low && qhigh >= high) {
            return segmentTree[pos];
        }
        if (qlow > high || qhigh < low) {
            return Integer.MIN_VALUE;
        }
        int mid = (low + high) / 2;
        return Math.max(rangeMinimumQuery(segmentTree, low, mid, qlow, qhigh, 2 * pos + 1),
                rangeMinimumQuery(segmentTree, mid + 1, high, qlow, qhigh, 2 * pos + 2));
    }
}",364
"public class Fingerprints {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		int m = nextInt();
		int[] a = intArray(n);
		Set<Integer> set = new HashSet<Integer>();
		for (int i = 0; i < m; i++)
			set.add(nextInt());
		
		String s = """";
		for (int i = 0; i < n; i++)
			if (set.contains(a[i]))
				s += "" "" + a[i];
		
		System.out.println(s.length() == 0 ? s : s.substring(1));
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class Fingerprints {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		int m = nextInt();
		int[] a = intArray(n);
		Set<Integer> set = new HashSet<Integer>();
		for (int i = 0; i < m; i++) {
			set.add(nextInt());
		}
		
		String s = """";
		for (int i = 0; i < n; i++) {
			if (set.contains(a[i])) {
				s += "" "" + a[i];
			}
		}
		
		System.out.println(s.length() == 0 ? s : s.substring(1));
	}

	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = nextInt();
		}
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				a[i][j] = nextInt();
			}
		}
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++) {
			a[i] = nextLong();
		}
		return a;
	}
}",365
"public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = sc.nextInt();
		}
		System.out.println(solve(a));

		sc.close();
	}

	static String solve(int[] a) {
		if (a.length == 1 || (a.length == 2 && a[0] == a[1])) {
			return ""-1"";
		}

		int sum = Arrays.stream(a).sum();
		for (int i = 0;; i++) {
			if (a[i] * 2 != sum) {
				return String.format(""1\n%d"", i + 1);
			}
		}
	}
}","public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int[] a = new int[n];
		for (int i = 0; i < a.length; i++) {
			a[i] = sc.nextInt();
		}
		System.out.println(solve(a));

		sc.close();
	}

	static String solve(int[] a) {
		if (a.length == 1 || (a.length == 2 && a[0] == a[1])) {
			return ""-1"";
		}

		int sum = 0;
		for (int i = 0; i < a.length; i++) {
			sum += a[i];
		}
		for (int i = 0; i < a.length; i++) {
			if (a[i] * 2 != sum) {
				return String.format(""1\n%d"", i + 1);
			}
		}
		return """";
	}
}",366
"public class Main {

    static StringBuilder data = new StringBuilder();
    final static FastReader in = new FastReader();


    public static void main(String[] args) {
        int n = in.nextInt(), m = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        int h=0,t=n-1,answ=0;
        while (h<n&&t>=0){
            if(a[h]<=m){
                answ++;
                h++;
            }else if(a[t]<=m){
                t--;
                answ++;
            }else{
                break;
            }
        }
        System.out.println(answ);
    }


    static void fileOut(String s) {
        File out = new File(""output.txt"");
        try {
            FileWriter fw = new FileWriter(out);
            fw.write(s);
            fw.flush();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        public FastReader(String path) {
            try {
                br = new BufferedReader(new
                        InputStreamReader(new FileInputStream(path)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        float nextFloat() {
            return Float.parseFloat(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }


        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}","public class Main {

    static StringBuilder data = new StringBuilder();
    final static FastReader in = new FastReader();


    public static void main(String[] args) {
        int n = in.nextInt(), m = in.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = in.nextInt();
        }
        int h=0,t=n-1,answ=0;
        while (h<n&&t>=0){
            if(a[h]<=m){
                answ++;
                h++;
            }else if(a[t]<=m){
                t--;
                answ++;
            }else{
                break;
            }
        }
        System.out.println(answ);
    }


    static void fileOut(String s) {
        File out = new File(""output.txt"");
        try {
            FileWriter fw = new FileWriter(out);
            fw.write(s);
            fw.flush();
            fw.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new
                    InputStreamReader(System.in));
        }

        public FastReader(String path) {
            try {
                br = new BufferedReader(new
                        InputStreamReader(new FileInputStream(path)));
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        float nextFloat() {
            return Float.parseFloat(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }


        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

}",367
"public class Solution{
	public static void main(String sp[]){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		String st = sc.next();
		
		char arr[] = st.toCharArray();
		
		boolean b=false;
		for(char j='a';j<='z';j++){
		for(int i=0;i<arr.length;i++){
			if(arr[i]==j){
				arr[i]='*';
				k--;
			}
			if(k==0){
				b=true;
				prin(arr);
				return;
			}
		}}

	}
	
	public static void prin(char arr[]){
		StringBuilder sb = new StringBuilder();
		for(int i=0;i<arr.length;i++){
			if(arr[i]!='*')
				sb.append(arr[i]);
		}
		if(sb.length()!=0)
			System.out.println(sb.toString());
	}
}","public class Solution{
	public static void main(String sp[]){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		String st = sc.next();
		
		char arr[] = st.toCharArray();
		
		boolean b=false;
		for(char j='a';j<='z';j++){
		for(int i=0;i<arr.length;i++){
			if(arr[i]==j){
				arr[i]='*';
				k--;
			}
			if(k==0){
				b=true;
				prin(arr);
				return;
			}
		}}

	}
	
	public static void prin(char arr[]){
		StringBuilder sb = new StringBuilder();
		for(int i=0;i<arr.length;i++){
			if(arr[i]!='*')
				sb.append(arr[i]);
		}
		if(sb.length()!=0)
			System.out.println(sb.toString());
	}
}",368
"public class loser
{
    static class InputReader {
        public BufferedReader br;
        public StringTokenizer token;
        public InputReader(InputStream stream)
        {
            br=new BufferedReader(new InputStreamReader(stream),32768);
            token=null;
        }

        public String next()
        {
            while(token==null || !token.hasMoreTokens())
            {
                try
                {
                    token=new StringTokenizer(br.readLine());
                }
                catch(IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return token.nextToken();
        }

        public int nextInt()
        {
            return Integer.parseInt(next());
        }

        public long nextLong()
        {
            return Long.parseLong(next());
        }
    }
    static class card{
        String s;
        int l;
        public card(String s,int i)
        {
            this.s=s;
            this.l=i;
        }
    }
    static class sort implements Comparator<card>
    {
        public int compare(card o1,card o2)
        {
            if(o1.l!=o2.l)
                return (o1.l-o2.l);
            else
                return o1.s.compareTo(o2.s);
        }
    }
    static void shuffle(long a[])
    {
        List<Long> l=new ArrayList<>();
        for(int i=0;i<a.length;i++)
            l.add(a[i]);
        Collections.shuffle(l);
        for(int i=0;i<a.length;i++)
            a[i]=l.get(i);
    }

    
    static class Pair
    {
        int a;int b;
        public Pair(int a,int b)
        {
            this.a =a;
            this.b =b;
        }
    }
    public  static void main(String[] args) 
    {
        InputReader sc=new InputReader(System.in);
        int n=sc.nextInt();
        HashMap<String ,Integer> m=new HashMap<>();
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t))
            m.put(t,m.get(t)+1);
            else
            m.put(t,1);
        }
        int ans=0;
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t) && m.get(t)>0)
            {
                m.put(t,m.get(t)-1);
                ans++;
            }
        }
        System.out.println(n-ans);
    }
}","public class loser
{
    static class InputReader {
        public BufferedReader br;
        public StringTokenizer token;
        public InputReader(InputStream stream)
        {
            br=new BufferedReader(new InputStreamReader(stream),32768);
            token=null;
        }

        public String next()
        {
            while(token==null || !token.hasMoreTokens())
            {
                try
                {
                    token=new StringTokenizer(br.readLine());
                }
                catch(IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return token.nextToken();
        }

        public int nextInt()
        {
            return Integer.parseInt(next());
        }

        public long nextLong()
        {
            return Long.parseLong(next());
        }
    }
    static class card{
        String s;
        int l;
        public card(String s,int i)
        {
            this.s=s;
            this.l=i;
        }
    }
    static class sort implements Comparator<card>
    {
        public int compare(card o1,card o2)
        {
            if(o1.l!=o2.l)
                return (o1.l-o2.l);
            else
                return o1.s.compareTo(o2.s);
        }
    }
    static void shuffle(long a[])
    {
        List<Long> l=new ArrayList<>();
        for(int i=0;i<a.length;i++)
            l.add(a[i]);
        Collections.shuffle(l);
        for(int i=0;i<a.length;i++)
            a[i]=l.get(i);
    }

    
    static class Pair
    {
        int a;int b;
        public Pair(int a,int b)
        {
            this.a =a;
            this.b =b;
        }
    }
    public  static void main(String[] args) 
    {
        InputReader sc=new InputReader(System.in);
        int n=sc.nextInt();
        HashMap<String ,Integer> m=new HashMap<>();
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t))
            m.put(t,m.get(t)+1);
            else
            m.put(t,1);
        }
        int ans=0;
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t) && m.get(t)>0)
            {
                m.put(t,m.get(t)-1);
                ans++;
            }
        }
        System.out.println(n-ans);
    }
}",369
"public class pr902A {
    static Scanner in = new Scanner(System.in);
    public static void main(String[] args) {
        PrintWriter out = new PrintWriter(System.out);

        int n = in.nextInt();
        int m = in.nextInt();

        out.println(solve(n, m));
        out.flush();
        out.close();
    }

    private static String solve(int n, int m) {
        int[] grid = new int[m+1];
        for (int i = 0; i < n; i++) {
            int start = in.nextInt();
            int end = in.nextInt();

            grid[start]++;
            grid[end]--;

        }
        int sum = 0;
        for(int i = 0; i < m; i++){
            sum += grid[i];
            if(sum == 0) return ""NO"";
        }

        return ""YES"";
    }
}","public class Transform {
    static Scanner in = new Scanner(System.in);
    public static void main(String[] args) {
        PrintWriter out = new PrintWriter(System.out);

        int n = in.nextInt();
        int m = in.nextInt();

        out.println(solve(n, m));
        out.flush();
        out.close();
    }

    private static String solve(int n, int m) {
        int[] grid = new int[m+1];
        for (int i = 0; i < n; i++) {
            int start = in.nextInt();
            int end = in.nextInt();

            grid[start]++;
            grid[end]--;

        }
        int sum = 0;
        for(int i = 0; i < m; i++){
            sum += grid[i];
            if(sum == 0) return ""NO"";
        }

        return ""YES"";
    }
}",370
"public class ErrorCorrectSystem
{

	public static void main(String[] args)
	{
		Scanner scan = new Scanner(System.in);
		int n = scan.nextInt();
		String a = scan.next();
		String b = scan.next();
		
		int[][] mismatch = new int[26][26];
		for(int i = 0; i < 26; i++) Arrays.fill(mismatch[i], -1);
		int[][] pair = new int[2][26];
		for(int i = 0; i < 2; i++) Arrays.fill(pair[i], -1);
		int hd = 0;
		for(int i = 0; i < n; i++) {
			if(a.charAt(i) != b.charAt(i)) {
				hd++;
				mismatch[a.charAt(i)-'a'][b.charAt(i)-'a'] = i;
				pair[0][a.charAt(i)-'a'] = i;
				pair[1][b.charAt(i)-'a'] = i;
			}
		}
		for(int i = 0; i < 26; i++) {
			for(int j = i+1; j < 26; j++) {
				if(mismatch[i][j] > -1 && mismatch[j][i] > -1) {
					System.out.println(hd-2);
					System.out.println((mismatch[i][j]+1)+"" ""+(mismatch[j][i]+1));
					return;
				}
			}
		}
		for(int i = 0; i < n; i++) {
			if(a.charAt(i) != b.charAt(i)) {
				
				if(pair[0][b.charAt(i)-'a'] > -1) {
					System.out.println(hd-1);
					System.out.println((i+1)+"" ""+(pair[0][b.charAt(i)-'a']+1));
					return;
				}
			}
		}
		
		System.out.println(hd);
		System.out.println(""-1 -1"");
	}

}","public class TransposedErrorCorrectSystem {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int n = scan.nextInt();
        String a = scan.next();
        String b = scan.next();

        int[][] mismatch = new int[26][26];
        for (int i = 0; i < 26; i++) Arrays.fill(mismatch[i], -1);
        int[][] pair = new int[2][26];
        for (int i = 0; i < 2; i++) Arrays.fill(pair[i], -1);
        int hd = 0;
        for (int i = 0; i < n; i++) {
            if (a.charAt(i) != b.charAt(i)) {
                hd++;
                mismatch[a.charAt(i) - 'a'][b.charAt(i) - 'a'] = i;
                pair[0][a.charAt(i) - 'a'] = i;
                pair[1][b.charAt(i) - 'a'] = i;
            }
        }
        for (int i = 0; i < 26; i++) {
            for (int j = i + 1; j < 26; j++) {
                if (mismatch[i][j] > -1 && mismatch[j][i] > -1) {
                    System.out.println(hd - 2);
                    System.out.println((mismatch[i][j] + 1) + "" "" + (mismatch[j][i] + 1));
                    return;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            if (a.charAt(i) != b.charAt(i)) {
                if (pair[0][b.charAt(i) - 'a'] > -1) {
                    System.out.println(hd - 1);
                    System.out.println((i + 1) + "" "" + (pair[0][b.charAt(i) - 'a'] + 1));
                    return;
                }
            }
        }

        System.out.println(hd);
        System.out.println(""-1 -1"");
    }
}",371
"public class Solution1 implements Runnable
											{
												static final long MAX = 1000000007L;
												static class InputReader
												{
													private InputStream stream;
													private byte[] buf = new byte[1024];
													private int curChar;
													private int numChars;
													private SpaceCharFilter filter;
													private BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
											 
													public InputReader(InputStream stream)
													{
														this.stream = stream;
													}
													
													public int read()
													{
														if (numChars==-1) 
															throw new InputMismatchException();
														
														if (curChar >= numChars)
														{
															curChar = 0;
															try 
															{
																numChars = stream.read(buf);
															}
															catch (IOException e)
															{
																throw new InputMismatchException();
															}
															
															if(numChars <= 0)				
																return -1;
														}
														return buf[curChar++];
													}
												 
													public String nextLine()
													{
														String str = """";
											            try
											            {
											                str = br.readLine();
											            }
											            catch (IOException e)
											            {
											                e.printStackTrace();
											            }
											            return str;
													}
													public int nextInt()
													{
														int c = read();
														
														while(isSpaceChar(c)) 
															c = read();
														
														int sgn = 1;
														
														if (c == '-') 
														{
															sgn = -1;
															c = read();
														}
														
														int res = 0;
														do 
														{
															if(c<'0'||c>'9') 
																throw new InputMismatchException();
															res *= 10;
															res += c - '0';
															c = read();
														}
														while (!isSpaceChar(c)); 
														
														return res * sgn;
													}
													
													public long nextLong() 
													{
														int c = read();
														while (isSpaceChar(c))
															c = read();
														int sgn = 1;
														if (c == '-') 
														{
															sgn = -1;
															c = read();
														}
														long res = 0;
														
														do 
														{
															if (c < '0' || c > '9')
																throw new InputMismatchException();
															res *= 10;
															res += c - '0';
															c = read();
														}
														while (!isSpaceChar(c));
															return res * sgn;
													}
													
													public double nextDouble() 
													{
														int c = read();
														while (isSpaceChar(c))
															c = read();
														int sgn = 1;
														if (c == '-') 
														{
															sgn = -1;
															c = read();
														}
														double res = 0;
														while (!isSpaceChar(c) && c != '.') 
														{
															if (c == 'e' || c == 'E')
																return res * Math.pow(10, nextInt());
															if (c < '0' || c > '9')
																throw new InputMismatchException();
															res *= 10;
															res += c - '0';
															c = read();
														}
														if (c == '.') 
														{
															c = read();
															double m = 1;
															while (!isSpaceChar(c)) 
															{
																if (c == 'e' || c == 'E')
																	return res * Math.pow(10, nextInt());
																if (c < '0' || c > '9')
																	throw new InputMismatchException();
																m /= 10;
																res += (c - '0') * m;
																c = read();
															}
														}
														return res * sgn;
													}
													
													public String readString() 
													{
														int c = read();
														while (isSpaceChar(c))
															c = read();
														StringBuilder res = new StringBuilder();
														do 
														{
															res.appendCodePoint(c);
															c = read();
														} 
														while (!isSpaceChar(c));
														
														return res.toString();
													}
												 
													public boolean isSpaceChar(int c) 
													{
														if (filter != null)
															return filter.isSpaceChar(c);
														return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
													}
												 
													public String next() 
													{
														return readString();
													}
													
													public interface SpaceCharFilter 
													{
														public boolean isSpaceChar(int ch);
													}
												}
											 	
												public static void main(String args[]) throws Exception
												{
													new Thread(null, new Solution1(),""Solution1"",1<<26).start();
												}
												long gcd(long a, long b)
											    {
											        if (a == 0)
											            return b;
											         
											        return gcd(b%a, a);
											    }
											    
												 long lcm(long a, long b)
												    {
												        return (a*b)/gcd(a, b);
												    }
												 int root(int a){
													 while(arr[a] != a){
														 arr[a] = arr[arr[a]];
														 a = arr[a];
													 }
													 return a;
												 }
												 void union(int a,int b){
													 int xroot = root(a);
													 int yroot = root(b);
													 if(arr[xroot] < arr[yroot]){
														 arr[xroot] = yroot;
													 }else{
														 arr[yroot] = xroot;
													 }
												 }
												 boolean find(int a,int b){
													 int roota = root(a);
													 int rootb = root(b);
													 if(roota == rootb){
														 return true;
													 }else{
														 return false;
													 }
												 }
												 int[] arr;
												 final int level = 20;
												 
												public void run()
												{
													InputReader sc= new InputReader(System.in);
													PrintWriter w= new PrintWriter(System.out);
													int n = sc.nextInt();
													char[] ch = new char[n];
													char[] ch2 = new char[n];
													ch = sc.next().toCharArray();
													ch2 = sc.next().toCharArray();
													HashSet<Integer> hset[] = new HashSet[26];
													for(int i = 0;i < 26;i++){
														hset[i]  =new HashSet();
													}
													int count = 0;
													for(int i = 0;i < ch.length;i++){
														if(ch[i] != ch2[i]){
															hset[ch[i]-97].add(ch2[i]-97);
															count++;
														}
													}
													boolean flag = false;
													int swap1 = -1;
													int swap2 = -1;
													int rem = -1;
													for(int i = 0;i < ch.length;i++){
														if(ch[i] != ch2[i]){
															if(hset[ch2[i]-97].size() != 0){
																swap1 = i;
																flag = true;
																if(hset[ch2[i]-97].contains(ch[i]-97)){
																	rem = i;
																	count-=2;
																	flag = false;
																	break;
																}
															}
														}
													}
													if(flag){
														count--;
														w.println(count);
														for(int i = 0;i < n;i++){
															if(i != swap1 && ch[i] == ch2[swap1] && ch[i] != ch2[i]){
																w.println((swap1+1) + "" "" + (i+1));
																w.close();
																System.exit(0);
															}
														}
													}else{
														if(rem == -1){
															w.println(count);
															w.println(""-1 -1"");
														}else{
															w.println(count);
															for(int i = 0;i < n;i++){
																if(i != rem && ch[i] == ch2[rem] && ch[rem] == ch2[i] && ch[i] != ch2[i]){
																	w.println((rem+1) + "" "" + (i+1));
																	w.close();
																	System.exit(0);
																}
															}
														}
													}
													w.close();
												}
												boolean fun(long[] prefix,long mid,long temp,long[] arr){
													if(temp >= prefix[(int)mid]){
														return true;
													}
													return false;
												}
												static class Pair implements Comparable<Pair>{
													int x;
													int y;
													
													Pair(){}	
													Pair(int x,int y){
														this.x = x;
														this.y = y;
													
														
													}
													public int compareTo(Pair p){
														
														return Long.compare(this.x,p.x);
													}
												}
								}","public class Solution1 implements Runnable {
    static final long MAX = 1000000007L;
    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;
        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        public InputReader(InputStream stream) {
            this.stream = stream;
        }
        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }
        public String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            int res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }
        public long nextLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }
        public double nextDouble() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            double res = 0;
            while (!isSpaceChar(c) && c != '.') {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            if (c == '.') {
                c = read();
                double m = 1;
                while (!isSpaceChar(c)) {
                    if (c == 'e' || c == 'E')
                        return res * Math.pow(10, nextInt());
                    if (c < '0' || c > '9')
                        throw new InputMismatchException();
                    m /= 10;
                    res += (c - '0') * m;
                    c = read();
                }
            }
            return res * sgn;
        }
        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            } while (!isSpaceChar(c));
            return res.toString();
        }
        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
        public String next() {
            return readString();
        }
        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }
    public static void main(String args[]) throws Exception {
        new Thread(null, new Solution1(), ""Solution1"", 1 << 26).start();
    }
    long gcd(long a, long b) {
        if (a == 0)
            return b;
        return gcd(b % a, a);
    }
    long lcm(long a, long b) {
        return (a * b) / gcd(a, b);
    }
    int root(int a) {
        while (arr[a] != a) {
            arr[a] = arr[arr[a]];
            a = arr[a];
        }
        return a;
    }
    void union(int a, int b) {
        int xroot = root(a);
        int yroot = root(b);
        if (arr[xroot] < arr[yroot]) {
            arr[xroot] = yroot;
        } else {
            arr[yroot] = xroot;
        }
    }
    boolean find(int a, int b) {
        int roota = root(a);
        int rootb = root(b);
        if (roota == rootb) {
            return true;
        } else {
            return false;
        }
    }
    int[] arr;
    final int level = 20;
    public void run() {
        InputReader sc = new InputReader(System.in);
        PrintWriter w = new PrintWriter(System.out);
        int n = sc.nextInt();
        char[] ch = new char[n];
        char[] ch2 = new char[n];
        ch = sc.next().toCharArray();
        ch2 = sc.next().toCharArray();
        HashSet<Integer>[] hset = new HashSet[26];
        for (int i = 0; i < 26; i++) {
            hset[i] = new HashSet();
        }
        int count = 0;
        for (int i = 0; i < ch.length; i++) {
            if (ch[i] != ch2[i]) {
                hset[ch[i] - 97].add(ch2[i] - 97);
                count++;
            }
        }
        boolean flag = false;
        int swap1 = -1;
        int swap2 = -1;
        int rem = -1;
        for (int i = 0; i < ch.length; i++) {
            if (ch[i] != ch2[i]) {
                if (hset[ch2[i] - 97].size() != 0) {
                    swap1 = i;
                    flag = true;
                    if (hset[ch2[i] - 97].contains(ch[i] - 97)) {
                        rem = i;
                        count -= 2;
                        flag = false;
                        break;
                    }
                }
            }
        }
        if (flag) {
            count--;
            w.println(count);
            for (int i = 0; i < n; i++) {
                if (i != swap1 && ch[i] == ch2[swap1] && ch[i] != ch2[i]) {
                    w.println((swap1 + 1) + "" "" + (i + 1);
                    w.close();
                    System.exit(0);
                }
            }
        } else {
            if (rem == -1) {
                w.println(count);
                w.println(""-1 -1"");
            } else {
                w.println(count);
                for (int i = 0; i < n; i++) {
                    if (i != rem && ch[i] == ch2[rem] && ch[rem] == ch2[i] && ch[i] != ch2[i]) {
                        w.println((rem + 1) + "" "" + (i + 1));
                        w.close();
                        System.exit(0);
                    }
                }
            }
        w.close();
    }
    boolean fun(long[] prefix, long mid, long temp, long[] arr) {
        if (temp >= prefix[(int) mid]) {
            return true;
        }
        return false;
    }
    static class Pair implements Comparable<Pair> {
        int x;
        int y;
        Pair() {}
        Pair(int x, int y) {
            this.x = x;
            this.y = y;
        }
        public int compareTo(Pair p) {
            return Long.compare(this.x, p.x);
        }
    }
}",372
"public class Main
{
    static class Reader 
    { 
        private InputStream mIs;private byte[] buf = new byte[1024];private int curChar,numChars;public Reader() { this(System.in); }public Reader(InputStream is) { mIs = is;} 
        public int read() {if (numChars == -1) throw new InputMismatchException();if (curChar >= numChars) {curChar = 0;try { numChars = mIs.read(buf);} catch (IOException e) { throw new InputMismatchException();}if (numChars <= 0) return -1; }return buf[curChar++];} 
        public String nextLine(){int c = read();while (isSpaceChar(c)) c = read();StringBuilder res = new StringBuilder();do {res.appendCodePoint(c);c = read();}while (!isEndOfLine(c));return res.toString() ;} 
        public String s(){int c = read();while (isSpaceChar(c)) c = read();StringBuilder res = new StringBuilder();do {res.appendCodePoint(c);c = read();}while (!isSpaceChar(c));return res.toString();} 
        public long l(){int c = read();while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') { sgn = -1 ; c = read() ; }long res = 0; do{ if (c < '0' || c > '9') throw new InputMismatchException();res *= 10 ; res += c - '0' ; c = read();}while(!isSpaceChar(c));return res * sgn;} 
        public int i(){int c = read() ;while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') { sgn = -1 ; c = read() ; }int res = 0;do{if (c < '0' || c > '9') throw new InputMismatchException();res *= 10 ; res += c - '0' ; c = read() ;}while(!isSpaceChar(c));return res * sgn;} 
        public double d() throws IOException {return Double.parseDouble(s()) ;}
        public boolean isSpaceChar(int c) { return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1; } 
        public boolean isEndOfLine(int c) { return c == '\n' || c == '\r' || c == -1; } 
    } 
    
    
    
    
    public static void main(String args[])
    {
        Reader sc=new Reader();
        PrintWriter out=new PrintWriter(System.out);
        int n=sc.i();
        String s1=sc.s();
        String s2=sc.s();
        int pos1=-1;
        int pos2=-1;
        int arr[][][]=new int[100][100][2];
        for(int i=0;i<n;i++)
        {
            if(s1.charAt(i)!=s2.charAt(i))
            {
                if(arr[s2.charAt(i)-97][s1.charAt(i)-97][0]==1)
                {
                    pos2=i;
                    pos1=arr[s2.charAt(i)-97][s1.charAt(i)-97][1];
                    break;
                }
                arr[s1.charAt(i)-97][s2.charAt(i)-97][0]=1;
                arr[s1.charAt(i)-97][s2.charAt(i)-97][1]=i;
            }
        }
        int ham=0;
        for(int i=0;i<n;i++)
        {
            if(s1.charAt(i)!=s2.charAt(i))
            ham++;
        }
        if(pos1!=-1&&pos2!=-1)
        {
            System.out.println(ham-2);
            System.out.println(pos1+1+"" ""+(pos2+1));
            System.exit(0);
        }
        
        int arr1[][]=new int[100][2];
        int arr2[][]=new int[100][2];
        for(int i=0;i<n;i++)
        {
            if(s1.charAt(i)!=s2.charAt(i))
            {
                if(arr1[s1.charAt(i)-97][0]==1)
                {
                    pos2=i;
                    pos1=arr1[s1.charAt(i)-97][1];
                    break;
                }
                if(arr2[s2.charAt(i)-97][0]==1)
                {
                    pos2=i;
                    pos1=arr2[s2.charAt(i)-97][1];
                    break;
                }
                arr1[s2.charAt(i)-97][0]=1;
                arr1[s2.charAt(i)-97][1]=i;
                arr2[s1.charAt(i)-97][0]=1;
                arr2[s1.charAt(i)-97][1]=i;
            }
        }
        if(pos1!=-1&&pos2!=-1)
        {
            System.out.println(ham-1);
            System.out.println(pos1+1+"" ""+(pos2+1));
            System.exit(0);
        }
        System.out.println(ham);
        System.out.println(pos1+"" ""+pos2);
    }
}","class Main{static class Reader{private InputStream mIs;private byte[] buf=new byte[1024];private int curChar,numChars;public Reader(){this(System.in);}public Reader(InputStream is){mIs=is;}public int read(){if(numChars==-1)throw new InputMismatchException();if(curChar>=numChars){curChar=0;try{numChars=mIs.read(buf);}catch(IOException e){throw new InputMismatchException();}if(numChars<=0)return -1;}return buf[curChar++];}public String nextLine(){int c=read();while(isSpaceChar(c))c=read();StringBuilder res=new StringBuilder();do{res.appendCodePoint(c);c=read();}while(!isEndOfLine(c));return res.toString();}public String s(){int c=read();while(isSpaceChar(c))c=read();StringBuilder res=new StringBuilder();do{res.appendCodePoint(c);c=read();}while(!isSpaceChar(c));return res.toString();}public long l(){int c=read();while(isSpaceChar(c))c=read();int sgn=1;if(c=='-'){sgn=-1;c=read();}long res=0;do{if(c<'0'||c>'9')throw new InputMismatchException();res*=10;res+=c-'0';c=read();}while(!isSpaceChar(c));return res*sgn;}public int i(){int c=read();while(isSpaceChar(c))c=read();int sgn=1;if(c=='-'){sgn=-1;c=read();}int res=0;do{if(c<'0'||c>'9')throw new InputMismatchException();res*=10;res+=c-'0';c=read();}while(!isSpaceChar(c));return res*sgn;}public double d() throws IOException{return Double.parseDouble(s());}public boolean isSpaceChar(int c){return c==' '||c=='\n'||c=='\r'||c=='\t'||c==-1;}public boolean isEndOfLine(int c){return c=='\n'||c=='\r'||c==-1;}}public static void main(String args[]){Reader sc=new Reader();PrintWriter out=new PrintWriter(System.out);int n=sc.i();String s1=sc.s();String s2=sc.s();int pos1=-1;int pos2=-1;int [][][]arr=new int[100][100][2];for(int i=0;i<n;i++){if(s1.charAt(i)!=s2.charAt(i)){if(arr[s2.charAt(i)-97][s1.charAt(i)-97][0]==1){pos2=i;pos1=arr[s2.charAt(i)-97][s1.charAt(i)-97][1];break;}arr[s1.charAt(i)-97][s2.charAt(i)-97][0]=1;arr[s1.charAt(i)-97][s2.charAt(i)-97][1]=i;}}int ham=0;for(int i=0;i<n;i++){if(s1.charAt(i)!=s2.charAt(i))ham++;}if(pos1!=-1&&pos2!=-1){System.out.println(ham-2);System.out.println(pos1+1+"" ""+(pos2+1));System.exit(0);}int [][]arr1=new int[100][2];int [][]arr2=new int[100][2];for(int i=0;i<n;i++){if(s1.charAt(i)!=s2.charAt(i)){if(arr1[s1.charAt(i)-97][0]==1){pos2=i;pos1=arr1[s1.charAt(i)-97][1];break;}if(arr2[s2.charAt(i)-97][0]==1){pos2=i;pos1=arr2[s2.charAt(i)-97][1];break;}arr1[s2.charAt(i)-97][0]=1;arr1[s2.charAt(i)-97][1]=i;arr2[s1.charAt(i)-97][0]=1;arr2[s1.charAt(i)-97][1]=i;}}if(pos1!=-1&&pos2!=-1){System.out.println(ham-1);System.out.println(pos1+1+"" ""+(pos2+1));System.exit(0);}System.out.println(ham);System.out.println(pos1+"" ""+pos2);}}",373
"public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int s = sc.nextInt();
		int[] f = new int[n];
		int[] t = new int[n];
		for (int i = 0; i < n; i++) {
			f[i] = sc.nextInt();
			t[i] = sc.nextInt();
		}
		System.out.println(solve(f, t, s));

		sc.close();
	}

	static int solve(int[] f, int[] t, int s) {
		int[] maxTimes = new int[s + 1];
		for (int i = 0; i < f.length; i++) {
			maxTimes[f[i]] = Math.max(maxTimes[f[i]], t[i]);
		}

		int time = 0;
		for (int i = s; i > 0; i--) {
			time = Math.max(time, maxTimes[i]);

			time++;
		}
		return time;
	}
}","public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int s = sc.nextInt();
		int[] f = new int[n];
		int[] t = new int[n];
		for (int i = 0; i < n; i++) {
			f[i] = sc.nextInt();
			t[i] = sc.nextInt();
		}
		System.out.println(solve(f, t, s));

		sc.close();
	}

	static int solve(int[] f, int[] t, int s) {
		int[] maxTimes = new int[s + 1];
		for (int i = 0; i < f.length; i++) {
			maxTimes[f[i]] = Math.max(maxTimes[f[i]], t[i]);
		}

		int time = 0;
		for (int i = s; i > 0; i--) {
			time = Math.max(time, maxTimes[i]);

			time++;
		}
		return time;
	}
}",374
"public class Code {

   static int [] reverse(int a[]) 
    { 
        int[] b = new int[a.length]; 
       int j = 0  ;
        for (int i = a.length-1; i >= 0; i--) {
            b[i] = a[j] ; 
            j++;
        }
        return b ;
    }
    public static void main(String[] args) {
        int pas ; 
        int top ; 
        Scanner in = new Scanner(System.in) ; 
        pas= in.nextInt(); 
        top=in.nextInt() ; 
        int a [] = new int[pas] ; 
        int b [] = new int[pas] ; 
        
        for (int i = 0; i < pas; i++) {
            a[i] = in.nextInt() ; 
            b[i] = in.nextInt() ; 
           
         }
       a =  reverse(a) ;
        b = reverse(b) ;
        int ftime =0 ; 
        int t;
        int po = top ; 
        for (int i = 0; i < pas; i++) {
             ftime+=(po-a[i]) ; 
            t = Math.max(b[i]-ftime, 0) ; 
            ftime+=t ; 
            po = a[i] ; 
           
        }
        if(po!=0) ftime+=po ;
        System.out.println(ftime);
        
    }
    
}","public class Code {

   static int [] reverse(int a[]) 
    { 
        int[] b = new int[a.length]; 
       int j = 0  ;
        for (int i = a.length-1; i >= 0; i--) {
            b[i] = a[j] ; 
            j++;
        }
        return b ;
    }
    public static void main(String[] args) {
        int pas ; 
        int top ; 
        Scanner in = new Scanner(System.in) ; 
        pas= in.nextInt(); 
        top=in.nextInt() ; 
        int a [] = new int[pas] ; 
        int b [] = new int[pas] ; 
        
        for (int i = 0; i < pas; i++) {
            a[i] = in.nextInt() ; 
            b[i] = in.nextInt() ; 
           
         }
       a =  reverse(a) ;
        b = reverse(b) ;
        int ftime =0 ; 
        int t;
        int po = top ; 
        for (int i = 0; i < pas; i++) {
             ftime+=(po-a[i]) ; 
            t = Math.max(b[i]-ftime, 0) ; 
            ftime+=t ; 
            po = a[i] ; 
           
        }
        if(po!=0) ftime+=po ;
        System.out.println(ftime);
        
    }
    
}",375
"class
FindUnion 
{ 



static
int
printUnion(
int
arr1[], 
int
arr2[], 
int
m, 
int
n) 

{ 

int
i = 
0
, j = 
0
; 

while
(i < m && j < n) 

{ 

if
(arr1[i] < arr2[j]) 

System.out.print(arr1[i++]+
"" ""
); 

else
if
(arr2[j] < arr1[i]) 

System.out.print(arr2[j++]+
"" ""
); 

else

{ 

System.out.print(arr2[j++]+
"" ""
); 

i++; 

} 

} 




while
(i < m) 

System.out.print(arr1[i++]+
"" ""
); 

while
(j < n) 

System.out.print(arr2[j++]+
"" ""
); 


return
0
; 

} 


public
static
void
main(String args[]) 

{ 

int
arr1[] = {
1
, 
2
, 
4
, 
5
, 
6
}; 

int
arr2[] = {
2
, 
3
, 
5
, 
7
}; 

int
m = arr1.length; 

int
n = arr2.length; 

printUnion(arr1, arr2, m, n); 

} 
}","class FindUnion {

    static int printUnion(int arr1[], int arr2[], int m, int n) {

        int i = 0, j = 0;

        while(i < m && j < n) {

            if(arr1[i] < arr2[j]) System.out.print(arr1[i++] + "" "");

            else if(arr2[j] < arr1[i]) System.out.print(arr2[j++] + "" "");

            else {

                System.out.print(arr2[j++] + "" "");

                i++;

            }

        }

        while(i < m) System.out.print(arr1[i++] + "" "");

        while(j < n) System.out.print(arr2[j++] + "" "");

        return 0;

    }

    public static void main(String args[]) {

        int arr1[] = { 1, 2, 4, 5, 6 };

        int arr2[] = { 2, 3, 5, 7 };

        int m = arr1.length;

        int n = arr2.length;

        printUnion(arr1, arr2, m, n);

    }

}",376
"public class Main2 {

    private FastScanner scanner = new FastScanner();

    public static void main(String[] args) {
        new Main2().solve();
    }

    private void solve() {

        String a = scanner.nextLine(), b = scanner.nextLine();

        int n = b.length(), m = a.length();

        int p[] = new int[n];

        p[0] = b.charAt(0) - '0';

        for (int i = 1; i < n; i++) {
            p[i] = p[i - 1] + (b.charAt(i) - '0');
        }

        long ans = 0;
        for (int i = 0; i < m; i++) {
            int cur = a.charAt(i) - '0';

            int cnt = p[n - m + i] - (i > 0 ? p[i - 1] : 0);

            if (cur == 0) {
                ans += cnt;
            } else {
                ans += n - m + 1  - cnt;
            }
        }

        System.out.println(ans);

    }


    class Pair {
        int c, f;
    }

    class FastScanner {
        BufferedReader reader;
        StringTokenizer tokenizer;

        FastScanner() {
            reader = new BufferedReader(new InputStreamReader(System.in), 32768);
            tokenizer = null;
        }

        String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();

        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        Integer[] nextA(int n) {
            Integer a[] = new Integer[n];
            for (int i = 0; i < n; i++) {
                a[i] = scanner.nextInt();
            }
            return a;
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public String nextLine() {
            try {
                return reader.readLine();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
    }
}","public class Main2 {

    private FastScanner scanner = new FastScanner();

    public static void main(String[] args) {
        new Main2().solve();
    }

    private void solve() {

        String a = scanner.nextLine(), b = scanner.nextLine();

        int n = b.length(), m = a.length();

        int p[] = new int[n];

        p[0] = b.charAt(0) - '0';

        for (int i = 1; i < n; i++) {
            p[i] = p[i - 1] + (b.charAt(i) - '0');
        }

        long ans = 0;
        for (int i = 0; i < m; i++) {
            int cur = a.charAt(i) - '0';

            int cnt = p[n - m + i] - (i > 0 ? p[i - 1] : 0);

            if (cur == 0) {
                ans += cnt;
            } else {
                ans += n - m + 1 - cnt;
            }
        }

        System.out.println(ans);
    }

    class Pair {
        int c, f;
    }

    class FastScanner {
        BufferedReader reader;
        StringTokenizer tokenizer;

        FastScanner() {
            reader = new BufferedReader(new InputStreamReader(System.in), 32768);
            tokenizer = new StringTokenizer(reader.readLine());
        }

        String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                tokenizer = new StringTokenizer(reader.readLine());
            }
            return tokenizer.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        Integer[] nextA(int n) {
            Integer a[] = new Integer[n];
            for (int i = 0; i < n; i++) {
                a[i] = scanner.nextInt();
            }
            return a;
        }

        public long nextLong() {
            return Long.parseLong(next());
        }

        public double nextDouble() {
            return Double.parseDouble(next());
        }

        public String nextLine() {
            return reader.readLine();
        }
    }
}",377
"public class codef8 {
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int num = sc.nextInt();
		int beacon[] = new int[1000001];
		for (int i = 0; i < num; i++) {
			beacon[sc.nextInt()] = sc.nextInt();
		}
		int dp[] = new int[1000001];
		int max = 1;
		if (beacon[0] > 0) {
			dp[0] = 1;
		}
		
		for (int i = 1; i <= 1000000; i++) {
			if (beacon[i] == 0) {
				dp[i] = dp[i-1];
			} 
			else {
				int b = beacon[i];
				if (i <= b) {
					dp[i] = 1;
				}
				else {
					dp[i] = dp[i-b-1] + 1;
				}
			}
			max = Math.max(max, dp[i]);
		}		
		System.out.println(num-max);
		sc.close();
	}

}","public class TransformedCodef8 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        int[] beacon = new int[1000001];
        for (int i = 0; i < num; i++) {
            beacon[sc.nextInt()] = sc.nextInt();
        }
        int[] dp = new int[1000001];
        int max = 1;
        if (beacon[0] > 0) {
            dp[0] = 1;
        }

        for (int i = 1; i <= 1000000; i++) {
            if (beacon[i] == 0) {
                dp[i] = dp[i - 1];
            } else {
                int b = beacon[i];
                if (i <= b) {
                    dp[i] = 1;
                } else {
                    dp[i] = dp[i - b - 1] + 1;
                }
            }
            max = Math.max(max, dp[i]);
        }
        System.out.println(num - max);
        sc.close();
    }
}",378
"class
FindUnion 
{ 


static
void
UnionArray(
int
arr1[], 

int
arr2[]) 

{ 



int
m = arr1[arr1.length - 
1
]; 

int
n = arr2[arr2.length - 
1
]; 


int
ans = 
0
; 


if
(m > n) 

{ 

ans = m; 

} 

else

ans = n; 














int
newtable[] = 
new
int
[ans + 
1
]; 






System.out.print(arr1[
0
] + 
"" ""
); 






++newtable[arr1[
0
]]; 






for
(
int
i = 
1
; i < arr1.length; i++) 

{ 





if
(arr1[i] != arr1[i - 
1
]) 

{ 

System.out.print(arr1[i] + 
"" ""
); 

++newtable[arr1[i]]; 

} 

} 






for
(
int
j = 
0
; j < arr2.length; j++) 

{ 





if
(newtable[arr2[j]] == 
0
) 

{ 

System.out.print(arr2[j] + 
"" ""
); 

++newtable[arr2[j]]; 

} 

} 

} 




public
static
void
main(String args[]) 

{ 

int
arr1[] = {
1
, 
2
, 
2
, 
2
, 
3
}; 

int
arr2[] = {
2
, 
3
, 
4
, 
5
}; 


UnionArray(arr1, arr2); 

} 
}","class FindUnion {

    static void UnionArray(int[] arr1, int[] arr2) {

        int m = arr1[arr1.length - 1];
        int n = arr2[arr2.length - 1];
        int ans = 0;

        if (m > n) {
            ans = m;
        } else
            ans = n;

        int[] newtable = new int[ans + 1];

        System.out.print(arr1[0] + "" "");
        ++newtable[arr1[0]];

        for (int i = 1; i < arr1.length; i++) {

            if (arr1[i] != arr1[i - 1]) {
                System.out.print(arr1[i] + "" "");
                ++newtable[arr1[i]];
            }
        }

        for (int j = 0; j < arr2.length; j++) {

            if (newtable[arr2[j]] == 0) {
                System.out.print(arr2[j] + "" "");
                ++newtable[arr2[j]];
            }
        }
    }

    public static void main(String args[]) {

        int arr1[] = {1, 2, 2, 2, 3};
        int arr2[] = {2, 3, 4, 5};

        UnionArray(arr1, arr2);
    }
}",379
"public class round569d2a {

	public static void main(String args[]) {
		FastScanner in = new FastScanner(System.in);
		int n = in.nextInt();
		int sum = 1;
		int tracker = 4;
		while (n > 1) {
			sum += tracker;
			tracker += 4;
			n--;
		}
		System.out.println(sum);

	}

	
	
	

	static int greatestDivisor(int n) {
		int limit = (int) Math.sqrt(n);
		int max = 1;
		for (int i = 2; i <= limit; i++) {
			if (n % i == 0) {
				max = Integer.max(max, i);
				max = Integer.max(max, n / i);
			}
		}
		return max;
	}

	
	
	static boolean[] sieveOfEratosthenes(int n) {
		
		
		
		boolean prime[] = new boolean[n + 1];
		for (int i = 0; i <= n; i++)
			prime[i] = true;

		prime[0] = false;
		prime[1] = false;

		for (int p = 2; p * p <= n; p++) {
			
			if (prime[p] == true) {
				
				for (int i = p * p; i <= n; i += p)
					prime[i] = false;
			}
		}

		return prime;
	}

	
	
	private static int bin_gteq(int[] a, int key) {
		int low = 0;
		int high = a.length;
		int max_limit = high;
		while (low < high) {
			int mid = low + (high - low) / 2;
			if (a[mid] < key) {
				low = mid + 1;
			} else
				high = mid;
		}

		return high == max_limit ? -1 : high;
	}

	public static int gcd(int a, int b) {
		if (a == 0)
			return b;

		return gcd(b % a, a);
	}

	static class Tuple<X, Y> {
		public final X x;
		public final Y y;

		public Tuple(X x, Y y) {
			this.x = x;
			this.y = y;
		}

		public String toString() {
			return ""("" + x + "","" + y + "")"";
		}
	}

	static class Tuple3<X, Y, Z> {
		public final X x;
		public final Y y;
		public final Z z;

		public Tuple3(X x, Y y, Z z) {
			this.x = x;
			this.y = y;
			this.z = z;
		}

		public String toString() {
			return ""("" + x + "","" + y + "","" + z + "")"";
		}
	}

	static Tuple3<Integer, Integer, Integer> gcdExtended(int a, int b, int x, int y) {
		
		if (a == 0) {
			x = 0;
			y = 1;
			return new Tuple3(0, 1, b);
		}

		int x1 = 1, y1 = 1; 
		Tuple3<Integer, Integer, Integer> tuple = gcdExtended(b % a, a, x1, y1);
		int gcd = tuple.z;
		x1 = tuple.x;
		y1 = tuple.y;

		
		
		x = y1 - (b / a) * x1;
		y = x1;

		return new Tuple3(x, y, gcd);
	}

	
	
	
	
	static int inv(int a, int m) {
		int m0 = m, t, q;
		int x0 = 0, x1 = 1;

		if (m == 1)
			return 0;

		
		while (a > 1) {
			
			q = a / m;

			t = m;

			
			
			m = a % m;
			a = t;

			t = x0;

			x0 = x1 - q * x0;

			x1 = t;
		}

		
		if (x1 < 0)
			x1 += m0;

		return x1;
	}

	
	
	
	
	
	
	
	
	
	static int findMinX(int num[], int rem[], int k) {
		
		int prod = 1;
		for (int i = 0; i < k; i++)
			prod *= num[i];

		
		int result = 0;

		
		for (int i = 0; i < k; i++) {
			int pp = prod / num[i];
			result += rem[i] * inv(pp, num[i]) * pp;
		}

		return result % prod;
	}

	
	static class FastScanner {
		private InputStream stream;
		private byte[] buf = new byte[1024];
		private int curChar;
		private int chars;

		public FastScanner(InputStream stream) {
			this.stream = stream;
		}

		int read() {
			if (chars == -1)
				throw new InputMismatchException();
			if (curChar >= chars) {
				curChar = 0;
				try {
					chars = stream.read(buf);
				} catch (IOException e) {
					throw new InputMismatchException();
				}
				if (chars <= 0)
					return -1;
			}
			return buf[curChar++];
		}

		boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		boolean isEndline(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}

		public int nextInt() {
			return Integer.parseInt(next());
		}

		public long nextLong() {
			return Long.parseLong(next());
		}

		public double nextDouble() {
			return Double.parseDouble(next());
		}

		public String next() {
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public String nextLine() {
			int c = read();
			while (isEndline(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndline(c));
			return res.toString();
		}
	}

}",ERROR,380
"public class Main {
	
	static InputReader in = new InputReader(System.in);
	static PrintWriter out = new PrintWriter(System.out);

	static long oo = 1000000000000L;
	static int[][] memo;
	
	public static void main(String[] args) throws IOException {
 
		int[] cnt = new int[101];
		cnt[1] = 1;
		for(int i = 2; i <= 100; ++i) {
			cnt[i] = cnt[i-1] + 4 * (i - 1);
		}
		int n = in.nextInt();
		System.out.println( cnt[n] );
		
		out.close();
	}
	
	static int maxHit(ArrayList<Integer> a, int p, int i) {
		if(i == a.size())
			return 0;
		if(memo[p][i] != -1)
			return memo[p][i];
		int ret = maxHit(a, p, i + 1);
		if(p == -1 || a.get(p) < a.get(i)) {
			ret = Math.max(ret, maxHit(a, i, i + 1) );
		}
		return memo[p][i] = ret;
	}
	
	
	static long lcm(long a, long b) {
		return a * b / gcd(a, b);
	}
	
	static boolean nextPermutation(int[] a) {
		for(int i = a.length - 2; i >= 0; --i) {
			if(a[i] < a[i+1]) {
				for(int j = a.length - 1; ; --j) {
					if(a[i] < a[j]) {
						int t = a[i];
						a[i] = a[j];
						a[j] = t;
						for(i++, j = a.length - 1; i < j; ++i, --j) {
							t = a[i];
							a[i] = a[j];
							a[j] = t;
						}
						return true;
					}
				}
			}
		}
		return false;
	}
	
	
	static void shuffle(int[] a) {
		Random r = new Random();
		for(int i = a.length - 1; i > 0; --i) {
			int si = r.nextInt(i);
			int t = a[si];
			a[si] = a[i];
			a[i] = t;
		}
	}
	
	static void shuffle(long[] a) {
		Random r = new Random();
		for(int i = a.length - 1; i > 0; --i) {
			int si = r.nextInt(i);
			long t = a[si];
			a[si] = a[i];
			a[i] = t;
		}
	}
	
	static int lower_bound(int[] a, int n, int k) {
		int s = 0;
		int e = n;
		int m;
		while (e - s > 0) {
			m = (s + e) / 2;
			if (a[m] < k)
				s = m + 1;
			else
				e = m;
		}
		return e;
	}
	static int lower_bound(long[] a, int n, long k) {
		int s = 0;
		int e = n;
		int m;
		while (e - s > 0) {
			m = (s + e) / 2;
			if (a[m] < k)
				s = m + 1;
			else
				e = m;
		}
		return e;
	}
	
	static int gcd(int a, int b) {
		return b == 0 ? a : gcd(b, a % b);
	}
	static long gcd(long a, long b) {
		return b == 0 ? a : gcd(b, a % b);
	}
	
	static class Pair implements Comparable<Pair> {
		int first, second;
 
		public Pair(int first, int second) {
			super();
			this.first = first;
			this.second = second;
		}
 
		@Override
		public int compareTo(Pair o) {
			return this.first != o.first ? this.first - o.first : this.second - o.second;
		}
 
		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + first;
			result = prime * result + second;
			return result;
		}
 
		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			Pair other = (Pair) obj;
			if (first != other.first)
				return false;
			if (second != other.second)
				return false;
			return true;
		}
	}
	
	
}
 
 
 
class InputReader {
 
	private final InputStream stream;
	private final byte[] buf = new byte[8192];
	private int curChar, snumChars;
 
	public InputReader(InputStream st) {
		this.stream = st;
	}
 
	public int read() {
		if (snumChars == -1)
			throw new InputMismatchException();
		if (curChar >= snumChars) {
			curChar = 0;
			try {
				snumChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (snumChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}
 
	public int nextInt() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
 
	public long nextLong() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		long res = 0;
		do {
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}
 
	public int[] nextIntArray(int n) {
		int a[] = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = nextInt();
		}
		return a;
	}
 
	public String readString() {
		int c = read();
		while (isSpaceChar(c)) {
			c = read();
		}
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}
 
	public String nextLine() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuilder res = new StringBuilder();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isEndOfLine(c));
		return res.toString();
	}
 
	public boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}
 
	private boolean isEndOfLine(int c) {
		return c == '\n' || c == '\r' || c == -1;
	}
 
}","class Main { static InputReader in = new InputReader(System.in); static PrintWriter out = new PrintWriter(System.out); static long oo = 1000000000000L; static int[][] memo; public static void main(String[] args) throws IOException { int[] cnt = new int[101]; cnt[1] = 1; for(int i = 2; i <= 100; ++i) { cnt[i] = cnt[i - 1] + 4 * (i - 1); } int n = in.nextInt(); System.out.println(cnt[n]); out.close(); } static int maxHit(ArrayList<Integer> a, int p, int i) { if (i == a.size()) return 0; if (memo[p][i] != -1) return memo[p][i]; int ret = maxHit(a, p, i + 1); if (p == -1 || a.get(p) < a.get(i)) { ret = Math.max(ret, maxHit(a, i, i + 1)); } return memo[p][i] = ret; } static long lcm(long a, long b) { return a * b / gcd(a, b); } static boolean nextPermutation(int[] a) { for (int i = a.length - 2; i >= 0; --i) { if (a[i] < a[i + 1]) { for (int j = a.length - 1;; --j) { if (a[i] < a[j]) { int t = a[i]; a[i] = a[j]; a[j] = t; for (i++, j = a.length - 1; i < j; ++i, --j) { t = a[i]; a[i] = a[j]; a[j] = t; } return true; } } } } return false; } static void shuffle(int[] a) { Random r = new Random(); for (int i = a.length - 1; i > 0; --i) { int si = r.nextInt(i); int t = a[si]; a[si] = a[i]; a[i] = t; } } static void shuffle(long[] a) { Random r = new Random(); for (int i = a.length - 1; i > 0; --i) { int si = r.nextInt(i); long t = a[si]; a[si] = a[i]; a[i] = t; } } static int lower_bound(int[] a, int n, int k) { int s = 0; int e = n; int m; while (e - s > 0) { m = (s + e) / 2; if (a[m] < k) s = m + 1; else e = m; } return e; } static int lower_bound(long[] a, int n, long k) { int s = 0; int e = n; int m; while (e - s > 0) { m = (s + e) / 2; if (a[m] < k) s = m + 1; else e = m; } return e; } static int gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); } static long gcd(long a, long b) { return b == 0 ? a : gcd(b, a % b); } static class Pair implements Comparable<Pair> { int first, second; public Pair(int first, int second) { super(); this.first = first; this.second = second; } @Override public int compareTo(Pair o) { return this.first != o.first ? this.first - o.first : this.second - o.second; } @Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + first; result = prime * result + second; return result; } @Override public boolean equals(Object obj) { if (this == obj) return true; if (obj == null) return false; if (getClass() != obj.getClass()) return false; Pair other = (Pair) obj; if (first != other.first) return false; if (second != other.second) return false; return true; } } } class InputReader { private final InputStream stream; private final byte[] buf = new byte[8192]; private int curChar, snumChars; public InputReader(InputStream st) { this.stream = st; } public int read() { if (snumChars == -1) throw new InputMismatchException(); if (curChar >= snumChars) { curChar = 0; try { snumChars = stream.read(buf); } catch (IOException e) { throw new InputMismatchException(); } if (snumChars <= 0) return -1; } return buf[curChar++]; } public int nextInt() { int c = read(); while (isSpaceChar(c)) { c = read(); } int sgn = 1; if (c == '-') { sgn = -1; c = read(); } int res = 0; do { res *= 10; res += c - '0'; c = read(); } while (!isSpaceChar(c)); return res * sgn; } public long nextLong() { int c = read(); while (isSpaceChar(c)) { c = read(); } int sgn = 1; if (c == '-') { sgn = -1; c = read(); } long res = 0; do { res *= 10; res += c - '0'; c = read(); } while (!isSpaceChar(c)); return res * sgn; } public int[] nextIntArray(int n) { int a[] = new int[n]; for (int i = 0; i < n; i++) { a[i] = nextInt(); } return a; } public String readString() { int c = read(); while (isSpaceChar(c)) { c = read(); } StringBuilder res = new StringBuilder(); do { res.appendCodePoint(c); c = read(); } while (!isSpaceChar(c)); return res.toString(); } public String nextLine() { int c = read(); while (isSpaceChar(c)) c = read(); StringBuilder res = new StringBuilder(); do { res.appendCodePoint(c); c = read(); } while (!isEndOfLine(c)); return res.toString(); } public boolean isSpaceChar(int c) { return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1; } private boolean isEndOfLine(int c) { return c == '\n' || c == '\r' || c == -1; } }",381
"public class Test{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int num=1;
		int add;
		for(int i=1;i<n;i++){
			add=4*i;
			num+=add;
		}
		System.out.println(num);
	}
}","public class Test{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int num=1;
		int add=0;
		int i=1;
		while(i<n){
			add=4*i;
			num+=add;
			i++;
		}
		System.out.println(num);
	}
}",382
"class
GFG 
{ 


static
int
findRepeating(
int
arr[], 
int
n) 

{ 








int
res = 
0
; 

for
(
int
i = 
0
; i < n - 
1
; i++) 

res = res ^ (i + 
1
) ^ arr[i]; 

res = res ^ arr[n - 
1
]; 


return
res; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
9
, 
8
, 
2
, 
6
, 
1
, 
8
, 
5
, 
3
, 
4
, 
7
}; 

int
n = arr.length; 

System.out.println(findRepeating(arr, n)); 

} 
}","class GFG { static int findRepeating(int[] arr, int n) { int res = 0; for (int i = 0; i < n - 1; i++) res = res ^ (i + 1) ^ arr[i]; res = res ^ arr[n - 1]; return res; } public static void main(String[] args) { int arr[] = { 9, 8, 2, 6, 1, 8, 5, 3, 4, 7 }; int n = arr.length; System.out.println(findRepeating(arr, n)); } }",383
"class
MajorityElement 
{ 

private
static
void
findMajority(
int
[] arr) 

{ 

HashMap<Integer,Integer> map = 
new
HashMap<Integer, Integer>(); 


for
(
int
i = 
0
; i < arr.length; i++) { 

if
(map.containsKey(arr[i])) { 

int
count = map.get(arr[i]) +
1
; 

if
(count > arr.length /
2
) { 

System.out.println(
""Majority found :- ""
+ arr[i]); 

return
; 

} 
else

map.put(arr[i], count); 


} 

else

map.put(arr[i],
1
); 

} 

System.out.println(
"" No Majority element""
); 

} 





public
static
void
main(String[] args) 

{ 

int
a[] = 
new
int
[]{
2
,
2
,
2
,
2
,
5
,
5
,
2
,
3
,
3
}; 


findMajority(a); 

} 
}","class MajorityElement {

    private static void findMajority(int[] arr) {

        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

        for (int i = 0; i < arr.length; i++) {

            if (map.containsKey(arr[i])) {

                int count = map.get(arr[i]) + 1;

                if (count > arr.length / 2) {

                    System.out.println(""Majority found :- "" + arr[i]);
                    return;
                }
                else
                    map.put(arr[i], count);
            }
            else
                map.put(arr[i], 1);
        }

        System.out.println("" No Majority element"");
    }

    public static void main(String[] args) {

        int a[] = new int[]{2, 2, 2, 2, 5, 5, 2, 3, 3};

        findMajority(a);
    }
}",384
"class
GFG { 






static
int
maxTripletSum(
int
arr[], 
int
n) 

{ 





int
maxA = -
100000000
, maxB = -
100000000
; 

int
maxC = -
100000000
; 


for
(
int
i = 
0
; i < n; i++) { 






if
(arr[i] > maxA) 

{ 

maxC = maxB; 

maxB = maxA; 

maxA = arr[i]; 

} 






else
if
(arr[i] > maxB) 

{ 

maxC = maxB; 

maxB = arr[i]; 

} 




else
if
(arr[i] > maxC) 

maxC = arr[i]; 

} 


return
(maxA + maxB + maxC); 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = { 
1
, 
0
, 
8
, 
6
, 
4
, 
2
}; 

int
n = arr.length; 

System.out.println(maxTripletSum(arr, n)); 

} 
}","class GFG { static int maxTripletSum(int arr[], int n) { int maxA = -100000000, maxB = -100000000; int maxC = -100000000; for (int i = 0; i < n; i++) { if (arr[i] > maxA) { maxC = maxB; maxB = maxA; maxA = arr[i]; } else if (arr[i] > maxB) { maxC = maxB; maxB = arr[i]; } else if (arr[i] > maxC) maxC = arr[i]; } return (maxA + maxB + maxC); } public static void main(String args[]) { int arr[] = { 1, 0, 8, 6, 4, 2 }; int n = arr.length; System.out.println(maxTripletSum(arr, n)); } }",385
"class
LinkedList { 

Node head; 


Node left; 




class
Node { 

char
data; 

Node next; 


Node(
char
d) 

{ 

data = d; 

next = 
null
; 

} 

} 




boolean
isPalindromeUtil(Node right) 

{ 

left = head; 




if
(right == 
null
) 

return
true
; 




boolean
isp = isPalindromeUtil(right.next); 

if
(isp == 
false
) 

return
false
; 




boolean
isp1 = (right.data == (left).data); 




left = left.next; 


return
isp1; 

} 




boolean
isPalindrome(Node head) 

{ 

boolean
result = isPalindromeUtil(head); 

return
result; 

} 




public
void
push(
char
new_data) 

{ 



Node new_node = 
new
Node(new_data); 




new_node.next = head; 




head = new_node; 

} 




void
printList(Node ptr) 

{ 

while
(ptr != 
null
) { 

System.out.print(ptr.data + 
""->""
); 

ptr = ptr.next; 

} 

System.out.println(
""NULL""
); 

} 




public
static
void
main(String[] args) 

{ 



LinkedList llist = 
new
LinkedList(); 


char
str[] = { 
'a'
, 
'b'
, 
'a'
, 
'c'
, 
'a'
, 
'b'
, 
'a'
}; 

String string = 
new
String(str); 

for
(
int
i = 
0
; i < 
7
; i++) { 

llist.push(str[i]); 

llist.printList(llist.head); 

if
(llist.isPalindrome(llist.head) != 
false
) { 

System.out.println(
""Is Palindrome""
); 

System.out.println(
""""
); 

} 

else
{ 

System.out.println(
""Not Palindrome""
); 

System.out.println(
""""
); 

} 

} 

} 
}","class LinkedList {

Node head;


Node left;




class Node {

char data;

Node next;


Node(char d) {

data = d;

next = null;

}

}




boolean isPalindromeUtil(Node right) {

left = head;




if(right == null)

return true;



boolean isp = isPalindromeUtil(right.next);

if(isp == false)

return false;



boolean isp1 = (right.data == (left).data);



left = left.next;

return isp1;

}




boolean isPalindrome(Node head) {

boolean result = isPalindromeUtil(head);

return result;

}




public void push(char new_data) {



Node new_node = new Node(new_data);




new_node.next = head;




head = new_node;

}




void printList(Node ptr) {

while(ptr != null) {

System.out.print(ptr.data + ""->"");

ptr = ptr.next;

}

System.out.println(""NULL"");

}




public static void main(String[] args) {



LinkedList llist = new LinkedList();


char str[] = { 'a', 'b', 'a', 'c', 'a', 'b', 'a' };

String string = new String(str);

for(int i = 0; i < 7; i++) {

llist.push(str[i]);

llist.printList(llist.head);

if(llist.isPalindrome(llist.head) != false) {

System.out.println(""Is Palindrome"");

System.out.println("""");

}

else {

System.out.println(""Not Palindrome"");

System.out.println("""");

}

}

}
}",386
"class
GFG 
{ 


static
int
maxSum(
int
arr[], 
int
n) 
{ 

int
sum = 
0
; 

int
i; 

int
pivot = findPivot(arr, n); 






int
diff = n - 
1
- pivot; 

for
(i = 
0
; i < n; i++) 

{ 

sum= sum + ((i + diff) % n) * arr[i]; 

} 

return
sum; 
} 


static
int
findPivot(
int
arr[], 
int
n) 
{ 

int
i; 

for
(i = 
0
; i < n; i++) 

{ 

if
(arr[i] > arr[(i + 
1
) % n]) 

return
i; 

} 

return
0
; 
} 


public
static
void
main(String args[]) 
{ 



int
arr[] = {
8
, 
3
, 
1
, 
2
}; 

int
n = arr.length; 

int
max = maxSum(arr,n); 

System.out.println(max); 

} 
}","public class GFG { static int maxSum(int[] arr, int n) { int sum = 0; int i; int pivot = findPivot(arr, n); int diff = n - 1 - pivot; for (i = 0; i < n; i++) sum = sum + ((i + diff) % n) * arr[i]; return sum; } static int findPivot(int[] arr, int n) { int i; for (i = 0; i < n; i++) { if (arr[i] > arr[(i + 1) % n]) return i; } return 0; } public static void main(String args[]) { int arr[] = { 8, 3, 1, 2 }; int n = arr.length; int max = maxSum(arr, n); System.out.println(max); } }",387
"public
class
GFG { 




static
final
int
MAX_CHAR = 
26
; 


static
int
countSubstringWithEqualEnds(String s) 

{ 

int
result = 
0
; 

int
n = s.length(); 






int
[] count = 
new
int
[MAX_CHAR]; 

for
(
int
i = 
0
; i < n; i++) 

count[s.charAt(i)-
'a'
]++; 




for
(
int
i = 
0
; i < MAX_CHAR; i++) 

result += (count[i] * (count[i] + 
1
) / 
2
); 


return
result; 

} 




public
static
void
main(String args[]) 

{ 

String s = 
""abcab""
; 

System.out.println(countSubstringWithEqualEnds(s)); 

} 
}","public class GFG { static final int MAX_CHAR = 26; static int countSubstringWithEqualEnds(String s) { int result = 0; int n = s.length(); int[] count = new int[MAX_CHAR]; for (int i = 0; i < n; i++) count[s.charAt(i)-'a']++; for (int i = 0; i < MAX_CHAR; i++) result += (count[i] * (count[i] + 1) / 2); return result; } public static void main(String args[]) { String s = ""abcab""; System.out.println(countSubstringWithEqualEnds(s)); } }",388
"class
GFG { 



static
long
binomialCoeff(
int
n, 
int
k) { 

long
res = 
1
; 




if
(k > n - k) { 

k = n - k; 

} 




for
(
int
i = 
0
; i < k; ++i) { 

res *= (n - i); 

res /= (i + 
1
); 

} 


return
res; 

} 




static
long
catalan(
int
n) { 



long
c = binomialCoeff(
2
* n, n); 




return
c / (n + 
1
); 

} 



public
static
void
main(String[] args) { 

for
(
int
i = 
0
; i < 
10
; i++) { 

System.out.print(catalan(i) + 
"" ""
); 

} 


} 
}","class GFG { static long binomialCoeff(int n, int k) { long res = 1; if (k > n - k) { k = n - k; } for (int i = 0; i < k; ++i) { res *= (n - i); res /= (i + 1); } return res; } static long catalan(int n) { long c = binomialCoeff(2 * n, n); return c / (n + 1); } public static void main(String[] args) { for (int i = 0; i < 10; i++) { System.out.print(catalan(i) + "" ""); } } }",389
"class
GFG 
{ 

static
int
PermutationCoeff(
int
n, 

int
k) 

{ 

int
Fn = 
1
, Fk = 
1
; 




for
(
int
i = 
1
; i <= n; i++) 

{ 

Fn *= i; 

if
(i == n - k) 

Fk = Fn; 

} 

int
coeff = Fn / Fk; 

return
coeff; 

} 




public
static
void
main(String args[]) 

{ 

int
n = 
10
, k = 
2
; 

System.out.println(
""Value of P( ""
+ n + 
"",""
+ 

k +
"") is ""
+ 

PermutationCoeff(n, k) ); 

} 
}","class GFG { static int PermutationCoeff(int n, int k) { int Fn = 1, Fk = 1; for (int i = 1; i <= n; i++) { Fn *= i; if (i == n - k) Fk = Fn; } int coeff = Fn / Fk; return coeff; } public static void main(String args[]) { int n = 10, k = 2; System.out.println(""Value of P( "" + n + "","" + k + "") is "" + PermutationCoeff(n, k)); } }",390
"class
GFG { 





static
int
countFriendsPairings(
int
n) 

{ 

int
a = 
1
, b = 
2
, c = 
0
; 

if
(n <= 
2
) { 

return
n; 

} 

for
(
int
i = 
3
; i <= n; i++) { 

c = b + (i - 
1
) * a; 

a = b; 

b = c; 

} 

return
c; 

} 




public
static
void
main(String[] args) 

{ 

int
n = 
4
; 

System.out.println(countFriendsPairings(n)); 

} 
}","class GFG { static int countFriendsPairings(int n) { int a = 1, b = 2, c = 0; if (n <= 2) { return n; } for (int i = 3; i <= n; i++) { c = b + (i - 1) * a; a = b; b = c; } return c; } public static void main(String[] args) { int n = 4; System.out.println(countFriendsPairings(n)); } }",391
"class
GFG 
{ 







static
int
countSeq(
int
n) 
{ 

int
nCr = 
1
, res = 
1
; 




for
(
int
r = 
1
; r <= n ; r++) 

{ 





nCr = (nCr * (n + 
1
- r)) / r; 


res += nCr * nCr; 

} 


return
res; 
} 


public
static
void
main(String args[]) 
{ 

int
n = 
2
; 

System.out.print(
""Count of sequences is ""
); 

System.out.println(countSeq(n)); 
} 
}","class GFG { static int countSeq(int n) { int nCr = 1, res = 1; for (int r = 1; r <= n; r++) { nCr = (nCr * (n + 1 - r)) / r; res += nCr * nCr; } return res; } public static void main(String args[]) { int n = 2; System.out.print(""Count of sequences is ""); System.out.println(countSeq(n)); } }",392
"class
GFG { 








static
void
rearrange(
int
arr[], 
int
n) 

{ 

for
(
int
i = 
0
; i < n; i++) { 






arr[arr[i] % n] += i * n; 

} 


for
(
int
i = 
0
; i < n; i++) { 




arr[i] /= n; 

} 

} 






static
void
printArray(
int
arr[], 
int
n) 

{ 

for
(
int
i = 
0
; i < n; i++) { 

System.out.print(arr[i] + 
"" ""
); 

} 


System.out.println(); 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
2
, 
0
, 
1
, 
4
, 
5
, 
3
}; 

int
n = arr.length; 


System.out.println(
""Given array is : ""
); 

printArray(arr, n); 


rearrange(arr, n); 


System.out.println(
""Modified array is :""
); 

printArray(arr, n); 

} 
}","class GFG { static void rearrange(int arr[], int n) { for (int i = 0; i < n; i++) { arr[arr[i] % n] += i * n; } for (int i = 0; i < n; i++) { arr[i] /= n; } } static void printArray(int arr[], int n) { for (int i = 0; i < n; i++) { System.out.print(arr[i] + "" ""); } System.out.println(); } public static void main(String[] args) { int arr[] = { 2, 0, 1, 4, 5, 3 }; int n = arr.length; System.out.println(""Given array is : ""); printArray(arr, n); rearrange(arr, n); System.out.println(""Modified array is :""); printArray(arr, n); } }",393
"class
GFG 
{ 

static
void
findElements(
int
arr[], 
int
n) 
{ 

int
first = Integer.MIN_VALUE; 

int
second = Integer.MAX_VALUE; 


for
(
int
i = 
0
; i < n; i++) 

{ 







if
(arr[i] > first) 

{ 

second = first; 

first = arr[i]; 

} 




else
if
(arr[i] > second) 

second = arr[i]; 

} 


for
(
int
i = 
0
; i < n; i++) 

if
(arr[i] < second) 

System.out.print(arr[i] + 
"" ""
) ; 
} 

public
static
void
main(String args[]) 
{ 

int
arr[] = { 
2
, -
6
, 
3
, 
5
, 
1
}; 

int
n = arr.length; 

findElements(arr, n); 
} 
}","class GFG { static void findElements(int[] arr, int n) { int first = Integer.MIN_VALUE; int second = Integer.MAX_VALUE; for (int i = 0; i < n; i++) { if (arr[i] > first) { second = first; first = arr[i]; } else if (arr[i] > second) second = arr[i]; } for (int i = 0; i < n; i++) if (arr[i] < second) System.out.print(arr[i] + "" "") ; } public static void main(String args[]) { int arr[] = { 2, -6, 3, 5, 1 }; int n = arr.length; findElements(arr, n); } }",394
"class
GFG 
{ 






static
int
smallestSubWithSum(
int
arr[], 

int
n, 
int
x) 
{ 





int
curr_sum = 
0
, min_len = n + 
1
; 






int
start = 
0
, end = 
0
; 

while
(end < n) 

{ 







while
(curr_sum <= x && end < n) 

{ 







if
(curr_sum <= 
0
&& x > 
0
) 

{ 

start = end; 

curr_sum = 
0
; 

} 


curr_sum += arr[end++]; 

} 






while
(curr_sum > x && start < n) 

{ 





if
(end - start < min_len) 

min_len = end - start; 




curr_sum -= arr[start++]; 

} 

} 

return
min_len; 
} 



public
static
void
main (String[] args) 
{ 

int
arr1[] = {- 
8
, 
1
, 
4
, 
2
, -
6
}; 

int
x = 
6
; 

int
n1 = arr1.length; 

int
res1 = smallestSubWithSum(arr1, 

n1, x); 

if
(res1 == n1 + 
1
) 

System.out.println(
""Not possible""
); 

else

System.out.println (res1); 
} 
}","class GFG {

 public static int smallestSubWithSum(int arr[], int n, int x) {

 int curr_sum = 0, min_len = n + 1;

 int start = 0, end = 0;

 while (end < n) {

 while (curr_sum <= x && end < n) {

 if (curr_sum <= 0 && x > 0) {

 start = end;

 curr_sum = 0;

 }

 curr_sum += arr[end++];

 }

 while (curr_sum > x && start < n) {

 if (end - start < min_len) {

 min_len = end - start;

 }

 curr_sum -= arr[start++];

 }

 }

 return min_len;
 }

 public static void main(String[] args) {

 int arr1[] = {- 8, 1, 4, 2, -6};

 int x = 6;

 int n1 = arr1.length;

 int res1 = smallestSubWithSum(arr1, n1, x);

 if (res1 == n1 + 1) {

 System.out.println(""Not possible"");

 } else {

 System.out.println(res1);

 }
 }

}",395
"class
FindIntersection 
{ 



static
void
printIntersection(
int
arr1[], 
int
arr2[], 
int
m, 
int
n) 

{ 

int
i = 
0
, j = 
0
; 

while
(i < m && j < n) 

{ 

if
(arr1[i] < arr2[j]) 

i++; 

else
if
(arr2[j] < arr1[i]) 

j++; 

else

{ 

System.out.print(arr2[j++]+
"" ""
); 

i++; 

} 

} 

} 


public
static
void
main(String args[]) 

{ 

int
arr1[] = {
1
, 
2
, 
4
, 
5
, 
6
}; 

int
arr2[] = {
2
, 
3
, 
5
, 
7
}; 

int
m = arr1.length; 

int
n = arr2.length; 

printIntersection(arr1, arr2, m, n); 

} 
}","class FindIntersection { static void printIntersection(int arr1[], int arr2[], int m, int n) { int i = 0, j = 0; while (i < m && j < n) { if (arr1[i] < arr2[j]) i++; else if (arr2[j] < arr1[i]) j++; else { System.out.print(arr2[j++] + "" ""); i++; } } } public static void main(String args[]) { int arr1[] = {1, 2, 4, 5, 6}; int arr2[] = {2, 3, 5, 7}; int m = arr1.length; int n = arr2.length; printIntersection(arr1, arr2, m, n); } }",396
"class
RotateArray { 



void
leftRotate(
int
arr[], 
int
d, 
int
n) 

{ 

for
(
int
i = 
0
; i < d; i++) 

leftRotatebyOne(arr, n); 

} 


void
leftRotatebyOne(
int
arr[], 
int
n) 

{ 

int
i, temp; 

temp = arr[
0
]; 

for
(i = 
0
; i < n - 
1
; i++) 

arr[i] = arr[i + 
1
]; 

arr[i] = temp; 

} 




void
printArray(
int
arr[], 
int
n) 

{ 

for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 




public
static
void
main(String[] args) 

{ 

RotateArray rotate = 
new
RotateArray(); 

int
arr[] = { 
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
}; 

rotate.leftRotate(arr, 
2
, 
7
); 

rotate.printArray(arr, 
7
); 

} 
}","class RotateArray {

    void leftRotate(int arr[], int d, int n) {
        for (int i = 0; i < d; i++) {
            leftRotatebyOne(arr, n);
        }
    }

    void leftRotatebyOne(int arr[], int n) {
        int i, temp;
        temp = arr[0];
        for (i = 0; i < n - 1; i++) {
            arr[i] = arr[i + 1];
        }
        arr[i] = temp;
    }

    void printArray(int arr[], int n) {
        for (int i = 0; i < n; i++) {
            System.out.print(arr[i] + "" "");
        }
    }

    public static void main(String[] args) {
        RotateArray rotate = new RotateArray();
        int arr[] = {1, 2, 3, 4, 5, 6, 7};
        rotate.leftRotate(arr, 2, 7);
        rotate.printArray(arr, 7);
    }
}",397
"class
CountTriangles 
{ 





static
int
findNumberOfTriangles(
int
arr[]) 

{ 

int
n = arr.length; 



Arrays.sort(arr); 




int
count = 
0
; 






for
(
int
i = 
0
; i < n-
2
; ++i) 

{ 



int
k = i + 
2
; 




for
(
int
j = i+
1
; j < n; ++j) 

{ 



while
(k < n && arr[i] + arr[j] > arr[k]) 

++k; 




if
(k>j) 

count += k - j - 
1
; 

} 

} 

return
count; 

} 


public
static
void
main (String[] args) 

{ 

int
arr[] = {
10
, 
21
, 
22
, 
100
, 
101
, 
200
, 
300
}; 

System.out.println(
""Total number of triangles is ""
+ 

findNumberOfTriangles(arr)); 

} 
}","class CountTriangles { static int findNumberOfTriangles(int arr[]) { int n = arr.length; Arrays.sort(arr); int count = 0; for (int i = 0; i < n-2; ++i) { int k = i + 2; for (int j = i+1; j < n; ++j) { while (k < n && arr[i] + arr[j] > arr[k]) ++k; if (k>j) count += k - j - 1; } } return count; } public static void main (String[] args) { int arr[] = {10, 21, 22, 100, 101, 200, 300}; System.out.println(""Total number of triangles is ""+ findNumberOfTriangles(arr)); } }",398
"class
GFG { 


static
int
countPairsWithDiffK(
int
arr[], 

int
n, 
int
k) 

{ 

int
count = 
0
; 




for
(
int
i = 
0
; i < n; i++) 

{ 





for
(
int
j = i + 
1
; j < n; j++) 

if
(arr[i] - arr[j] == k || 

arr[j] - arr[i] == k) 

count++; 

} 

return
count; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = { 
1
, 
5
, 
3
, 
4
, 
2
}; 

int
n = arr.length; 

int
k = 
3
; 

System.out.println(
""Count of pairs with given diff is ""

+ countPairsWithDiffK(arr, n, k)); 

} 
}","class GFG { static int countPairsWithDiffK(int arr[], int n, int k) { int count = 0; for (int i = 0; i < n; i++) { for (int j = i + 1; j < n; j++) if (arr[i] - arr[j] == k || arr[j] - arr[i] == k) count++; } return count; } public static void main(String args[]) { int arr[] = { 1, 5, 3, 4, 2 }; int n = arr.length; int k = 3; System.out.println(""Count of pairs with given diff is "" + countPairsWithDiffK(arr, n, k)); } }",399
"class
Test 
{ 

static
int
arr1[] = 
new
int
[]{
1
, 
5
, 
9
, 
10
, 
15
, 
20
}; 

static
int
arr2[] = 
new
int
[]{
2
, 
3
, 
8
, 
13
}; 


static
void
merge(
int
m, 
int
n) 

{ 





for
(
int
i=n-
1
; i>=
0
; i--) 

{ 



int
j, last = arr1[m-
1
]; 

for
(j=m-
2
; j >= 
0
&& arr1[j] > arr2[i]; j--) 

arr1[j+
1
] = arr1[j]; 




if
(j != m-
2
|| last > arr2[i]) 

{ 

arr1[j+
1
] = arr2[i]; 

arr2[i] = last; 

} 

} 

} 




public
static
void
main(String[] args) 

{ 

merge(arr1.length,arr2.length); 

System.out.print(
""After Merging nFirst Array: ""
); 

System.out.println(Arrays.toString(arr1)); 

System.out.print(
""Second Array: ""
); 

System.out.println(Arrays.toString(arr2)); 

} 
}","class Test { static int arr1[] = new int[]{1, 5, 9, 10, 15, 20}; static int arr2[] = new int[]{2, 3, 8, 13}; static void merge(int m, int n) { for (int i = n - 1; i >= 0; i--) { int j, last = arr1[m - 1]; for (j = m - 2; j >= 0 && arr1[j] > arr2[i]; j--) arr1[j + 1] = arr1[j]; if (j != m - 2 || last > arr2[i]) { arr1[j + 1] = arr2[i]; arr2[i] = last; } } } public static void main(String[] args) { merge(arr1.length, arr2.length); System.out.print(""After Merging First Array: ""); System.out.println(Arrays.toString(arr1)); System.out.print(""Second Array: ""); System.out.println(Arrays.toString(arr2)); } }",400
"class
GFG { 






static
boolean
isPresent(
int
B[], 

int
m, 

int
x) 

{ 

for
(
int
i = 
0
; i < m; i++) 

if
(B[i] == x) 

return
true
; 


return
false
; 

} 














static
int
findMaxSubarraySumUtil(
int
A[], 
int
B[], 

int
n, 
int
m) 

{ 




int
max_so_far = -
2147483648
, curr_max = 
0
; 


for
(
int
i = 
0
; i < n; i++) { 








if
(isPresent(B, m, A[i])) { 

curr_max = 
0
; 

continue
; 

} 




curr_max = Math.max(A[i], curr_max + A[i]); 

max_so_far = Math.max(max_so_far, curr_max); 

} 

return
max_so_far; 

} 




static
void
findMaxSubarraySum(
int
A[], 
int
B[], 

int
n, 
int
m) 

{ 

int
maxSubarraySum = findMaxSubarraySumUtil(A, B, 

n, m); 








if
(maxSubarraySum == -
2147483648
) { 

System.out.println(
""Maximum Subarray Sum""

+ 
"" ""
+ 
""can't be found""
); 


} 

else
{ 

System.out.println(
""The Maximum Subarray Sum = ""

+ maxSubarraySum); 

} 

} 




public
static
void
main(String[] args) 

{ 


int
A[] = { 
3
, 
4
, 
5
, -
4
, 
6
}; 

int
B[] = { 
1
, 
8
, 
5
}; 


int
n = A.length; 

int
m = B.length; 




findMaxSubarraySum(A, B, n, m); 

} 
}","public class GFG { static boolean isPresent(int B[], int m, int x) { for (int i = 0; i < m; i++) if (B[i] == x) return true; return false; } static int findMaxSubarraySumUtil(int A[], int B[], int n, int m) { int max_so_far = -2147483648, curr_max = 0; for (int i = 0; i < n; i++) { if (isPresent(B, m, A[i])) { curr_max = 0; continue; } curr_max = Math.max(A[i], curr_max + A[i]); max_so_far = Math.max(max_so_far, curr_max); } return max_so_far; } static void findMaxSubarraySum(int A[], int B[], int n, int m) { int maxSubarraySum = findMaxSubarraySumUtil(A, B, n, m); if (maxSubarraySum == -2147483648) { System.out.println(""Maximum Subarray Sum"" + "" "" + ""can't be found""); } else { System.out.println(""The Maximum Subarray Sum = "" + maxSubarraySum); } } public static void main(String[] args) { int A[] = { 3, 4, 5, -4, 6 }; int B[] = { 1, 8, 5 }; int n = A.length; int m = B.length; findMaxSubarraySum(A, B, n, m); } }",401
"class
GFG { 






static
int
findMaxSum(
int
[]arr, 
int
n) 

{ 

int
res = Integer.MIN_VALUE; 


for
(
int
i = 
0
; i < n; i++) 

{ 

int
prefix_sum = arr[i]; 


for
(
int
j = 
0
; j < i; j++) 

prefix_sum += arr[j]; 


int
suffix_sum = arr[i]; 


for
(
int
j = n - 
1
; j > i; j--) 

suffix_sum += arr[j]; 


if
(prefix_sum == suffix_sum) 

res = Math.max(res, prefix_sum); 

} 


return
res; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {-
2
, 
5
, 
3
, 
1
, 
2
, 
6
, -
4
, 
2
}; 

int
n = arr.length; 

System.out.println(findMaxSum(arr, n)); 

} 
}","class GFG {static int findMaxSum(int[] arr, int n) {int res = Integer.MIN_VALUE;for (int i = 0; i < n; i++) {int prefix_sum = arr[i];for (int j = 0; j < i; j++) prefix_sum += arr[j];int suffix_sum = arr[i];for (int j = n - 1; j > i; j--) suffix_sum += arr[j];if (prefix_sum == suffix_sum) res = Math.max(res, prefix_sum);}return res;}public static void main(String[] args) {int arr[] = {-2, 5, 3, 1, 2, 6, -4, 2};int n = arr.length;System.out.println(findMaxSum(arr, n));}}",402
"class
EquilibriumIndex { 

int
equilibrium(
int
arr[], 
int
n) 

{ 

int
i, j; 

int
leftsum, rightsum; 




for
(i = 
0
; i < n; ++i) { 




leftsum = 
0
; 

for
(j = 
0
; j < i; j++) 

leftsum += arr[j]; 




rightsum = 
0
; 

for
(j = i + 
1
; j < n; j++) 

rightsum += arr[j]; 




if
(leftsum == rightsum) 

return
i; 

} 




return
-
1
; 

} 



public
static
void
main(String[] args) 

{ 

EquilibriumIndex equi = 
new
EquilibriumIndex(); 

int
arr[] = { -
7
, 
1
, 
5
, 
2
, -
4
, 
3
, 
0
}; 

int
arr_size = arr.length; 

System.out.println(equi.equilibrium(arr, arr_size)); 

} 
}","class EquilibriumIndex {

    int equilibrium(int arr[], int n) {
        int i, j;
        int leftsum, rightsum;

        for (i = 0; i < n; ++i) {
            leftsum = 0;
            for (j = 0; j < i; j++)
                leftsum += arr[j];

            rightsum = 0;
            for (j = i + 1; j < n; j++)
                rightsum += arr[j];

            if (leftsum == rightsum)
                return i;
        }

        return -1;
    }

    public static void main(String[] args) {
        EquilibriumIndex equi = new EquilibriumIndex();
        int arr[] = { -7, 1, 5, 2, -4, 3, 0 };
        int arr_size = arr.length;
        System.out.println(equi.equilibrium(arr, arr_size));
    }
}",403
"class
LeadersInArray 
{ 



void
printLeaders(
int
arr[], 
int
size) 

{ 

for
(
int
i = 
0
; i < size; i++) 

{ 

int
j; 

for
(j = i + 
1
; j < size; j++) 

{ 

if
(arr[i] <= arr[j]) 

break
; 

} 

if
(j == size) 


System.out.print(arr[i] + 
"" ""
); 

} 

} 




public
static
void
main(String[] args) 

{ 

LeadersInArray lead = 
new
LeadersInArray(); 

int
arr[] = 
new
int
[]{
16
, 
17
, 
4
, 
3
, 
5
, 
2
}; 

int
n = arr.length; 

lead.printLeaders(arr, n); 

} 
}","class LeadersInArray {

void printLeaders(int arr[], int size) {
for (int i = 0; i < size; i++) {
int j;
for (j = i + 1; j < size; j++) {
if (arr[i] <= arr[j])
break;
}
if (j == size)
System.out.print(arr[i] + "" "");
}
}

public static void main(String[] args) {
LeadersInArray lead = new LeadersInArray();
int arr[] = new int[]{16, 17, 4, 3, 5, 2};
int n = arr.length;
lead.printLeaders(arr, n);
}
}",404
"class
GFG { 



static
void
findMajority(
int
arr[], 
int
n) 
{ 

int
maxCount = 
0
; 

int
index = -
1
; 


for
(
int
i = 
0
; i < n; i++) 

{ 

int
count = 
0
; 

for
(
int
j = 
0
; j < n; j++) 

{ 

if
(arr[i] == arr[j]) 

count++; 

} 






if
(count > maxCount) 

{ 

maxCount = count; 

index = i; 

} 

} 






if
(maxCount > n/
2
) 

System.out.println (arr[index]); 


else

System.out.println (
""No Majority Element""
); 
} 



public
static
void
main (String[] args) { 


int
arr[] = {
1
, 
1
, 
2
, 
1
, 
3
, 
5
, 
1
}; 

int
n = arr.length; 




findMajority(arr, n); 

} 

}","class GFG { static void findMajority(int arr[], int n) { int maxCount = 0; int index = -1; for (int i = 0; i < n; i++) { int count = 0; for (int j = 0; j < n; j++) { if (arr[i] == arr[j]) count++; } if (count > maxCount) { maxCount = count; index = i; } } if (maxCount > n/2) System.out.println (arr[index]); else System.out.println (""No Majority Element""); } public static void main(String[] args) { int arr[] = {1, 1, 2, 1, 3, 5, 1}; int n = arr.length; findMajority(arr, n); } }",405
"class
SubarraySum 
{ 



int
subArraySum(
int
arr[], 
int
n, 
int
sum) 

{ 

int
curr_sum, i, j; 




for
(i = 
0
; i < n; i++) 

{ 

curr_sum = arr[i]; 




for
(j = i + 
1
; j <= n; j++) 

{ 

if
(curr_sum == sum) 

{ 

int
p = j - 
1
; 

System.out.println(
""Sum found between indexes ""
+ i 

+ 
"" and ""
+ p); 

return
1
; 

} 

if
(curr_sum > sum || j == n) 

break
; 

curr_sum = curr_sum + arr[j]; 

} 

} 


System.out.println(
""No subarray found""
); 

return
0
; 

} 


public
static
void
main(String[] args) 

{ 

SubarraySum arraysum = 
new
SubarraySum(); 

int
arr[] = {
15
, 
2
, 
4
, 
8
, 
9
, 
5
, 
10
, 
23
}; 

int
n = arr.length; 

int
sum = 
23
; 

arraysum.subArraySum(arr, n, sum); 

} 
}","class SubarraySum {

    int subArraySum(int arr[], int n, int sum) {
        int curr_sum, i, j;

        for (i = 0; i < n; i++) {
            curr_sum = arr[i];

            for (j = i + 1; j < n; j++) {
                if (curr_sum == sum) {
                    int p = j - 1;
                    System.out.println(""Sum found between indexes "" + i + "" and "" + p);
                    return 1;
                }

                if (curr_sum > sum || j == n) break;

                curr_sum = curr_sum + arr[j];
            }
        }

        System.out.println(""No subarray found"");
        return 0;
    }

    public static void main(String[] args) {
        SubarraySum arraysum = new SubarraySum();
        int arr[] = {15, 2, 4, 8, 9, 5, 10, 23};
        int n = arr.length;
        int sum = 23;
        arraysum.subArraySum(arr, n, sum);
    }
}",406
"class
FindTriplet { 






boolean
find3Numbers(
int
A[], 
int
arr_size, 
int
sum) 

{ 

int
l, r; 




quickSort(A, 
0
, arr_size - 
1
); 




for
(
int
i = 
0
; i < arr_size - 
2
; i++) { 








l = i + 
1
; 


r = arr_size - 
1
; 


while
(l < r) { 

if
(A[i] + A[l] + A[r] == sum) { 

System.out.print(
""Triplet is ""
+ A[i] + 
"", ""
+ A[l] + 
"", ""
+ A[r]); 

return
true
; 

} 

else
if
(A[i] + A[l] + A[r] < sum) 

l++; 


else


r--; 

} 

} 




return
false
; 

} 


int
partition(
int
A[], 
int
si, 
int
ei) 

{ 

int
x = A[ei]; 

int
i = (si - 
1
); 

int
j; 


for
(j = si; j <= ei - 
1
; j++) { 

if
(A[j] <= x) { 

i++; 

int
temp = A[i]; 

A[i] = A[j]; 

A[j] = temp; 

} 

} 

int
temp = A[i + 
1
]; 

A[i + 
1
] = A[ei]; 

A[ei] = temp; 

return
(i + 
1
); 

} 




void
quickSort(
int
A[], 
int
si, 
int
ei) 

{ 

int
pi; 




if
(si < ei) { 

pi = partition(A, si, ei); 

quickSort(A, si, pi - 
1
); 

quickSort(A, pi + 
1
, ei); 

} 

} 




public
static
void
main(String[] args) 

{ 

FindTriplet triplet = 
new
FindTriplet(); 

int
A[] = { 
1
, 
4
, 
45
, 
6
, 
10
, 
8
}; 

int
sum = 
22
; 

int
arr_size = A.length; 


triplet.find3Numbers(A, arr_size, sum); 

} 
}","class FindTriplet { boolean find3Numbers(int A[], int arr_size, int sum) { int l, r; quickSort(A, 0, arr_size - 1); for (int i = 0; i < arr_size - 2; i++) { l = i + 1; r = arr_size - 1; while (l < r) { if (A[i] + A[l] + A[r] == sum) { System.out.print(""Triplet is "" + A[i] + "", "" + A[l] + "", "" + A[r]); return true; } else if (A[i] + A[l] + A[r] < sum) l++; else r--; } } return false; } int partition(int A[], int si, int ei) { int x = A[ei]; int i = (si - 1); int j; for (j = si; j <= ei - 1; j++) { if (A[j] <= x) { i++; int temp = A[i]; A[i] = A[j]; A[j] = temp; } } int temp = A[i + 1]; A[i + 1] = A[ei]; A[ei] = temp; return (i + 1); } void quickSort(int A[], int si, int ei) { int pi; if (si < ei) { pi = partition(A, si, ei); quickSort(A, si, pi - 1); quickSort(A, pi + 1, ei); } } public static void main(String[] args) { FindTriplet triplet = new FindTriplet(); int A[] = { 1, 4, 45, 6, 10, 8 }; int sum = 22; int arr_size = A.length; triplet.find3Numbers(A, arr_size, sum); } }",407
"class
GFG 
{ 




static
void
findTriplets(
int
arr[], 
int
n) 

{ 

boolean
found = 
false
; 


for
(
int
i = 
0
; i < n - 
1
; i++) 

{ 





HashSet<Integer> s = 
new
HashSet<Integer>(); 

for
(
int
j = i + 
1
; j < n; j++) 

{ 

int
x = -(arr[i] + arr[j]); 

if
(s.contains(x)) 

{ 

System.out.printf(
""%d %d %d\n""
, x, arr[i], arr[j]); 

found = 
true
; 

} 

else

{ 

s.add(arr[j]); 

} 

} 

} 


if
(found == 
false
) 

{ 

System.out.printf(
"" No Triplet Found\n""
); 

} 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
0
, -
1
, 
2
, -
3
, 
1
}; 

int
n = arr.length; 

findTriplets(arr, n); 

} 
}","class GFG { static void findTriplets(int[] arr, int n) { boolean found = false; for (int i = 0; i < n; i++) { HashSet<Integer> s = new HashSet<Integer>(); for (int j = i; j < n; j++) { int x = -(arr[i] + arr[j]); if (s.contains(x)) { System.out.printf(""%d %d %d\n"", x, arr[i], arr[j]); found = true; } else { s.add(arr[j]); } } } if (found == false) { System.out.printf("" No Triplet Found\n""); } } public static void main(String[] args) { int[] arr = {0, -1, 2, -3, 1}; int n = arr.length; findTriplets(arr, n); } }",408
"class
GFG { 



static
void
spiralPrint(
int
m, 
int
n, 
int
a[][]) 

{ 

int
i, k = 
0
, l = 
0
; 




while
(k < m && l < n) { 



for
(i = l; i < n; ++i) { 

System.out.print(a[k][i] + 
"" ""
); 

} 

k++; 




for
(i = k; i < m; ++i) { 

System.out.print(a[i][n - 
1
] + 
"" ""
); 

} 

n--; 




if
(k < m) { 

for
(i = n - 
1
; i >= l; --i) { 

System.out.print(a[m - 
1
][i] + 
"" ""
); 

} 

m--; 

} 




if
(l < n) { 

for
(i = m - 
1
; i >= k; --i) { 

System.out.print(a[i][l] + 
"" ""
); 

} 

l++; 

} 

} 

} 




public
static
void
main(String[] args) 

{ 

int
R = 
3
; 

int
C = 
6
; 

int
a[][] = { { 
1
, 
2
, 
3
, 
4
, 
5
, 
6
}, 

{ 
7
, 
8
, 
9
, 
10
, 
11
, 
12
}, 

{ 
13
, 
14
, 
15
, 
16
, 
17
, 
18
} }; 

spiralPrint(R, C, a); 

} 
}","class GFG { static void spiralPrint(int m, int n, int[][] a) { int i, k = 0, l = 0; while (k < m && l < n) { for (i = l; i < n; ++i) { System.out.print(a[k][i] + "" ""); } k++; for (i = k; i < m; ++i) { System.out.print(a[i][n - 1] + "" ""); } n--; if (k < m) { for (i = n - 1; i >= l; --i) { System.out.print(a[m - 1][i] + "" ""); } m--; } if (l < n) { for (i = m - 1; i >= k; --i) { System.out.print(a[i][l] + "" ""); } l++; } } } public static void main(String[] args) { int R = 3; int C = 6; int a[][] = { { 1, 2, 3, 4, 5, 6}, { 7, 8, 9, 10, 11, 12}, { 13, 14, 15, 16, 17, 18} }; spiralPrint(R, C, a); } }",409
"class
GFG 
{ 

static
int
R = 
4
; 

static
int
C = 
4
; 






static
void
counterClockspiralPrint(
int
m, 

int
n, 

int
arr[][]) 

{ 

int
i, k = 
0
, l = 
0
; 







int
cnt = 
0
; 






int
total = m * n; 


while
(k < m && l < n) 

{ 

if
(cnt == total) 

break
; 






for
(i = k; i < m; ++i) 

{ 

System.out.print(arr[i][l] + 
"" ""
); 

cnt++; 

} 

l++; 


if
(cnt == total) 

break
; 






for
(i = l; i < n; ++i) 

{ 

System.out.print(arr[m - 
1
][i] + 
"" ""
); 

cnt++; 

} 

m--; 


if
(cnt == total) 

break
; 






if
(k < m) 

{ 

for
(i = m - 
1
; i >= k; --i) 

{ 

System.out.print(arr[i][n - 
1
] + 
"" ""
); 

cnt++; 

} 

n--; 

} 


if
(cnt == total) 

break
; 






if
(l < n) 

{ 

for
(i = n - 
1
; i >= l; --i) 

{ 

System.out.print(arr[k][i] + 
"" ""
); 

cnt++; 

} 

k++; 

} 

} 

} 


public
static
void
main(String[] args) 
{ 

int
arr[][] = { { 
1
, 
2
, 
3
, 
4
}, 

{ 
5
, 
6
, 
7
, 
8
}, 

{ 
9
, 
10
, 
11
, 
12
}, 

{ 
13
, 
14
, 
15
, 
16
} }; 




counterClockspiralPrint(R, C, arr); 
} 
}","class GFG { static int R = 4; static int C = 4; static void counterClockspiralPrint(int m, int n, int arr[][]) { int i, k = 0, l = 0; int cnt = 0; int total = m * n; while(k < m && l < n) { if(cnt == total) break; for(i = k; i < m; ++i) { System.out.print(arr[i][l] + "" ""); cnt++; } l++; if(cnt == total) break; for(i = l; i < n; ++i) { System.out.print(arr[m - 1][i] + "" ""); cnt++; } m--; if(cnt == total) break; if(k < m) { for(i = m - 1; i >= k; --i) { System.out.print(arr[i][n - 1] + "" ""); cnt++; } n--; } if(cnt == total) break; if(l < n) { for(i = n - 1; i >= l; --i) { System.out.print(arr[k][i] + "" ""); cnt++; } k++; } } } public static void main(String[] args) { int arr[][] = { { 1, 2, 3, 4}, { 5, 6, 7, 8}, { 9, 10, 11, 12}, { 13, 14, 15, 16} }; counterClockspiralPrint(R, C, arr); } }",410
"class
GFG 
{ 

public
static
int
N = 
4
, M = 
6
; 




static
int
findMaxPath(
int
mat[][]) 

{ 



int
res = -
1
; 

for
(
int
i = 
0
; i < M; i++) 

res = max(res, mat[
0
][i]); 


for
(
int
i = 
1
; i < N; i++) 

{ 

res = -
1
; 

for
(
int
j = 
0
; j < M; j++) 

{ 



if
(j > 
0
&& j < M - 
1
) 

mat[i][j] += max(mat[i - 
1
][j], 

max(mat[i - 
1
][j - 
1
], 

mat[i - 
1
][j + 
1
])); 




else
if
(j > 
0
) 

mat[i][j] += max(mat[i - 
1
][j], 

mat[i - 
1
][j - 
1
]); 




else
if
(j < M - 
1
) 

mat[i][j] += max(mat[i - 
1
][j], 

mat[i - 
1
][j + 
1
]); 




res = max(mat[i][j], res); 

} 

} 

return
res; 

} 




public
static
void
main (String[] args) 

{ 

int
mat[][] = { { 
10
, 
10
, 
2
, 
0
, 
20
, 
4
}, 

{ 
1
, 
0
, 
0
, 
30
, 
2
, 
5
}, 

{ 
0
, 
10
, 
4
, 
0
, 
2
, 
0
}, 

{ 
1
, 
0
, 
2
, 
20
, 
0
, 
4
} 

}; 


System.out.println(findMaxPath(mat)); 

} 
}","class GFG { public static int N = 4, M = 6; static int findMaxPath(int[][] mat) { int res = -1; for (int i = 0; i < M; i++) res = Math.max(res, mat[0][i]); for (int i = 1; i < N; i++) { res = -1; for (int j = 0; j < M; j++) { if (j > 0 && j < M - 1) mat[i][j] += Math.max(mat[i - 1][j], Math.max(mat[i - 1][j - 1], mat[i - 1][j + 1])); else if (j > 0) mat[i][j] += Math.max(mat[i - 1][j], mat[i - 1][j - 1]); else if (j < M - 1) mat[i][j] += Math.max(mat[i - 1][j], mat[i - 1][j + 1]); res = Math.max(mat[i][j], res); } } return res; } public static void main(String[] args) { int mat[][] = { { 10, 10, 2, 0, 20, 4}, { 1, 0, 0, 30, 2, 5}, { 0, 10, 4, 0, 2, 0}, { 1, 0, 2, 20, 0, 4} }; System.out.println(findMaxPath(mat)); } }",411
"class
LinkedList { 


static
Node head; 


static
class
Node { 


int
data; 

Node next; 


Node(
int
d) { 

data = d; 

next = 
null
; 

} 

} 




void
remove_duplicates() { 

Node ptr1 = 
null
, ptr2 = 
null
, dup = 
null
; 

ptr1 = head; 




while
(ptr1 != 
null
&& ptr1.next != 
null
) { 

ptr2 = ptr1; 




while
(ptr2.next != 
null
) { 




if
(ptr1.data == ptr2.next.data) { 




dup = ptr2.next; 

ptr2.next = ptr2.next.next; 

System.gc(); 

} 
else

{ 

ptr2 = ptr2.next; 

} 

} 

ptr1 = ptr1.next; 

} 

} 


void
printList(Node node) { 

while
(node != 
null
) { 

System.out.print(node.data + 
"" ""
); 

node = node.next; 

} 

} 


public
static
void
main(String[] args) { 

LinkedList list = 
new
LinkedList(); 

list.head = 
new
Node(
10
); 

list.head.next = 
new
Node(
12
); 

list.head.next.next = 
new
Node(
11
); 

list.head.next.next.next = 
new
Node(
11
); 

list.head.next.next.next.next = 
new
Node(
12
); 

list.head.next.next.next.next.next = 
new
Node(
11
); 

list.head.next.next.next.next.next.next = 
new
Node(
10
); 


System.out.println(
""Linked List before removing duplicates : \n ""
); 

list.printList(head); 


list.remove_duplicates(); 

System.out.println(
""""
); 

System.out.println(
""Linked List after removing duplicates : \n ""
); 

list.printList(head); 

} 
}","class
LinkedList {

    static
    Node head;

    static
class
Node {

        int
data;
        Node next;

        Node(
int
d) {
            data = d;
            next = 
null
;
        }
    }

    void
    remove_duplicates() {
        Node ptr1 = 
null
, ptr2 = 
null
, dup = 
null
;
        ptr1 = head;

        while
        (ptr1 != 
null
&& ptr1.next != 
null
) {
            ptr2 = ptr1;

            while
            (ptr2.next != 
null
) {

                if
                (ptr1.data == ptr2.next.data) {

                    dup = ptr2.next;
                    ptr2.next = ptr2.next.next;
                    System.gc();

                } else

                {
                    ptr2 = ptr2.next;
                }
            }
            ptr1 = ptr1.next;
        }
    }

    void
    printList(Node node) {
        while
        (node != 
null
) {
            System.out.print(node.data + 
"" ""
);
            node = node.next;
        }
    }

    public
    static
    void
    main(String[] args) {
        LinkedList list = 
new
LinkedList();
        list.head = 
new
Node(
10
);
        list.head.next = 
new
Node(
12
);
        list.head.next.next = 
new
Node(
11
);
        list.head.next.next.next = 
new
Node(
11
);
        list.head.next.next.next.next = 
new
Node(
12
);
        list.head.next.next.next.next.next = 
new
Node(
11
);
        list.head.next.next.next.next.next.next = 
new
Node(
10
);

        System.out.println(
""Linked List before removing duplicates : \n ""
);
        list.printList(head);

        list.remove_duplicates();

        System.out.println(
""""
);
        System.out.println(
""Linked List after removing duplicates : \n ""
);
        list.printList(head);
    }
}",412
"public
class
GFG { 




static
class
Node 

{ 

public
int
data ; 

public
Node next; 

public
Node( 
int
data ) 

{ 

this
.data = data; 

} 

} 




static
void
getJosephusPosition(
int
m, 
int
n) 

{ 





Node head = 
new
Node(
1
); 

Node prev = head; 

for
(
int
i = 
2
; i <= n; i++) 

{ 

prev.next = 
new
Node(i); 

prev = prev.next; 

} 




prev.next = head; 




Node ptr1 = head, ptr2 = head; 


while
(ptr1.next != ptr1) 

{ 




int
count = 
1
; 

while
(count != m) 

{ 

ptr2 = ptr1; 

ptr1 = ptr1.next; 

count++; 

} 




ptr2.next = ptr1.next; 

ptr1 = ptr2.next; 

} 

System.out.println (
""Last person left standing ""
+ 

""(Josephus Position) is ""
+ ptr1.data); 

} 




public
static
void
main(String args[]) 

{ 

int
n = 
14
, m = 
2
; 

getJosephusPosition(m, n); 

} 
}","public class GFG { static class Node { public int data; public Node next; public Node(int data) { this.data = data; } } static void getJosephusPosition(int m, int n) { Node head = new Node(1); Node prev = head; for (int i = 2; i <= n; i++) { prev.next = new Node(i); prev = prev.next; } prev.next = head; Node ptr1 = head, ptr2 = head; while (ptr1.next != ptr1) { int count = 1; while (count != m) { ptr2 = ptr1; ptr1 = ptr1.next; count++; } ptr2.next = ptr1.next; ptr1 = ptr2.next; } System.out.println(""Last person left standing "" + ""(Josephus Position) is "" + ptr1.data); } public static void main(String args[]) { int n = 14, m = 2; getJosephusPosition(m, n); } }",413
"class
GFG { 


static
int
maxSum(
int
arr[], 
int
n) 
{ 

int
res = Integer.MIN_VALUE; 



for
(
int
i = 
0
; i < n; i++) 
{ 




int
curr_sum = 
0
; 










for
(
int
j = 
0
; j < n; j++) 

{ 

int
index = (i + j) % n; 

curr_sum += j * arr[index]; 

} 




res = Math.max(res, curr_sum); 
} 

return
res; 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = {
8
, 
3
, 
1
, 
2
}; 

int
n = arr.length; 

System.out.println(maxSum(arr, n)); 
} 


}","class GFG { static int maxSum(int[] arr, int n) { int res = Integer.MIN_VALUE; for (int i = 0; i < n; i++) { int curr_sum = 0; for (int j = n - i; j < n * 2 - i; j++) { int index = j % n; curr_sum += (j - i) * arr[index]; } res = Math.max(res, curr_sum); } return res; } public static void main(String args[]) { int arr[] = { 8, 3, 1, 2 }; int n = arr.length; System.out.println(maxSum(arr, n)); } }",414
"class
GFG { 



static
void
calculateSpan(
int
price[], 
int
n, 
int
S[]) 

{ 



S[
0
] = 
1
; 






for
(
int
i = 
1
; i < n; i++) { 

S[i] = 
1
; 







for
(
int
j = i - 
1
; (j >= 
0
) && (price[i] >= price[j]); j--) 

S[i]++; 

} 

} 




static
void
printArray(
int
arr[]) 

{ 

System.out.print(Arrays.toString(arr)); 

} 




public
static
void
main(String[] args) 

{ 

int
price[] = { 
10
, 
4
, 
5
, 
90
, 
120
, 
80
}; 

int
n = price.length; 

int
S[] = 
new
int
[n]; 




calculateSpan(price, n, S); 




printArray(S); 

} 
}","class GFG { static void calculateSpan(int price[], int n, int S[]) { S[0] = 1; for (int i = 1; i < n; i++) { S[i] = 1; for (int j = i - 1; (j >= 0) && (price[i] >= price[j]); j--) S[i]++; } } static void printArray(int arr[]) { System.out.print(Arrays.toString(arr)); } public static void main(String[] args) { int price[] = { 10, 4, 5, 90, 120, 80 }; int n = price.length; int S[] = new int[n]; calculateSpan(price, n, S); printArray(S); } }",415
"class
GFG 
{ 





static
Stack<Integer> sortStack(Stack<Integer> input) 

{ 

Stack<Integer> tmpStack = 

new
Stack<Integer>(); 


while
(!input.empty()) 

{ 





int
tmp = input.peek(); 

input.pop(); 








while
(!tmpStack.empty() && 

tmpStack.peek() < tmp) 

{ 







input.push(tmpStack.peek()); 

tmpStack.pop(); 

} 






tmpStack.push(tmp); 

} 


return
tmpStack; 

} 


static
void
sortArrayUsingStacks(
int
[]arr, 

int
n) 

{ 





Stack<Integer> input = 

new
Stack<Integer>(); 

for
(
int
i = 
0
; i < n; i++) 

input.push(arr[i]); 




Stack<Integer> tmpStack = 

sortStack(input); 






for
(
int
i = 
0
; i < n; i++) 

{ 

arr[i] = tmpStack.peek(); 

tmpStack.pop(); 

} 

} 




public
static
void
main(String args[]) 

{ 

int
[]arr = {
10
, 
5
, 
15
, 
45
}; 

int
n = arr.length; 


sortArrayUsingStacks(arr, n); 


for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 
}","class GFG { static Stack<Integer> sortStack(Stack<Integer> input) { Stack<Integer> tmpStack = new Stack<Integer>(); while (!input.empty()) { int tmp = input.peek(); input.pop(); while (!tmpStack.empty() && tmpStack.peek() < tmp) { input.push(tmpStack.peek()); tmpStack.pop(); } tmpStack.push(tmp); } return tmpStack; } static void sortArrayUsingStacks(int[] arr, int n) { Stack<Integer> input = new Stack<Integer>(); for (int i = 0; i < n; i++) input.push(arr[i]); Stack<Integer> tmpStack = sortStack(input); for (int i = 0; i < n; i++) { arr[i] = tmpStack.peek(); tmpStack.pop(); } } public static void main(String args[]) { int[] arr = { 10, 5, 15, 45 }; int n = arr.length; sortArrayUsingStacks(arr, n); for (int i = 0; i < n; i++) System.out.print(arr[i] + "" ""); } }",416
"class
GFG 
{ 









public
static
int
minIndex(Queue<Integer> list, 

int
sortIndex) 

{ 

int
min_index = -
1
; 

int
min_value = Integer.MAX_VALUE; 

int
s = list.size(); 

for
(
int
i = 
0
; i < s; i++) 

{ 

int
current = list.peek(); 




list.poll(); 










if
(current <= min_value && i <= sortIndex) 

{ 

min_index = i; 

min_value = current; 

} 

list.add(current); 

} 

return
min_index; 
} 






public
static
void
insertMinToRear(Queue<Integer> list, 

int
min_index) 

{ 

int
min_value = 
0
; 

int
s = list.size(); 

for
(
int
i = 
0
; i < s; i++) 

{ 

int
current = list.peek(); 

list.poll(); 

if
(i != min_index) 

list.add(current); 

else

min_value = current; 

} 

list.add(min_value); 

} 


public
static
void
sortQueue(Queue<Integer> list) 

{ 

for
(
int
i = 
1
; i <= list.size(); i++) 

{ 

int
min_index = minIndex(list,list.size() - i); 

insertMinToRear(list, min_index); 

} 

} 




public
static
void
main (String[] args) 

{ 

Queue<Integer> list = 
new
LinkedList<Integer>(); 

list.add(
30
); 

list.add(
11
); 

list.add(
15
); 

list.add(
4
); 




sortQueue(list); 




while
(list.isEmpty()== 
false
) 

{ 

System.out.print(list.peek() + 
"" ""
); 

list.poll(); 

} 

} 
}","class GFG { public static int minIndex(Queue<Integer> list, int sortIndex) { int min_index = -1; int min_value = Integer.MAX_VALUE; int s = list.size(); for (int i = 0; i < s; i++) { int current = list.peek(); list.poll(); if (current <= min_value && i <= sortIndex) { min_index = i; min_value = current; } list.add(current); } return min_index; } public static void insertMinToRear(Queue<Integer> list, int min_index) { int min_value = 0; int s = list.size(); for (int i = 0; i < s; i++) { int current = list.peek(); list.poll(); if (i != min_index) list.add(current); else min_value = current; } list.add(min_value); } public static void sortQueue(Queue<Integer> list) { for (int i = 1; i <= list.size(); i++) { int min_index = minIndex(list,list.size() - i); insertMinToRear(list, min_index); } } public static void main (String[] args) { Queue<Integer> list = new LinkedList<Integer>(); list.add(30); list.add(11); list.add(15); list.add(4); sortQueue(list); while(list.isEmpty()== false) { System.out.print(list.peek() + "" ""); list.poll(); } } }",417
"class
Node { 

int
data; 

Node left, right; 


public
Node(
int
d) 

{ 

data = d; 

left = right = 
null
; 

} 
} 

class
BinaryTree { 

Node root; 




void
printSpiral(Node node) 

{ 

int
h = height(node); 

int
i; 




boolean
ltr = 
false
; 

for
(i = 
1
; i <= h; i++) { 

printGivenLevel(node, i, ltr); 




ltr = !ltr; 

} 

} 




int
height(Node node) 

{ 

if
(node == 
null
) 

return
0
; 

else
{ 




int
lheight = height(node.left); 

int
rheight = height(node.right); 




if
(lheight > rheight) 

return
(lheight + 
1
); 

else

return
(rheight + 
1
); 

} 

} 




void
printGivenLevel(Node node, 
int
level, 
boolean
ltr) 

{ 

if
(node == 
null
) 

return
; 

if
(level == 
1
) 

System.out.print(node.data + 
"" ""
); 

else
if
(level > 
1
) { 

if
(ltr != 
false
) { 

printGivenLevel(node.left, level - 
1
, ltr); 

printGivenLevel(node.right, level - 
1
, ltr); 

} 

else
{ 

printGivenLevel(node.right, level - 
1
, ltr); 

printGivenLevel(node.left, level - 
1
, ltr); 

} 

} 

} 



public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
7
); 

tree.root.left.right = 
new
Node(
6
); 

tree.root.right.left = 
new
Node(
5
); 

tree.root.right.right = 
new
Node(
4
); 

System.out.println(
""Spiral order traversal of Binary Tree is ""
); 

tree.printSpiral(tree.root); 

} 
}","class Node { int data; Node left, right; public Node(int d) { data = d; left = right = null; } } class BinaryTree { Node root; void printSpiral(Node node) { int h = height(node); int i; boolean ltr = false; for (i = 1; i <= h; i++) { printGivenLevel(node, i, ltr); ltr = !ltr; } } int height(Node node) { if (node == null) return 0; else { int lheight = height(node.left); int rheight = height(node.right); if (lheight > rheight) return (lheight + 1); else return (rheight + 1); } } void printGivenLevel(Node node, int level, boolean ltr) { if (node == null) return; if (level == 1) System.out.print(node.data + "" ""); else if (level > 1) { if (ltr != false) { printGivenLevel(node.left, level - 1, ltr); printGivenLevel(node.right, level - 1, ltr); } else { printGivenLevel(node.right, level - 1, ltr); printGivenLevel(node.left, level - 1, ltr); } } } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(1); tree.root.left = new Node(2); tree.root.right = new Node(3); tree.root.left.left = new Node(7); tree.root.left.right = new Node(6); tree.root.right.left = new Node(5); tree.root.right.right = new Node(4); System.out.println(""Spiral order traversal of Binary Tree is ""); tree.printSpiral(tree.root); } }",418
"public
class
GFG { 



static
void
printKMax(
int
arr[], 
int
n, 
int
k) 

{ 

int
j, max; 


for
(
int
i = 
0
; i <= n - k; i++) { 


max = arr[i]; 


for
(j = 
1
; j < k; j++) { 

if
(arr[i + j] > max) 

max = arr[i + j]; 

} 

System.out.print(max + 
"" ""
); 

} 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = { 
1
, 
2
, 
3
, 
4
, 
5
, 
6
, 
7
, 
8
, 
9
, 
10
}; 

int
k = 
3
; 

printKMax(arr, arr.length, k); 

} 
}","public class GFG {

    static void printKMax(int arr[], int n, int k) {

        int j, max;

        for (int i = 0; i <= n - k; i++) {

            max = arr[i];

            for (j = 1; j < k; j++) {

                if (arr[i + j] > max)
                    max = arr[i + j];
            }

            System.out.print(max + "" "");
        }
    }

    public static void main(String args[]) {

        int arr[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        int k = 3;

        printKMax(arr, arr.length, k);
    }
}",419
"class
solution 
{ 



static
void
printFirstNegativeInteger(
int
arr[], 
int
n, 
int
k) 
{ 





boolean
flag; 




for
(
int
i = 
0
; i<(n-k+
1
); i++) 

{ 

flag = 
false
; 




for
(
int
j = 
0
; j<k; j++) 

{ 









if
(arr[i+j] < 
0
) 

{ 

System.out.print((arr[i+j])+
"" ""
); 

flag = 
true
; 

break
; 

} 

} 






if
(!flag) 

System.out.print(
""0""
+
"" ""
); 

} 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = {
12
, -
1
, -
7
, 
8
, -
15
, 
30
, 
16
, 
28
}; 

int
n = arr.length; 

int
k = 
3
; 

printFirstNegativeInteger(arr, n, k); 

} 
}","class Solution {

    static void printFirstNegativeInteger(int arr[], int n, int k) {

        boolean flag;

        for (int i = 0; i < (n - k + 1); i++) {
            flag = false;

            for (int j = 0; j < k; j++) {

                if (arr[i + j] < 0) {
                    System.out.print((arr[i + j]) + "" "");
                    flag = true;
                    break;
                }
            }

            if (!flag) {
                System.out.print(""0"" + "" "");
            }
        }
    }

    public static void main(String args[]) {
        int arr[] = {12, -1, -7, 8, -15, 30, 16, 28};
        int n = arr.length;
        int k = 3;
        printFirstNegativeInteger(arr, n, k);
    }
}",420
"class
GFG { 

static
int
maxSubarrayXOR(
int
arr[], 
int
n) 

{ 

int
ans = Integer.MIN_VALUE; 





for
(
int
i=
0
; i<n; i++) 

{ 



int
curr_xor = 
0
; 




for
(
int
j=i; j<n; j++) 

{ 

curr_xor = curr_xor ^ arr[j]; 

ans = Math.max(ans, curr_xor); 

} 

} 

return
ans; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = {
8
, 
1
, 
2
, 
12
}; 

int
n = arr.length; 

System.out.println(
""Max subarray XOR is ""
+ 

maxSubarrayXOR(arr, n)); 

} 
}","class GFG { static int maxSubarrayXOR(int arr[], int n) { int ans = Integer.MIN_VALUE; for (int i = 0; i < n; i++) { int curr_xor = 0; for (int j = i; j < n; j++) { curr_xor = curr_xor ^ arr[j]; ans = Math.max(ans, curr_xor); } } return ans; } public static void main(String args[]) { int arr[] = { 8 , 1 , 2 , 12 }; int n = arr.length; System.out.println(""Max subarray XOR is ""+ maxSubarrayXOR(arr, n)); } }",421
"class
GFG { 

public
static
void
splitArr(
int
arr[], 
int
n, 
int
k) 

{ 

for
(
int
i = 
0
; i < k; i++) { 




int
x = arr[
0
]; 

for
(
int
j = 
0
; j < n - 
1
; ++j) 

arr[j] = arr[j + 
1
]; 

arr[n - 
1
] = x; 

} 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
12
, 
10
, 
5
, 
6
, 
52
, 
36
}; 

int
n = arr.length; 

int
position = 
2
; 


splitArr(arr, 
6
, position); 


for
(
int
i = 
0
; i < n; ++i) 

System.out.print(arr[i] + 
"" ""
); 

} 
}","class GFG { public static void splitArr(int arr[], int n, int k) { for (int i = 0; i < k; i++) { int x = arr[0]; for (int j = 0; j < n - 1; ++j) arr[j] = arr[j + 1]; arr[n - 1] = x; } } public static void main(String[] args) { int arr[] = { 12, 10, 5, 6, 52, 36 }; int n = arr.length; int position = 2; splitArr(arr, 6, position); for (int i = 0; i < n; ++i) System.out.print(arr[i] + "" ""); } }",422
"public
class
CountKSubStr 
{ 





int
countkDist(String str, 
int
k) 

{ 



int
res = 
0
; 


int
n = str.length(); 




int
cnt[] = 
new
int
[
26
]; 






for
(
int
i = 
0
; i < n; i++) 

{ 

int
dist_count = 
0
; 




Arrays.fill(cnt, 
0
); 




for
(
int
j=i; j<n; j++) 

{ 





if
(cnt[str.charAt(j) - 
'a'
] == 
0
) 

dist_count++; 




cnt[str.charAt(j) - 
'a'
]++; 






if
(dist_count == k) 

res++; 

} 

} 


return
res; 

} 




public
static
void
main(String[] args) 

{ 

CountKSubStr ob = 
new
CountKSubStr(); 

String ch = 
""abcbaa""
; 

int
k = 
3
; 

System.out.println(
""Total substrings with exactly ""
+ 

k + 
"" distinct characters : ""

+ ob.countkDist(ch, k)); 

} 
}","public class CountKSubStr { 




int countkDist(String str, int k) { 

int res = 0; 
int n = str.length(); 
int cnt[] = new int[26]; 

for (int i = 0; i < n; i++) { 

int dist_count = 0; 

Arrays.fill(cnt, 0); 

for (int j=i; j<n; j++) { 

if (cnt[str.charAt(j) - 'a'] == 0) dist_count++; 

cnt[str.charAt(j) - 'a']++; 

if (dist_count == k) res++; 

} 

} 

return res; 

} 

public static void main(String[] args) { 

CountKSubStr ob = new CountKSubStr(); 
String ch = ""abcbaa""; 
int k = 3; 
System.out.println(""Total substrings with exactly ""+ k + "" distinct characters : ""+ ob.countkDist(ch, k)); 

} 
}",423
"class
GFG 
{ 

static
int
MAX_CHAR = 
26
; 



static
boolean
check(
int
freq[], 
int
k) 
{ 

for
(
int
i = 
0
; i < MAX_CHAR; i++) 

if
(freq[i] !=
0
&& freq[i] != k) 

return
false
; 

return
true
; 
} 



static
int
substrings(String s, 
int
k) 
{ 

int
res = 
0
; 





for
(
int
i = 
0
; i< s.length(); i++) 

{ 






int
freq[] = 
new
int
[MAX_CHAR]; 




for
(
int
j = i; j<s.length(); j++) 

{ 




int
index = s.charAt(j) - 
'a'
; 

freq[index]++; 








if
(freq[index] > k) 

break
; 






else
if
(freq[index] == k && 

check(freq, k) == 
true
) 

res++; 

} 

} 

return
res; 
} 


public
static
void
main(String[] args) 
{ 

String s = 
""aabbcc""
; 

int
k = 
2
; 

System.out.println(substrings(s, k)); 


s = 
""aabbc""
; 

k = 
2
; 

System.out.println(substrings(s, k)); 
} 
}","class GFG { static final int MAX_CHAR = 26; static boolean check(int[] freq, int k) { for (int i = 0; i < MAX_CHAR; i++) { if (freq[i] != 0 && freq[i] != k) return false; } return true; } static int substrings(String s, int k) { int res = 0; for (int i = 0; i < s.length(); i++) { int[] freq = new int[MAX_CHAR]; for (int j = i; j < s.length(); j++) { int index = s.charAt(j) - 'a'; freq[index]++; if (freq[index] > k) break; else if (freq[index] == k && check(freq, k)) { res++; } } } return res; } public static void main(String[] args) { String s = ""aabbcc""; int k = 2; System.out.println(substrings(s, k)); s = ""aabbc""; k = 2; System.out.println(substrings(s, k)); } }",424
"public
class
GFG { 


static
int
countNonEmptySubstr(String str) 

{ 

int
n = str.length(); 

return
n * (n + 
1
) / 
2
; 

} 




public
static
void
main(String args[]) 

{ 

String s = 
""abcde""
; 

System.out.println( 

countNonEmptySubstr(s)); 

} 
}","public class GFG {

    static int countNonEmptySubstr(String str) {
        int n = str.length();
        return n * (n + 1) / 2;
    }

    public static void main(String args[]) {
        String s = ""abcde"";
        System.out.println(countNonEmptySubstr(s));
    }
}",425
"public
class
GFG { 






static
boolean
checkEquality(String s) 

{ 

return
(s.charAt(
0
) == s.charAt(s.length() - 
1
)); 

} 


static
int
countSubstringWithEqualEnds(String s) 

{ 

int
result = 
0
; 

int
n = s.length(); 




for
(
int
i = 
0
; i < n; i++) 




for
(
int
len = 
1
; len <= n-i; len++) 






if
(checkEquality(s.substring(i, i + len))) 

result++; 


return
result; 

} 




public
static
void
main(String args[]) 

{ 

String s = 
""abcab""
; 

System.out.println(countSubstringWithEqualEnds(s)); 

} 
}","public static class GFG { static boolean checkEquality(String s) { return (s.charAt(0) == s.charAt(s.length() - 1)); } static int countSubstringWithEqualEnds(String s) { int result = 0; int n = s.length(); for (int i = 0; i < n; i++) for (int len = 1; len <= n-i; len++) if (checkEquality(s.substring(i, i + len))) result++; return result; } public static void main(String args[]) { String s = ""abcab""; System.out.println(countSubstringWithEqualEnds(s)); } }",426
"public
class
GFG { 


static
int
countSubstringWithEqualEnds(String s) 

{ 

int
result = 
0
; 

int
n = s.length(); 








for
(
int
i = 
0
; i < n; i++) 

for
(
int
j = i; j < n; j++) 

if
(s.charAt(i) == s.charAt(j)) 

result++; 


return
result; 

} 




public
static
void
main(String args[]) 

{ 

String s = 
""abcab""
; 

System.out.println(countSubstringWithEqualEnds(s)); 

} 
}","public class GFG { static int countSubstringWithEqualEnds(String s) { int result = 0; int n = s.length(); for (int i = 0; i < n; i++) for (int j = i; j < n; j++) if (s.charAt(i) == s.charAt(j)) result++; return result; } public static void main(String args[]) { String s = ""abcab""; System.out.println(countSubstringWithEqualEnds(s)); } }",427
"class
GFG { 






public
static
void
SplitAndAdd(
int
[] A,
int
length,
int
rotation){ 




int
[] tmp = 
new
int
[length*
2
]; 




System.arraycopy(A, 
0
, tmp, 
0
, length); 

System.arraycopy(A, 
0
, tmp, length, length); 

for
(
int
i=rotation;i<rotation+length;i++) 

A[i-rotation]=tmp[i]; 

} 





public
static
void
main(String[] args) 

{ 

int
arr[] = { 
12
, 
10
, 
5
, 
6
, 
52
, 
36
}; 

int
n = arr.length; 

int
position = 
2
; 


SplitAndAdd(arr, n, position); 


for
(
int
i = 
0
; i < n; ++i) 

System.out.print(arr[i] + 
"" ""
); 

} 
}","class GFG { 






public static void SplitAndAdd(int[] A, int length, int rotation) { 



int[] tmp = new int[length*2]; 

System.arraycopy(A, 0, tmp, 0, length); 

System.arraycopy(A, 0, tmp, length, length); 

for (int i=rotation; i<rotation+length; i++) 

A[i-rotation]=tmp[i]; 

} 



public static void main(String[] args) { 

int arr[] = { 12, 10, 5, 6, 52, 36}; 

int n = arr.length; 

int position = 2; 


SplitAndAdd(arr, n, position); 


for (int i = 0; i < n; ++i) 

System.out.print(arr[i] + "" ""); 

} 
}",428
"public
class
GFG { 


static
final
int
MAX_CHAR = 
26
; 








static
String getKey(String str) 

{ 

boolean
[] visited = 
new
boolean
[MAX_CHAR]; 

Arrays.fill(visited, 
false
); 






for
(
int
j = 
0
; j < str.length(); j++) 

visited[str.charAt(j) - 
'a'
] = 
true
; 

String key = 
""""
; 

for
(
int
j=
0
; j < MAX_CHAR; j++) 

if
(visited[j]) 

key = key + (
char
)(
'a'
+j); 

return
key; 

} 




static
void
wordsWithSameCharSet(String words[], 
int
n) 

{ 







HashMap<String, ArrayList<Integer>> Hash = 
new
HashMap<>(); 




for
(
int
i=
0
; i<n; i++) 

{ 

String key = getKey(words[i]); 








if
(Hash.containsKey(key)) 

{ 

ArrayList<Integer> get_al = Hash.get(key); 

get_al.add(i); 

Hash.put(key, get_al); 

} 








else

{ 

ArrayList<Integer> new_al = 
new
ArrayList<>(); 

new_al.add(i); 

Hash.put(key, new_al); 

} 

} 




for
(Entry<String, ArrayList<Integer>> it : Hash.entrySet()) 

{ 

ArrayList<Integer> get =it.getValue(); 

for
(Integer v:get) 

System.out.print( words[v] + 
"", ""
); 

System.out.println(); 

} 

} 




public
static
void
main(String args[]) 

{ 

String words[] = { 
""may""
, 
""student""
, 
""students""
, 
""dog""
, 

""studentssess""
, 
""god""
, 
""cat""
, 
""act""
, 
""tab""
, 

""bat""
, 
""flow""
, 
""wolf""
, 
""lambs""
, 
""amy""
, 
""yam""
, 

""balms""
, 
""looped""
, 
""poodle""
}; 

int
n = words.length; 

wordsWithSameCharSet(words, n); 

} 
}","public class GFG { static final int MAX_CHAR = 26; static String getKey(String str) { boolean[] visited = new boolean[MAX_CHAR]; Arrays.fill(visited, false); for (int j = 0; j < str.length(); j++) visited[str.charAt(j) - 'a'] = true; String key = """"; for (int j = 0; j < MAX_CHAR; j++) if (visited[j]) key = key + (char)('a' + j); return key; } static void wordsWithSameCharSet(String words[], int n) { HashMap<String, ArrayList<Integer>> Hash = new HashMap<>(); for (int i = 0; i < n; i++) { String key = getKey(words[i]); if (Hash.containsKey(key)) { ArrayList<Integer> get_al = Hash.get(key); get_al.add(i); Hash.put(key, get_al); } else { ArrayList<Integer> new_al = new ArrayList<>(); new_al.add(i); Hash.put(key, new_al); } } for (Entry<String, ArrayList<Integer>> it : Hash.entrySet()) { ArrayList<Integer> get = it.getValue(); for (Integer v : get) System.out.print(words[v] + "", ""); System.out.println(); } } public static void main(String args[]) { String words[] = { ""may"", ""student"", ""students"", ""dog"", ""studentssess"", ""god"", ""cat"", ""act"", ""tab"", ""bat"", ""flow"", ""wolf"", ""lambs"", ""amy"", ""yam"", ""balms"", ""looped"", ""poodle"" }; int n = words.length; wordsWithSameCharSet(words, n); } }",429
"class
CountSubString 
{ 

int
countSubStr(
char
str[],
int
n) 

{ 

int
res = 
0
; 





for
(
int
i = 
0
; i<n; i++) 

{ 

if
(str[i] == 
'1'
) 

{ 



for
(
int
j = i + 
1
; j< n; j++) 

{ 

if
(str[j] == 
'1'
) 

res++; 

} 

} 

} 

return
res; 

} 




public
static
void
main(String[] args) 

{ 

CountSubString count = 
new
CountSubString(); 

String string = 
""00100101""
; 

char
str[] = string.toCharArray(); 

int
n = str.length; 

System.out.println(count.countSubStr(str,n)); 

} 
}","class CountSubString { int countSubStr(char str[], int n) { int res = 0; for (int i = 0; i < n; i++) { if (str[i] == '1') { for (int j = i + 1; j < n; j++) { if (str[j] == '1') res++; } } } return res; } public static void main(String[] args) { CountSubString count = new CountSubString(); String string = ""00100101""; char str[] = string.toCharArray(); int n = str.length; System.out.println(count.countSubStr(str, n)); } }",430
"public
class
GFG 
{ 



static
void
printMinIndexChar(String str, String patt) 

{ 





int
minIndex = Integer.MAX_VALUE; 




int
m = str.length(); 

int
n = patt.length(); 




for
(
int
i = 
0
; i < n; i++) { 




for
(
int
j = 
0
; j < m; j++) { 








if
(patt.charAt(i)== str.charAt(j) && j < minIndex) { 

minIndex = j; 

break
; 

} 

} 

} 




if
(minIndex != Integer.MAX_VALUE) 

System.out.println(
""Minimum Index Character = ""
+ 

str.charAt(minIndex)); 




else

System.out.println(
""No character present""
); 

} 




public
static
void
main(String[] args) 

{ 

String str = 
""geeksforgeeks""
; 

String patt = 
""set""
; 

printMinIndexChar(str, patt); 

} 
}","class GFG { static void printMinIndexChar(String str, String patt) { int minIndex = Integer.MAX_VALUE; int m = str.length(); int n = patt.length(); for (int i = 0; i < n; i++) { for (int j = 0; j < m; j++) { if (patt.charAt(i) == str.charAt(j) && j < minIndex) { minIndex = j; break; } } } if (minIndex != Integer.MAX_VALUE) System.out.println(""Minimum Index Character = "" + str.charAt(minIndex)); else System.out.println(""No character present""); } public static void main(String[] args) { String str = ""geeksforgeeks""; String patt = ""set""; printMinIndexChar(str, patt); } }",431
"class
Test { 




static
int
countPairs(String str) 

{ 

int
result = 
0
; 

int
n = str.length(); 

for
(
int
i = 
0
; i < n; i++) 

for
(
int
j = i + 
1
; j < n; j++) 






if
(Math.abs(str.charAt(i) - str.charAt(j)) == 

Math.abs(i - j)) 

result++; 


return
result; 

} 




public
static
void
main(String args[]) 

{ 

String str = 
""geeksforgeeks""
; 

System.out.println(countPairs(str)); 

} 
}","class Test { static int countPairs(String str) { int result = 0; int n = str.length(); for (int i = 0; i < n; i++) for (int j = i + 1; j < n; j++) if (Math.abs(str.charAt(i) - str.charAt(j)) == Math.abs(i - j)) result++; return result; } public static void main(String args[]) { String str = ""geeksforgeeks""; System.out.println(countPairs(str)); } }",432
"class
GFG { 

static
int
findSubsequenceCount(String S, String T) 

{ 

int
m = T.length(); 

int
n = S.length(); 




if
(m > n) 

return
0
; 






int
mat[][] = 
new
int
[m + 
1
][n + 
1
]; 








for
(
int
i = 
1
; i <= m; i++) 

mat[i][
0
] = 
0
; 






for
(
int
j = 
0
; j <= n; j++) 

mat[
0
][j] = 
1
; 




for
(
int
i = 
1
; i <= m; i++) { 

for
(
int
j = 
1
; j <= n; j++) { 







if
(T.charAt(i - 
1
) != S.charAt(j - 
1
)) 

mat[i][j] = mat[i][j - 
1
]; 










else

mat[i][j] = mat[i][j - 
1
] + mat[i - 
1
][j - 
1
]; 

} 

} 




return
mat[m][n]; 

} 




public
static
void
main(String[] args) 

{ 

String T = 
""ge""
; 

String S = 
""geeksforgeeks""
; 

System.out.println(findSubsequenceCount(S, T)); 

} 
}","class GFG {

static int findSubsequenceCount(String S, String T) {

int m = T.length();

int n = S.length();

if (m > n)
return 0;
int mat[][] = new int[m + 1][n + 1];
for (int i = 1; i <= m; i++)
mat[i][0] = 0;
for (int j = 0; j <= n; j++)
mat[0][j] = 1;
for (int i = 1; i <= m; i++) {
for (int j = 1; j <= n; j++) {
if (T.charAt(i - 1) != S.charAt(j - 1))
mat[i][j] = mat[i][j - 1];
else
mat[i][j] = mat[i][j - 1] + mat[i - 1][j - 1];
}
}
return mat[m][n];
}
public static void main(String[] args) {
String T = ""ge"";
String S = ""geeksforgeeks"";
System.out.println(findSubsequenceCount(S, T));
}
}",433
"class
GFG 
{ 



static
int
bellNumber(
int
n) 

{ 

int
[][] bell = 
new
int
[n+
1
][n+
1
]; 

bell[
0
][
0
] = 
1
; 


for
(
int
i=
1
; i<=n; i++) 

{ 



bell[i][
0
] = bell[i-
1
][i-
1
]; 




for
(
int
j=
1
; j<=i; j++) 

bell[i][j] = bell[i-
1
][j-
1
] + bell[i][j-
1
]; 

} 


return
bell[n][
0
]; 

} 




public
static
void
main (String[] args) 

{ 

for
(
int
n=
0
; n<=
5
; n++) 

System.out.println(
""Bell Number ""
+ n + 

"" is ""
+bellNumber(n)); 

} 
}","class GFG { static int bellNumber(int n) { int[][] bell = new int[n+1][n+1]; bell[0][0] = 1; for (int i=1; i<=n; i++) { bell[i][0] = bell[i-1][i-1]; for (int j=1; j<=i; j++) bell[i][j] = bell[i-1][j-1] + bell[i][j-1]; } return bell[n][0]; } public static void main(String[] args) { for (int n=0; n<=5; n++) System.out.println(""Bell Number "" + n + "" is "" + bellNumber(n)); } }",434
"class
GFG{ 




static
int
catalanDP(
int
n) { 



int
catalan[] = 
new
int
[n + 
2
]; 




catalan[
0
] = 
1
; 

catalan[
1
] = 
1
; 




for
(
int
i = 
2
; i <= n; i++) { 

catalan[i] = 
0
; 

for
(
int
j = 
0
; j < i; j++) { 

catalan[i] += catalan[j] * catalan[i - j - 
1
]; 

} 

} 




return
catalan[n]; 

} 



public
static
void
main(String[] args) { 

for
(
int
i = 
0
; i < 
10
; i++) { 

System.out.print(catalanDP(i) + 
"" ""
); 

} 

} 
}","class GFG { static int catalanDP(int n) { int catalan[] = new int[n + 2]; catalan[0] = 1; catalan[1] = 1; for (int i = 2; i <= n; i++) { catalan[i] = 0; for (int j = 0; j < i; j++) { catalan[i] += catalan[j] * catalan[i - j - 1]; } } return catalan[n]; } public static void main(String[] args) { for (int i = 0; i < 10; i++) { System.out.print(catalanDP(i) + "" ""); } } }",435
"class
BinomialCoefficient 
{ 



static
int
binomialCoeff(
int
n, 
int
k) 

{ 

int
C[][] = 
new
int
[n+
1
][k+
1
]; 

int
i, j; 




for
(i = 
0
; i <= n; i++) 

{ 

for
(j = 
0
; j <= min(i, k); j++) 

{ 



if
(j == 
0
|| j == i) 

C[i][j] = 
1
; 




else

C[i][j] = C[i-
1
][j-
1
] + C[i-
1
][j]; 

} 

} 


return
C[n][k]; 

} 




static
int
min(
int
a, 
int
b) 

{ 

return
(a<b)? a: b; 

} 




public
static
void
main(String args[]) 

{ 

int
n = 
5
, k = 
2
; 

System.out.println(
""Value of C(""
+n+
"",""
+k+
"") is ""
+binomialCoeff(n, k)); 

} 
}","class BinomialCoefficient { static int binomialCoeff(int n, int k) { int C[][] = new int[n+1][k+1]; int i, j; for (i = 0; i <= n; i++) { for (j = 0; j <= Math.min(i, k); j++) { if (j == 0 || j == i) C[i][j] = 1; else C[i][j] = C[i-1][j-1] + C[i-1][j]; } } return C[n][k]; } static int min(int a, int b) { return (a<b)? a: b; } public static void main(String args[]) { int n = 5, k = 2; System.out.println(""Value of C("" + n + "","" + k + "") is "" + binomialCoeff(n, k)); } }",436
"class
GFG 
{ 






static
int
permutationCoeff(
int
n, 

int
k) 

{ 

int
P[][] = 
new
int
[n + 
2
][k + 
2
]; 






for
(
int
i = 
0
; i <= n; i++) 

{ 

for
(
int
j = 
0
; 

j <= Math.min(i, k); 

j++) 

{ 



if
(j == 
0
) 

P[i][j] = 
1
; 






else

P[i][j] = P[i - 
1
][j] + 

(j * P[i - 
1
][j - 
1
]); 






P[i][j + 
1
] = 
0
; 

} 

} 

return
P[n][k]; 

} 




public
static
void
main(String args[]) 

{ 

int
n = 
10
, k = 
2
; 

System.out.println(
""Value of P( ""
+ n + 
"",""
+ k +
"")""
+ 

"" is ""
+ permutationCoeff(n, k) ); 

} 
}","class GFG { static int permutationCoeff(int n, int k) { int P[][] = new int[n + 2][k + 2]; for (int i = 0; i <= n; i++) { for (int j = 0; j <= Math.min(i, k); j++) { if (j == 0) P[i][j] = 1; else P[i][j] = P[i - 1][j] + (j * P[i - 1][j - 1]); P[i][j + 1] = 0; } } return P[n][k]; } public static void main(String args[]) { int n = 10, k = 2; System.out.println(""Value of P( ""+ n + "","" + k +"")""+ "" is ""+ permutationCoeff(n, k) ); } }",437
"class
GFG { 


static
final
int
MAX = 
100
; 










static
int
getMaxGold(
int
gold[][], 

int
m, 
int
n) 

{ 














int
goldTable[][] = 
new
int
[m][n]; 


for
(
int
[] rows:goldTable) 

Arrays.fill(rows, 
0
); 


for
(
int
col = n-
1
; col >= 
0
; col--) 

{ 

for
(
int
row = 
0
; row < m; row++) 

{ 






int
right = (col == n-
1
) ? 
0

: goldTable[row][col+
1
]; 






int
right_up = (row == 
0
|| 

col == n-
1
) ? 
0
: 

goldTable[row-
1
][col+
1
]; 






int
right_down = (row == m-
1

|| col == n-
1
) ? 
0
: 

goldTable[row+
1
][col+
1
]; 






goldTable[row][col] = gold[row][col] 

+ Math.max(right, Math.max(right_up, 

right_down)); 

; 

} 

} 






int
res = goldTable[
0
][
0
]; 


for
(
int
i = 
1
; i < m; i++) 

res = Math.max(res, goldTable[i][
0
]); 


return
res; 

} 




public
static
void
main(String arg[]) 

{ 

int
gold[][]= { {
1
, 
3
, 
1
, 
5
}, 

{
2
, 
2
, 
4
, 
1
}, 

{
5
, 
0
, 
2
, 
3
}, 

{
0
, 
6
, 
1
, 
2
} }; 


int
m = 
4
, n = 
4
; 


System.out.print(getMaxGold(gold, m, n)); 

} 
}","class GFG { static final int MAX = 100; static int getMaxGold(int gold[][], int m, int n) { int goldTable[][] = new int[m][n]; for (int[] rows : goldTable) Arrays.fill(rows, 0); for (int col = n - 1; col >= 0; col--) { for (int row = 0; row < m; row++) { int right = (col == n - 1) ? 0 : goldTable[row][col + 1]; int right_up = (row == 0 || col == n - 1) ? 0 : goldTable[row - 1][col + 1]; int right_down = (row == m - 1 || col == n - 1) ? 0 : goldTable[row + 1][col + 1]; goldTable[row][col] = gold[row][col] + Math.max(right, Math.max(right_up, right_down)); } } int res = goldTable[0][0]; for (int i = 1; i < m; i++) res = Math.max(res, goldTable[i][0]); return res; } public static void main(String arg[]) { int gold[][] = {{1, 3, 1, 5}, {2, 2, 4, 1}, {5, 0, 2, 3}, {0, 6, 1, 2}}; int m = 4, n = 4; System.out.print(getMaxGold(gold, m, n)); } }",438
"class
GFG { 



static
void
printArray(
int
A[], 
int
size) 

{ 

for
(
int
i = 
0
; i < size; i++) 

System.out.print(A[i] + 
"" ""
); 

System.out.println(); 

} 








static
void
merge(
int
arr[], 
int
l, 
int
m, 
int
r) 

{ 

int
i, j, k; 

int
n1 = m - l + 
1
; 

int
n2 = r - m; 




int
L[] = 
new
int
[n1]; 

int
R[] = 
new
int
[n2]; 




for
(i = 
0
; i < n1; i++) 

L[i] = arr[l + i]; 

for
(j = 
0
; j < n2; j++) 

R[j] = arr[m + 
1
+ j]; 






i = 
0
; 




j = 
0
; 




k = l; 











while
(i < n1 && L[i] < 
0
) 

arr[k++] = L[i++]; 




while
(j < n2 && R[j] < 
0
) 

arr[k++] = R[j++]; 




while
(i < n1) 

arr[k++] = L[i++]; 




while
(j < n2) 

arr[k++] = R[j++]; 

} 






static
void
RearrangePosNeg(
int
arr[], 
int
l, 
int
r) 

{ 

if
(l < r) { 





int
m = l + (r - l) / 
2
; 




RearrangePosNeg(arr, l, m); 

RearrangePosNeg(arr, m + 
1
, r); 


merge(arr, l, m, r); 

} 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { -
12
, 
11
, -
13
, -
5
, 
6
, -
7
, 
5
, -
3
, -
6
}; 

int
arr_size = arr.length; 

RearrangePosNeg(arr, 
0
, arr_size - 
1
); 

printArray(arr, arr_size); 

} 
}","class GFG {
    static void printArray(int A[], int size) {
        for (int i = 0; i < size; i++)
            System.out.print(A[i] + "" "");
        System.out.println();
    }
    static void merge(int arr[], int l, int m, int r) {
        int i, j, k;
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];
        for (i = 0; i < n1; i++)
            L[i] = arr[l + i];
        for (j = 0; j < n2; j++)
            R[j] = arr[m + 1 + j];
        i = 0;
        j = 0;
        k = l;
        while (i < n1 && L[i] < 0)
            arr[k++] = L[i++];
        while (j < n2 && R[j] < 0)
            arr[k++] = R[j++];
        while (i < n1)
            arr[k++] = L[i++];
        while (j < n2)
            arr[k++] = R[j++];
    }
    static void RearrangePosNeg(int arr[], int l, int r) {
        if (l < r) {
            int m = l + (r - l) / 2;
            RearrangePosNeg(arr, l, m);
            RearrangePosNeg(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    public static void main(String[] args) {
        int arr[] = { -12, 11, -13, -5, 6, -7, 5, -3, -6 };
        int arr_size = arr.length;
        RearrangePosNeg(arr, 0, arr_size - 1);
        printArray(arr, arr_size);
    }
}",439
"class
GFG { 






static
boolean
isSubsetSum(
int
set[], 

int
n, 
int
sum) 

{ 







boolean
subset[][] = 

new
boolean
[sum+
1
][n+
1
]; 




for
(
int
i = 
0
; i <= n; i++) 

subset[
0
][i] = 
true
; 






for
(
int
i = 
1
; i <= sum; i++) 

subset[i][
0
] = 
false
; 






for
(
int
i = 
1
; i <= sum; i++) 

{ 

for
(
int
j = 
1
; j <= n; j++) 

{ 

subset[i][j] = subset[i][j-
1
]; 

if
(i >= set[j-
1
]) 

subset[i][j] = subset[i][j] || 

subset[i - set[j-
1
]][j-
1
]; 

} 

} 





return
subset[sum][n]; 

} 




public
static
void
main (String args[]) 

{ 

int
set[] = {
3
, 
34
, 
4
, 
12
, 
5
, 
2
}; 

int
sum = 
9
; 

int
n = set.length; 

if
(isSubsetSum(set, n, sum) == 
true
) 

System.out.println(
""Found a subset""

+ 
"" with given sum""
); 

else

System.out.println(
""No subset with""

+ 
"" given sum""
); 

} 
}","class GFG { static boolean isSubsetSum(int set[], int n, int sum) { boolean subset[][] = new boolean[sum+1][n+1]; for (int i = 0; i <= n; i++) subset[0][i] = true; for (int i = 1; i <= sum; i++) subset[i][0] = false; for (int i = 1; i <= sum; i++) { for (int j = 1; j <= n; j++) { subset[i][j] = subset[i][j-1]; if (i >= set[j-1]) subset[i][j] = subset[i][j] || subset[i - set[j-1]][j-1]; } } return subset[sum][n]; } public static void main(String args[]) { int set[] = { 3, 34, 4, 12, 5, 2 }; int sum = 9; int n = set.length; if (isSubsetSum(set, n, sum) == true) System.out.println(""Found a subset"" + "" with given sum""); else System.out.println(""No subset with"" + "" given sum""); } }",440
"class
GFG { 






static
boolean
modularSum(
int
arr[], 

int
n, 
int
m) 

{ 

if
(n > m) 

return
true
; 










boolean
DP[]=
new
boolean
[m]; 


Arrays.fill(DP, 
false
); 






for
(
int
i = 
0
; i < n; i++) 

{ 






if
(DP[
0
]) 

return
true
; 












boolean
temp[] = 
new
boolean
[m]; 

Arrays.fill(temp, 
false
); 












for
(
int
j = 
0
; j < m; j++) 

{ 






if
(DP[j] == 
true
) 

{ 

if
(DP[(j + arr[i]) % m] == 
false
) 






temp[(j + arr[i]) % m] = 
true
; 

} 

} 








for
(
int
j = 
0
; j < m; j++) 

if
(temp[j]) 

DP[j] = 
true
; 









DP[arr[i] % m] = 
true
; 

} 


return
DP[
0
]; 

} 




public
static
void
main(String arg[]) 

{ 

int
arr[] = {
1
, 
7
}; 

int
n = arr.length; 

int
m = 
5
; 


if
(modularSum(arr, n, m)) 

System.out.print(
""YES\n""
); 

else

System.out.print(
""NO\n""
); 

} 
}","class GFG { static boolean modularSum(int arr[], int n, int m) { if (n > m) return true; boolean DP[] = new boolean[m]; Arrays.fill(DP, false); for (int i = 0; i < n; i++) { if (DP[0]) return true; boolean temp[] = new boolean[m]; Arrays.fill(temp, false); for (int j = 0; j < m; j++) { if (DP[j] == true) { if (DP[(j + arr[i]) % m] == false) temp[(j + arr[i]) % m] = true; } } for (int j = 0; j < m; j++) if (temp[j]) DP[j] = true; DP[arr[i] % m] = true; } return DP[0]; } public static void main(String arg[]) { int arr[] = {1, 7}; int n = arr.length; int m = 5; if (modularSum(arr, n, m)) System.out.print(""YES\n""); else System.out.print(""NO\n""); } }",441
"class
GFG { 




static
int
largestSubset(
int
[] a, 
int
n) 

{ 



Arrays.sort(a); 






int
[] dp = 
new
int
[n]; 




dp[n - 
1
] = 
1
; 




for
(
int
i = n - 
2
; i >= 
0
; i--) { 








int
mxm = 
0
; 

for
(
int
j = i + 
1
; j < n; j++) { 

if
(a[j] % a[i] == 
0
) { 

mxm = Math.max(mxm, dp[j]); 

} 

} 


dp[i] = 
1
+ mxm; 

} 




return
Arrays.stream(dp).max().getAsInt(); 

} 




public
static
void
main(String[] args) 

{ 

int
[] a = { 
1
, 
3
, 
6
, 
13
, 
17
, 
18
}; 

int
n = a.length; 

System.out.println(largestSubset(a, n)); 

} 
}","class GFG {
    static int largestSubset(int[] a, int n) {
        Arrays.sort(a);
        int[] dp = new int[n];
        dp[n - 1] = 1;
        for (int i = n - 2; i >= 0; i--) {
            int mxm = 0;
            for (int j = i + 1; j < n; j++) {
                if (a[j] % a[i] == 0) {
                    mxm = Math.max(mxm, dp[j]);
                }
            }
            dp[i] = 1 + mxm;
        }
        return Arrays.stream(dp).max().getAsInt();
    }
    public static void main(String[] args) {
        int[] a = {1, 3, 6, 13, 17, 18};
        int n = a.length;
        System.out.println(largestSubset(a, n));
    }
}",442
"class
RodCutting 
{ 



static
int
cutRod(
int
price[],
int
n) 

{ 

int
val[] = 
new
int
[n+
1
]; 

val[
0
] = 
0
; 






for
(
int
i = 
1
; i<=n; i++) 

{ 

int
max_val = Integer.MIN_VALUE; 

for
(
int
j = 
0
; j < i; j++) 

max_val = Math.max(max_val, 

price[j] + val[i-j-
1
]); 

val[i] = max_val; 

} 


return
val[n]; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = 
new
int
[] {
1
, 
5
, 
8
, 
9
, 
10
, 
17
, 
17
, 
20
}; 

int
size = arr.length; 

System.out.println(
""Maximum Obtainable Value is ""
+ 

cutRod(arr, size)); 

} 
}","class RodCutting {
    static int cutRod(int price[], int n) {
        int val[] = new int[n+1];
        val[0] = 0;
        for (int i = 1; i <= n; i++) {
            int max_val = Integer.MIN_VALUE;
            for (int j = 0; j < i; j++)
                max_val = Math.max(max_val, price[j] + val[i-j-1]);
            val[i] = max_val;
        }
        return val[n];
    }

    public static void main(String args[]) {
        int arr[] = new int[] {1, 5, 8, 9, 10, 17, 17, 20};
        int size = arr.length;
        System.out.println(""Maximum Obtainable Value is "" + cutRod(arr, size));
    }
}",443
"class
GFG { 



static
int
lookup[][] = 
new
int
[
1000
][
1000
]; 




static
int
countSeqUtil(
int
n, 
int
dif) 
{ 





if
(Math.abs(dif) > n) 

return
0
; 




if
(n == 
1
&& dif == 
0
) 

return
2
; 

if
(n == 
1
&& Math.abs(dif) == 
1
) 

return
1
; 








if
(lookup[n][n+dif] != -
1
) 

return
lookup[n][n+dif]; 


int
res = 


countSeqUtil(n-
1
, dif+
1
) + 




2
*countSeqUtil(n-
1
, dif) + 




countSeqUtil(n-
1
, dif-
1
); 






return
lookup[n][n+dif] = res; 
} 




static
int
countSeq(
int
n) 
{ 







for
(
int
k = 
0
; k < lookup.length; k++) 

{ 

for
(
int
j = 
0
; j < lookup.length; j++) 

{ 

lookup[k][j] = -
1
; 

} 

} 




return
countSeqUtil(n, 
0
); 
} 


public
static
void
main(String[] args) 
{ 

int
n = 
2
; 

System.out.println(
""Count of sequences is ""

+ countSeq(
2
)); 
} 
}","class GFG { static int[][] lookup = new int[1000][1000]; static int countSeqUtil(int n, int dif) { if (Math.abs(dif) > n) return 0; if (n == 1 && dif == 0) return 2; if (n == 1 && Math.abs(dif) == 1) return 1; if (lookup[n][n+dif] != -1) return lookup[n][n+dif]; int res = countSeqUtil(n-1, dif+1) + 2*countSeqUtil(n-1, dif) + countSeqUtil(n-1, dif-1); return lookup[n][n+dif] = res; } static int countSeq(int n) { for (int k = 0; k < lookup.length; k++) { for (int j = 0; j < lookup.length; j++) { lookup[k][j] = -1; } } return countSeqUtil(n, 0); } public static void main(String[] args) { int n = 2; System.out.println(""Count of sequences is "" + countSeq(2)); } }",444
"class
Sequences 
{ 





static
int
getTotalNumberOfSequences(
int
m, 
int
n) 

{ 







int
T[][]=
new
int
[m+
1
][n+
1
]; 

for
(
int
i=
0
; i<m+
1
; i++) 

{ 

for
(
int
j=
0
; j<n+
1
; j++) 

{ 







if
(i == 
0
|| j == 
0
) 

T[i][j] = 
0
; 








else
if
(i < j) 

T[i][j] = 
0
; 














else
if
(j == 
1
) 

T[i][j] = i; 




else

T[i][j] = T[i-
1
][j] + T[i/
2
][j-
1
]; 

} 

} 

return
T[m][n]; 

} 




public
static
void
main (String[] args) 

{ 

int
m = 
10
; 

int
n = 
4
; 

System.out.println(
""Total number of possible sequences ""
+ 

getTotalNumberOfSequences(m, n)); 

} 
}","class Sequences {

    static int getTotalNumberOfSequences(int m, int n) {
        int T[][] = new int[m + 1][n + 1];
        for (int i = 0; i < m + 1; i++) {
            for (int j = 0; j < n + 1; j++) {
                if (i == 0 || j == 0) {
                    T[i][j] = 0;
                } else if (i < j) {
                    T[i][j] = 0;
                } else if (j == 1) {
                    T[i][j] = i;
                } else {
                    T[i][j] = T[i - 1][j] + T[i / 2][j - 1];
                }
            }
        }
        return T[m][n];
    }

    public static void main(String[] args) {
        int m = 10;
        int n = 4;
        System.out.println(""Total number of possible sequences "" + getTotalNumberOfSequences(m, n));
    }
}",445
"class
GFG { 






static
int
MaxSumBS(
int
arr[], 
int
n) 

{ 

int
max_sum = Integer.MIN_VALUE; 














int
MSIBS[] = 
new
int
[n]; 

int
MSDBS[] = 
new
int
[n]; 

for
(
int
i = 
0
; i < n; i++) { 

MSDBS[i] = arr[i]; 

MSIBS[i] = arr[i]; 

} 




for
(
int
i = 
1
; i < n; i++) 

for
(
int
j = 
0
; j < i; j++) 

if
(arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) 

MSIBS[i] = MSIBS[j] + arr[i]; 




for
(
int
i = n - 
2
; i >= 
0
; i--) 

for
(
int
j = n - 
1
; j > i; j--) 

if
(arr[i] > arr[j] && MSDBS[i] < MSDBS[j] + arr[i]) 

MSDBS[i] = MSDBS[j] + arr[i]; 






for
(
int
i = 
0
; i < n; i++) 

max_sum = Math.max(max_sum, (MSDBS[i] + MSIBS[i] - arr[i])); 






return
max_sum; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
1
, 
15
, 
51
, 
45
, 
33
, 
100
, 
12
, 
18
, 
9
}; 

int
n = arr.length; 

System.out.println(
""Maximum Sum : ""
+ MaxSumBS(arr, n)); 

} 
}","class GFG { static int MaxSumBS(int arr[], int n) { int max_sum = Integer.MIN_VALUE; int MSIBS[] = new int[n]; int MSDBS[] = new int[n]; for (int i = 0; i < n; i++) { MSDBS[i] = arr[i]; MSIBS[i] = arr[i]; } for (int i = 1; i < n; i++) for (int j = 0; j < i; j++) if (arr[i] > arr[j] && MSIBS[i] < MSIBS[j] + arr[i]) MSIBS[i] = MSIBS[j] + arr[i]; for (int i = n - 2; i >= 0; i--) for (int j = n - 1; j > i; j--) if (arr[i] > arr[j] && MSDBS[i] < MSDBS[j] + arr[i]) MSDBS[i] = MSDBS[j] + arr[i]; for (int i = 0; i < n; i++) max_sum = Math.max(max_sum, (MSDBS[i] + MSIBS[i] - arr[i])); return max_sum; } public static void main(String[] args) { int arr[] = { 1, 15, 51, 45, 33, 100, 12, 18, 9 }; int n = arr.length; System.out.println(""Maximum Sum : "" + MaxSumBS(arr, n)); } }",446
"class
GFG 
{ 



static
int
maxSumIS(
int
arr[], 
int
n) 

{ 

int
i, j, max = 
0
; 

int
msis[] = 
new
int
[n]; 




for
(i = 
0
; i < n; i++) 

msis[i] = arr[i]; 




for
(i = 
1
; i < n; i++) 

for
(j = 
0
; j < i; j++) 

if
(arr[i] > arr[j] && 

msis[i] < msis[j] + arr[i]) 

msis[i] = msis[j] + arr[i]; 




for
(i = 
0
; i < n; i++) 

if
(max < msis[i]) 

max = msis[i]; 


return
max; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = 
new
int
[]{
1
, 
101
, 
2
, 
3
, 
100
, 
4
, 
5
}; 

int
n = arr.length; 

System.out.println(
""Sum of maximum sum ""
+ 

""increasing subsequence is ""
+ 

maxSumIS(arr, n)); 

} 
}","class GFG { static int maxSumIS(int arr[], int n) { int i, j, max = 0; int msis[] = new int[n]; for(i = 0; i < n; i++) msis[i] = arr[i]; for(i = 1; i < n; i++) for(j = 0; j < i; j++) if(arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) msis[i] = msis[j] + arr[i]; for(i = 0; i < n; i++) if(max < msis[i]) max = msis[i]; return max; } public static void main(String args[]) { int arr[] = new int[]{1, 101, 2, 3, 100, 4, 5}; int n = arr.length; System.out.println(""Sum of maximum sum "" + ""increasing subsequence is "" + maxSumIS(arr, n)); } }",447
"class
GFG { 






static
int
lis(
int
[] arr, 
int
n) 

{ 

int
[] mpis = 
new
int
[n]; 

int
max = Integer.MIN_VALUE; 




for
(
int
i = 
0
; i < n; i++) 

mpis[i] = arr[i]; 




for
(
int
i = 
1
; i < n; i++) 

for
(
int
j = 
0
; j < i; j++) 

if
(arr[i] > arr[j] && mpis[i] 

< (mpis[j] * arr[i])) 

mpis[i] = mpis[j] * arr[i]; 




for
(
int
k = 
0
; k < mpis.length; k++) 

{ 

if
(mpis[k] > max) { 

max = mpis[k]; 

} 

} 


return
max; 

} 




static
public
void
main(String[] args) 

{ 


int
[] arr = { 
3
, 
100
, 
4
, 
5
, 
150
, 
6
}; 

int
n = arr.length; 


System.out.println(lis(arr, n)); 

} 
}","class GFG {

    static int lis(int[] arr, int n) {
        int[] mpis = new int[n];
        int max = Integer.MIN_VALUE;

        for (int i = 0; i < n; i++)
            mpis[i] = arr[i];

        for (int i = 1; i < n; i++)
            for (int j = 0; j < i; j++)
                if (arr[i] > arr[j] && mpis[i] < (mpis[j] * arr[i]))
                    mpis[i] = mpis[j] * arr[i];

        for (int k = 0; k < mpis.length; k++) {
            if (mpis[k] > max) {
                max = mpis[k];
            }
        }

        return max;
    }

    static public void main(String[] args) {
        int[] arr = {3, 100, 4, 5, 150, 6};
        int n = arr.length;

        System.out.println(lis(arr, n));
    }
}",448
"class
GFG { 






static
int
longestSubseqWithDiffOne(
int
arr[], 

int
n) 

{ 





int
dp[] = 
new
int
[n]; 

for
(
int
i = 
0
; i< n; i++) 

dp[i] = 
1
; 




for
(
int
i = 
1
; i < n; i++) 

{ 





for
(
int
j = 
0
; j < i; j++) 

{ 







if
((arr[i] == arr[j] + 
1
) || 

(arr[i] == arr[j] - 
1
)) 


dp[i] = Math.max(dp[i], dp[j]+
1
); 

} 

} 






int
result = 
1
; 

for
(
int
i = 
0
; i < n ; i++) 

if
(result < dp[i]) 

result = dp[i]; 

return
result; 

} 




public
static
void
main(String[] args) 

{ 







int
arr[] = {
1
, 
2
, 
3
, 
4
, 
5
, 
3
, 
2
}; 

int
n = arr.length; 

System.out.println(longestSubseqWithDiffOne( 

arr, n)); 

} 
}","class GFG { static int longestSubseqWithDiffOne(int arr[], int n) { int dp[] = new int[n]; for (int i = 0; i < n; i++) dp[i] = 1; for (int i = 1; i < n; i++) { for (int j = 0; j < i; j++) { if ((arr[i] == arr[j] + 1) || (arr[i] == arr[j] - 1)) dp[i] = Math.max(dp[i], dp[j]+1); } } int result = 1; for (int i = 0; i < n ; i++) if (result < dp[i]) result = dp[i]; return result; } public static void main(String[] args) { int arr[] = {1, 2, 3, 4, 5, 3, 2}; int n = arr.length; System.out.println(longestSubseqWithDiffOne(arr, n)); } }",449
"class
GFG { 








public
static
int
maxLenSub(
int
arr[], 
int
n) 

{ 

int
mls[] = 
new
int
[n], max = 
0
; 




for
(
int
i = 
0
; i < n; i++) 

mls[i] = 
1
; 






for
(
int
i = 
1
; i < n; i++) 

for
(
int
j = 
0
; j < i; j++) 

if
(Math.abs(arr[i] - arr[j]) <= 
1

&& mls[i] < mls[j] + 
1
) 

mls[i] = mls[j] + 
1
; 




for
(
int
i = 
0
; i < n; i++) 

if
(max < mls[i]) 

max = mls[i]; 




return
max; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
2
, 
5
, 
6
, 
3
, 
7
, 
6
, 
5
, 
8
}; 

int
n = arr.length; 

System.out.println(
""Maximum length subsequence = ""
+ 

maxLenSub(arr, n)); 


} 
}","class GFG { public static int maxLenSub(int arr[], int n) { int mls[] = new int[n], max = 0; for (int i = 0; i < n; i++) mls[i] = 1; for (int i = 1; i < n; i++) for (int j = 0; j < i; j++) if (Math.abs(arr[i] - arr[j]) <= 1 && mls[i] < mls[j] + 1) mls[i] = mls[j] + 1; for (int i = 0; i < n; i++) if (max < mls[i]) max = mls[i]; return max; } public static void main(String[] args) { int arr[] = { 2, 5, 6, 3, 7, 6, 5, 8 }; int n = arr.length; System.out.println(""Maximum length subsequence = "" + maxLenSub(arr, n)); } }",450
"class
GFG { 


static
int
pre_compute(
int
a[], 
int
n, 

int
index, 
int
k) 

{ 

int
dp[][] = 
new
int
[n][n]; 






for
(
int
i = 
0
; i < n; i++) { 

if
(a[i] > a[
0
]) 

dp[
0
][i] = a[i] + a[
0
]; 

else

dp[
0
][i] = a[i]; 

} 




for
(
int
i = 
1
; i < n; i++) 

{ 

for
(
int
j = 
0
; j < n; j++) 

{ 

if
(a[j] > a[i] && j > i) 

{ 

if
(dp[i - 
1
][i] + a[j] > 

dp[i - 
1
][j]) 

dp[i][j] = dp[i - 
1
][i] 

+ a[j]; 

else

dp[i][j] = dp[i - 
1
][j]; 

} 

else

dp[i][j] = dp[i - 
1
][j]; 

} 

} 




return
dp[index][k]; 

} 




public
static
void
main(String[] args) 

{ 

int
a[] = { 
1
, 
101
, 
2
, 
3
, 
100
, 
4
, 
5
}; 

int
n = a.length; 

int
index = 
4
, k = 
6
; 

System.out.println( 

pre_compute(a, n, index, k)); 

} 
}","class GFG {

static int pre_compute(int a[], int n, int index, int k) {
int[][] dp = new int[n][n];
for (int i = 0; i < n; i++) {
if (a[i] > a[0])
dp[0][i] = a[i] + a[0];
else
dp[0][i] = a[i];
}
for (int i = 1; i < n; i++) {
for (int j = 0; j < n; j++) {
if (a[j] > a[i] && j > i) {
if (dp[i - 1][i] + a[j] > dp[i - 1][j])
dp[i][j] = dp[i - 1][i] + a[j];
else
dp[i][j] = dp[i - 1][j];
}
else
dp[i][j] = dp[i - 1][j];
}
}
return dp[index][k];
}

public static void main(String[] args) {
int a[] = {1, 101, 2, 3, 100, 4, 5};
int n = a.length;
int index = 4, k = 6;
System.out.println(pre_compute(a, n, index, k));
}
}",451
"class
Pair{ 

int
a; 

int
b; 


public
Pair(
int
a, 
int
b) { 

this
.a = a; 

this
.b = b; 

} 






static
int
maxChainLength(Pair arr[], 
int
n) 

{ 

int
i, j, max = 
0
; 

int
mcl[] = 
new
int
[n]; 




for
( i = 
0
; i < n; i++ ) 

mcl[i] = 
1
; 




for
( i = 
1
; i < n; i++ ) 

for
( j = 
0
; j < i; j++ ) 

if
( arr[i].a > arr[j].b && mcl[i] < mcl[j] + 
1
) 

mcl[i] = mcl[j] + 
1
; 







for
( i = 
0
; i < n; i++ ) 

if
( max < mcl[i] ) 

max = mcl[i]; 


return
max; 

} 




public
static
void
main(String[] args) 

{ 

Pair arr[] = 
new
Pair[] {
new
Pair(
5
,
24
), 
new
Pair(
15
, 
25
), 

new
Pair (
27
, 
40
), 
new
Pair(
50
, 
60
)}; 

System.out.println(
""Length of maximum size chain is ""
+ 

maxChainLength(arr, arr.length)); 

} 
}","class Pair {
    int a;
    int b;

    public Pair(int a, int b) {
        this.a = a;
        this.b = b;
    }

    static int maxChainLength(Pair arr[], int n) {
        int i, j, max = 0;
        int mcl[] = new int[n];

        for (i = 0; i < n; i++)
            mcl[i] = 1;

        for (i = 1; i < n; i++)
            for (j = 0; j < i; j++)
                if (arr[i].a > arr[j].b && mcl[i] < mcl[j] + 1)
                    mcl[i] = mcl[j] + 1;

        for (i = 0; i < n; i++)
            if (max < mcl[i])
                max = mcl[i];

        return max;
    }

    public static void main(String[] args) {
        Pair arr[] = new Pair[] {
            new Pair(5, 24),
            new Pair(15, 25),
            new Pair(27, 40),
            new Pair(50, 60)
        };

        System.out.println(""Length of maximum size chain is "" + maxChainLength(arr, arr.length));
    }
}",452
"public
class
GFG 
{ 



static
void
printMaxSubSquare(
int
M[][]) 

{ 

int
i,j; 

int
R = M.length; 


int
C = M[
0
].length; 


int
S[][] = 
new
int
[R][C]; 


int
max_of_s, max_i, max_j; 




for
(i = 
0
; i < R; i++) 

S[i][
0
] = M[i][
0
]; 




for
(j = 
0
; j < C; j++) 

S[
0
][j] = M[
0
][j]; 




for
(i = 
1
; i < R; i++) 

{ 

for
(j = 
1
; j < C; j++) 

{ 

if
(M[i][j] == 
1
) 

S[i][j] = Math.min(S[i][j-
1
], 

Math.min(S[i-
1
][j], S[i-
1
][j-
1
])) + 
1
; 

else

S[i][j] = 
0
; 

} 

} 




max_of_s = S[
0
][
0
]; max_i = 
0
; max_j = 
0
; 

for
(i = 
0
; i < R; i++) 

{ 

for
(j = 
0
; j < C; j++) 

{ 

if
(max_of_s < S[i][j]) 

{ 

max_of_s = S[i][j]; 

max_i = i; 

max_j = j; 

} 

} 

} 


System.out.println(
""Maximum size sub-matrix is: ""
); 

for
(i = max_i; i > max_i - max_of_s; i--) 

{ 

for
(j = max_j; j > max_j - max_of_s; j--) 

{ 

System.out.print(M[i][j] + 
"" ""
); 

} 

System.out.println(); 

} 

} 




public
static
void
main(String[] args) 

{ 

int
M[][] = {{
0
, 
1
, 
1
, 
0
, 
1
}, 

{
1
, 
1
, 
0
, 
1
, 
0
}, 

{
0
, 
1
, 
1
, 
1
, 
0
}, 

{
1
, 
1
, 
1
, 
1
, 
0
}, 

{
1
, 
1
, 
1
, 
1
, 
1
}, 

{
0
, 
0
, 
0
, 
0
, 
0
}}; 


printMaxSubSquare(M); 

} 

}",ERROR,453
"class
GFG { 




public
static
int
maxCost(
int
mat[][], 
int
N) 

{ 





int
dp[][]=
new
int
[N][N]; 


dp[
0
][
0
] = mat[
0
][
0
]; 






for
(
int
i = 
1
; i < N; i++) 

dp[i][
0
] = mat[i][
0
] + dp[i-
1
][
0
]; 




for
(
int
i = 
1
; i < N; i++) 

for
(
int
j = 
1
; j < i + 
1
&& j < N; j++) 

dp[i][j] = mat[i][j] + 

Math.max(dp[i-
1
][j-
1
], 

dp[i-
1
][j]); 






int
result = 
0
; 

for
(
int
i = 
0
; i < N; i++) 

if
(result < dp[N-
1
][i]) 

result = dp[N-
1
][i]; 




return
result; 

} 




public
static
void
main(String[] args) 

{ 

int
mat[][] = { { 
4
, 
1
,
5
,
6
, 
1
}, 

{ 
2
,
9
,
2
,
11
,
10
}, 

{ 
15
,
1
,
3
,
15
, 
2
}, 

{ 
16
, 
92
, 
41
,
4
,
3
}, 

{ 
8
, 
142
, 
6
, 
4
, 
8
} 

}; 

int
N = 
5
; 

System.out.println(
""Maximum Path Sum : ""
+ 

maxCost(mat, N)); 

} 
}","class GFG {

public static int maxCost(int[][] mat, int N) {

int[][] dp = new int[N][N];

dp[0][0] = mat[0][0];

for (int i = 1; i < N; i++)
dp[i][0] = mat[i][0] + dp[i - 1][0];

for (int i = 1; i < N; i++)
for (int j = 1; j < i + 1 && j < N; j++)
dp[i][j] = mat[i][j] + Math.max(dp[i - 1][j - 1], dp[i - 1][j]);

int result = 0;

for (int i = 0; i < N; i++)
if (result < dp[N - 1][i])
result = dp[N - 1][i];

return result;

}

public static void main(String[] args) {

int mat[][] = { { 4, 1, 5, 6, 1 }, { 2, 9, 2, 11, 10 }, { 15, 1, 3, 15, 2 }, { 16, 92, 41, 4, 3 }, { 8, 142, 6, 4, 8 } };

int N = 5;

System.out.println(""Maximum Path Sum : "" + maxCost(mat, N));

}
}",454
"class
GFG { 


static
int
N = 
4
; 




static
int
MaximumPath(
int
Mat[][]) 

{ 

int
result = 
0
; 






int
dp[][] = 
new
int
[N][N + 
2
]; 




for
(
int
[] rows : dp) 

Arrays.fill(rows, 
0
); 






for
(
int
i = 
0
; i < N; i++) 

dp[
0
][i + 
1
] = Mat[
0
][i]; 


for
(
int
i = 
1
; i < N; i++) 

for
(
int
j = 
1
; j <= N; j++) 

dp[i][j] = Math.max(dp[i - 
1
][j - 
1
], 

Math.max(dp[i - 
1
][j], 

dp[i - 
1
][j + 
1
])) + 

Mat[i][j - 
1
]; 






for
(
int
i = 
0
; i <= N; i++) 

result = Math.max(result, dp[N - 
1
][i]); 




return
result; 

} 




public
static
void
main(String arg[]) 

{ 

int
Mat[][] = { { 
4
, 
2
, 
3
, 
4
}, 

{ 
2
, 
9
, 
1
, 
10
}, 

{ 
15
, 
1
, 
3
, 
0
}, 

{ 
16
, 
92
, 
41
, 
44
} }; 


System.out.println(MaximumPath(Mat)); 

} 
}","class GFG {

    static int N = 4;

    static int MaximumPath(int Mat[][]) {
        int result = 0;
        int dp[][] = new int[N][N + 2];

        for (int[] rows : dp)
            Arrays.fill(rows, 0);

        for (int i = 0; i < N; i++)
            dp[0][i + 1] = Mat[0][i];

        for (int i = 1; i < N; i++)
            for (int j = 1; j <= N; j++)
                dp[i][j] = Math.max(dp[i - 1][j - 1], Math.max(dp[i - 1][j], dp[i - 1][j + 1])) + Mat[i][j - 1];

        for (int i = 0; i <= N; i++)
            result = Math.max(result, dp[N - 1][i]);

        return result;
    }

    public static void main(String arg[]) {

        int Mat[][] = { { 4, 2, 3, 4 }, { 2, 9, 1, 10 }, { 15, 1, 3, 0 }, { 16, 92, 41, 44 } };

        System.out.println(MaximumPath(Mat));
    }
}",455
"class
MinimumCostPath 
{ 



private
static
int
min(
int
x, 
int
y, 
int
z) 

{ 

if
(x < y) 

return
(x < z)? x : z; 

else

return
(y < z)? y : z; 

} 


private
static
int
minCost(
int
cost[][], 
int
m, 
int
n) 

{ 

int
i, j; 

int
tc[][]=
new
int
[m+
1
][n+
1
]; 


tc[
0
][
0
] = cost[
0
][
0
]; 




for
(i = 
1
; i <= m; i++) 

tc[i][
0
] = tc[i-
1
][
0
] + cost[i][
0
]; 




for
(j = 
1
; j <= n; j++) 

tc[
0
][j] = tc[
0
][j-
1
] + cost[
0
][j]; 




for
(i = 
1
; i <= m; i++) 

for
(j = 
1
; j <= n; j++) 

tc[i][j] = min(tc[i-
1
][j-
1
], 

tc[i-
1
][j], 

tc[i][j-
1
]) + cost[i][j]; 


return
tc[m][n]; 

} 




public
static
void
main(String args[]) 

{ 

int
cost[][]= {{
1
, 
2
, 
3
}, 

{
4
, 
8
, 
2
}, 

{
1
, 
5
, 
3
}}; 

System.out.println(minCost(cost,
2
,
2
)); 

} 
}","class MinimumCostPath { private static int min(int x, int y, int z) { return Math.min(Math.min(x, y), z); } private static int minCost(int[][] cost, int m, int n) { int[][] tc = new int[m + 1][n + 1]; tc[0][0] = cost[0][0]; for (int i = 1; i <= m; i++) tc[i][0] = tc[i - 1][0] + cost[i][0]; for (int j = 1; j <= n; j++) tc[0][j] = tc[0][j - 1] + cost[0][j]; for (int i = 1; i <= m; i++) for (int j = 1; j <= n; j++) tc[i][j] = min(tc[i - 1][j - 1], tc[i - 1][j], tc[i][j - 1]) + cost[i][j]; return tc[m][n]; } public static void main(String args[]) { int cost[][] = {{1, 2, 3}, {4, 8, 2}, {1, 5, 3}}; System.out.println(minCost(cost, 2, 2)); } }",456
"class
GFG{ 

private
static
int
minJumps(
int
[] arr, 
int
n) { 

int
jumps[] = 
new
int
[n]; 




int
i, j; 


if
(n == 
0
|| arr[
0
] == 
0
) 

return
Integer.MAX_VALUE; 





jumps[
0
] = 
0
; 






for
(i = 
1
; i < n; i++) 

{ 

jumps[i] = Integer.MAX_VALUE; 

for
(j = 
0
; j < i; j++) 

{ 

if
(i <= j + arr[j] && jumps[j] != Integer.MAX_VALUE) 

{ 

jumps[i] = Math.min(jumps[i], jumps[j] + 
1
); 

break
; 

} 

} 

} 

return
jumps[n-
1
]; 

} 


public
static
void
main(String[] args) { 

int
arr[] = {
1
, 
3
, 
6
, 
1
, 
0
, 
9
}; 


System.out.println(
""Minimum number of jumps to reach end is : ""
+ 

minJumps(arr,arr.length)); 

} 
}","class GFG { private static int minJumps(int[] arr, int n) { int jumps[] = new int[n]; int i, j; if (n == 0 || arr[0] == 0) return Integer.MAX_VALUE; jumps[0] = 0; for (i = 1; i < n; i++) { jumps[i] = Integer.MAX_VALUE; for (j = 0; j < i; j++) { if (i <= j + arr[j] && jumps[j] != Integer.MAX_VALUE) { jumps[i] = Math.min(jumps[i], jumps[j] + 1); break; } } } return jumps[n - 1]; } public static void main(String[] args) { int arr[] = { 1, 3, 6, 1, 0, 9 }; System.out.println(""Minimum number of jumps to reach end is : "" + minJumps(arr, arr.length)); } }",457
"class
GFG 
{ 

static
int
MAX=
100
; 

static
int
dp[][]=
new
int
[MAX][MAX]; 






static
int
countRemovals(
int
a[], 
int
i, 
int
j, 
int
k) 

{ 



if
(i >= j) 

return
0
; 






else
if
((a[j] - a[i]) <= k) 

return
0
; 




else
if
(dp[i][j] != -
1
) 

return
dp[i][j]; 




else
if
((a[j] - a[i]) > k) { 








dp[i][j] = 
1
+ Math.min(countRemovals(a, i + 
1
, j, k), 

countRemovals(a, i, j - 
1
, k)); 

} 

return
dp[i][j]; 

} 




static
int
removals(
int
a[], 
int
n, 
int
k) 

{ 



Arrays.sort(a); 






for
(
int
[] rows:dp) 

Arrays.fill(rows,-
1
); 

if
(n == 
1
) 

return
0
; 

else

return
countRemovals(a, 
0
, n - 
1
, k); 

} 




public
static
void
main (String[] args) 

{ 

int
a[] = { 
1
, 
3
, 
4
, 
9
, 
10
, 
11
, 
12
, 
17
, 
20
}; 

int
n = a.length; 

int
k = 
4
; 

System.out.print(removals(a, n, k)); 

} 
}","class GFG { static int MAX = 100; static int[][] dp = new int[MAX][MAX]; static int countRemovals(int[] a, int i, int j, int k) { if (i >= j) return 0; else if ((a[j] - a[i]) <= k) return 0; else if (dp[i][j] != -1) return dp[i][j]; else if ((a[j] - a[i]) > k) { dp[i][j] = 1 + Math.min(countRemovals(a, i + 1, j, k), countRemovals(a, i, j - 1, k)); } return dp[i][j]; } static int removals(int[] a, int n, int k) { Arrays.sort(a); for (int[] rows : dp) Arrays.fill(rows,-1); if (n == 1) return 0; else return countRemovals(a, 0, n - 1, k); } public static void main (String[] args) { int a[] = { 1, 3, 4, 9, 10, 11, 12, 17, 20 }; int n = a.length; int k = 4; System.out.print(removals(a, n, k)); } }",458
"class
EDIST 
{ 

static
int
min(
int
x,
int
y,
int
z) 

{ 

if
(x <= y && x <= z) 
return
x; 

if
(y <= x && y <= z) 
return
y; 

else
return
z; 

} 


static
int
editDistDP(String str1, String str2, 
int
m, 
int
n) 

{ 



int
dp[][] = 
new
int
[m+
1
][n+
1
]; 




for
(
int
i=
0
; i<=m; i++) 

{ 

for
(
int
j=
0
; j<=n; j++) 

{ 





if
(i==
0
) 

dp[i][j] = j; 







else
if
(j==
0
) 

dp[i][j] = i; 







else
if
(str1.charAt(i-
1
) == str2.charAt(j-
1
)) 

dp[i][j] = dp[i-
1
][j-
1
]; 






else

dp[i][j] = 
1
+ min(dp[i][j-
1
], 


dp[i-
1
][j], 


dp[i-
1
][j-
1
]); 


} 

} 


return
dp[m][n]; 

} 




public
static
void
main(String args[]) 

{ 

String str1 = 
""sunday""
; 

String str2 = 
""saturday""
; 

System.out.println( editDistDP( str1 , str2 , str1.length(), str2.length()) ); 

} 
}","class EDIST { public static int min(int x, int y, int z) { if (x <= y && x <= z) return x; if (y <= x && y <= z) return y; else return z; } public static int editDistDP(String str1, String str2, int m, int n) { int dp[][] = new int[m + 1][n + 1]; for (int i = 0; i <= m; i++) { for (int j = 0; j <= n; j++) { if (i == 0) dp[i][j] = j; else if (j == 0) dp[i][j] = i; else if (str1.charAt(i - 1) == str2.charAt(j - 1)) dp[i][j] = dp[i - 1][j - 1]; else dp[i][j] = 1 + min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]); } } return dp[m][n]; } public static void main(String args[]) { String str1 = ""sunday""; String str2 = ""saturday""; System.out.println(editDistDP(str1, str2, str1.length(), str2.length())); } }",459
"public
class
LongestCommonSubSequence 
{ 



static
int
LCSubStr(
char
X[], 
char
Y[], 
int
m, 
int
n) 

{ 











int
LCStuff[][] = 
new
int
[m + 
1
][n + 
1
]; 

int
result = 
0
; 





for
(
int
i = 
0
; i <= m; i++) 

{ 

for
(
int
j = 
0
; j <= n; j++) 

{ 

if
(i == 
0
|| j == 
0
) 

LCStuff[i][j] = 
0
; 

else
if
(X[i - 
1
] == Y[j - 
1
]) 

{ 

LCStuff[i][j] = LCStuff[i - 
1
][j - 
1
] + 
1
; 

result = Integer.max(result, LCStuff[i][j]); 

} 

else

LCStuff[i][j] = 
0
; 

} 

} 

return
result; 

} 




public
static
void
main(String[] args) 

{ 

String X = 
""OldSite:GeeksforGeeks.org""
; 

String Y = 
""NewSite:GeeksQuiz.com""
; 


int
m = X.length(); 

int
n = Y.length(); 


System.out.println(
""Length of Longest Common Substring is ""

+ LCSubStr(X.toCharArray(), Y.toCharArray(), m, n)); 

} 
}","public class LongestCommonSubSequence { static int LCSubStr(char X[], char Y[], int m, int n) { int LCStuff[][] = new int[m + 1][n + 1]; int result = 0; for (int i = 0; i <= m; i++) { for (int j = 0; j <= n; j++) { if (i == 0 || j == 0) LCStuff[i][j] = 0; else if (X[i - 1] == Y[j - 1]) { LCStuff[i][j] = LCStuff[i - 1][j - 1] + 1; result = Math.max(result, LCStuff[i][j]); } else LCStuff[i][j] = 0; } } return result; } public static void main(String[] args) { String X = ""OldSite:GeeksforGeeks.org""; String Y = ""NewSite:GeeksQuiz.com""; int m = X.length(); int n = Y.length(); System.out.println(""Length of Longest Common Substring is "" + LCSubStr(X.toCharArray(), Y.toCharArray(), m, n)); } }",460
"public
class
GFG { 






static
int
LCSubStr(String X, String Y) 

{ 




int
m = X.length(); 

int
n = Y.length(); 






int
result = 
0
; 






int
[][]len = 
new
int
[
2
][n]; 






int
currRow = 
0
; 












for
(
int
i = 
0
; i < m; i++) { 

for
(
int
j = 
0
; j < n; j++) { 

if
(i == 
0
|| j == 
0
) { 

len[currRow][j] = 
0
; 

} 

else
if
(X.charAt(i - 
1
) == 

Y.charAt(j - 
1
)) 

{ 

len[currRow][j] = 

len[(
1
- currRow)][(j - 
1
)] 

+ 
1
; 

result = Math.max(result, 

len[currRow][j]); 

} 

else

{ 

len[currRow][j] = 
0
; 

} 

} 








currRow = 
1
- currRow; 

} 


return
result; 

} 




public
static
void
main(String args[]) 

{ 

String X = 
""GeeksforGeeks""
; 

String Y = 
""GeeksQuiz""
; 


System.out.print(LCSubStr(X, Y)); 

} 
}","public class GFG { static int LCSubStr(String X, String Y) { int m = X.length(); int n = Y.length(); int result = 0; int[][] len = new int[2][n]; int currRow = 0; for (int i = 0; i < m; i++) { for (int j = 0; j < n; j++) { if (i == 0 || j == 0) { len[currRow][j] = 0; } else if (X.charAt(i - 1) == Y.charAt(j - 1)) { len[currRow][j] = len[(1 - currRow)][(j - 1)] + 1; result = Math.max(result, len[currRow][j]); } else { len[currRow][j] = 0; } } currRow = 1 - currRow; } return result; } public static void main(String args[]) { String X = ""GeeksforGeeks""; String Y = ""GeeksQuiz""; System.out.print(LCSubStr(X, Y)); } }",461
"class
GFG 
{ 



static
int
offeringNumber(
int
n, 

int
templeHeight[]) 
{ 

int
sum = 
0
; 







for
(
int
i = 
0
; i < n; ++i) 

{ 





int
left = 
0
, right = 
0
; 

for
(
int
j = i - 
1
; j >= 
0
; --j) 

{ 

if
(templeHeight[j] < 

templeHeight[j + 
1
]) 

++left; 

else

break
; 

} 






for
(
int
j = i + 
1
; j < n; ++j) 

{ 

if
(templeHeight[j] < 

templeHeight[j - 
1
]) 

++right; 

else

break
; 

} 








sum += Math.max(right, left) + 
1
; 

} 


return
sum; 
} 


public
static
void
main (String[] args) 
{ 
int
arr1[] = {
1
, 
2
, 
2
}; 
System.out.println(offeringNumber(
3
, arr1)); 
int
arr2[] = {
1
, 
4
, 
3
, 

6
, 
2
, 
1
}; 
System.out.println(offeringNumber(
6
, arr2)); 
} 
}","class GFG { static int offeringNumber(int n, int[] templeHeight) { int sum = 0; for (int i = 0; i < n; ++i) { int left = 0, right = 0; for (int j = i - 1; j >= 0; --j) { if (templeHeight[j] < templeHeight[j + 1]) ++left; else break; } for (int j = i + 1; j < n; ++j) { if (templeHeight[j] < templeHeight[j - 1]) ++right; else break; } sum += Math.max(right, left) + 1; } return sum; } public static void main(String[] args) { int arr1[] = { 1, 2, 2 }; System.out.println(offeringNumber(3, arr1)); int arr2[] = { 1, 4, 3, 6, 2, 1 }; System.out.println(offeringNumber(6, arr2)); } }",462
"class
GFG 
{ 





static
void
printEqualSumSets(
int
[]arr, 

int
n) 

{ 

int
i, currSum, sum = 
0
; 




for
(i = 
0
; i < arr.length; i++) 

sum += arr[i]; 










if
((sum & 
1
) == 
1
) 

{ 

System.out.print(
""-1""
); 

return
; 

} 






int
k = sum >> 
1
; 














boolean
[][]dp = 
new
boolean
[n + 
1
][k + 
1
]; 






for
(i = 
1
; i <= k; i++) 

dp[
0
][i] = 
false
; 






for
(i = 
0
; i <= n; i++) 

dp[i][
0
] = 
true
; 






for
(i = 
1
; i <= n; i++) 

{ 

for
(currSum = 
1
; 

currSum <= k; 

currSum++) 

{ 




dp[i][currSum] = dp[i - 
1
][currSum]; 




if
(arr[i - 
1
] <= currSum) 

dp[i][currSum] = dp[i][currSum] | 

dp[i - 
1
][currSum - arr[i - 
1
]]; 

} 

} 




List<Integer> set1 = 
new
ArrayList<Integer>(); 

List<Integer> set2 = 
new
ArrayList<Integer>(); 






if
(!dp[n][k]) 

{ 

System.out.print(
""-1\n""
); 

return
; 

} 






i = n; 

currSum = k; 


while
(i > 
0
&& currSum >= 
0
) 

{ 








if
(dp[i - 
1
][currSum]) 

{ 

i--; 

set2.add(arr[i]); 

} 






else
if
(dp[i - 
1
][currSum - arr[i - 
1
]]) 

{ 

i--; 

currSum -= arr[i]; 

set1.add(arr[i]); 

} 

} 




System.out.print(
""Set 1 elements: ""
); 

for
(i = 
0
; i < set1.size(); i++) 

System.out.print(set1.get(i) + 
"" ""
); 


System.out.print(
""\nSet 2 elements: ""
); 


for
(i = 
0
; i < set2.size(); i++) 

System.out.print(set2.get(i) + 
"" ""
); 

} 




public
static
void
main(String args[]) 

{ 

int
[]arr = 
new
int
[]{ 
5
, 
5
, 
1
, 
11
}; 

int
n = arr.length; 

printEqualSumSets(arr, n); 

} 
}","class GFG { static void printEqualSumSets(int[] arr, int n) { int i, currSum, sum = 0; for (i = 0; i < arr.length; i++) sum += arr[i]; if ((sum & 1) == 1) { System.out.print(""-1""); return; } int k = sum >> 1; boolean[][] dp = new boolean[n + 1][k + 1]; for (i = 1; i <= k; i++) dp[0][i] = false; for (i = 0; i <= n; i++) dp[i][0] = true; for (i = 1; i <= n; i++) { for (currSum = 1; currSum <= k; currSum++) { dp[i][currSum] = dp[i - 1][currSum]; if (arr[i - 1] <= currSum) dp[i][currSum] = dp[i][currSum] | dp[i - 1][currSum - arr[i - 1]]; } } List<Integer> set1 = new ArrayList<Integer>(); List<Integer> set2 = new ArrayList<Integer>(); if (!dp[n][k]) { System.out.print(""-1\n""); return; } i = n; currSum = k; while (i > 0 && currSum >= 0) { if (dp[i - 1][currSum]) { i--; set2.add(arr[i]); } else if (dp[i - 1][currSum - arr[i - 1]]) { i--; currSum -= arr[i]; set1.add(arr[i]); } } System.out.print(""Set 1 elements: ""); for (i = 0; i < set1.size(); i++) System.out.print(set1.get(i) + "" ""); System.out.print(""\nSet 2 elements: ""); for (i = 0; i < set2.size(); i++) System.out.print(set2.get(i) + "" ""); } public static void main(String args[]) { int[] arr = new int[]{5, 5, 1, 11}; int n = arr.length; printEqualSumSets(arr, n); } }",463
"class
LBS 
{ 



static
int
lbs( 
int
arr[], 
int
n ) 

{ 

int
i, j; 




int
[] lis = 
new
int
[n]; 

for
(i = 
0
; i < n; i++) 

lis[i] = 
1
; 




for
(i = 
1
; i < n; i++) 

for
(j = 
0
; j < i; j++) 

if
(arr[i] > arr[j] && lis[i] < lis[j] + 
1
) 

lis[i] = lis[j] + 
1
; 




int
[] lds = 
new
int
[n]; 

for
(i = 
0
; i < n; i++) 

lds[i] = 
1
; 




for
(i = n-
2
; i >= 
0
; i--) 

for
(j = n-
1
; j > i; j--) 

if
(arr[i] > arr[j] && lds[i] < lds[j] + 
1
) 

lds[i] = lds[j] + 
1
; 





int
max = lis[
0
] + lds[
0
] - 
1
; 

for
(i = 
1
; i < n; i++) 

if
(lis[i] + lds[i] - 
1
> max) 

max = lis[i] + lds[i] - 
1
; 


return
max; 

} 


public
static
void
main (String[] args) 

{ 

int
arr[] = {
0
, 
8
, 
4
, 
12
, 
2
, 
10
, 
6
, 
14
, 
1
, 
9
, 
5
, 

13
, 
3
, 
11
, 
7
, 
15
}; 

int
n = arr.length; 

System.out.println(
""Length of LBS is ""
+ lbs( arr, n )); 

} 
}","public class LBS { static int lbs(int[] arr, int n) { int i, j; int[] lis = new int[n]; for (i = 0; i < n; i++) lis[i] = 1; for (i = 1; i < n; i++) for (j = 0; j < i; j++) if (arr[i] > arr[j] && lis[i] < lis[j] + 1) lis[i] = lis[j] + 1; int[] lds = new int[n]; for (i = 0; i < n; i++) lds[i] = 1; for (i = n - 2; i >= 0; i--) for (j = n - 1; j > i; j--) if (arr[i] > arr[j] && lds[i] < lds[j] + 1) lds[i] = lds[j] + 1; int max = lis[0] + lds[0] - 1; for (i = 1; i < n; i++) if (lis[i] + lds[i] - 1 > max) max = lis[i] + lds[i] - 1; return max; } public static void main(String[] args) { int arr[] = { 0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15 }; int n = arr.length; System.out.println(""Length of LBS is "" + lbs(arr, n)); } }",464
"class
GFG { 






static
int
lps(String s) 

{ 

int
n = s.length(); 








int
a[] = 
new
int
[n]; 




for
(
int
i = n - 
1
; i >= 
0
; i--) 

{ 

int
back_up = 
0
; 








for
(
int
j = i; j < n; j++) { 








if
(j == i) 

a[j] = 
1
; 








else
if
(s.charAt(i) == s.charAt(j)) 

{ 

int
temp = a[j]; 

a[j] = back_up + 
2
; 

back_up = temp; 

} 






else

{ 

back_up = a[j]; 

a[j] = Math.max(a[j - 
1
], a[j]); 

} 

} 

} 

return
a[n - 
1
]; 

} 



public
static
void
main(String[] args) 

{ 

String str = 
""GEEKSFORGEEKS""
; 

System.out.println(lps(str)); 

} 
}","class GFG { static int lps(String s) { int n = s.length(); int a[] = new int[n]; for (int i = n - 1; i >= 0; i--) { int back_up = 0; for (int j = i; j < n; j++) { if (j == i) a[j] = 1; else if (s.charAt(i) == s.charAt(j)) { int temp = a[j]; a[j] = back_up + 2; back_up = temp; } else { back_up = a[j]; a[j] = Math.max(a[j - 1], a[j]); } } } return a[n - 1]; } public static void main(String[] args) { String str = ""GEEKSFORGEEKS""; System.out.println(lps(str)); } }",465
"public
class
GFG 
{ 





static
int
countPS(String str) 

{ 

int
N = str.length(); 






int
[][] cps = 
new
int
[N+
1
][N+
1
]; 




for
(
int
i = 
0
; i < N; i++) 

cps[i][i] = 
1
; 






for
(
int
L=
2
; L<=N; L++) 

{ 

for
(
int
i = 
0
; i < N; i++) 

{ 

int
k = L + i - 
1
; 

if
(k < N){ 

if
(str.charAt(i) == str.charAt(k)) 

cps[i][k] = cps[i][k-
1
] + 

cps[i+
1
][k] + 
1
; 

else

cps[i][k] = cps[i][k-
1
] + 

cps[i+
1
][k] - 

cps[i+
1
][k-
1
]; 

} 

} 

} 




return
cps[
0
][N-
1
]; 

} 




public
static
void
main(String args[]) 

{ 

String str = 
""abcb""
; 

System.out.println(
""Total palindromic ""
+ 

""subsequence are : ""

+ countPS(str)); 

} 
}","public class GFG { static int countPS(String str) { int N = str.length(); int[][] cps = new int[N+1][N+1]; for (int i = 0; i < N; i++) cps[i][i] = 1; for (int L = 2; L <= N; L++) { for (int i = 0; i < N; i++) { int k = L + i - 1; if (k < N) { if (str.charAt(i) == str.charAt(k)) cps[i][k] = cps[i][k-1] + cps[i+1][k] + 1; else cps[i][k] = cps[i][k-1] + cps[i+1][k] - cps[i+1][k-1]; } } } return cps[0][N-1]; } public static void main(String args[]) { String str = ""abcb""; System.out.println(""Total palindromic "" + ""subsequence are : "" + countPS(str)); } }",466
"public
class
LongestPalinSubstring 
{ 



static
void
printSubStr(String str, 
int
low, 
int
high) { 

System.out.println(str.substring(low, high + 
1
)); 

} 








static
int
longestPalSubstr(String str) { 

int
n = str.length(); 









boolean
table[][] = 
new
boolean
[n][n]; 




int
maxLength = 
1
; 

for
(
int
i = 
0
; i < n; ++i) 

table[i][i] = 
true
; 




int
start = 
0
; 

for
(
int
i = 
0
; i < n - 
1
; ++i) { 

if
(str.charAt(i) == str.charAt(i + 
1
)) { 

table[i][i + 
1
] = 
true
; 

start = i; 

maxLength = 
2
; 

} 

} 






for
(
int
k = 
3
; k <= n; ++k) { 




for
(
int
i = 
0
; i < n - k + 
1
; ++i) 

{ 





int
j = i + k - 
1
; 








if
(table[i + 
1
][j - 
1
] && str.charAt(i) == 

str.charAt(j)) { 

table[i][j] = 
true
; 


if
(k > maxLength) { 

start = i; 

maxLength = k; 

} 

} 

} 

} 

System.out.print(
""Longest palindrome substring is; ""
); 

printSubStr(str, start, start + maxLength - 
1
); 


return
maxLength; 


} 




public
static
void
main(String[] args) { 


String str = 
""forgeeksskeegfor""
; 

System.out.println(
""Length is: ""
+ 

longestPalSubstr(str)); 

} 
}","public class LongestPalinSubstring { static void printSubStr(String str, int low, int high) { System.out.println(str.substring(low, high + 1)); } static int longestPalSubstr(String str) { int n = str.length(); boolean table[][] = new boolean[n][n]; int maxLength = 1; for (int i = 0; i < n; ++i) table[i][i] = true; int start = 0; for (int i = 0; i < n - 1; ++i) { if (str.charAt(i) == str.charAt(i + 1)) { table[i][i + 1] = true; start = i; maxLength = 2; } } for (int k = 3; k <= n; ++k) { for (int i = 0; i < n - k + 1; ++i) { int j = i + k - 1; if (table[i + 1][j - 1] && str.charAt(i) == str.charAt(j)) { table[i][j] = true; if (k > maxLength) { start = i; maxLength = k; } } } } System.out.print(""Longest palindrome substring is; ""); printSubStr(str, start, start + maxLength - 1); return maxLength; } public static void main(String[] args) { String str = ""forgeeksskeegfor""; System.out.println(""Length is: "" + longestPalSubstr(str)); } }",467
"public
class
GFG 
{ 





static
int
CountPS(
char
str[], 
int
n) 

{ 







int
dp[][] = 
new
int
[n][n]; 






boolean
P[][] = 
new
boolean
[n][n]; 




for
(
int
i= 
0
; i< n; i++) 

P[i][i] = 
true
; 




for
(
int
i=
0
; i<n-
1
; i++) 

{ 

if
(str[i] == str[i+
1
]) 

{ 

P[i][i+
1
] = 
true
; 

dp[i][i+
1
] = 
1
; 

} 

} 












for
(
int
gap=
2
; gap<n; gap++) 

{ 



for
(
int
i=
0
; i<n-gap; i++) 

{ 



int
j = gap + i; 




if
(str[i] == str[j] && P[i+
1
][j-
1
] ) 

P[i][j] = 
true
; 








if
(P[i][j] == 
true
) 

dp[i][j] = dp[i][j-
1
] + dp[i+
1
][j] + 
1
- dp[i+
1
][j-
1
]; 

else

dp[i][j] = dp[i][j-
1
] + dp[i+
1
][j] - dp[i+
1
][j-
1
]; 

} 

} 




return
dp[
0
][n-
1
]; 

} 




public
static
void
main(String[] args) 

{ 

String str = 
""abaab""
; 

System.out.println(CountPS(str.toCharArray(), str.length())); 

} 
}","public class GFG { static int CountPS(char str[], int n) { int dp[][] = new int[n][n]; boolean P[][] = new boolean[n][n]; for (int i = 0; i < n; i++) P[i][i] = true; for (int i = 0; i < n - 1; i++) { if (str[i] == str[i + 1]) { P[i][i + 1] = true; dp[i][i + 1] = 1; } } for (int gap = 2; gap < n; gap++) { for (int i = 0; i < n - gap; i++) { int j = gap + i; if (str[i] == str[j] && P[i + 1][j - 1]) P[i][j] = true; if (P[i][j] == true) dp[i][j] = dp[i][j - 1] + dp[i + 1][j] + 1 - dp[i + 1][j - 1]; else dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1]; } } return dp[0][n - 1]; } public static void main(String[] args) { String str = ""abaab""; System.out.println(CountPS(str.toCharArray(), str.length())); } }",468
"class
GFG { 



static
void
constructDp(
int
dp[][], String str) 

{ 

int
l = str.length(); 






int
[][] isPalin = 
new
int
[l + 
1
][l + 
1
]; 




for
(
int
i = 
0
; i <= l; i++) { 

for
(
int
j = 
0
; j <= l; j++) { 

isPalin[i][j] = dp[i][j] = 
0
; 

} 

} 




for
(
int
i = l - 
1
; i >= 
0
; i--) { 



isPalin[i][i] = 
1
; 

dp[i][i] = 
1
; 




for
(
int
j = i + 
1
; j < l; j++) { 



isPalin[i][j] = (str.charAt(i) == str.charAt(j) && (i + 
1
> j - 
1
|| (isPalin[i + 
1
][j - 
1
]) != 
0
)) ? 
1
: 
0
; 




dp[i][j] = dp[i][j - 
1
] + dp[i + 
1
][j] - dp[i + 
1
][j - 
1
] + isPalin[i][j]; 

} 

} 

} 




static
int
countOfPalindromeInRange(
int
dp[][], 
int
l, 
int
r) 

{ 

return
dp[l][r]; 

} 




public
static
void
main(String args[]) 

{ 

int
MAX = 
50
; 

String str = 
""xyaabax""
; 

int
[][] dp = 
new
int
[MAX][MAX]; 

constructDp(dp, str); 


int
l = 
3
; 

int
r = 
5
; 

System.out.println(countOfPalindromeInRange(dp, l, r)); 

} 
}","class GFG { static void constructDp(int[][] dp, String str) { int l = str.length(); int[][] isPalin = new int[l + 1][l + 1]; for (int i = 0; i <= l; i++) { for (int j = 0; j <= l; j++) { isPalin[i][j] = dp[i][j] = 0; } } for (int i = l - 1; i >= 0; i--) { isPalin[i][i] = 1; dp[i][i] = 1; for (int j = i + 1; j < l; j++) { isPalin[i][j] = (str.charAt(i) == str.charAt(j) && (i + 1 > j - 1 || (isPalin[i + 1][j - 1]) != 0)) ? 1 : 0; dp[i][j] = dp[i][j - 1] + dp[i + 1][j] - dp[i + 1][j - 1] + isPalin[i][j]; } } } static int countOfPalindromeInRange(int[][] dp, int l, int r) { return dp[l][r]; } public static void main(String args[]) { int MAX = 50; String str = ""xyaabax""; int[][] dp = new int[MAX][MAX]; constructDp(dp, str); int l = 3; int r = 5; System.out.println(countOfPalindromeInRange(dp, l, r)); } }",469
"public
class
GFG 
{ 







static
int
maxAlternateSum(
int
arr[], 
int
n) 

{ 

if
(n == 
1
) 

return
arr[
0
]; 











int
dec[] = 
new
int
[n]; 





int
inc[] = 
new
int
[n]; 






dec[
0
] = inc[
0
] = arr[
0
]; 


int
flag = 
0
; 




for
(
int
i=
1
; i<n; i++) 

{ 

for
(
int
j=
0
; j<i; j++) 

{ 







if
(arr[j] > arr[i]) 

{ 

dec[i] = Math.max(dec[i], inc[j]+arr[i]); 






flag = 
1
; 

} 








else
if
(arr[j] < arr[i] && flag == 
1
) 






inc[i] = Math.max(inc[i], dec[j]+arr[i]); 

} 

} 




int
result = Integer.MIN_VALUE; 

for
(
int
i = 
0
; i < n; i++) 

{ 

if
(result < inc[i]) 

result = inc[i]; 

if
(result < dec[i]) 

result = dec[i]; 

} 




return
result; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[]= {
8
, 
2
, 
3
, 
5
, 
7
, 
9
, 
10
}; 

System.out.println(
""Maximum sum = ""
+ 

maxAlternateSum(arr , arr.length)); 

} 
}","public class GFG { static int maxAlternateSum(int[] arr, int n) { if (n == 1) return arr[0]; int[] dec = new int[n]; int[] inc = new int[n]; dec[0] = inc[0] = arr[0]; int flag = 0; for (int i=1; i<n; i++) { for (int j=0; j<i; j++) { if (arr[j] > arr[i]) { dec[i] = Math.max(dec[i], inc[j]+arr[i]); flag = 1; } else if (arr[j] < arr[i] && flag == 1) inc[i] = Math.max(inc[i], dec[j]+arr[i]); } } int result = Integer.MIN_VALUE; for (int i = 0; i < n; i++) { if (result < inc[i]) result = inc[i]; if (result < dec[i]) result = dec[i]; } return result; } public static void main(String[] args) { int arr[]= { 8 , 2 , 3 , 5 , 7 , 9 , 10 }; System.out.println( ",470
"class
GFG { 



static
int
zzis(
int
arr[], 
int
n) 
{ 



int
las[][] = 
new
int
[n][
2
]; 




for
(
int
i = 
0
; i < n; i++) 

las[i][
0
] = las[i][
1
] = 
1
; 


int
res = 
1
; 





for
(
int
i = 
1
; i < n; i++) 

{ 





for
(
int
j = 
0
; j < i; j++) 

{ 





if
(arr[j] < arr[i] && 

las[i][
0
] < las[j][
1
] + 
1
) 

las[i][
0
] = las[j][
1
] + 
1
; 






if
( arr[j] > arr[i] && 

las[i][
1
] < las[j][
0
] + 
1
) 

las[i][
1
] = las[j][
0
] + 
1
; 

} 




if
(res < Math.max(las[i][
0
], las[i][
1
])) 

res = Math.max(las[i][
0
], las[i][
1
]); 

} 


return
res; 
} 


public
static
void
main(String[] args) 
{ 

int
arr[] = { 
10
, 
22
, 
9
, 
33
, 
49
, 

50
, 
31
, 
60
}; 

int
n = arr.length; 

System.out.println(
""Length of Longest ""
+ 

""alternating subsequence is ""
+ 

zzis(arr, n)); 
} 
}","class GFG {

    static int zzis(int arr[], int n) {

        int las[][] = new int[n][2];

        for (int i = 0; i < n; i++)
            las[i][0] = las[i][1] = 1;

        int res = 1;

        for (int i = 1; i < n; i++) {

            for (int j = 0; j < i; j++) {

                if (arr[j] < arr[i] && las[i][0] < las[j][1] + 1)
                    las[i][0] = las[j][1] + 1;

                if (arr[j] > arr[i] && las[i][1] < las[j][0] + 1)
                    las[i][1] = las[j][0] + 1;

            }

            if (res < Math.max(las[i][0], las[i][1]))
                res = Math.max(las[i][0], las[i][1]);
        }

        return res;
    }

    public static void main(String[] args) {

        int arr[] = {10, 22, 9, 33, 49, 50, 31, 60};
        int n = arr.length;

        System.out.println(""Length of Longest "" +
                ""alternating subsequence is "" +
                zzis(arr, n));
    }
}",471
"class
GFG 
{ 


static
int
search(
int
arr[], 
int
x, 
int
n) 
{ 

for
(
int
i = 
0
; i < n; i++) 

if
(arr[i] == x) 

return
i; 

return
-
1
; 
} 



static
void
printPostOrder(
int
in1[], 

int
pre[], 
int
n) 
{ 







int
root = search(in1, pre[
0
], n); 






if
(root != 
0
) 

printPostOrder(in1, Arrays.copyOfRange(pre, 
1
, n), root); 






if
(root != n - 
1
) 

printPostOrder(Arrays.copyOfRange(in1, root+
1
, n), 

Arrays.copyOfRange(pre, 
1
+root, n), n - root - 
1
); 




System.out.print( pre[
0
] + 
"" ""
); 
} 


public
static
void
main(String args[]) 
{ 

int
in1[] = { 
4
, 
2
, 
5
, 
1
, 
3
, 
6
}; 

int
pre[] = { 
1
, 
2
, 
4
, 
5
, 
3
, 
6
}; 

int
n = in1.length; 

System.out.println(
""Postorder traversal ""
); 

printPostOrder(in1, pre, n); 
} 
}","class GFG { static int search(int[] arr, int x, int n) { for (int i = 0; i < n; i++) if (arr[i] == x) return i; return -1; } static void printPostOrder(int[] in1, int[] pre, int n) { int root = search(in1, pre[0], n); if (root != 0) printPostOrder(in1, Arrays.copyOfRange(pre, 1, n), root); if (root != n - 1) printPostOrder(Arrays.copyOfRange(in1, root+1, n), Arrays.copyOfRange(pre, 1+root, n), n - root - 1); System.out.print(pre[0] + "" ""); } public static void main(String args[]) { int in1[] = { 4, 2, 5, 1, 3, 6 }; int pre[] = { 1, 2, 4, 5, 3, 6 }; int n = in1.length; System.out.println(""Postorder traversal ""); printPostOrder(in1, pre, n); } }",472
"public
class
PrintPost { 

static
int
preIndex = 
0
; 

void
printPost(
int
[] in, 
int
[] pre, 
int
inStrt, 
int
inEnd) 

{ 

if
(inStrt > inEnd) 

return
; 






int
inIndex = search(in, inStrt, inEnd, pre[preIndex++]); 




printPost(in, pre, inStrt, inIndex - 
1
); 




printPost(in, pre, inIndex + 
1
, inEnd); 




System.out.print(in[inIndex] + 
"" ""
); 

} 


int
search(
int
[] in, 
int
startIn, 
int
endIn, 
int
data) 

{ 

int
i = 
0
; 

for
(i = startIn; i < endIn; i++) 

if
(in[i] == data) 

return
i; 

return
i; 

} 




public
static
void
main(String ars[]) 

{ 

int
in[] = { 
4
, 
2
, 
5
, 
1
, 
3
, 
6
}; 

int
pre[] = { 
1
, 
2
, 
4
, 
5
, 
3
, 
6
}; 

int
len = in.length; 

PrintPost tree = 
new
PrintPost(); 

tree.printPost(in, pre, 
0
, len - 
1
); 

} 
}","public class PostPrinter {

    static int preIndex = 0;

    void printPost(int[] in, int[] pre, int inStrt, int inEnd) {
        if (inStrt > inEnd)
            return;

        int inIndex = search(in, inStrt, inEnd, pre[preIndex++]);

        printPost(in, pre, inStrt, inIndex - 1);

        printPost(in, pre, inIndex + 1, inEnd);

        System.out.print(in[inIndex] + "" "");
    }

    int search(int[] in, int startIn, int endIn, int data) {
        int i = 0;
        for (i = startIn; i < endIn; i++) {
            if (in[i] == data)
                return i;
        }
        return i;
    }

    public static void main(String ars[]) {
        int in[] = {4, 2, 5, 1, 3, 6};
        int pre[] = {1, 2, 4, 5, 3, 6};
        int len = in.length;
        PostPrinter tree = new PostPrinter();
        tree.printPost(in, pre, 0, len - 1);
    }
}",473
"class
Node { 

int
data; 

Node left, right; 


public
Node(
int
d) 

{ 

data = d; 

left = right = 
null
; 

} 
} 

class
BinaryTree { 

Node root; 




void
printSpiral(Node node) 

{ 

int
h = height(node); 

int
i; 




boolean
ltr = 
false
; 

for
(i = 
1
; i <= h; i++) { 

printGivenLevel(node, i, ltr); 




ltr = !ltr; 

} 

} 




int
height(Node node) 

{ 

if
(node == 
null
) 

return
0
; 

else
{ 




int
lheight = height(node.left); 

int
rheight = height(node.right); 




if
(lheight > rheight) 

return
(lheight + 
1
); 

else

return
(rheight + 
1
); 

} 

} 




void
printGivenLevel(Node node, 
int
level, 
boolean
ltr) 

{ 

if
(node == 
null
) 

return
; 

if
(level == 
1
) 

System.out.print(node.data + 
"" ""
); 

else
if
(level > 
1
) { 

if
(ltr != 
false
) { 

printGivenLevel(node.left, level - 
1
, ltr); 

printGivenLevel(node.right, level - 
1
, ltr); 

} 

else
{ 

printGivenLevel(node.right, level - 
1
, ltr); 

printGivenLevel(node.left, level - 
1
, ltr); 

} 

} 

} 



public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
7
); 

tree.root.left.right = 
new
Node(
6
); 

tree.root.right.left = 
new
Node(
5
); 

tree.root.right.right = 
new
Node(
4
); 

System.out.println(
""Spiral order traversal of Binary Tree is ""
); 

tree.printSpiral(tree.root); 

} 
}","class Node {
    int data;
    Node left, right;

    public Node(int d) {
        data = d;
        left = right = null;
    }
}

class BinaryTree {
    Node root;

    void printSpiral(Node node) {
        int h = height(node);
        int i;
        boolean ltr = false;
        for (i = 1; i <= h; i++) {
            printGivenLevel(node, i, ltr);
            ltr = !ltr;
        }
    }

    int height(Node node) {
        if (node == null)
            return 0;
        else {
            int lheight = height(node.left);
            int rheight = height(node.right);
            if (lheight > rheight)
                return (lheight + 1);
            else
                return (rheight + 1);
        }
    }

    void printGivenLevel(Node node, int level, boolean ltr) {
        if (node == null)
            return;
        if (level == 1)
            System.out.print(node.data + "" "");
        else if (level > 1) {
            if (ltr != false) {
                printGivenLevel(node.left, level - 1, ltr);
                printGivenLevel(node.right, level - 1, ltr);
            } else {
                printGivenLevel(node.right, level - 1, ltr);
                printGivenLevel(node.left, level - 1, ltr);
            }
        }
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(7);
        tree.root.left.right = new Node(6);
        tree.root.right.left = new Node(5);
        tree.root.right.right = new Node(4);
        System.out.println(""Spiral order traversal of Binary Tree is "");
        tree.printSpiral(tree.root);
    }
}",474
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right; 

} 
} 

class
BinaryTree 
{ 

Node root; 




void
reverseLevelOrder(Node node) 

{ 

int
h = height(node); 

int
i; 

for
(i = h; i >= 
1
; i--) 



{ 

printGivenLevel(node, i); 

} 

} 




void
printGivenLevel(Node node, 
int
level) 

{ 

if
(node == 
null
) 

return
; 

if
(level == 
1
) 

System.out.print(node.data + 
"" ""
); 

else
if
(level > 
1
) 

{ 

printGivenLevel(node.left, level - 
1
); 

printGivenLevel(node.right, level - 
1
); 

} 

} 




int
height(Node node) 

{ 

if
(node == 
null
) 

return
0
; 

else

{ 



int
lheight = height(node.left); 

int
rheight = height(node.right); 




if
(lheight > rheight) 

return
(lheight + 
1
); 

else

return
(rheight + 
1
); 

} 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 




tree.root = 
new
Node(
1
); 

tree.root.left = 
new
Node(
2
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
5
); 


System.out.println(
""Level Order traversal of binary tree is : ""
); 

tree.reverseLevelOrder(tree.root); 

} 
}","class Node {

    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right;
    }
}

class BinaryTree {

    Node root;

    void reverseLevelOrder(Node node) {
        int h = height(node);
        int i;
        for (i = h; i >= 1; i--) {
            printGivenLevel(node, i);
        }
    }

    void printGivenLevel(Node node, int level) {
        if (node == null) return;
        if (level == 1) System.out.print(node.data + "" "");
        else if (level > 1) {
            printGivenLevel(node.left, level - 1);
            printGivenLevel(node.right, level - 1);
        }
    }

    int height(Node node) {
        if (node == null) return 0;
        else {
            int lheight = height(node.left);
            int rheight = height(node.right);
            if (lheight > rheight) return (lheight + 1);
            else return (rheight + 1);
        }
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        System.out.println(""Level Order traversal of binary tree is : "");
        tree.reverseLevelOrder(tree.root);
    }
}",475
"class
Node { 

char
data; 

Node left, right; 


Node(
char
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree { 

Node root; 

static
int
preIndex = 
0
; 




Node buildTree(
char
in[], 
char
pre[], 
int
inStrt, 
int
inEnd) 

{ 

if
(inStrt > inEnd) 

return
null
; 




Node tNode = 
new
Node(pre[preIndex++]); 




if
(inStrt == inEnd) 

return
tNode; 




int
inIndex = search(in, inStrt, inEnd, tNode.data); 




tNode.left = buildTree(in, pre, inStrt, inIndex - 
1
); 

tNode.right = buildTree(in, pre, inIndex + 
1
, inEnd); 


return
tNode; 

} 







int
search(
char
arr[], 
int
strt, 
int
end, 
char
value) 

{ 

int
i; 

for
(i = strt; i <= end; i++) { 

if
(arr[i] == value) 

return
i; 

} 

return
i; 

} 




void
printInorder(Node node) 

{ 

if
(node == 
null
) 

return
; 




printInorder(node.left); 




System.out.print(node.data + 
"" ""
); 




printInorder(node.right); 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

char
in[] = 
new
char
[] { 
'D'
, 
'B'
, 
'E'
, 
'A'
, 
'F'
, 
'C'
}; 

char
pre[] = 
new
char
[] { 
'A'
, 
'B'
, 
'D'
, 
'E'
, 
'C'
, 
'F'
}; 

int
len = in.length; 

Node root = tree.buildTree(in, pre, 
0
, len - 
1
); 




System.out.println(
""Inorder traversal of constructed tree is : ""
); 

tree.printInorder(root); 

} 
}","class Node { char data; Node left, right; Node(char item) { data = item; left = right = null; } } class BinaryTree { Node root; static int preIndex = 0; Node buildTree(char in[], char pre[], int inStrt, int inEnd) { if (inStrt > inEnd) return null; Node tNode = new Node(pre[preIndex++]); if (inStrt == inEnd) return tNode; int inIndex = search(in, inStrt, inEnd, tNode.data); tNode.left = buildTree(in, pre, inStrt, inIndex - 1); tNode.right = buildTree(in, pre, inIndex + 1, inEnd); return tNode; } int search(char arr[], int strt, int end, char value) { int i; for (i = strt; i <= end; i++) { if (arr[i] == value) return i; } return i; } void printInorder(Node node) { if (node == null) return; printInorder(node.left); System.out.print(node.data + "" ""); printInorder(node.right); } public static void main(String args[]) { BinaryTree tree = new BinaryTree(); char in[] = new char[] { 'D', 'B', 'E', 'A', 'F', 'C'}; char pre[] = new char[] { 'A', 'B', 'D', 'E', 'C', 'F'}; int len = in.length; Node root = tree.buildTree(in, pre, 0, len - 1); System.out.println(""Inorder traversal of constructed tree is : ""); tree.printInorder(root); } }",476
"class
GFG 
{ 



public
static
void
ancestorMatrix(Node root , 

int
matrix[][],
int
size) 

{ 




if
(root==
null
) 

return
; 




ancestorMatrix(root.left, matrix, size); 




ancestorMatrix(root.right, matrix, size); 







if
(root.left != 
null
) 

{ 



matrix[root.data][root.left.data] = 
1
; 










for
(
int
i = 
0
; i < size; i++) 

{ 







if
(matrix[root.left.data][i] == 
1
) 

matrix[root.data][i] = 
1
; 

} 

} 




if
(root.right != 
null
) 

{ 

matrix[root.data][root.right.data] = 
1
; 


for
(
int
i = 
0
; i < size; i++) 

{ 

if
(matrix[root.right.data][i]==
1
) 

matrix[root.data][i] = 
1
; 

} 

} 



} 




public
static
void
main(String[] args) 

{ 




Node tree_root = 
new
Node(
5
); 

tree_root.left = 
new
Node (
1
); 

tree_root.right = 
new
Node(
2
); 

tree_root.left.left = 
new
Node(
0
); 

tree_root.left.right = 
new
Node(
4
); 

tree_root.right.left = 
new
Node(
3
); 




int
size = 
6
; 

int
matrix [][] = 
new
int
[size][size]; 


ancestorMatrix(tree_root, matrix, size); 


for
(
int
i = 
0
; i < size; i++) 

{ 

for
(
int
j = 
0
; j < size; j++) 

{ 

System.out.print(matrix[i][j]+
"" ""
); 

} 

System.out.println(); 

} 

} 




static
class
Node 

{ 

public
int
data ; 

public
Node left ,right; 

public
Node (
int
data) 

{ 

this
.data = data; 

this
.left = 
this
.right = 
null
; 

} 

} 
}","class GFG { public static void ancestorMatrix(Node root , int matrix[][], int size) { if (root== null) return; ancestorMatrix(root.left, matrix, size); ancestorMatrix(root.right, matrix, size); if (root.left != null) { matrix[root.data][root.left.data] = 1; for (int i = 0; i < size; i++) { if (matrix[root.left.data][i] == 1) matrix[root.data][i] = 1; } } if (root.right != null) { matrix[root.data][root.right.data] = 1; for (int i = 0; i < size; i++) { if (matrix[root.right.data][i]== 1) matrix[root.data][i] = 1; } } } public static void main(String[] args) { Node tree_root = new Node(5); tree_root.left = new Node (1); tree_root.right = new Node(2); tree_root.left.left = new Node(0); tree_root.left.right = new Node(4); tree_root.right.left = new Node(3); int size = 6; int matrix [][] = new int[size][size]; ancestorMatrix(tree_root, matrix, size); for (int i = 0; i < size; i++) { for (int j = 0; j < size; j++) { System.out.print(matrix[i][j]+ ",477
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




Node buildTree(
int
inorder[], 
int
start, 
int
end, Node node) 

{ 

if
(start > end) 

return
null
; 




int
i = max(inorder, start, end); 




node = 
new
Node(inorder[i]); 




if
(start == end) 

return
node; 




node.left = buildTree(inorder, start, i - 
1
, node.left); 

node.right = buildTree(inorder, i + 
1
, end, node.right); 


return
node; 

} 







int
max(
int
arr[], 
int
strt, 
int
end) 

{ 

int
i, max = arr[strt], maxind = strt; 

for
(i = strt + 
1
; i <= end; i++) 

{ 

if
(arr[i] > max) 

{ 

max = arr[i]; 

maxind = i; 

} 

} 

return
maxind; 

} 




void
printInorder(Node node) 

{ 

if
(node == 
null
) 

return
; 




printInorder(node.left); 




System.out.print(node.data + 
"" ""
); 




printInorder(node.right); 

} 


public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 




int
inorder[] = 
new
int
[]{
5
, 
10
, 
40
, 
30
, 
28
}; 

int
len = inorder.length; 

Node mynode = tree.buildTree(inorder, 
0
, len - 
1
, tree.root); 




System.out.println(
""Inorder traversal of the constructed tree is ""
); 

tree.printInorder(mynode); 

} 
}","class Node { int data; Node left, right; Node(int item) { data = item; left = right = null; } } class BinaryTree { Node root; Node buildTree(int inorder[], int start, int end, Node node) { if (start > end) return null; int i = max(inorder, start, end); node = new Node(inorder[i]); if (start == end) return node; node.left = buildTree(inorder, start, i - 1, node.left); node.right = buildTree(inorder, i + 1, end, node.right); return node; } int max(int arr[], int strt, int end) { int i, max = arr[strt], maxind = strt; for (i = strt + 1; i <= end; i++) { if (arr[i] > max) { max = arr[i]; maxind = i; } } return maxind; } void printInorder(Node node) { if (node == null) return; printInorder(node.left); System.out.print(node.data + ",478
"class
Node { 

int
data; 

Node left, right; 


public
Node(
int
data) 

{ 

this
.data = data; 

left = right = 
null
; 

} 
} 


class
Index { 

int
index; 
} 

class
BinaryTree { 



Node buildUtil(
int
in[], 
int
post[], 
int
inStrt, 

int
inEnd, Index pIndex) 

{ 



if
(inStrt > inEnd) 

return
null
; 




Node node = 
new
Node(post[pIndex.index]); 

(pIndex.index)--; 




if
(inStrt == inEnd) 

return
node; 




int
iIndex = search(in, inStrt, inEnd, node.data); 




node.right = buildUtil(in, post, iIndex + 
1
, inEnd, pIndex); 

node.left = buildUtil(in, post, inStrt, iIndex - 
1
, pIndex); 


return
node; 

} 






Node buildTree(
int
in[], 
int
post[], 
int
n) 

{ 

Index pIndex = 
new
Index(); 

pIndex.index = n - 
1
; 

return
buildUtil(in, post, 
0
, n - 
1
, pIndex); 

} 




int
search(
int
arr[], 
int
strt, 
int
end, 
int
value) 

{ 

int
i; 

for
(i = strt; i <= end; i++) { 

if
(arr[i] == value) 

break
; 

} 

return
i; 

} 




void
preOrder(Node node) 

{ 

if
(node == 
null
) 

return
; 

System.out.print(node.data + 
"" ""
); 

preOrder(node.left); 

preOrder(node.right); 

} 


public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

int
in[] = 
new
int
[] { 
4
, 
8
, 
2
, 
5
, 
1
, 
6
, 
3
, 
7
}; 

int
post[] = 
new
int
[] { 
8
, 
4
, 
5
, 
2
, 
6
, 
7
, 
3
, 
1
}; 

int
n = in.length; 

Node root = tree.buildTree(in, post, n); 

System.out.println(
""Preorder of the constructed tree : ""
); 

tree.preOrder(root); 

} 
}","class Node { int data; Node left, right; public Node(int data) { this.data = data; left = right = null; } } class Index { int index; } class BinaryTree { Node buildUtil(int[] in, int[] post, int inStrt, int inEnd, Index pIndex) { if (inStrt > inEnd) return null; Node node = new Node(post[pIndex.index]); (pIndex.index)--; if (inStrt == inEnd) return node; int iIndex = search(in, inStrt, inEnd, node.data); node.right = buildUtil(in, post, iIndex + 1, inEnd, pIndex); node.left = buildUtil(in, post, inStrt, iIndex - 1, pIndex); return node; } Node buildTree(int[] in, int[] post, int n) { Index pIndex = new Index(); pIndex.index = n - 1; return buildUtil(in, post, 0, n - 1, pIndex); } int search(int[] arr, int strt, int end, int value) { int i; for (i = strt; i <= end; i++) { if (arr[i] == value) break; } return i; } void preOrder(Node node) { if (node == null) return; System.out.print(node.data + "" ""); preOrder(node.left); preOrder(node.right); } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); int in[] = new int[] { 4, 8, 2, 5, 1, 6, 3, 7 }; int post[] = new int[] { 8, 4, 5, 2, 6, 7, 3, 1 }; int n = in.length; Node root = tree.buildTree(in, post, n); System.out.println(""Preorder of the constructed tree : ""); tree.preOrder(root); } }",479
"class
Node 
{ 

int
data; 

Node left, right; 


Node(
int
item) 

{ 

data = item; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




void
convertTree(Node node) 

{ 

int
left_data = 
0
, right_data = 
0
, diff; 




if
(node == 
null

|| (node.left == 
null
&& node.right == 
null
)) 

return
; 

else

{ 



convertTree(node.left); 

convertTree(node.right); 




if
(node.left != 
null
) 

left_data = node.left.data; 




if
(node.right != 
null
) 

right_data = node.right.data; 




diff = left_data + right_data - node.data; 




if
(diff > 
0
) 

node.data = node.data + diff; 




if
(diff < 
0
) 




increment(node, -diff); 

} 

} 




void
increment(Node node, 
int
diff) 

{ 



if
(node.left != 
null
) 

{ 

node.left.data = node.left.data + diff; 




increment(node.left, diff); 

} 

else
if
(node.right != 
null
) 


{ 

node.right.data = node.right.data + diff; 




increment(node.right, diff); 

} 

} 




void
printInorder(Node node) 

{ 

if
(node == 
null
) 

return
; 




printInorder(node.left); 




System.out.print(node.data + 
"" ""
); 




printInorder(node.right); 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
50
); 

tree.root.left = 
new
Node(
7
); 

tree.root.right = 
new
Node(
2
); 

tree.root.left.left = 
new
Node(
3
); 

tree.root.left.right = 
new
Node(
5
); 

tree.root.right.left = 
new
Node(
1
); 

tree.root.right.right = 
new
Node(
30
); 


System.out.println(
""Inorder traversal before conversion is :""
); 

tree.printInorder(tree.root); 


tree.convertTree(tree.root); 

System.out.println(
""""
); 


System.out.println(
""Inorder traversal after conversion is :""
); 

tree.printInorder(tree.root); 


} 
}","class Node { int data; Node left, right; Node(int item) { data = item; left = right = null; } } class BinaryTree { Node root; void convertTree(Node node) { int left_data = 0, right_data = 0, diff; if (node == null || (node.left == null && node.right == null)) return; else { convertTree(node.left); convertTree(node.right); if (node.left != null) left_data = node.left.data; if (node.right != null) right_data = node.right.data; diff = left_data + right_data - node.data; if (diff > 0) node.data = node.data + diff; if (diff < 0) increment(node, -diff); } } void increment(Node node, int diff) { if (node.left != null) { node.left.data = node.left.data + diff; increment(node.left, diff); } else if (node.right != null) { node.right.data = node.right.data + diff; increment(node.right, diff); } } void printInorder(Node node) { if (node == null) return; printInorder(node.left); System.out.print(node.data + "" ""); printInorder(node.right); } public static void main(String args[]) { BinaryTree tree = new BinaryTree(); tree.root = new Node(50); tree.root.left = new Node(7); tree.root.right = new Node(2); tree.root.left.left = new Node(3); tree.root.left.right = new Node(5); tree.root.right.left = new Node(1); tree.root.right.right = new Node(30); System.out.println(""Inorder traversal before conversion is :""); tree.printInorder(tree.root); tree.convertTree(tree.root); System.out.println(""""); System.out.println(""Inorder traversal after conversion is :""); tree.printInorder(tree.root); } }",480
"class
Node 
{ 

int
data; 

Node left, right, nextRight; 


Node(
int
item) 

{ 

data = item; 

left = right = nextRight = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




int
sum(Node node) 

{ 

if
(node == 
null
) 

return
0
; 

return
sum(node.left) + node.data + sum(node.right); 

} 




int
isSumTree(Node node) 

{ 

int
ls, rs; 




if
((node == 
null
) || (node.left == 
null
&& node.right == 
null
)) 

return
1
; 




ls = sum(node.left); 

rs = sum(node.right); 




if
((node.data == ls + rs) && (isSumTree(node.left) != 
0
) 

&& (isSumTree(node.right)) != 
0
) 

return
1
; 


return
0
; 

} 




public
static
void
main(String args[]) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
26
); 

tree.root.left = 
new
Node(
10
); 

tree.root.right = 
new
Node(
3
); 

tree.root.left.left = 
new
Node(
4
); 

tree.root.left.right = 
new
Node(
6
); 

tree.root.right.right = 
new
Node(
3
); 


if
(tree.isSumTree(tree.root) != 
0
) 

System.out.println(
""The given tree is a sum tree""
); 

else

System.out.println(
""The given tree is not a sum tree""
); 

} 
}","class Node {

    int data;
    Node left, right, nextRight;

    Node(int item) {
        data = item;
        left = right = nextRight = null;
    }
}

class BinaryTree {

    Node root;

    int sum(Node node) {
        if (node == null)
            return 0;
        return sum(node.left) + node.data + sum(node.right);
    }

    int isSumTree(Node node) {
        int ls, rs;
        if ((node == null) || (node.left == null && node.right == null))
            return 1;
        ls = sum(node.left);
        rs = sum(node.right);
        if ((node.data == ls + rs) && (isSumTree(node.left) != 0) && (isSumTree(node.right) != 0))
            return 1;
        return 0;
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(26);
        tree.root.left = new Node(10);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(6);
        tree.root.right.right = new Node(3);
        if (tree.isSumTree(tree.root) != 0)
            System.out.println(""The given tree is a sum tree"");
        else
            System.out.println(""The given tree is not a sum tree"");
    }
}",481
"class
Node 
{ 

int
key; 

Node left, right; 


public
Node(
int
key) 

{ 

this
.key = key; 

left = right = 
null
; 

} 
} 

class
BinaryTree 
{ 

Node root; 




int
count(Node node) 

{ 

if
(node == 
null
) 

return
0
; 


return
count(node.left) + count(node.right) + 
1
; 

} 








boolean
checkRec(Node node, 
int
n) 

{ 



if
(node == 
null
) 

return
false
; 




if
(count(node) == n - count(node)) 

return
true
; 




return
checkRec(node.left, n) 

|| checkRec(node.right, n); 

} 




boolean
check(Node node) 

{ 



int
n = count(node); 




return
checkRec(node, n); 

} 




public
static
void
main(String[] args) 

{ 

BinaryTree tree = 
new
BinaryTree(); 

tree.root = 
new
Node(
5
); 

tree.root.left = 
new
Node(
1
); 

tree.root.right = 
new
Node(
6
); 

tree.root.left.left = 
new
Node(
3
); 

tree.root.right.left = 
new
Node(
7
); 

tree.root.right.right = 
new
Node(
4
); 

if
(tree.check(tree.root)==
true
) 

System.out.println(
""YES""
); 

else

System.out.println(
""NO""
); 

} 
}","class Node { int key; Node left, right; public Node(int key) { this.key = key; left = right = null; } } class BinaryTree { Node root; int count(Node node) { if (node == null) return 0; return count(node.left) + count(node.right) + 1; } boolean checkRec(Node node, int n) { if (node == null) return false; if (count(node) == n - count(node)) return true; return checkRec(node.left, n) || checkRec(node.right, n); } boolean check(Node node) { int n = count(node); return checkRec(node, n); } public static void main(String[] args) { BinaryTree tree = new BinaryTree(); tree.root = new Node(5); tree.root.left = new Node(1); tree.root.right = new Node(6); tree.root.left.left = new Node(3); tree.root.right.left = new Node(7); tree.root.right.right = new Node(4); if (tree.check(tree.root) == true) System.out.println(""YES""); else System.out.println(""NO""); } }",482
"class
GfG { 

static
int
preIndex = 
0
; 


static
class
Node 
{ 

int
data; 

Node left, right; 
} 


static
Node newNode(
int
data) 
{ 

Node temp = 
new
Node(); 

temp.data = data; 

temp.left = 
null
; 

temp.right = 
null
; 

return
temp; 
} 


static
int
search(
int
arr[], 
int
strt, 
int
end, 
int
value) 
{ 

for
(
int
i = strt; i <= end; i++) 

{ 

if
(arr[i] == value) 

return
i; 

} 

return
-
1
; 
} 


static
Node buildTree(
int
in[], 
int
pre[], 
int
inStrt, 
int
inEnd) 
{ 


if
(inStrt > inEnd) 

return
null
; 




Node tNode = newNode(pre[preIndex++]); 




if
(inStrt == inEnd) 

return
tNode; 




int
inIndex = search(in, inStrt, inEnd, tNode.data); 




tNode.left = buildTree(in, pre, inStrt, inIndex-
1
); 

tNode.right = buildTree(in, pre, inIndex+
1
, inEnd); 


return
tNode; 
} 


static
int
checkPostorder(Node node, 
int
postOrder[], 
int
index) 
{ 

if
(node == 
null
) 

return
index; 




index = checkPostorder(node.left,postOrder,index); 




index = checkPostorder(node.right,postOrder,index); 




if
(node.data == postOrder[index]) 

index++; 

else

return
-
1
; 


return
index; 
} 


public
static
void
main(String[] args) 
{ 

int
inOrder[] = {
4
, 
2
, 
5
, 
1
, 
3
}; 

int
preOrder[] = {
1
, 
2
, 
4
, 
5
, 
3
}; 

int
postOrder[] = {
4
, 
5
, 
2
, 
3
, 
1
}; 


int
len = inOrder.length; 






Node root = buildTree(inOrder, preOrder, 
0
, len - 
1
); 






int
index = checkPostorder(root,postOrder,
0
); 




if
(index == len) 

System.out.println(
""Yes""
); 

else

System.out.println(
""No""
); 

} 
}","class GfG {

static int preIndex = 0;


static class Node {

int data;

Node left, right;
}


static Node newNode(int data) {

Node temp = new Node();

temp.data = data;

temp.left = null;

temp.right = null;

return temp;
}


static int search(int arr[], int strt, int end, int value) {

for(int i = strt; i <= end; i++) {

if(arr[i] == value)

return i;

}

return -1;
}


static Node buildTree(int in[], int pre[], int inStrt, int inEnd) {

if (inStrt > inEnd)

return null;



Node tNode = newNode(pre[preIndex++]);



if (inStrt == inEnd)

return tNode;



int inIndex = search(in, inStrt, inEnd, tNode.data);


tNode.left = buildTree(in, pre, inStrt, inIndex-1);

tNode.right = buildTree(in, pre, inIndex+1, inEnd);


return tNode;
}


static int checkPostorder(Node node, int postOrder[], int index) {

if (node == null)

return index;



index = checkPostorder(node.left, postOrder, index);

index = checkPostorder(node.right, postOrder, index);

if (node.data == postOrder[index])

index++;

else

return -1;


return index;
}


public static void main(String[] args) {

int inOrder[] = {4, 2, 5, 1, 3};

int preOrder[] = {1, 2, 4, 5, 3};

int postOrder[] = {4, 5, 2, 3, 1};

int len = inOrder.length;

Node root = buildTree(inOrder, preOrder, 0, len - 1);

int index = checkPostorder(root, postOrder, 0);

if (index == len)

System.out.println(""Yes"");

else

System.out.println(""No"");

}
}",483
"class
MST { 



private
static
final
int
V = 
5
; 






int
minKey(
int
key[], Boolean mstSet[]) 

{ 



int
min = Integer.MAX_VALUE, min_index = -
1
; 


for
(
int
v = 
0
; v < V; v++) 

if
(mstSet[v] == 
false
&& key[v] < min) { 

min = key[v]; 

min_index = v; 

} 


return
min_index; 

} 






void
printMST(
int
parent[], 
int
graph[][]) 

{ 

System.out.println(
""Edge \tWeight""
); 

for
(
int
i = 
1
; i < V; i++) 

System.out.println(parent[i] + 
"" - ""
+ i + 
""\t""
+ graph[i][parent[i]]); 

} 






void
primMST(
int
graph[][]) 

{ 



int
parent[] = 
new
int
[V]; 




int
key[] = 
new
int
[V]; 




Boolean mstSet[] = 
new
Boolean[V]; 




for
(
int
i = 
0
; i < V; i++) { 

key[i] = Integer.MAX_VALUE; 

mstSet[i] = 
false
; 

} 




key[
0
] = 
0
; 




parent[
0
] = -
1
; 





for
(
int
count = 
0
; count < V - 
1
; count++) { 





int
u = minKey(key, mstSet); 




mstSet[u] = 
true
; 








for
(
int
v = 
0
; v < V; v++) 








if
(graph[u][v] != 
0
&& mstSet[v] == 
false
&& graph[u][v] < key[v]) { 

parent[v] = u; 

key[v] = graph[u][v]; 

} 

} 




printMST(parent, graph); 

} 


public
static
void
main(String[] args) 

{ 



MST t = 
new
MST(); 

int
graph[][] = 
new
int
[][] { { 
0
, 
2
, 
0
, 
6
, 
0
}, 

{ 
2
, 
0
, 
3
, 
8
, 
5
}, 

{ 
0
, 
3
, 
0
, 
0
, 
7
}, 

{ 
6
, 
8
, 
0
, 
0
, 
9
}, 

{ 
0
, 
5
, 
7
, 
9
, 
0
} }; 




t.primMST(graph); 

} 
}","class MST {

private static final int V = 5;

int minKey(int key[], Boolean mstSet[]) {
int min = Integer.MAX_VALUE, min_index = -1;
for (int v = 0; v < V; v++)
if (mstSet[v] == false && key[v] < min) {
min = key[v];
min_index = v;
}
return min_index;
}

void printMST(int parent[], int graph[][]) {
System.out.println(""Edge \tWeight"");
for (int i = 1; i < V; i++)
System.out.println(parent[i] + "" - "" + i + ""\t"" + graph[i][parent[i]]);
}

void primMST(int graph[][]) {
int parent[] = new int[V];
int key[] = new int[V];
Boolean mstSet[] = new Boolean[V];
for (int i = 0; i < V; i++) {
key[i] = Integer.MAX_VALUE;
mstSet[i] = false;
}
key[0] = 0;
parent[0] = -1;
for (int count = 0; count < V - 1; count++) {
int u = minKey(key, mstSet);
mstSet[u] = true;
for (int v = 0; v < V; v++)
if (graph[u][v] != 0 && mstSet[v] == false && graph[u][v] < key[v]) {
parent[v] = u;
key[v] = graph[u][v];
}
}
printMST(parent, graph);
}

public static void main(String[] args) {
MST t = new MST();
int graph[][] = new int[][] {{0, 2, 0, 6, 0}, {2, 0, 3, 8, 5}, {0, 3, 0, 0, 7}, {6, 8, 0, 0, 9}, {0, 5, 7, 9, 0}};
t.primMST(graph);
}
}",484
"class
ShortestPath 
{ 





static
final
int
V=
9
; 

int
minDistance(
int
dist[], Boolean sptSet[]) 

{ 



int
min = Integer.MAX_VALUE, min_index=-
1
; 


for
(
int
v = 
0
; v < V; v++) 

if
(sptSet[v] == 
false
&& dist[v] <= min) 

{ 

min = dist[v]; 

min_index = v; 

} 


return
min_index; 

} 




void
printSolution(
int
dist[], 
int
n) 

{ 

System.out.println(
""Vertex Distance ""
); 

for
(
int
i = 
0
; i < V; i++) 

System.out.println(i+
"" tt ""
+dist[i]); 

} 








void
dijkstra(
int
graph[][], 
int
src) 

{ 

int
dist[] = 
new
int
[V]; 









Boolean sptSet[] = 
new
Boolean[V]; 




for
(
int
i = 
0
; i < V; i++) 

{ 

dist[i] = Integer.MAX_VALUE; 

sptSet[i] = 
false
; 

} 




dist[src] = 
0
; 




for
(
int
count = 
0
; count < V-
1
; count++) 

{ 







int
u = minDistance(dist, sptSet); 




sptSet[u] = 
true
; 






for
(
int
v = 
0
; v < V; v++) 








if
(!sptSet[v] && graph[u][v]!=
0
&& 

dist[u] != Integer.MAX_VALUE && 

dist[u]+graph[u][v] < dist[v]) 

dist[v] = dist[u] + graph[u][v]; 

} 




printSolution(dist, V); 

} 




public
static
void
main (String[] args) 

{ 



int
graph[][] = 
new
int
[][]{{
0
, 
4
, 
0
, 
0
, 
0
, 
0
, 
0
, 
8
, 
0
}, 

{
4
, 
0
, 
8
, 
0
, 
0
, 
0
, 
0
, 
11
, 
0
}, 

{
0
, 
8
, 
0
, 
7
, 
0
, 
4
, 
0
, 
0
, 
2
}, 

{
0
, 
0
, 
7
, 
0
, 
9
, 
14
, 
0
, 
0
, 
0
}, 

{
0
, 
0
, 
0
, 
9
, 
0
, 
10
, 
0
, 
0
, 
0
}, 

{
0
, 
0
, 
4
, 
14
, 
10
, 
0
, 
2
, 
0
, 
0
}, 

{
0
, 
0
, 
0
, 
0
, 
0
, 
2
, 
0
, 
1
, 
6
}, 

{
8
, 
11
, 
0
, 
0
, 
0
, 
0
, 
1
, 
0
, 
7
}, 

{
0
, 
0
, 
2
, 
0
, 
0
, 
0
, 
6
, 
7
, 
0
} 

}; 

ShortestPath t = 
new
ShortestPath(); 

t.dijkstra(graph, 
0
); 

} 
}","static final int V=9; int minDistance(int dist[], Boolean sptSet[]) { int min = Integer.MAX_VALUE, min_index=-1; for (int v = 0; v < V; v++) if (sptSet[v] == false && dist[v] <= min) { min = dist[v]; min_index = v; } return min_index; } void printSolution(int dist[], int n) { System.out.println(""Vertex Distance ""); for (int i = 0; i < V; i++) System.out.println(i+"" tt ""+dist[i]); } void dijkstra(int graph[][], int src) { int dist[] = new int[V]; Boolean sptSet[] = new Boolean[V]; for (int i = 0; i < V; i++) { dist[i] = Integer.MAX_VALUE; sptSet[i] = false; } dist[src] = 0; for (int count = 0; count < V-1; count++) { int u = minDistance(dist, sptSet); sptSet[u] = true; for (int v = 0; v < V; v++) if (!sptSet[v] && graph[u][v]!=0&& dist[u] != Integer.MAX_VALUE && dist[u]+graph[u][v] < dist[v]) dist[v] = dist[u] + graph[u][v]; } printSolution(dist, V); } public static void main (String[] args) { int graph[][] = new int[][]{{0, 4, 0, 0, 0, 0, 0, 8, 0}, {4, 0, 8, 0, 0, 0, 0, 11, 0}, {0, 8, 0, 7, 0, 4, 0, 0, 2}, {0, 0, 7, 0, 9, 14, 0, 0, 0}, {0, 0, 0, 9, 0, 10, 0, 0, 0}, {0, 0, 4, 14, 10, 0, 2, 0, 0}, {0, 0, 0, 0, 0, 2, 0, 1, 6}, {8, 11, 0, 0, 0, 0, 1, 0, 7}, {0, 0, 2, 0, 0, 0, 6, 7, 0} }; ShortestPath t = new ShortestPath(); t.dijkstra(graph, 0); }",485
"class
GFG 
{ 











static
int
maximumSum(
int
arr[], 
int
n, 
int
k) 

{ 



for
(
int
i = 
1
; i <= k; i++) 

{ 

int
min = +
2147483647
; 

int
index = -
1
; 








for
(
int
j=
0
; j<n; j++) 

{ 

if
(arr[j] < min) 

{ 

min = arr[j]; 

index = j; 

} 

} 








if
(min == 
0
) 

break
; 




arr[index] = -arr[index]; 

} 




int
sum = 
0
; 

for
(
int
i = 
0
; i < n; i++) 

sum += arr[i]; 

return
sum; 

} 





public
static
void
main(String arg[]) 

{ 

int
arr[] = {-
2
, 
0
, 
5
, -
1
, 
2
}; 

int
k = 
4
; 

int
n = arr.length; 

System.out.print(maximumSum(arr, n, k)); 

} 
}","class GFG { static int maximumSum(int[] arr, int n, int k) { for(int i = 1; i <= k; i++) { int min = Integer.MAX_VALUE; int index = -1; for(int j = 0; j < n; j++) { if(arr[j] < min) { min = arr[j]; index = j; } } if(min == 0) break; arr[index] = -arr[index]; } int sum = 0; for(int i = 0; i < n; i++) sum += arr[i]; return sum; } public static void main(String arg[]) { int[] arr = {-2, 0, 5, -1, 2}; int k = 4; int n = arr.length; System.out.print(maximumSum(arr, n, k)); } }",486
"class
GFG { 






static
void
minimizeWithKSwaps(
int
arr[], 
int
n, 
int
k) 

{ 

for
(
int
i = 
0
; i < n-
1
&& k > 
0
; ++i) 

{ 






int
pos = i; 

for
(
int
j = i+
1
; j < n ; ++j) 

{ 






if
(j - i > k) 

break
; 






if
(arr[j] < arr[pos]) 

pos = j; 

} 






int
temp; 


for
(
int
j = pos; j>i; --j) 

{ 

temp=arr[j]; 

arr[j]=arr[j-
1
]; 

arr[j-
1
]=temp; 

} 






k -= pos-i; 

} 

} 




public
static
void
main(String[] args) 

{ 


int
arr[] = {
7
, 
6
, 
9
, 
2
, 
1
}; 

int
n = arr.length; 

int
k = 
3
; 


minimizeWithKSwaps(arr, n, k); 




for
(
int
i=
0
; i<n; ++i) 

System.out.print(arr[i] +
"" ""
); 

} 
}","class GFG { static void minimizeWithKSwaps(int arr[], int n, int k) { for (int i = 0; i < n-1 && k > 0; ++i) { int pos = i; for (int j = i+1; j < n ; ++j) { if (j - i > k) break; if (arr[j] < arr[pos]) pos = j; } int temp; for (int j = pos; j>i; --j) { temp=arr[j]; arr[j]=arr[j-1]; arr[j-1]=temp; } k -= pos-i; } } public static void main(String[] args) { int arr[] = {7, 6, 9, 2, 1}; int n = arr.length; int k = 3; minimizeWithKSwaps(arr, n, k); for (int i=0; i<n; ++i) System.out.print(arr[i] + ",487
"class
GFG 
{ 

static
void
SwapInts(
int
array[], 

int
position1, 

int
position2) 

{ 










int
temp = array[position1]; 






array[position1] = array[position2]; 






array[position2] = temp; 

} 






static
void
KSwapMaximum(
int
[]arr, 

int
n, 
int
k) 

{ 

for
(
int
i = 
0
; 

i < n - 
1
&& k > 
0
; ++i) 

{ 










int
indexPosition = i; 

for
(
int
j = i + 
1
; j < n; ++j) 

{ 








if
(k <= j - i) 

break
; 










if
(arr[j] > arr[indexPosition]) 

indexPosition = j; 

} 










for
(
int
j = indexPosition; j > i; --j) 

SwapInts(arr, j, j - 
1
); 






k -= indexPosition - i; 

} 

} 




public
static
void
main(String args[]) 

{ 

int
[]arr = { 
3
, 
5
, 
4
, 
1
, 
2
}; 

int
n = arr.length; 

int
k = 
3
; 


KSwapMaximum(arr, n, k); 




for
(
int
i = 
0
; i < n; ++i) 

System.out.print(arr[i] + 
"" ""
); 

} 
}","class GFG { static void SwapInts(int array[], int position1, int position2) { int temp = array[position1]; array[position1] = array[position2]; array[position2] = temp; } static void KSwapMaximum(int[] arr, int n, int k) { for (int i = 0; i < n - 1 && k > 0; ++i) { int indexPosition = i; for (int j = i + 1; j < n; ++j) { if (k <= j - i) break; if (arr[j] > arr[indexPosition]) indexPosition = j; } for (int j = indexPosition; j > i; --j) SwapInts(arr, j, j - 1); k -= indexPosition - i; } } public static void main(String args[]) { int[] arr = { 3, 5, 4, 1, 2 }; int n = arr.length; int k = 3; KSwapMaximum(arr, n, k); for (int i = 0; i < n; ++i) System.out.print(arr[i] + ",488
"class
Graph 
{ 

private
int
V; 


private
LinkedList<Integer> adj[]; 





Graph(
int
v) 

{ 

V = v; 

adj = 
new
LinkedList[v]; 

for
(
int
i=
0
; i<v; ++i) 

adj[i] = 
new
LinkedList(); 

} 




void
addEdge(
int
v,
int
w) 

{ 

adj[v].add(w); 

adj[w].add(v); 


} 






void
greedyColoring() 

{ 

int
result[] = 
new
int
[V]; 




Arrays.fill(result, -
1
); 




result[
0
] = 
0
; 








boolean
available[] = 
new
boolean
[V]; 




Arrays.fill(available, 
true
); 




for
(
int
u = 
1
; u < V; u++) 

{ 





Iterator<Integer> it = adj[u].iterator() ; 

while
(it.hasNext()) 

{ 

int
i = it.next(); 

if
(result[i] != -
1
) 

available[result[i]] = 
false
; 

} 




int
cr; 

for
(cr = 
0
; cr < V; cr++){ 

if
(available[cr]) 

break
; 

} 


result[u] = cr; 





Arrays.fill(available, 
true
); 

} 




for
(
int
u = 
0
; u < V; u++) 

System.out.println(
""Vertex ""
+ u + 
"" ---> Color ""

+ result[u]); 

} 




public
static
void
main(String args[]) 

{ 

Graph g1 = 
new
Graph(
5
); 

g1.addEdge(
0
, 
1
); 

g1.addEdge(
0
, 
2
); 

g1.addEdge(
1
, 
2
); 

g1.addEdge(
1
, 
3
); 

g1.addEdge(
2
, 
3
); 

g1.addEdge(
3
, 
4
); 

System.out.println(
""Coloring of graph 1""
); 

g1.greedyColoring(); 


System.out.println(); 

Graph g2 = 
new
Graph(
5
); 

g2.addEdge(
0
, 
1
); 

g2.addEdge(
0
, 
2
); 

g2.addEdge(
1
, 
2
); 

g2.addEdge(
1
, 
4
); 

g2.addEdge(
2
, 
4
); 

g2.addEdge(
4
, 
3
); 

System.out.println(
""Coloring of graph 2 ""
); 

g2.greedyColoring(); 

} 
}","class Graph { private int V; private LinkedList<Integer> adj[]; Graph(int v) { V = v; adj = new LinkedList[v]; for (int i = 0; i < v; ++i) adj[i] = new LinkedList(); } void addEdge(int v, int w) { adj[v].add(w); adj[w].add(v); } void greedyColoring() { int result[] = new int[V]; Arrays.fill(result, -1); result[0] = 0; boolean available[] = new boolean[V]; Arrays.fill(available, true); for (int u = 1; u < V; u++) { Iterator<Integer> it = adj[u].iterator(); while (it.hasNext()) { int i = it.next(); if (result[i] != -1) available[result[i]] = false; } int cr; for (cr = 0; cr < V; cr++) { if (available[cr]) break; } result[u] = cr; Arrays.fill(available, true); } for (int u = 0; u < V; u++) System.out.println(""Vertex "" + u + "" ---> Color "" + result[u]); } public static void main(String args[]) { Graph g1 = new Graph(5); g1.addEdge(0, 1); g1.addEdge(0, 2); g1.addEdge(1, 2); g1.addEdge(1, 3); g1.addEdge(2, 3); g1.addEdge(3, 4); System.out.println(""Coloring of graph 1""); g1.greedyColoring(); System.out.println(); Graph g2 = new Graph(5); g2.addEdge(0, 1); g2.addEdge(0, 2); g2.addEdge(1, 2); g2.addEdge(1, 4); g2.addEdge(2, 4); g2.addEdge(4, 3); System.out.println(""Coloring of graph 2 ""); g2.greedyColoring(); } }",489
"class
GFG 
{ 



static
final
int
N = 
3
; 






static
int
getMin(
int
arr[]) 

{ 

int
minInd = 
0
; 

for
(
int
i = 
1
; i < N; i++) 

if
(arr[i] < arr[minInd]) 

minInd = i; 

return
minInd; 

} 






static
int
getMax(
int
arr[]) 

{ 

int
maxInd = 
0
; 

for
(
int
i = 
1
; i < N; i++) 

if
(arr[i] > arr[maxInd]) 

maxInd = i; 

return
maxInd; 

} 




static
int
minOf2(
int
x, 
int
y) 

{ 

return
(x < y) ? x: y; 

} 














static
void
minCashFlowRec(
int
amount[]) 

{ 

















int
mxCredit = getMax(amount), mxDebit = getMin(amount); 






if
(amount[mxCredit] == 
0
&& amount[mxDebit] == 
0
) 

return
; 




int
min = minOf2(-amount[mxDebit], amount[mxCredit]); 

amount[mxCredit] -= min; 

amount[mxDebit] += min; 




System.out.println(
""Person ""
+ mxDebit + 
"" pays ""
+ min 

+ 
"" to ""
+ 
""Person ""
+ mxCredit); 












minCashFlowRec(amount); 

} 














static
void
minCashFlow(
int
graph[][]) 

{ 





int
amount[]=
new
int
[N]; 














for
(
int
p = 
0
; p < N; p++) 

for
(
int
i = 
0
; i < N; i++) 

amount[p] += (graph[i][p] - graph[p][i]); 


minCashFlowRec(amount); 

} 




public
static
void
main (String[] args) 

{ 





int
graph[][] = { {
0
, 
1000
, 
2000
}, 

{
0
, 
0
, 
5000
}, 

{
0
, 
0
, 
0
},}; 




minCashFlow(graph); 

} 
}","class GFG { static final int N = 3; static int getMin(int arr[]) { int minInd = 0; for (int i = 1; i < N; i++) if (arr[i] < arr[minInd]) minInd = i; return minInd; } static int getMax(int arr[]) { int maxInd = 0; for (int i = 1; i < N; i++) if (arr[i] > arr[maxInd]) maxInd = i; return maxInd; } static int minOf2(int x, int y) { return (x < y) ? x: y; } static void minCashFlowRec(int amount[]) { int mxCredit = getMax(amount), mxDebit = getMin(amount); if (amount[mxCredit] == 0 && amount[mxDebit] == 0) return; int min = minOf2(-amount[mxDebit], amount[mxCredit]); amount[mxCredit] -= min; amount[mxDebit] += min; System.out.println(""Person "" + mxDebit + "" pays "" + min + "" to "" + ""Person "" + mxCredit); minCashFlowRec(amount); } static void minCashFlow(int graph[][]) { int amount[]=new int[N]; for (int p = 0; p < N; p++) for (int i = 0; i < N; i++) amount[p] += (graph[i][p] - graph[p][i]); minCashFlowRec(amount); } public static void main (String[] args) { int graph[][] = { {0, 1000, 2000}, {0, 0, 5000}, {0, 0, 0},}; minCashFlow(graph); } }",490
"class
Main 
{ 

static
void
minAbsSumPair(
int
arr[], 
int
arr_size) 

{ 

int
inv_count = 
0
; 

int
l, r, min_sum, sum, min_l, min_r; 




if
(arr_size < 
2
) 

{ 

System.out.println(
""Invalid Input""
); 

return
; 

} 




min_l = 
0
; 

min_r = 
1
; 

min_sum = arr[
0
] + arr[
1
]; 


for
(l = 
0
; l < arr_size - 
1
; l++) 

{ 

for
(r = l+
1
; r < arr_size; r++) 

{ 

sum = arr[l] + arr[r]; 

if
(Math.abs(min_sum) > Math.abs(sum)) 

{ 

min_sum = sum; 

min_l = l; 

min_r = r; 

} 

} 

} 


System.out.println(
"" The two elements whose ""
+ 

""sum is minimum are ""
+ 

arr[min_l]+ 
"" and ""
+arr[min_r]); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
60
, -
10
, 
70
, -
80
, 
85
}; 

minAbsSumPair(arr, 
6
); 

} 

}","class Main { static void minAbsSumPair( int arr[], int arr_size) { int inv_count = 0; int l, r, min_sum, sum, min_l, min_r; if (arr_size < 2) { System.out.println( ""Invalid Input""); return; } min_l = 0; min_r = 1; min_sum = arr[0] + arr[1]; for (l = 0; l < arr_size - 1; l++) { for (r = l+1; r < arr_size; r++) { sum = arr[l] + arr[r]; if (Math.abs(min_sum) > Math.abs(sum)) { min_sum = sum; min_l = l; min_r = r; } } } System.out.println( "" The two elements whose "" + ""sum is minimum are "" + arr[min_l]+ "" and ""+arr[min_r]); } public static void main (String[] args) { int arr[] = { 1, 60, -10, 70, -80, 85}; minAbsSumPair(arr, 6); } }",491
"class
GFG { 



static
void
printPrevSmaller(
int
[]arr, 
int
n) 
{ 






System.out.print( 
""_, ""
); 




for
(
int
i = 
1
; i < n; i++) 

{ 





int
j; 

for
(j = i - 
1
; j >= 
0
; j--) 

{ 

if
(arr[j] < arr[i]) 

{ 

System.out.print(arr[j] + 
"", ""
); 

break
; 

} 

} 






if
(j == -
1
) 

System.out.print( 
""_, ""
) ; 

} 
} 




public
static
void
main (String[] args) 

{ 

int
[]arr = {
1
, 
3
, 
0
, 
2
, 
5
}; 

int
n = arr.length; 

printPrevSmaller(arr, n); 

} 
}","class GFG { static void printPrevSmaller(int[] arr, int n) { System.out.print(""_, ""); for (int i = 1; i < n; i++) { int j; for (j = i - 1; j >= 0; j--) { if (arr[j] < arr[i]) { System.out.print(arr[j] + "", ""); break; } } if (j == -1) System.out.print(""_, ""); } } public static void main(String[] args) { int[] arr = { 1, 3, 0, 2, 5 }; int n = arr.length; printPrevSmaller(arr, n); } }",492
"public class Main {

	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int[] arr = new int [n];
		int maxindex=0;
		int minindex=0;
		int max;
		int min;
		for(int i=0;i<arr.length;i++) {
			arr[i]=sc.nextInt();
		}
		int k=Integer.MAX_VALUE;
		for(int i=0;i<arr.length;i++) {
			for(int j=i;j<arr.length;j++) {
				if(i!=j) {
					int k1=Math.min(arr[i], arr[j])/Math.abs(i-j);
					if(k1<k) {
						k = k1;
					}
				}
			}
		}
		System.out.println(k);
	}

}","public class Main {

	public static void main(String[] args) {
		int n = Integer.parseInt(args[0]);
		int[] arr = new int[n];
		int maxindex = 0;
		int minindex = 0;
		int max;
		int min;
		for (int i = 0; i < arr.length; i++) {
			arr[i] = Integer.parseInt(args[i + 1]);
		}
		int k = Integer.MAX_VALUE;
		for (int i = 0; i < arr.length; i++) {
			for (int j = i; j < arr.length; j++) {
				if (i != j) {
					int k1 = Math.min(arr[i], arr[j]) / Math.abs(i - j);
					if (k1 < k) {
						k = k1;
					}
				}
			}
		}
		System.out.println(k);
	}

}",493
"public class hi {
    public static void main(String[] args) throws IOException{
        Reader in=new Reader();
		PrintWriter w = new PrintWriter(System.out);
		int n=in.nextInt();
		int[] arr=in.nextIntArray(n);
		int k=Integer.MAX_VALUE;
		for (int i = 0; i < n; i++) {
			for (int j = i+1; j < n; j++) {
				int a=(int)Math.floor((Math.min(arr[i],arr[j])/Math.abs(i-j)));
				if(a < k)
					k=a;
			}
		}
		w.println(k);
        w.close();
        return;
	}
	
}


class Reader 
	{ 
		final private int BUFFER_SIZE = 1 << 16; 
		private DataInputStream din; 
		private byte[] buffer; 
		private int bufferPointer, bytesRead; 

		public Reader() 
		{ 
			din = new DataInputStream(System.in); 
			buffer = new byte[BUFFER_SIZE]; 
			bufferPointer = bytesRead = 0; 
		} 
		public String nextLine() throws IOException{
			int c = read();
			while (isSpaceChar(c))
				c = read();
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isEndOfLine(c));
			return res.toString();
		}
        public String next() throws IOException{
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			StringBuilder res = new StringBuilder();
			do {
				res.appendCodePoint(c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}
		public int nextInt() throws IOException 
		{ 
			int ret = 0; 
			byte c = read(); 
			while (c <= ' ') 
				c = read(); 
			boolean neg = (c == '-'); 
			if (neg) 
				c = read(); 
			do
			{ 
				ret = ret * 10 + c - '0'; 
			} while ((c = read()) >= '0' && c <= '9'); 

			if (neg) 
				return -ret; 
			return ret; 
        } 
        public int[] nextIntArray(int n) throws IOException{
			int a[] = new int[n];
			for (int i = 0; i < n; i++) {
				a[i] = nextInt();
            }

			return a;
		}
		public long nextLong() throws IOException 
		{ 
			long ret = 0; 
			byte c = read(); 
			while (c <= ' ') 
				c = read(); 
			boolean neg = (c == '-'); 
			if (neg) 
				c = read(); 
			do { 
				ret = ret * 10 + c - '0'; 
			} 
			while ((c = read()) >= '0' && c <= '9'); 
			if (neg) 
				return -ret; 
			return ret; 
		} 

		public double nextDouble() throws IOException 
		{ 
			double ret = 0, div = 1; 
			byte c = read(); 
			while (c <= ' ') 
				c = read(); 
			boolean neg = (c == '-'); 
			if (neg) 
				c = read(); 

			do { 
				ret = ret * 10 + c - '0'; 
			} 
			while ((c = read()) >= '0' && c <= '9'); 

			if (c == '.') 
			{ 
				while ((c = read()) >= '0' && c <= '9') 
				{ 
					ret += (c - '0') / (div *= 10); 
				} 
			} 

			if (neg) 
				return -ret; 
			return ret; 
		} 

		private void fillBuffer() throws IOException 
		{ 
			bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE); 
			if (bytesRead == -1) 
				buffer[0] = -1; 
		} 

		private byte read() throws IOException 
		{ 
			if (bufferPointer == bytesRead) 
				fillBuffer(); 
			return buffer[bufferPointer++]; 
		} 

		public void close() throws IOException 
		{ 
			if (din == null) 
				return; 
			din.close(); 
        } 
        public boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}

		private boolean isEndOfLine(int c) {
			return c == '\n' || c == '\r' || c == -1;
		}
    }",ERROR,494
"public class PartySweet {
	static BufferedReader br;
	static StringTokenizer tokenizer;

	public static void main(String[] args) throws Exception {
		br = new BufferedReader(new InputStreamReader(System.in));
		int n = nextInt(), m = nextInt();
		int[] b = new int[n];
		int[] g = new int[m];
		for(int i = 0; i < n; i++)
			b[i] = nextInt();
		for(int i = 0; i < m; i++)
			g[i] = nextInt();
		int total = 0;
		int max = 0, max2 = 0;
		for(int i = 0; i < n; i++) {
			if(b[i] > b[max]) {
				max2 = max;
				max = i;
			}
			else if(b[max2] < b[i])
				max2 = i;
		}
		total += b[max] - b[max2];
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(b[i] > g[j]) {
					System.out.println(-1);
					return;
				}
				if(i != max)
					total += b[i];
				else
					total += g[j];
			}
		}
		System.out.println(total);
	}

	public static String next() throws IOException {
		while (tokenizer == null || !tokenizer.hasMoreTokens()) {
			String line = br.readLine();
			if (line == null)
				throw new IOException();
			tokenizer = new StringTokenizer(line);
		}
		return tokenizer.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(next());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(next());
	}

	public static double nextDouble() throws IOException {
		return Double.parseDouble(next());
	}
}","public class PartySweet {
    static BufferedReader br;
    static StringTokenizer tokenizer;

    public static void main(String[] args) throws Exception {
        br = new BufferedReader(new InputStreamReader(System.in));
        int n = nextInt(), m = nextInt();
        int[] b = new int[n];
        int[] g = new int[m];
        for (int i = 0; i < n; i++)
            b[i] = nextInt();
        for (int i = 0; i < m; i++)
            g[i] = nextInt();
        int total = 0;
        int max = 0, max2 = 0;
        for (int i = 0; i < n; i++) {
            if (b[i] > b[max]) {
                max2 = max;
                max = i;
            } else if (b[max2] < b[i])
                max2 = i;
        }
        total += b[max] - b[max2];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (b[i] > g[j]) {
                    System.out.println(-1);
                    return;
                }
                if (i != max)
                    total += b[i];
                else
                    total += g[j];
            }
        }
        System.out.println(total);
    }

    public static String next() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            String line = br.readLine();
            if (line == null)
                throw new IOException();
            tokenizer = new StringTokenizer(line);
        }
        return tokenizer.nextToken();
    }

    public static int nextInt() throws IOException {
        return Integer.parseInt(next());
    }

    public static long nextLong() throws IOException {
        return Long.parseLong(next());
    }

    public static double nextDouble() throws IOException {
        return Double.parseDouble(next());
    }
}",495
"public class Main{
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(in));
		
		StringTokenizer st = new StringTokenizer(br.readLine().trim());
		
		int n = Integer.valueOf(st.nextToken());
		int k = Integer.valueOf(st.nextToken());
		
		String str = br.readLine().trim();
		int [] arr = new int[n];
		
		LL[] adjlist = new LL[n];
		
		for(int i =0 ; i < n; i++){
			int x = str.charAt(i) - 'a' + 1;
			arr[i] = x;
			adjlist[i] = new LL();
		}
		
		
		Arrays.sort(arr);
		
		for(int i =0; i < n; i++){
			for(int j = i + 1; j < n; j++){
				int a = arr[i];
				int b = arr[j];
				
				if((b - a) >= 2){
					adjlist[i].add(new Pair(j, arr[j], 1));
				}
			}
		}
		
		LinkedList<Pair> list = new LinkedList<Pair>();
		LinkedList<Pair> tmpList = new LinkedList<Pair>();
		
		int ans = Integer.MAX_VALUE;
		
		for(int i = 0; i < n; i++){
			
			list.clear();
			list.add(new Pair(i,arr[i],0));
			
			
			
			for(int j = 0; j < k; j++){
				tmpList.clear();
				while(!list.isEmpty()){
					
					
					Pair cur = list.removeFirst();
					if(j == k-1){
						ans = Math.min(cur.val, ans);
					}
					for(Pair adj : adjlist[cur.idx]){
						
						
						tmpList.add(new Pair(adj.idx, adj.val + cur.val, cur.val+1));
					}
				}
				
				
				
				
				if(tmpList.size() == 0){
					break;
				}
				else{
					list.addAll(tmpList);
				}
				
				
			}
			
			
		}
		
		if(ans == Integer.MAX_VALUE) out.println(-1);
		else out.println(ans);
		
		
	}
	public static class LL extends LinkedList<Pair>{}
	public static class Pair implements Comparable<Pair>{
		int val;
		int idx;
		int ctr;
		public Pair(int a, int b, int c){
			idx = a;
			val = b;
			ctr = c;
		}
		public int compareTo(Pair p){
			
			if(ctr == p.ctr){
				if(val == p.val) return idx - p.idx;
					
				return val - p.val;
			}
			return p.ctr - ctr;
		}
		public String toString(){
			return val+"", "";
		}
	}
}",ERROR,496
"public class Codeforces {
    public static Scanner input = new Scanner(System.in);
    public static void main(String[] args){
        int n,k;
        n=input.nextInt();
        k=input.nextInt();
        String s=input.next();
        int[] wtArray=new int[n];
        for(int i=0;i<s.length();i++)
            wtArray[i]=s.charAt(i)-96;
        for(int i=1;i<n;i++)
            for(int j=0;j<n-i;j++)
                if(wtArray[j]>wtArray[j+1]){
                    int temp=wtArray[j+1];
                    wtArray[j+1]=wtArray[j];
                    wtArray[j]=temp;
                }

        int sum=wtArray[0];
        k--;
        int temp=sum;
        for(int i=1;k!=0 &&i <n;i++){
            if((wtArray[i]-temp)>1){
                sum+=wtArray[i];
                k--;
                temp=wtArray[i];
            }
        }
        if(k!=0)
            sum=-1;
        System.out.println(sum);
    }

}","public class Codeforces {
    public static Scanner input = new Scanner(System.in);
    public static void main(String[] args){
        int n,k;
        n=input.nextInt();
        k=input.nextInt();
        String s=input.next();
        int[] wtArray=new int[n];
        for(int i=0;i<s.length();i++)
            wtArray[i]=s.charAt(i)-96;
        for(int i=1;i<n;i++)
            for(int j=0;j<n-i;j++)
                if(wtArray[j]>wtArray[j+1]){
                    int temp=wtArray[j+1];
                    wtArray[j+1]=wtArray[j];
                    wtArray[j]=temp;
                }
        int sum=wtArray[0];
        k--;
        int temp=sum;
        for(int i=1;k!=0 & i <n;i++){
            if((wtArray[i]-temp)>1){
                sum+=wtArray[i];
                k--;
                temp=wtArray[i];
            }
        }
        if(k!=0)
            sum=-1;
        System.out.println(sum);
    }
}",497
"public class Main {

	static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner() {
            try {
                br = new BufferedReader(new InputStreamReader(System.in));
                st = new StringTokenizer(br.readLine());
            } catch (Exception e){e.printStackTrace();}
        }

        public String next() {
            if (st.hasMoreTokens()) return st.nextToken();
            try {st = new StringTokenizer(br.readLine());}
            catch (Exception e) {e.printStackTrace();}
            return st.nextToken();
        }

        public int nextInt() {return Integer.parseInt(next());}

        public long nextLong() {return Long.parseLong(next());}

        public double nextDouble() {return Double.parseDouble(next());}

        public String nextLine() {
            String line = """";
            if(st.hasMoreTokens()) line = st.nextToken();
            else try {return br.readLine();}catch(IOException e){e.printStackTrace();}
            while(st.hasMoreTokens()) line += "" ""+st.nextToken();
            return line;
        }
    }

	public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        PrintWriter pw = new PrintWriter(System.out);

        int n = sc.nextInt();
        int m = sc.nextInt();
        int ans = 0;

        int[] a = new int[101];
        for(int i=0;i<m;i++) a[sc.nextInt()]++;

        for(int i=1;i<=100;i++) {
            int y = 0;
            for(int x : a) {
                y += x / i;
            }
            if(y >= n) {
                ans = i;
            }
        }

        pw.println(ans);
        pw.close();
    }
}","public class Main {

	static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner() {
            try {
                br = new BufferedReader(new InputStreamReader(System.in));
                st = new StringTokenizer(br.readLine());
            } catch (Exception e){e.printStackTrace();}
        }

        public String next() {
            if (st.hasMoreTokens()) return st.nextToken();
            try {st = new StringTokenizer(br.readLine());}
            catch (Exception e) {e.printStackTrace();}
            return st.nextToken();
        }

        public int nextInt() {return Integer.parseInt(next());}

        public long nextLong() {return Long.parseLong(next());}

        public double nextDouble() {return Double.parseDouble(next());}

        public String nextLine() {
            String line = """";
            if(st.hasMoreTokens()) line = st.nextToken();
            else try {return br.readLine();}catch(IOException e){e.printStackTrace();}
            while(st.hasMoreTokens()) line += "" ""+st.nextToken();
            return line;
        }
    }

	public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        PrintWriter pw = new PrintWriter(System.out);

        int n = sc.nextInt();
        int m = sc.nextInt();
        int ans = 0;

        int[] a = new int[101];
        for(int i=0;i<m;i++) a[sc.nextInt()]++;

        for(int i=1;i<=100;i++) {
            int y = 0;
            for(int x : a) {
                y += x / i;
            }
            if(y >= n) {
                ans = i;
            }
        }

        pw.println(ans);
        pw.close();
    }
}",498
"public class G {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n, m;
        n = in.nextInt();
        m = in.nextInt();
        int[] a = new int[m];

        for (int i = 0; i < m; i++) {
            a[i] = in.nextInt();
        }

        Arrays.sort(a);
        HashMap<Integer, Integer> map = new HashMap<>(200);
        for (int i : a) {
            Integer t = map.get(i);
            if (t == null) {
                map.put(i, 1);
            } else {
                map.put(i, t + 1);
            }
        }

        ArrayList<Food> list = new ArrayList<>(100);
        Iterator<Map.Entry<Integer, Integer>> it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<Integer, Integer> en = it.next();
            list.add(new Food(en.getKey(), en.getValue()));
        }

        list.sort(Comparator.comparingInt(o -> o.num));
        int min, max;
        min = 1;
        max = list.get(list.size() - 1).num;
        int res = 0;
        for (int i = min; i <= max; i++) {
            int t = 0;
            for (Food food : list) {
                int gaven = food.num / i;
                if (gaven >= 1) {
                    t += gaven;
                    if (t >= n) {
                        res = Math.max(res, i);
                        break;
                    }
                }
            }
        }
        System.out.println(res);






    }
}

class Food {
    int id;
    int num;

    public Food(int id, int num) {
        this.id = id;
        this.num = num;
    }

    @Override
    public String toString() {
        return ""Food{"" +
                ""id="" + id +
                "", num="" + num +
                '}';
    }
}","public class G {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n, m;
        n = in.nextInt();
        m = in.nextInt();
        int[] a = new int[m];

        for (int i = 0; i < m; i++) {
            a[i] = in.nextInt();
        }

        Arrays.sort(a);
        HashMap<Integer, Integer> map = new HashMap<>(200);
        for (int i : a) {
            Integer t = map.get(i);
            if (t == null) {
                map.put(i, 1);
            } else {
                map.put(i, t + 1);
            }
        }

        ArrayList<Food> list = new ArrayList<>(100);
        Iterator<Map.Entry<Integer, Integer>> it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<Integer, Integer> en = it.next();
            list.add(new Food(en.getKey(), en.getValue()));
        }

        list.sort(Comparator.comparingInt(o -> o.num));
        int min, max;
        min = 1;
        max = list.get(list.size() - 1).num;
        int res = 0;
        for (int i = min; i <= max; i++) {
            int t = 0;
            for (Food food : list) {
                int gaven = food.num / i;
                if (gaven >= 1) {
                    t += gaven;
                    if (t >= n) {
                        res = Math.max(res, i);
                        break;
                    }
                }
            }
        }
        System.out.println(res);
    }
}

class Food {
    int id;
    int num;

    public Food(int id, int num) {
        this.id = id;
        this.num = num;
    }

    @Override
    public String toString() {
        return ""Food{"" +
                ""id="" + id +
                "", num="" + num +
                '}';
    }
}",499
"public class Solution {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Solution ss = new Solution();
		ss.test(sc);
	}
	
	void test(Scanner sc){
		int LEN = sc.nextInt();
		int[] a = new int[LEN];
		int[] b = new int[LEN];
		for (int i = 0; i < b.length; i++) {
			a[i] = sc.nextInt();
		}
		for (int i = 0; i < b.length; i++) {
			b[i] = sc.nextInt();
		}
		Arrays.sort(a);
		Arrays.sort(b);
		
		int ia=0, ib=0;
		while(ia<LEN && a[ia]==0) ia++;
		while(ib<LEN && b[ib]==0) ib++;
		if(ib==LEN){
			System.out.println(""Yes"");
			return;
		}
		if(ia==LEN){
			System.out.println(""No"");
			return;
		}		
		boolean out = true;
		while(ia<LEN && ib<LEN){
			if(a[ia]==b[ib]){
				ia++;
				ib++;
			}else{
				if(a[ia]>b[ib]){
					while(ib<LEN && b[ib]!=a[ia]){
						ib++;
					}
					if(ib==LEN){
						out=false;
						break;
					}
				}
			}
		}
		
		if(out){
			System.out.println(""Yes"");
		}else{
			System.out.println(""No"");
		}
	}

}","public class Solution {  
    public static void main(String[] args) {  
        Scanner sc = new Scanner(System.in);  
        Solution ss = new Solution();  
        ss.test(sc);  
    }  
      
    void test(Scanner sc){  
        int LEN = sc.nextInt();  
        int[] a = new int[LEN];  
        int[] b = new int[LEN];  
        for (int i = 0; i < b.length; i++) {  
            a[i] = sc.nextInt();  
        }  
        for (int i = 0; i < b.length; i++) {  
            b[i] = sc.nextInt();  
        }  
        Arrays.sort(a);  
        Arrays.sort(b);  
          
        int ia=0, ib=0;  
        while(ia<LEN && a[ia]==0) ia++;  
        while(ib<LEN && b[ib]==0) ib++;  
        if(ib==LEN){  
            System.out.println(""Yes"");  
            return;  
        }  
        if(ia==LEN){  
            System.out.println(""No"");  
            return;  
        }    
          
        boolean out = true;  
        while(ia<LEN && ib<LEN){  
            if(a[ia]==b[ib]){  
                ia++;  
                ib++;  
            }else{  
                if(a[ia]>b[ib]){  
                    while(ib<LEN && b[ib]!=a[ia]){  
                        ib++;  
                    }  
                    if(ib==LEN){  
                        out=false;  
                        break;  
                    }  
                }  
            }  
        }  
          
        if(out){  
            System.out.println(""Yes"");  
        }else{  
            System.out.println(""No"");  
        }  
    }  
}",500
"public class TestClass {
    
    public static int set_size(int[] a, int N){
        HashSet <Integer> newset = new HashSet <Integer>();
        int i=0;
        while(i<N){
            newset.add(a[i++]);
        }
        int v = newset.size();
        return v;
    }
    public static void main(String args[] ) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       StringTokenizer tk = new StringTokenizer(br.readLine());
            int N = Integer.parseInt(tk.nextToken());
            int x = Integer.parseInt(tk.nextToken());
            
            int[] a = new int[N];
            int[] b = new int[N];
            StringTokenizer tb = new StringTokenizer(br.readLine());
            for(int i=0; i<N; i++){
                a[i] = Integer.parseInt(tb.nextToken());
            }
            if(set_size(a, N) < N){
                System.out.print(""0"");
                System.exit(0);
            }
            int num=0;
        while(num++<4){
            for(int i=0; i<N; i++){
                if((a[i]&x) == a[i])
                    continue;
                else{
                    for(int j=0; j<N; j++){
                        if(i==j){
                            b[i] = (a[i]&x);
                        }
                        else{
                            b[j] = a[j];
                        }
                    }
                    int s = set_size(b, N);
                    if(s<N){
                        System.out.print(num);
                        System.exit(0);
                    }
                }
            }
            for(int i=0; i<N; i++)
                a[i] = b[i];
        }
        System.out.print(""-1"");
        System.exit(0);
    }
}","public class TestClass {
    
    public static int set_size(int[] a, int N){
        HashSet<Integer> newset = new HashSet<Integer>();
        int i=0;
        while(i<N){
            newset.add(a[i++]);
        }
        int v = newset.size();
        return v;
    }
    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer tk = new StringTokenizer(br.readLine());
        int N = Integer.parseInt(tk.nextToken());
        int x = Integer.parseInt(tk.nextToken());
        
        int[] a = new int[N];
        int[] b = new int[N];
        StringTokenizer tb = new StringTokenizer(br.readLine());
        for(int i=0; i<N; i++){
            a[i] = Integer.parseInt(tb.nextToken());
        }
        if(set_size(a, N) < N){
            System.out.print(""0"");
            System.exit(0);
        }
        int num=0;
        while(num++<4){
            for(int i=0; i<N; i++){
                if((a[i]&x) == a[i])
                    continue;
                else{
                    for(int j=0; j<N; j++){
                        if(i==j){
                            b[i] = (a[i]&x);
                        }
                        else{
                            b[j] = a[j];
                        }
                    }
                    int s = set_size(b, N);
                    if(s<N){
                        System.out.print(num);
                        System.exit(0);
                    }
                }
            }
            for(int i=0; i<N; i++)
                a[i] = b[i];
        }
        System.out.print(""-1"");
        System.exit(0);
    }
}",501
"public class Cr500 {
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int n, x, status = -1;
        Set<Integer> a = new HashSet<>(), bitA = new HashSet<>();
        ArrayList<Integer> al = new ArrayList<>(), bl = new ArrayList<>();
        n = scanner.nextInt();
        x = scanner.nextInt();

        for(int i = 0; i < n; i++) {
            int v;
            if(!a.add(v = scanner.nextInt())) {
                System.out.println(0);
                return;
            }

            if(!bitA.add(v & x)) {
                status = 2;
            }
            al.add(v);
            bl.add(v & x);
        }

        if(contains(al, bl)) {
            System.out.println(1);
            return;
        }

        System.out.println(status);
    }

    private static boolean contains(ArrayList<Integer> a, ArrayList<Integer> b) {
        for(int i = 0; i < a.size(); i++) {
            int v1 = a.get(i);
            for(int j = 0; j < b.size(); j++) {
                int v2 = b.get(j);
                if(i != j && v1 == v2) {
                    return true;
                }
            }
        }
        return false;
    }
}","public class Cr500 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n, x, status = -1;
        Set<Integer> a = new HashSet<>(), bitA = new HashSet<>();
        ArrayList<Integer> al = new ArrayList<>(), bl = new ArrayList<>();
        n = scanner.nextInt();
        x = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int v;
            if (!a.add(v = scanner.nextInt())) {
                System.out.println(0);
                return;
            }
            if (!bitA.add(v & x)) {
                status = 2;
            }
            al.add(v);
            bl.add(v & x);
        }
        if (contains(al, bl)) {
            System.out.println(1);
            return;
        }
        System.out.println(status);
    }

    private static boolean contains(ArrayList<Integer> a, ArrayList<Integer> b) {
        for (int i = 0; i < a.size(); i++) {
            int v1 = a.get(i);
            for (int j = 0; j < b.size(); j++) {
                int v2 = b.get(j);
                if (i != j && v1 == v2) {
                    return true;
                }
            }
        }
        return false;
    }
}",502
"public class B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(a[i]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (a[i] == a[i + 1]) {
                System.out.println(0);
                return;
            }
        }
        for (int i = n - 1; i > 0; i--) {
            if ((a[i] & x) == (a[i - 1] & x) && !list.contains(x)) {
                System.out.println(2);
                return;
            } else if (list.contains(x) && a[i] > x && (a[i] & x) == x) {
                System.out.println(1);
                return;
            }
        }
        System.out.println(-1);
    }
}","public class B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(a[i]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (a[i] == a[i + 1]) {
                System.out.println(0);
                return;
            }
        }
        for (int i = n - 1; i > 0; i--) {
            if ((a[i] & x) == (a[i - 1] & x) && !list.contains(x)) {
                System.out.println(2);
                return;
            } else if (list.contains(x) && a[i] > x && (a[i] & x) == x) {
                System.out.println(1);
                return;
            }
        }
        System.out.println(-1);
    }
}",503
"public class Main {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int m = in.nextInt();
        int[] v = new int[n];
        int[] ans = new int[n];
        long s = 0;
        int t;
        for(int i=0; i<n;i++) {
            v[i] = in.nextInt();
            s+=v[i];
        }

        for(int i=0; i<n-1;i++) {
            for (int j = i + 1; j < n; j++) {
                if (v[j] > v[i]) {
                    t = v[i];
                    v[i] = v[j];
                    v[j] = t;
                }
            }
        }

        for(int i=0; i<n-1; i++){
            if(v[i] > v[i+1]){
                    ans[i] = v[i]-v[i+1];
            }

            if(v[i] == v[i+1] && v[i]!=1){
                ans[i]=1;
                v[i+1]--;
            }

            if(v[i] < v[i+1]){
                ans[i]=1;
                v[i+1] = v[i]-1;
                if(v[i+1] == 0){
                    v[i+1] = 1;
                }
            }
            if(v[i] == 0 || v[i] == 1){
                ans[i] = 1;
                v[i] = 1;
            }
        }
        if (v[n-1] > 1){
            ans[n-1] = v[n-1];
        }
        else{
            ans[n-1] = 1;
        }

        for (int i=0; i<n; i++){
                s-=ans[i];

        }
        System.out.print(s);


    }
}","public class Main {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int m = in.nextInt();
        int[] v = new int[n];
        int[] ans = new int[n];
        long s = 0;
        int t;
        for (int i = 0; i < n; i++) {
            v[i] = in.nextInt();
            s += v[i];
        }

        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (v[j] > v[i]) {
                    t = v[i];
                    v[i] = v[j];
                    v[j] = t;
                }
            }
        }

        for (int i = 0; i < n - 1; i++) {
            if (v[i] > v[i + 1]) {
                ans[i] = v[i] - v[i + 1];
            }

            if (v[i] == v[i + 1] && v[i] != 1) {
                ans[i] = 1;
                v[i + 1]--;
            }

            if (v[i] < v[i + 1]) {
                ans[i] = 1;
                v[i + 1] = v[i] - 1;
                if (v[i + 1] == 0) {
                    v[i + 1] = 1;
                }
            }
            if (v[i] == 0 || v[i] == 1) {
                ans[i] = 1;
                v[i] = 1;
            }
        }
        if (v[n - 1] > 1) {
            ans[n - 1] = v[n - 1];
        } else {
            ans[n - 1] = 1;
        }

        for (int i = 0; i < n; i++) {
            s -= ans[i];

        }
        System.out.print(s);


    }
}",504
"public class Main {

    public static void main(String[] args) {
       Scanner s = new Scanner(System.in);
       int n = s.nextInt();
       int m = s.nextInt();
       m = 0;
       long sum = 0;
       int[] expon = new int[n];
        for (int i = 0; i < n; i++) {
            expon[i] = s.nextInt();
            m = Math.max(expon[i], m);
            sum += expon[i];
        }
        HashSet<Integer> levels = new HashSet<>();


        int amount = 0;
        for (int i = 0; i < n; i++) {
            int currentHigh = expon[i];
            for (int j = currentHigh; j >= 1; j--) {
                if(!levels.contains(j)) {
                    levels.add(j);
                    amount++;
                    break;
                }
                if(j == 1){
                    amount++;
                }
            }
        }
        System.out.println((sum - amount) - (m - levels.size()));
    }
}","public class Main {

    public static void main(String[] args) {
       Scanner s = new Scanner(System.in);
       int n = s.nextInt();
       int m = s.nextInt();
       m = 0;
       long sum = 0;
       int[] expon = new int[n];
        for (int i = 0; i < n; i++) {
            expon[i] = s.nextInt();
            m = Math.max(expon[i], m);
            sum += expon[i];
        }
        HashSet<Integer> levels = new HashSet<>();


        int amount = 0;
        for (int i = 0; i < n; i++) {
            int currentHigh = expon[i];
            for (int j = currentHigh; j >= 1; j--) {
                if(!levels.contains(j)) {
                    levels.add(j);
                    amount++;
                    break;
                }
                if(j == 1){
                    amount++;
                }
            }
        }
        System.out.println((sum - amount) - (m - levels.size()));
    }
}",505
"class
GFG 
{ 



static
int
answerQuery(
int
a[], 
int
n, 

int
l, 
int
r) 
{ 



int
count = 
0
; 




l = l - 
1
; 




for
(
int
i = l; i < r; i++) 

{ 

int
element = a[i]; 

int
divisors = 
0
; 






for
(
int
j = l; j < r; j++) 

{ 



if
(a[j] % a[i] == 
0
) 

divisors++; 

else

break
; 

} 




if
(divisors == (r - l)) 

count++; 

} 




return
count; 
} 


public
static
void
main (String[] args) 
{ 

int
a[] = { 
1
, 
2
, 
3
, 
5
}; 

int
n = a.length; 


int
l = 
1
, r = 
4
; 

System.out.println( answerQuery(a, n, l, r)); 


l = 
2
; r = 
4
; 

System.out.println( answerQuery(a, n, l, r)); 
} 
}","class GFG { static int answerQuery(int a[], int n, int l, int r) { int count = 0; l = l - 1; for (int i = l; i < r; i++) { int element = a[i]; int divisors = 0; for (int j = l; j < r; j++) { if (a[j] % a[i] == 0) divisors++; else break; } if (divisors == (r - l)) count++; } return count; } public static void main (String[] args) { int a[] = { 1, 2, 3, 5 }; int n = a.length; int l = 1, r = 4; System.out.println(answerQuery(a, n, l, r)); l = 2; r = 4; System.out.println(answerQuery(a, n, l, r)); } }",506
"public class main {
static	class Interval{
		int start;
		int end;
		public Interval(int start,int end) {
			this.start=start;
			this.end=end;
		}
	}
static class FastReader 
{ 
    BufferedReader br; 
    StringTokenizer st; 

    public FastReader() 
    { 
        br = new BufferedReader(new
                 InputStreamReader(System.in)); 
    } 

    String next() 
    { 
        while (st == null || !st.hasMoreElements()) 
        { 
            try
            { 
                st = new StringTokenizer(br.readLine()); 
            } 
            catch (IOException  e) 
            { 
                e.printStackTrace(); 
            } 
        } 
        return st.nextToken(); 
    } 

    int nextInt() 
    { 
        return Integer.parseInt(next()); 
    } 

    long nextLong() 
    { 
        return Long.parseLong(next()); 
    } 

    double nextDouble() 
    { 
        return Double.parseDouble(next()); 
    } 

    String nextLine() 
    { 
        String str = """"; 
        try
        { 
            str = br.readLine(); 
        } 
        catch (IOException e) 
        { 
            e.printStackTrace(); 
        } 
        return str; 
    } 
} 
	static long mod = 1000000007;
	public static void main(String[] args) {
		
		FastReader in = new FastReader();
		long intervals = in.nextInt();
		long x = in.nextInt();
		 long y = in.nextInt();
		Interval []ints = new Interval[(int)(int) intervals];
		for(int i = 0;i<intervals;i++) {
			ints[i] = new Interval(in.nextInt(),in.nextInt());
		}
		Arrays.sort(ints, (a,b)->a.start-b.start);
		long count = 0;
		for(int i = 0;i<ints.length;i++) {
			if(i>=0&&ints[i]!=null) {
			Interval cur1 = ints[i];
			for(int j = i+1;j<ints.length;j++) {
			if(ints[j]!=null) {
			Interval cur2 = ints[j];
			if(y*(cur2.start-cur1.end)<x) {
			if(cur1.start!=cur2.start&&cur1.end<cur2.start) {
				cur1.end=cur2.end;
				
				ints[j]=null;
			
			}}
			else
				break;
			}
			
			}
			count = (count + x) % mod;
			count += (y*(cur1.end-cur1.start)%mod);
			count%=mod;
			}
			
		}
		








		System.out.println(count);
	}

}","public class Main {
    static class Interval {
        int start;
        int end;

        public Interval(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }

    static class FastReader {
        BufferedReader br;
        StringTokenizer st;

        public FastReader() {
            br = new BufferedReader(new InputStreamReader(System.in));
        }

        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }

        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
    }

    static long mod = 1000000007;

    public static void main(String[] args) {

        FastReader in = new FastReader();
        long intervals = in.nextInt();
        long x = in.nextInt();
        long y = in.nextInt();
        Interval[] ints = new Interval[(int) intervals];
        for (int i = 0; i < intervals; i++) {
            ints[i] = new Interval(in.nextInt(), in.nextInt());
        }
        Arrays.sort(ints, (a, b) -> a.start - b.start);
        long count = 0;
        for (int i = 0; i < ints.length; i++) {
            if (i >= 0 && ints[i] != null) {
                Interval cur1 = ints[i];
                for (int j = i + 1; j < ints.length; j++) {
                    if (ints[j] != null) {
                        Interval cur2 = ints[j];
                        if (y * (cur2.start - cur1.end) < x) {
                            if (cur1.start != cur2.start && cur1.end < cur2.start) {
                                cur1.end = cur2.end;
                                ints[j] = null;
                            }
                        } else
                            break;
                    }

                }
                count = (count + x) % mod;
                count += (y * (cur1.end - cur1.start) % mod);
                count %= mod;
            }

        }

        System.out.println(count);
    }
}",507
"public class TaxiDriversAndLyft {
	
	static class Resident{
		Integer index;			
		Integer type;			
		Integer requests;		
		
		public Resident(int index, int type) {
			this.index = index;
			this.type = type;
			this.requests = 0;
		}
		
		@Override
		public String toString() {
			if(type == 0) {
				return ""Rider at index : "" + index;
			}
			else {
				return ""Driver at index : "" + index + "", Requests: "" + requests;
			}
		}
	}
	
	static ArrayList<Resident> residents;
	static ArrayList<Integer> drivers_indexes = new ArrayList<>();

	public static void main(String[] args) {
		Scanner reader = new Scanner(System.in);
		int n = reader.nextInt();
		int m = reader.nextInt();
		int length = n + m;
		
		int [] coordinates = new int[length];
		int [] types = new int[length];
		residents = new ArrayList<>();
		drivers_indexes = new ArrayList<>();
		
		for (int i = 0; i < length; i++) {
			coordinates[i] = reader.nextInt();
		}
		
		for (int i = 0; i < length; i++) {
			types[i] = reader.nextInt();
			
			if(types[i] == 1)
				drivers_indexes.add(i);
				
			residents.add(new Resident(i, types[i]));
		}
		reader.close();	
		
		for (int i = 0; i < length; i++) {
			Resident current = residents.get(i);
			if(current.type == 0) {
				int left = i-1, right = i+1;
								
				while(left >= 0 || right < length) {
					if(left >= 0 && residents.get(left).type == 1) {
						residents.get(left).requests++;
						break;
					}
					else if(right < length && residents.get(right).type == 1) {
						residents.get(right).requests++;
						break;
					}
					
					left--;
					right++;
				}
			}
		}
		
		for(int index : drivers_indexes) {
			System.out.print(residents.get(index).requests + "" "");
		}
	}

}","public class TaxiDriversAndLyft {

    static class Resident{
        Integer index;         
        Integer type;         
        Integer requests;     
        
        public Resident(int index, int type) {
            this.index = index;
            this.type = type;
            this.requests = 0;
        }
        
        @Override
        public String toString() {
            if(type == 0) {
                return ""Rider at index : "" + index;
            }
            else {
                return ""Driver at index : "" + index + "", Requests: "" + requests;
            }
        }
    }
    
    static ArrayList<Resident> residents;
    static ArrayList<Integer> drivers_indexes = new ArrayList<>();

    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        int n = reader.nextInt();
        int m = reader.nextInt();
        int length = n + m;
        
        int [] coordinates = new int[length];
        int [] types = new int[length];
        residents = new ArrayList<>();
        drivers_indexes = new ArrayList<>();
        
        for (int i = 0; i < length; i++) {
            coordinates[i] = reader.nextInt();
        }
        
        for (int i = 0; i < length; i++) {
            types[i] = reader.nextInt();
            
            if(types[i] == 1)
                drivers_indexes.add(i);
                
            residents.add(new Resident(i, types[i]));
        }
        reader.close();  
        
        for (int i = 0; i < length; i++) {
            Resident current = residents.get(i);
            if(current.type == 0) {
                int left = i-1, right = i+1;
                                
                while(left >= 0 || right < length) {
                    if(left >= 0 && residents.get(left).type == 1) {
                        residents.get(left).requests++;
                        break;
                    }
                    else if(right < length && residents.get(right).type == 1) {
                        residents.get(right).requests++;
                        break;
                    }
                    
                    left--;
                    right++;
                }
            }
        }
        
        for(int index : drivers_indexes) {
            System.out.print(residents.get(index).requests + "" "");
        }
    }

}",508
"public class Lyft {
    private static FastScanner scan = new FastScanner(System.in);
    private static PrintWriter pr = new PrintWriter(System.out);
    private static int n, m, taxistNumber, noTaxistNumber = 0;
    static people peoples[], taxist[], noTaxist[];
    public static void main(String[] args) throws IOException {
        n = scan.nextInt();
        m = scan.nextInt();
        peoples = new people[n + m];
        noTaxist = new people[n];
        taxist = new people[m];
        for(int i = 0; i < peoples.length; i++){
            peoples[i] = new people(scan.nextInt());
        }
        for (people i : peoples){
            if(scan.nextInt() == 1){
                i.taxi = true;
                i.passangers = 0;
                taxist[taxistNumber] = i;
                taxistNumber++;
            }else{
                noTaxist[noTaxistNumber] = i;
                noTaxistNumber++;
            }
        }
        for (people i : noTaxist){
                for (people ii: taxist){
                    if(ii.taxi){
                       if(i.nearestTaxist == null){
                           i.nearestTaxist = ii;
                           ii.passangers++;
                       }else if(i.coord - i.nearestTaxist.coord > ii.coord - i.coord){
                           i.nearestTaxist.passangers--;
                           i.nearestTaxist = ii;
                           i.nearestTaxist.passangers++;
                       }
                    }
                }
        }
        for (people i : taxist){
                pr.print(i.passangers + "" "");
        }
        pr.close();
    }
}
class FastScanner
{
    private static final int bufferSize = 64 * 1024;
    private final BufferedReader reader;
    private StringTokenizer tokenizer;

    FastScanner(InputStream inputStream)
    {
        this.reader = new BufferedReader(new InputStreamReader(inputStream), bufferSize);
    }

    String nextToken() throws IOException
    {
        while (tokenizer == null || !tokenizer.hasMoreTokens())
        {
            String line = reader.readLine();
            if (line == null)
            {
                tokenizer = null;
                return null;
            }
            tokenizer = new StringTokenizer(line);
        }
        return tokenizer.nextToken();
    }

    int[] readIntArray(int n) throws IOException
    {
        int[] a = new int[n];
        for (int i = 0; i < n; i++)
        {
            a[i] = nextInt();
        }
        return a;
    }

    long[] readLongArray(int n) throws IOException
    {
        long[] a = new long[n];
        for (int i = 0; i < n; i++)
        {
            a[i] = nextLong();
        }
        return a;
    }

    int nextInt() throws NumberFormatException, IOException
    {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws NumberFormatException, IOException
    {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws NumberFormatException, IOException
    {
        return Double.parseDouble(nextToken());
    }

    String nextLine() throws IOException
    {
        tokenizer = null;
        return reader.readLine();
    }
}
class people{
    int coord = 0;
    boolean taxi = false;
    people nearestTaxist = null;
    int passangers = -1;
    people(int coord){
        this.coord = coord;
    }
}","public class Lyft {
    private static FastScanner scan = new FastScanner(System.in);
    private static PrintWriter pr = new PrintWriter(System.out);
    private static int n, m, taxistNumber, noTaxistNumber = 0;
    static people peoples[], taxist[], noTaxist[];
    public static void main(String[] args) throws IOException {
        n = scan.nextInt();
        m = scan.nextInt();
        peoples = new people[n + m];
        noTaxist = new people[n];
        taxist = new people[m];
        for (int i = 0; i < peoples.length; i++) {
            peoples[i] = new people(scan.nextInt());
        }
        for (people i : peoples) {
            if (scan.nextInt() == 1) {
                i.taxi = true;
                i.passangers = 0;
                taxist[taxistNumber] = i;
                taxistNumber++;
            } else {
                noTaxist[noTaxistNumber] = i;
                noTaxistNumber++;
            }
        }
        for (people i : noTaxist) {
            for (people ii : taxist) {
                if (ii.taxi) {
                    if (i.nearestTaxist == null) {
                        i.nearestTaxist = ii;
                        ii.passangers++;
                    } else if (i.coord - i.nearestTaxist.coord > ii.coord - i.coord) {
                        i.nearestTaxist.passangers--;
                        i.nearestTaxist = ii;
                        i.nearestTaxist.passangers++;
                    }
                }
            }
        }
        for (people i : taxist) {
            pr.print(i.passangers + "" "");
        }
        pr.close();
    }
}

class FastScanner {
    private static final int bufferSize = 64 * 1024;
    private final BufferedReader reader;
    private StringTokenizer tokenizer;

    FastScanner(InputStream inputStream) {
        this.reader = new BufferedReader(new InputStreamReader(inputStream), bufferSize);
    }

    String nextToken() throws IOException {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            String line = reader.readLine();
            if (line == null) {
                tokenizer = null;
                return null;
            }
            tokenizer = new StringTokenizer(line);
        }
        return tokenizer.nextToken();
    }

    int[] readIntArray(int n) throws IOException {
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = nextInt();
        }
        return a;
    }

    long[] readLongArray(int n) throws IOException {
        long[] a = new long[n];
        for (int i = 0; i < n; i++) {
            a[i] = nextLong();
        }
        return a;
    }

    int nextInt() throws NumberFormatException, IOException {
        return Integer.parseInt(nextToken());
    }

    long nextLong() throws NumberFormatException, IOException {
        return Long.parseLong(nextToken());
    }

    double nextDouble() throws NumberFormatException, IOException {
        return Double.parseDouble(nextToken());
    }

    String nextLine() throws IOException {
        tokenizer = null;
        return reader.readLine();
    }
}

class people {
    int coord = 0;
    boolean taxi = false;
    people nearestTaxist = null;
    int passangers = -1;

    people(int coord) {
        this.coord = coord;
    }
}",509
"public class TaxistsnLyft {
	public static void main (String[] args){
		Scanner scan = new Scanner (System.in);
		int n = scan.nextInt();
		int m = scan.nextInt();
		int k = n+m;
		long[] arr1 = new long[k];
		for(int i = 0; i<k; i++){
			arr1[i]=scan.nextLong();
		}
		long[] tax = new long[k];
		long[] taxcount = new long[k];
		for(int i = 0; i<k; i++){
			tax[i]=scan.nextInt();
		}
		int c;
		int b;
		for(int i = 0; i<k; i++){
			if(tax[i]==0){
				c=i;
				while(tax[c]!=1){
					if(c==0){
						c=-1;
						break;
					}
					c--;
					
				}
				b=i;
				while(tax[b]!=1){
					if(b>=k-1){
						b=-1;
						break;
					} 
					b++;
					
				}
				
				if(c==-1&&b>=0){
					taxcount[b]++;
				} else if(b==-1&&c>=0) {
					taxcount[c]++;
				} else if(b>=0&&c>=0) {
					if(arr1[i]-arr1[c]>arr1[b]-arr1[i]){
						taxcount[b]++;
					}
					if(arr1[i]-arr1[c]<arr1[b]-arr1[i]){
						taxcount[c]++;
					}
					if(arr1[i]-arr1[c]==arr1[b]-arr1[i]){
						taxcount[c]++;
					}
					
				}
				
			}
			
			}
		for(int j = 0; j<k; j++){
			if(tax[j]==1){
				System.out.print(taxcount[j]+"" "");
			}
		scan.close();
		}
	}
}",public class NeaZipjzI {public static void main(String[] args) {Scanner scan = new Scanner(System.in);int n = scan.nextInt();int m = scan.nextInt();int k = n + m;long[] arr1 = new long[k];for (int i = 0; i < k; i++) {arr1[i] = scan.nextLong();}long[] tax = new long[k];long[] taxcount = new long[k];for (int i = 0; i < k; i++) {tax[i] = scan.nextInt();}int c;int b;for (int i = 0; i < k; i++) {if (tax[i] == 0) {c = i;while (tax[c] != 1) {if (c == 0) {c = -1;break;}c--;}b = i;while (tax[b] != 1) {if (b >= k - 1) {b = -1;break;}b++;}if (c == -1 && b >= 0) {taxcount[b]++;} else if (b == -1 && c >= 0) {taxcount[c]++;} else if (b >= 0 && c >= 0) {if (arr1[i] - arr1[c] > arr1[b] - arr1[i]) {taxcount[b]++;}if (arr1[i] - arr1[c] < arr1[b] - arr1[i]) {taxcount[c]++;}if (arr1[i] - arr1[c] == arr1[b] - arr1[i]) {taxcount[c]++;}}},510
"public class RookHome {
	static long MAX = 1_000_000_000;

	public static void main(String[] args) {
		Scanner s = new Scanner(new BufferedInputStream(System.in));
		int n = s.nextInt();
		int m = s.nextInt();
		long[] vert = new long[n + 2];
		vert[0] = 1;
		for (int i = 1; i <= n; i++) {
			vert[i] = s.nextLong();
		}
		vert[n + 1] = MAX;
		long[][] hor = new long[m][2];
		for (int i = 0; i < m; i++) {
			hor[i][0] = s.nextLong();
			hor[i][1] = s.nextLong();
			s.nextLong();
		}
		long min = Long.MAX_VALUE;
		int count;
		for(int i = 0; i < vert.length - 1; i++) {
			count = 0;
			for(int j = 0; j < m; j++) {
				if(hor[j][0] <= vert[i] && hor[j][1] >= vert[i + 1]) {
					count++;
				}
			}
			min = Math.min(min, i + count);
		}
		System.out.println(min);
	}
}","public class RookHome {
    static long MAX = 1_000_000_000;

    public static void main(String[] args) {
        Scanner s = new Scanner(new BufferedInputStream(System.in));
        int n = s.nextInt();
        int m = s.nextInt();
        long[] vert = new long[n + 2];
        vert[0] = 1;
        for (int i = 1; i <= n; i++) {
            vert[i] = s.nextLong();
        }
        vert[n + 1] = MAX;
        long[][] hor = new long[m][2];
        for (int i = 0; i < m; i++) {
            hor[i][0] = s.nextLong();
            hor[i][1] = s.nextLong();
            s.nextLong();
        }
        long min = Long.MAX_VALUE;
        int count;
        for (int i = 0; i < vert.length - 1; i++) {
            count = 0;
            for (int j = 0; j < m; j++) {
                if (hor[j][0] <= vert[i] && hor[j][1] >= vert[i + 1]) {
                    count++;
                }
            }
            min = Math.min(min, i + count);
        }
        System.out.println(min);
    }
}",511
"public class Main {
    public static int n, m;
    public static int[] vert, group;
    public static int[][] horiz;
    public static boolean ok(int a, int b, int g) {
        int start, end;
        if (g == 0) {
            start = 1;
            end = vert.length > 0 ? vert[0] : (int)Math.pow(10, 9);
        } else if (g == group.length - 1) {
            start = vert[g - 1];
            end = (int)Math.pow(10, 9);
        } else {
            start = vert[g - 1];
            end = vert[g];
        }
        return a <= start && b >= end;
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        vert = new int[n];
        for (int i = 0; i < n; i++) {
            vert[i] = in.nextInt();
        }
        horiz = new int[m][3];
        for (int i = 0; i < m; i++) {
            horiz[i] = new int[]{in.nextInt(), in.nextInt(), in.nextInt()};
        }
        group = new int[n + 1];
        Arrays.fill(group, 0);
        for (int i = 0; i < m; i++) {
            int a = horiz[i][0];
            int b = horiz[i][1];
            for (int j = 0; j < group.length; j++) {
                if (ok(a, b, j)) {
                    group[j]++;
                }
            }
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < group.length; i++) {
            min = Math.min(min, group[i] + i);
        }
        System.out.println(min);
    }
}","public class Main {
    public static int n, m;
    public static int[] vert, group;
    public static int[][] horiz;
    public static boolean ok(int a, int b, int g) {
        int start, end;
        if (g == 0) {
            start = 1;
            end = vert.length > 0 ? vert[0] : (int) Math.pow(10, 9);
        } else if (g == group.length - 1) {
             start = vert[g - 1];
             end = (int) Math.pow(10, 9);
        } else {
            start = vert[g - 1];
            end = vert[g];
        }
        return a <= start && b >= end;
    }
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        n = in.nextInt();
        m = in.nextInt();
        vert = new int[n];
        for (int i = 0; i < n; i++) {
            vert[i] = in.nextInt();
        }
        horiz = new int[m][3];
        for (int i = 0; i < m; i++) {
            horiz[i] = new int[]{in.nextInt(), in.nextInt(), in.nextInt()};
        }
        group = new int[n + 1];
        Arrays.fill(group, 0);
        for (int i = 0; i < m; i++) {
            int a = horiz[i][0];
            int b = horiz[i][1];
            for (int j = 0; j < group.length; j++) {
                if (ok(a, b, j)) {
                    group[j]++;
                }
            }
        }
        int min = Integer.MAX_VALUE;
        for (int i = 0; i < group.length; i++) {
            min = Math.min(min, group[i] + i);
        }
        System.out.println(min);
    }
}",512
"public class Tokitsukaze {


    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long k =sc.nextLong();
        double[]p=new double[m];
        for(int i = 0;i<m;i++){
            p[i]=sc.nextDouble();
        }
        int c=0;
        int used=0;
        for(int i = 0;i<m;){
            long low=(long)((Math.floor(p[i]/k)*k)-i)+1;
            long high=low+k;
            for(int j=i;j<m;j++){
                if(p[j]>=low&&p[i]<=high){
                    i++;
                }
            }
            c++;
        }
        System.out.println(c);

    }
    
}","public class Tokitsukaze {


    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long k =sc.nextLong();
        double[]p=new double[m];
        for(int i = 0;i<m;i++){
            p[i]=sc.nextDouble();
        }
        int c=0;
        int used=0;
        for(int i = 0;i<m;){
            long low=(long)((Math.floor((p[i])/k)*k)-i)+1;
            long high=low+k;
            for(int j=i;j<m;j++){
                if(p[j]>=low&&p[i]<=high){
                    i++;
                }
            }
            c++;
        }
        System.out.println(c);

    }
    
}",513
"public final class CF_573_D1_A {


	static boolean verb=true;
	static void log(Object X){if (verb) System.err.println(X);}
	static void log(Object[] X){if (verb) {for (Object U:X) System.err.print(U+"" "");System.err.println("""");}}
	static void log(int[] X){if (verb) {for (int U:X) System.err.print(U+"" "");System.err.println("""");}}
	static void log(int[] X,int L){if (verb) {for (int i=0;i<L;i++) System.err.print(X[i]+"" "");System.err.println("""");}}
	static void log(long[] X){if (verb) {for (long U:X) System.err.print(U+"" "");System.err.println("""");}}

	static void logWln(Object X){if (verb) System.err.print(X);}
	static void info(Object o){	System.out.println(o);}
	static void output(Object o){outputWln(""""+o+""\n"");	}
	static void outputWln(Object o){try {out.write(""""+ o);} catch (Exception e) {}}

	
	static long mod=998244353 ; 
	static int CX=64;


	
	static BufferedWriter out;
	static InputReader reader;


	

	static void process() throws Exception {

		Locale.setDefault(Locale.US);
		out = new BufferedWriter(new OutputStreamWriter(System.out));
		reader = new InputReader(System.in);

		long n=reader.readLong();
		int m=reader.readInt();
		
		long k=reader.readLong();
		long[] p=new long[m];
		for (int i=0;i<m;i++)
			p[i]=reader.readLong()-1;
		
		int pid=-1;
		int rem=m;
		int win=0; 
		long mx=k-1; 
		int res=0;
		int idx=0;
		
		while (rem>0) {
			
			while (p[idx]>mx) {
				mx+=k;
				if (mx>=n-1)
					mx=n-1;
				
			}
		
			int nxt=idx;
			while (nxt+1<m && p[nxt+1]<=mx)
				nxt++;
			int nb=nxt-idx+1;
			rem-=nb;
			mx+=nb;
			idx=nxt+1;
			res++;
		}
		output(res);

	
		try {
			out.close();
		} catch (Exception E) {
		}

	}

	public static void main(String[] args) throws Exception {
		process();

	}

	static final class InputReader {
		private final InputStream stream;
		private final byte[] buf = new byte[1024];
		private int curChar;
		private int numChars;

		public InputReader(InputStream stream) {
			this.stream = stream;
		}

		private int read() throws IOException {
			if (curChar >= numChars) {
				curChar = 0;
				numChars = stream.read(buf);
				if (numChars <= 0) {
					return -1;
				}
			}
			return buf[curChar++];
		}

		public final String readString() throws IOException {
			int c = read();
			while (isSpaceChar(c)) {
				c = read();
			}
			StringBuilder res = new StringBuilder();
			do {
				res.append((char) c);
				c = read();
			} while (!isSpaceChar(c));
			return res.toString();
		}

		public final int readInt() throws IOException {
			int c = read();
			boolean neg = false;
			while (isSpaceChar(c)) {
				c = read();
			}
			char d = (char) c;
			
			if (d == '-') {
				neg = true;
				c = read();
			}
			int res = 0;
			do {
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			
			if (neg)
				return -res;
			return res;

		}

		public final long readLong() throws IOException {
			int c = read();
			boolean neg = false;
			while (isSpaceChar(c)) {
				c = read();
			}
			char d = (char) c;
			
			if (d == '-') {
				neg = true;
				c = read();
			}
			long res = 0;
			do {
				res *= 10;
				res += c - '0';
				c = read();
			} while (!isSpaceChar(c));
			
			if (neg)
				return -res;
			return res;

		}

		private boolean isSpaceChar(int c) {
			return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
		}
	}

}","final class Solution{static boolean f=true;static void F(Object R){if(f)System.err.println(R);}static void F(Object[] R){if(f){for(Object O:R)System.err.print(O+"" "");System.err.println("""");}}static void F(int[] R){if(f){for(int I:R)System.err.print(I+"" "");System.err.println("""");}}static void F(int[] R,int I){if(f){for(int J=0;J<I;J++)System.err.print(R[J]+"" "");System.err.println("""");}}static void F(long[] R){if(f){for(long L:R)System.err.print(L+"" "");System.err.println("""");}}static void E(Object R){if(f)System.err.print(R);}static void C(Object O){System.out.println(O);}static void C(Object O){C(""""+O+""\n"");}static void C(Object O){try{D.write(""""+O);}catch(Exception E){}}static long X=998244353;static int P=64;static BufferedWriter D;static InputReader J;static void S()throws Exception{Locale.setDefault(Locale.US);D=new BufferedWriter(new OutputStreamWriter(System.out));J=new InputReader(System.in);long G=J.readLong();int M=J.readInt();long K=J.readLong();long[] Q=new long[M];for(int Y=0;Y<M;Y++)Q[Y]=J.readLong()-1;int L=-1;int N=M;int I=0;long Z=K-1;int A=0;int B=0;int H=0;while(N>0){while(Q[I]>Z){Z+=K;if(Z>=G-1)Z=G-1;}int O=I;while(O+1<M&&Q[O+1]<=Z)O++;int T=O-I+1;N-=T;Z+=T;I=O+1;H++;}C(H);try{D.close();}catch(Exception e){}}public static void main(String[] args)throws Exception{S();}static final class InputReader{private final InputStream W;private final byte[] Z=new byte[1024];private int U;private int V;public InputReader(InputStream W){this.W=W;}private int A()throws IOException{if(U>=V){U=0;V=W.read(Z);if(V<=0)return -1;}return Z[U++];}public final String readString()throws IOException{int C=A();while(D(C)){C=A();}StringBuilder Y=new StringBuilder();do{Y.append((char)C);C=A();}while(!D(C));return Y.toString();}public final int readInt()throws IOException{int C=A();boolean Q=false;while(D(C)){C=A();}char R=(char)C;if(R==45){Q=true;C=A();}int S=0;do{S*=10;S+=C-48;C=A();}while(!D(C));if(Q)return -S;return S;}public final long readLong()throws IOException{int C=A();boolean Q=false;while(D(C)){C=A();}char R=(char)C;if(R==45){Q=true;C=A();}long S=0;do{S*=10;S+=C-48;C=A();}while(!D(C));if(Q)return -S;return S;}private boolean D(int C){return C==32||C==10||C==13||C==9||C==-1;}}}",514
"class
MinimumDistance 
{ 

int
minDist(
int
arr[], 
int
n, 
int
x, 
int
y) 

{ 

int
i, j; 

int
min_dist = Integer.MAX_VALUE; 

for
(i = 
0
; i < n; i++) 

{ 

for
(j = i + 
1
; j < n; j++) 

{ 

if
((x == arr[i] && y == arr[j] 

|| y == arr[i] && x == arr[j]) 

&& min_dist > Math.abs(i - j)) 

min_dist = Math.abs(i - j); 

} 

} 

return
min_dist; 

} 


public
static
void
main(String[] args) 

{ 

MinimumDistance min = 
new
MinimumDistance(); 

int
arr[] = {
3
, 
5
, 
4
, 
2
, 
6
, 
5
, 
6
, 
6
, 
5
, 
4
, 
8
, 
3
}; 

int
n = arr.length; 

int
x = 
3
; 

int
y = 
6
; 


System.out.println(
""Minimum distance between ""
+ x + 
"" and ""
+ y 

+ 
"" is ""
+ min.minDist(arr, n, x, y)); 

} 
}","class MinimumDistance {

    int minDist(int arr[], int n, int x, int y) {
        int i, j;
        int min_dist = Integer.MAX_VALUE;
        for (i = 0; i < n; i++) {
            for (j = i + 1; j < n; j++) {
                if ((x == arr[i] && y == arr[j] || y == arr[i] && x == arr[j]) && min_dist > Math.abs(i - j))
                    min_dist = Math.abs(i - j);
            }
        }
        return min_dist;
    }

    public static void main(String[] args) {
        MinimumDistance min = new MinimumDistance();
        int arr[] = {3, 5, 4, 2, 6, 5, 6, 6, 5, 4, 8, 3};
        int n = arr.length;
        int x = 3;
        int y = 6;

        System.out.println(""Minimum distance between "" + x + "" and "" + y + "" is "" + min.minDist(arr, n, x, y));
    }
}",515
"public class Main{
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(in));
		
		StringTokenizer st = new StringTokenizer(br.readLine().trim());
		
		int n = Integer.valueOf(st.nextToken());
		int k = Integer.valueOf(st.nextToken());
		
		String str = br.readLine().trim();
		int [] arr = new int[n];
		
		LL[] adjlist = new LL[n];
		
		for(int i =0 ; i < n; i++){
			int x = str.charAt(i) - 'a' + 1;
			arr[i] = x;
			adjlist[i] = new LL();
		}
		
		
		Arrays.sort(arr);
		
		for(int i =0; i < n; i++){
			for(int j = i + 1; j < n; j++){
				int a = arr[i];
				int b = arr[j];
				
				if((b - a) >= 2){
					adjlist[i].add(new Pair(j, arr[j], 1));
				}
			}
		}
		
		LinkedList<Pair> list = new LinkedList<Pair>();
		LinkedList<Pair> tmpList = new LinkedList<Pair>();
		
		int ans = Integer.MAX_VALUE;
		
		for(int i = 0; i < n; i++){
			
			list.clear();
			list.add(new Pair(i,arr[i],0));
			
			
			
			for(int j = 0; j < k; j++){
				tmpList.clear();
				while(!list.isEmpty()){
					
					
					Pair cur = list.removeFirst();
					if(j == k-1){
						ans = Math.min(cur.val, ans);
					}
					for(Pair adj : adjlist[cur.idx]){
						
						
						tmpList.add(new Pair(adj.idx, adj.val + cur.val, cur.val+1));
					}
				}
				
				
				
				
				if(tmpList.size() == 0){
					break;
				}
				else{
					list.addAll(tmpList);
				}
				
				
			}
			
			
		}
		
		if(ans == Integer.MAX_VALUE) out.println(-1);
		else out.println(ans);
		
		
	}
	public static class LL extends LinkedList<Pair>{}
	public static class Pair implements Comparable<Pair>{
		int val;
		int idx;
		int ctr;
		public Pair(int a, int b, int c){
			idx = a;
			val = b;
			ctr = c;
		}
		public int compareTo(Pair p){
			
			if(ctr == p.ctr){
				if(val == p.val) return idx - p.idx;
					
				return val - p.val;
			}
			return p.ctr - ctr;
		}
		public String toString(){
			return val+"", "";
		}
	}
}",ERROR,516
"public class Codeforces {
    public static Scanner input = new Scanner(System.in);
    public static void main(String[] args){
        int n,k;
        n=input.nextInt();
        k=input.nextInt();
        String s=input.next();
        int[] wtArray=new int[n];
        for(int i=0;i<s.length();i++)
            wtArray[i]=s.charAt(i)-96;
        for(int i=1;i<n;i++)
            for(int j=0;j<n-i;j++)
                if(wtArray[j]>wtArray[j+1]){
                    int temp=wtArray[j+1];
                    wtArray[j+1]=wtArray[j];
                    wtArray[j]=temp;
                }

        int sum=wtArray[0];
        k--;
        int temp=sum;
        for(int i=1;k!=0 &&i <n;i++){
            if((wtArray[i]-temp)>1){
                sum+=wtArray[i];
                k--;
                temp=wtArray[i];
            }
        }
        if(k!=0)
            sum=-1;
        System.out.println(sum);
    }

}","public class Codeforces {
    public static Scanner input = new Scanner(System.in);
    public static void main(String[] args){
        int n,k;
        n=input.nextInt();
        k=input.nextInt();
        String s=input.next();
        int[] wtArray=new int[n];
        for(int i=0;i<s.length();i++)
            wtArray[i]=s.charAt(i)-96;
        for(int i=1;i<n;i++)
            for(int j=0;j<n-i;j++)
                if(wtArray[j]>wtArray[j+1]){
                    int temp=wtArray[j+1];
                    wtArray[j+1]=wtArray[j];
                    wtArray[j]=temp;
                }
                
        int sum=wtArray[0];
        k--;
        int temp=sum;
        for(int i=1;k!=0 &&i <n;i++){
            if((wtArray[i]-temp)>1){
                sum+=wtArray[i];
                k--;
                temp=wtArray[i];
            }
        }
        if(k!=0)
            sum=-1;
        System.out.println(sum);
    }
}",517
"public class Main {

	static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner() {
            try {
                br = new BufferedReader(new InputStreamReader(System.in));
                st = new StringTokenizer(br.readLine());
            } catch (Exception e){e.printStackTrace();}
        }

        public String next() {
            if (st.hasMoreTokens()) return st.nextToken();
            try {st = new StringTokenizer(br.readLine());}
            catch (Exception e) {e.printStackTrace();}
            return st.nextToken();
        }

        public int nextInt() {return Integer.parseInt(next());}

        public long nextLong() {return Long.parseLong(next());}

        public double nextDouble() {return Double.parseDouble(next());}

        public String nextLine() {
            String line = """";
            if(st.hasMoreTokens()) line = st.nextToken();
            else try {return br.readLine();}catch(IOException e){e.printStackTrace();}
            while(st.hasMoreTokens()) line += "" ""+st.nextToken();
            return line;
        }
    }

	public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        PrintWriter pw = new PrintWriter(System.out);

        int n = sc.nextInt();
        int m = sc.nextInt();
        int ans = 0;

        int[] a = new int[101];
        for(int i=0;i<m;i++) a[sc.nextInt()]++;

        for(int i=1;i<=100;i++) {
            int y = 0;
            for(int x : a) {
                y += x / i;
            }
            if(y >= n) {
                ans = i;
            }
        }

        pw.println(ans);
        pw.close();
    }
}","public class Main {

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner() {
            try {
                br = new BufferedReader(new InputStreamReader(System.in));
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        public String next() {
            if (st.hasMoreTokens()) return st.nextToken();
            try {
                st = new StringTokenizer(br.readLine());
            } catch (Exception e) {
                e.printStackTrace();
            }
            return st.nextToken();
        }

        public int nextInt() { return Integer.parseInt(next()); }

        public long nextLong() { return Long.parseLong(next()); }

        public double nextDouble() { return Double.parseDouble(next()); }

        public String nextLine() {
            String line = """";
            if (st.hasMoreTokens()) line = st.nextToken();
            else try {
                return br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            while (st.hasMoreTokens()) line += "" "" + st.nextToken();
            return line;
        }
    }

    public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        PrintWriter pw = new PrintWriter(System.out);

        int n = sc.nextInt();
        int m = sc.nextInt();
        int ans = 0;

        int[] a = new int[101];
        for (int i = 0; i < m; i++) a[sc.nextInt()]++;

        for (int i = 1; i <= 100; i++) {
            int y = 0;
            for (int x : a) {
                y += x / i;
            }
            if (y >= n) {
                ans = i;
            }
        }

        pw.println(ans);
        pw.close();
    }
}",518
"public class G {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n, m;
        n = in.nextInt();
        m = in.nextInt();
        int[] a = new int[m];

        for (int i = 0; i < m; i++) {
            a[i] = in.nextInt();
        }

        Arrays.sort(a);
        HashMap<Integer, Integer> map = new HashMap<>(200);
        for (int i : a) {
            Integer t = map.get(i);
            if (t == null) {
                map.put(i, 1);
            } else {
                map.put(i, t + 1);
            }
        }

        ArrayList<Food> list = new ArrayList<>(100);
        Iterator<Map.Entry<Integer, Integer>> it = map.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<Integer, Integer> en = it.next();
            list.add(new Food(en.getKey(), en.getValue()));
        }

        list.sort(Comparator.comparingInt(o -> o.num));
        int min, max;
        min = 1;
        max = list.get(list.size() - 1).num;
        int res = 0;
        for (int i = min; i <= max; i++) {
            int t = 0;
            for (Food food : list) {
                int gaven = food.num / i;
                if (gaven >= 1) {
                    t += gaven;
                    if (t >= n) {
                        res = Math.max(res, i);
                        break;
                    }
                }
            }
        }
        System.out.println(res);






    }
}

class Food {
    int id;
    int num;

    public Food(int id, int num) {
        this.id = id;
        this.num = num;
    }

    @Override
    public String toString() {
        return ""Food{"" +
                ""id="" + id +
                "", num="" + num +
                '}';
    }
}","public class G {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        int m = in.nextInt();
        int[] a = new int[m];

        for (int i = 0; i < m; i++) {
            a[i] = in.nextInt();
        }

        Arrays.sort(a);
        HashMap<Integer, Integer> map = new HashMap<>(200);

        for (int i : a) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }

        ArrayList<Food> list = new ArrayList<>(100);
        Iterator<Map.Entry<Integer, Integer>> it = map.entrySet().iterator();

        while (it.hasNext()) {
            Map.Entry<Integer, Integer> en = it.next();
            list.add(new Food(en.getKey(), en.getValue()));
        }

        list.sort(Comparator.comparingInt(o -> o.num));
        int min = 1;
        int max = list.get(list.size() - 1).num;
        int res = 0;

        for (int i = min; i <= max; i++) {
            int t = 0;
            for (Food food : list) {
                int gaven = food.num / i;
                if (gaven >= 1) {
                    t += gaven;
                    if (t >= n) {
                        res = Math.max(res, i);
                        break;
                    }
                }
            }
        }
        System.out.println(res);
    }
}


class Food {
    int id;
    int num;

    public Food(int id, int num) {
        this.id = id;
        this.num = num;
    }

    @Override
    public String toString() {
        return ""Food{"" +
                ""id="" + id +
                "", num="" + num +
                '}';
    }
}",519
"public class Solution {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Solution ss = new Solution();
		ss.test(sc);
	}
	
	void test(Scanner sc){
		int LEN = sc.nextInt();
		int[] a = new int[LEN];
		int[] b = new int[LEN];
		for (int i = 0; i < b.length; i++) {
			a[i] = sc.nextInt();
		}
		for (int i = 0; i < b.length; i++) {
			b[i] = sc.nextInt();
		}
		Arrays.sort(a);
		Arrays.sort(b);
		
		int ia=0, ib=0;
		while(ia<LEN && a[ia]==0) ia++;
		while(ib<LEN && b[ib]==0) ib++;
		if(ib==LEN){
			System.out.println(""Yes"");
			return;
		}
		if(ia==LEN){
			System.out.println(""No"");
			return;
		}		
		boolean out = true;
		while(ia<LEN && ib<LEN){
			if(a[ia]==b[ib]){
				ia++;
				ib++;
			}else{
				if(a[ia]>b[ib]){
					while(ib<LEN && b[ib]!=a[ia]){
						ib++;
					}
					if(ib==LEN){
						out=false;
						break;
					}
				}
			}
		}
		
		if(out){
			System.out.println(""Yes"");
		}else{
			System.out.println(""No"");
		}
	}

}","public class Solution {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Solution ss = new Solution();
		ss.test(sc);
	}
	
	void test(Scanner sc){
		int LEN = sc.nextInt();
		int[] a = new int[LEN];
		int[] b = new int[LEN];
		for (int i = 0; i < b.length; i++) {
			a[i] = sc.nextInt();
		}
		for (int i = 0; i < b.length; i++) {
			b[i] = sc.nextInt();
		}
		Arrays.sort(a);
		Arrays.sort(b);
		
		int ia=0, ib=0;
		while(ia<LEN && a[ia]==0) ia++;
		while(ib<LEN && b[ib]==0) ib++;
		if(ib==LEN){
			System.out.println(""Yes"");
			return;
		}
		if(ia==LEN){
			System.out.println(""No"");
			return;
		}		
		boolean out = true;
		while(ia<LEN && ib<LEN){
			if(a[ia]==b[ib]){
				ia++;
				ib++;
			}else{
				if(a[ia]>b[ib]){
					while(ib<LEN && b[ib]!=a[ia]){
						ib++;
					}
					if(ib==LEN){
						out=false;
						break;
					}
				}
			}
		}
		
		if(out){
			System.out.println(""Yes"");
		}else{
			System.out.println(""No"");
		}
	}

}",520
"class
GFG { 


static
int
maxSum(
int
arr[], 
int
n) 
{ 

int
res = Integer.MIN_VALUE; 



for
(
int
i = 
0
; i < n; i++) 
{ 




int
curr_sum = 
0
; 










for
(
int
j = 
0
; j < n; j++) 

{ 

int
index = (i + j) % n; 

curr_sum += j * arr[index]; 

} 




res = Math.max(res, curr_sum); 
} 

return
res; 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = {
8
, 
3
, 
1
, 
2
}; 

int
n = arr.length; 

System.out.println(maxSum(arr, n)); 
} 


}","class GFG { static int maxSum(int[] arr, int n) { int res = Integer.MIN_VALUE; for (int i = 0; i < n; i++) { int curr_sum = 0; for (int j = 0; j < n; j++) { int index = (i + j) % n; curr_sum += j * arr[index]; } res = Math.max(res, curr_sum); } return res; } public static void main(String args[]) { int arr[] = {8, 3, 1, 2}; int n = arr.length; System.out.println(maxSum(arr, n)); } }",521
"public class TestClass {
    
    public static int set_size(int[] a, int N){
        HashSet <Integer> newset = new HashSet <Integer>();
        int i=0;
        while(i<N){
            newset.add(a[i++]);
        }
        int v = newset.size();
        return v;
    }
    public static void main(String args[] ) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       StringTokenizer tk = new StringTokenizer(br.readLine());
            int N = Integer.parseInt(tk.nextToken());
            int x = Integer.parseInt(tk.nextToken());
            
            int[] a = new int[N];
            int[] b = new int[N];
            StringTokenizer tb = new StringTokenizer(br.readLine());
            for(int i=0; i<N; i++){
                a[i] = Integer.parseInt(tb.nextToken());
            }
            if(set_size(a, N) < N){
                System.out.print(""0"");
                System.exit(0);
            }
            int num=0;
        while(num++<4){
            for(int i=0; i<N; i++){
                if((a[i]&x) == a[i])
                    continue;
                else{
                    for(int j=0; j<N; j++){
                        if(i==j){
                            b[i] = (a[i]&x);
                        }
                        else{
                            b[j] = a[j];
                        }
                    }
                    int s = set_size(b, N);
                    if(s<N){
                        System.out.print(num);
                        System.exit(0);
                    }
                }
            }
            for(int i=0; i<N; i++)
                a[i] = b[i];
        }
        System.out.print(""-1"");
        System.exit(0);
    }
}","public class TestClass {
    
    public static int set_size(int[] a, int N){
        HashSet <Integer> newset = new HashSet <Integer>();
        int i=0;
        while(i<N){
            newset.add(a[i++]);
        }
        int v = newset.size();
        return v;
    }
    public static void main(String args[] ) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
       StringTokenizer tk = new StringTokenizer(br.readLine());
            int N = Integer.parseInt(tk.nextToken());
            int x = Integer.parseInt(tk.nextToken());
            
            int[] a = new int[N];
            int[] b = new int[N];
            StringTokenizer tb = new StringTokenizer(br.readLine());
            for(int i=0; i<N; i++){
                a[i] = Integer.parseInt(tb.nextToken());
            }
            if(set_size(a, N) < N){
                System.out.print(""0"");
                System.exit(0);
            }
            int num=0;
        while(num++<4){
            for(int i=0; i<N; i++){
                if((a[i]&x) == a[i])
                    continue;
                else{
                    for(int j=0; j<N; j++){
                        if(i==j){
                            b[i] = (a[i]&x);
                        }
                        else{
                            b[j] = a[j];
                        }
                    }
                    int s = set_size(b, N);
                    if(s<N){
                        System.out.print(num);
                        System.exit(0);
                    }
                }
            }
            for(int i=0; i<N; i++)
                a[i] = b[i];
        }
        System.out.print(""-1"");
        System.exit(0);
    }
}",522
"public class Cr500 {
    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
        int n, x, status = -1;
        Set<Integer> a = new HashSet<>(), bitA = new HashSet<>();
        ArrayList<Integer> al = new ArrayList<>(), bl = new ArrayList<>();
        n = scanner.nextInt();
        x = scanner.nextInt();

        for(int i = 0; i < n; i++) {
            int v;
            if(!a.add(v = scanner.nextInt())) {
                System.out.println(0);
                return;
            }

            if(!bitA.add(v & x)) {
                status = 2;
            }
            al.add(v);
            bl.add(v & x);
        }

        if(contains(al, bl)) {
            System.out.println(1);
            return;
        }

        System.out.println(status);
    }

    private static boolean contains(ArrayList<Integer> a, ArrayList<Integer> b) {
        for(int i = 0; i < a.size(); i++) {
            int v1 = a.get(i);
            for(int j = 0; j < b.size(); j++) {
                int v2 = b.get(j);
                if(i != j && v1 == v2) {
                    return true;
                }
            }
        }
        return false;
    }
}","public class Cr500 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n, x, status = -1;
        Set<Integer> a = new HashSet<>(), bitA = new HashSet<>();
        ArrayList<Integer> al = new ArrayList<>(), bl = new ArrayList<>();
        n = scanner.nextInt();
        x = scanner.nextInt();
        for (int i = 0; i < n; i++) {
            int v;
            if (!a.add(v = scanner.nextInt())) {
                System.out.println(0);
                return;
            }
            if (!bitA.add(v & x)) {
                status = 2;
            }
            al.add(v);
            bl.add(v & x);
        }
        if (contains(al, bl)) {
            System.out.println(1);
            return;
        }
        System.out.println(status);
    }
    private static boolean contains(ArrayList<Integer> a, ArrayList<Integer> b) {
        for (int i = 0; i < a.size(); i++) {
            int v1 = a.get(i);
            for (int j = 0; j < b.size(); j++) {
                int v2 = b.get(j);
                if (i != j && v1 == v2) {
                    return true;
                }
            }
        }
        return false;
    }
}",523
"public class B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(a[i]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (a[i] == a[i + 1]) {
                System.out.println(0);
                return;
            }
        }
        for (int i = n - 1; i > 0; i--) {
            if ((a[i] & x) == (a[i - 1] & x) && !list.contains(x)) {
                System.out.println(2);
                return;
            } else if (list.contains(x) && a[i] > x && (a[i] & x) == x) {
                System.out.println(1);
                return;
            }
        }
        System.out.println(-1);
    }
}","public class B {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int x = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }
        Arrays.sort(a);
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            list.add(a[i]);
        }
        for (int i = 0; i < n - 1; i++) {
            if (a[i] == a[i + 1]) {
                System.out.println(0);
                return;
            }
        }
        for (int i = n - 1; i > 0; i--) {
            if ((a[i] & x) == (a[i - 1] & x) && !list.contains(x)) {
                System.out.println(2);
                return;
            } else if (list.contains(x) && a[i] > x && (a[i] & x) == x) {
                System.out.println(1);
                return;
            }
        }
        System.out.println(-1);
    }
}",524
"public class Main{
    public static void main(String [] args)
    {
        Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();
        int m=scan.nextInt();
        int a[]=new int[m+1];
        int i,j;
        int c=0;
        for(i=0;i<n;i++)
        {
            int l=scan.nextInt();
            int r=scan.nextInt();
            for(j=l;j<=r;j++)
            {
                if(a[j]!=1)
                {
                    a[j]=1;
                    c++;
                }
            }
        }
        System.out.println(m-c);
        for(i=1;i<=m;i++)
        {
            if(a[i]==0)
            {
                System.out.print(i+"" "");
            }
        }
    }
}","public class Main{
    public static void main(String [] args)
    {
        Scanner scan=new Scanner(System.in);
        int n=scan.nextInt();
        int m=scan.nextInt();
        int a[]=new int[m+1];
        int i,j;
        int c=0;
        for(i=0;i<n;i++)
        {
            int l=scan.nextInt();
            int r=scan.nextInt();
            for(j=l;j<=r;j++)
            {
                if(a[j]!=1)
                {
                    a[j]=1;
                    c++;
                }
            }
        }
        System.out.println(m-c);
        for(i=1;i<=m;i++)
        {
            if(a[i]==0)
            {
                System.out.print(i+"" "");
            }
        }
    }
}",525
"class
GFG{ 

private
static
int
minJumps(
int
[] arr, 
int
n) { 

int
jumps[] = 
new
int
[n]; 




int
i, j; 


if
(n == 
0
|| arr[
0
] == 
0
) 

return
Integer.MAX_VALUE; 





jumps[
0
] = 
0
; 






for
(i = 
1
; i < n; i++) 

{ 

jumps[i] = Integer.MAX_VALUE; 

for
(j = 
0
; j < i; j++) 

{ 

if
(i <= j + arr[j] && jumps[j] != Integer.MAX_VALUE) 

{ 

jumps[i] = Math.min(jumps[i], jumps[j] + 
1
); 

break
; 

} 

} 

} 

return
jumps[n-
1
]; 

} 


public
static
void
main(String[] args) { 

int
arr[] = {
1
, 
3
, 
6
, 
1
, 
0
, 
9
}; 


System.out.println(
""Minimum number of jumps to reach end is : ""
+ 

minJumps(arr,arr.length)); 

} 
}","class GFG { private static int minJumps(int[] arr, int n) { int jumps[] = new int[n]; int i, j; if (n == 0 || arr[0] == 0) return Integer.MAX_VALUE; jumps[0] = 0; for (i = 1; i < n; i++) { jumps[i] = Integer.MAX_VALUE; for (j = 0; j < i; j++) { if (i <= j + arr[j] && jumps[j] != Integer.MAX_VALUE) { jumps[i] = Math.min(jumps[i], jumps[j] + 1); break; } } } return jumps[n-1]; } public static void main(String[] args) { int arr[] = {1, 3, 6, 1, 0, 9}; System.out.println(""Minimum number of jumps to reach end is : "" + minJumps(arr, arr.length)); } }",526
"public class DoggoRecoloring {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		String s = nextString();
		boolean b = false;
		
		if (n == 1 || n > 26)
			b = true;
		else 
			for (int i = 0; i < n; i++)
				for (int j = i+1; j < n; j++)
					if (s.charAt(i) == s.charAt(j))
						 b = true;
		
		System.out.println(b ? ""Yes"" : ""No"");
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class DoggoRecoloring {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		String s = nextString();
		boolean b = false;
		
		if (n == 1 || n > 26) {
			b = true;
		} else {
			for (int i = 0; i < n; i++) {
				for (int j = i + 1; j < n; j++) {
					if (s.charAt(i) == s.charAt(j)) {
						b = true;
					}
				}
			}
		}
		
		System.out.println(b ? ""Yes"" : ""No"");
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens()) {
			st = new StringTokenizer(in.readLine());
		}
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++) {
			a[i] = nextInt();
		}
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < m; j++) {
				a[i][j] = nextInt();
			}
		}
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++) {
			a[i] = nextLong();
		}
		return a;
	}
}",527
"class
GFG 
{ 



static
int
maxSumIS(
int
arr[], 
int
n) 

{ 

int
i, j, max = 
0
; 

int
msis[] = 
new
int
[n]; 




for
(i = 
0
; i < n; i++) 

msis[i] = arr[i]; 




for
(i = 
1
; i < n; i++) 

for
(j = 
0
; j < i; j++) 

if
(arr[i] > arr[j] && 

msis[i] < msis[j] + arr[i]) 

msis[i] = msis[j] + arr[i]; 




for
(i = 
0
; i < n; i++) 

if
(max < msis[i]) 

max = msis[i]; 


return
max; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = 
new
int
[]{
1
, 
101
, 
2
, 
3
, 
100
, 
4
, 
5
}; 

int
n = arr.length; 

System.out.println(
""Sum of maximum sum ""
+ 

""increasing subsequence is ""
+ 

maxSumIS(arr, n)); 

} 
}","class GFG { static int maxSumIS(int arr[], int n) { int i, j, max = 0; int msis[] = new int[n]; for (i = 0; i < n; i++) msis[i] = arr[i]; for (i = 1; i < n; i++) for (j = 0; j < i; j++) if (arr[i] > arr[j] && msis[i] < msis[j] + arr[i]) msis[i] = msis[j] + arr[i]; for (i = 0; i < n; i++) if (max < msis[i]) max = msis[i]; return max; } public static void main(String args[]) { int arr[] = new int[]{1, 101, 2, 3, 100, 4, 5}; int n = arr.length; System.out.println(""Sum of maximum sum "" + ""increasing subsequence is "" + maxSumIS(arr, n)); } }",528
"class
SmallestSubArraySum 
{ 





static
int
smallestSubWithSum(
int
arr[], 
int
n, 
int
x) 

{ 



int
min_len = n + 
1
; 




for
(
int
start = 
0
; start < n; start++) 

{ 



int
curr_sum = arr[start]; 




if
(curr_sum > x) 

return
1
; 




for
(
int
end = start + 
1
; end < n; end++) 

{ 



curr_sum += arr[end]; 








if
(curr_sum > x && (end - start + 
1
) < min_len) 

min_len = (end - start + 
1
); 

} 

} 

return
min_len; 

} 




public
static
void
main(String[] args) 

{ 

int
arr1[] = {
1
, 
4
, 
45
, 
6
, 
10
, 
19
}; 

int
x = 
51
; 

int
n1 = arr1.length; 

int
res1 = smallestSubWithSum(arr1, n1, x); 

if
(res1 == n1+
1
) 

System.out.println(
""Not Possible""
); 

else

System.out.println(res1); 



int
arr2[] = {
1
, 
10
, 
5
, 
2
, 
7
}; 

int
n2 = arr2.length; 

x = 
9
; 

int
res2 = smallestSubWithSum(arr2, n2, x); 

if
(res2 == n2+
1
) 

System.out.println(
""Not Possible""
); 

else

System.out.println(res2); 


int
arr3[] = {
1
, 
11
, 
100
, 
1
, 
0
, 
200
, 
3
, 
2
, 
1
, 
250
}; 

int
n3 = arr3.length; 

x = 
280
; 

int
res3 = smallestSubWithSum(arr3, n3, x); 

if
(res3 == n3+
1
) 

System.out.println(
""Not Possible""
); 

else

System.out.println(res3); 

} 
}","public class SmallestSubArraySum {

    static int smallestSubWithSum(int arr[], int n, int x) {
        int min_len = n + 1;

        for (int start = 0; start < n; start++) {
            int curr_sum = arr[start];

            if (curr_sum > x)
                return 1;

            for (int end = start + 1; end < n; end++) {
                curr_sum += arr[end];

                if (curr_sum > x && (end - start + 1) < min_len)
                    min_len = (end - start + 1);
            }
        }

        return min_len;
    }

    public static void main(String[] args) {
        int arr1[] = {1, 4, 45, 6, 10, 19};
        int x = 51;
        int n1 = arr1.length;
        int res1 = smallestSubWithSum(arr1, n1, x);

        if (res1 == n1 + 1)
            System.out.println(""Not Possible"");
        else
            System.out.println(res1);

        int arr2[] = {1, 10, 5, 2, 7};
        int n2 = arr2.length;
        x = 9;
        int res2 = smallestSubWithSum(arr2, n2, x);

        if (res2 == n2 + 1)
            System.out.println(""Not Possible"");
        else
            System.out.println(res2);

        int arr3[] = {1, 11, 100, 1, 0, 200, 3, 2, 1, 250};
        int n3 = arr3.length;
        x = 280;
        int res3 = smallestSubWithSum(arr3, n3, x);

        if (res3 == n3 + 1)
            System.out.println(""Not Possible"");
        else
            System.out.println(res3);
    }
}",529
"public class DivideCandies {
	public static void main(String[] args){
		Scanner input = new Scanner(System.in);
		long n = input.nextLong();
		int m = input.nextInt();
		long[] a = new long[m];
		for(int i = 0; i < m; i++)
		{
			if(i <= (n%m) && i != 0)
			{
				a[i] = n/m + 1;
			}
			else
			{
				a[i] = n/m;
			}
		}
		long result = 0L;
		for(int i = 0; i < m; i++)
		{
			for(int j = 0; j < m; j++)
			{
				if((i * i + j * j) % m == 0)
				{
					result += a[i] * a[j];
				}
			}
		}
		System.out.println(result);
	}
}","public class DivideCandies {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		long n = input.nextLong();
		int m = input.nextInt();
		long[] a = new long[m];
		for (int i = 0; i < m; i++) {
			if (i <= (n % m) && i != 0) {
				a[i] = n / m + 1;
			} else {
				a[i] = n / m;
			}
		}
		long result = 0L;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < m; j++) {
				if ((i * i + j * j) % m == 0) {
					result += a[i] * a[j];
				}
			}
		}
		System.out.println(result);
	}
}",530
";
public class JavaApplication2 {

    public static void main(String[] args) {
        Scanner sc =new Scanner(System.in);
        int n= sc.nextInt();
        int li[]=new int[n];
        for(int i = 0 ;i<n;i++){
            li[i]=sc.nextInt();
        }
        int max=0;
         int c=0;
        for(int i = 0;i<n;i++){
           c=0;
            for(int j=i;j<n;j++){
                if(j!=n-1&&j!=0&&li[j]-li[j-1]==1&&li[j+1]-li[j]==1){
                    c++;
                    i++;
                }
                else if(j!=n-1&&j==0&&li[j+1]-li[j]==1&&li[j]==1){
                    c++;
                    i++;
                }
                else if(j==n-1&&j!=0&&li[j]-li[j-1]==1&&li[j]==1000){
                    c++;
                    i++;
                }
                else{ break;}
            }
            if(c>max){
                max=c;
            }
        }
        if(c>max){
                max=c;
            }
        System.out.println(max);
        
       
    }
    
}","public class Solution {

    public static void main(String[] args) {
    Scanner sc =new Scanner(System.in);
    int n= sc.nextInt();
    int[] li=new int[n];
    for(int i = 0 ;i<n;i++){
    li[i]=sc.nextInt();
    }
    int max=0;
     int c=0;
    for(int i = 0;i<n;i++){
       c=0;
        for(int j=i;j<n;j++){
            if(j!=n-1&&j!=0&&li[j]-li[j-1]==1&&li[j+1]-li[j]==1){
                c++;
                i++;
            }
            else if(j!=n-1&&j==0&&li[j+1]-li[j]==1&&li[j]==1){
                c++;
                i++;
            }
            else if(j==n-1&&j!=0&&li[j]-li[j-1]==1&&li[j]==1000){
                c++;
                i++;
            }
            else{ break;}
        }
        if(c>max){
            max=c;
        }
    }
    if(c>max){
            max=c;
        }
    System.out.println(max);


    }

}",531
"public class Amain {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int a[] = new int[100005];
		int vis[] = new int[100005];
		int maxx = -1;
		int n , k ;
		int e = 0  , s = 0 ;
		int ans = 0  ;
		
		n=sc.nextInt();
		k=sc.nextInt();

		for(int i = 1 ; i<=n ; i++ )
		{
			a[i]=sc.nextInt() ;
			if(a[i]== 1 )
			{
				e++ ; 
			}
			else
			{
				s++ ;
			}
		}
	    
		for(int i = 1 ; i<=k  ;i++ )
		{
			int e1 = 0 ; 
			int s1 = 0 ;  
			for(int j = i ; j<=n ;j+=k )
			{
				if(a[j]==1 )
				{
					e1++ ;
				}
				else
				{
					s1++ ;
				}
			}
	        
	        
	 
			ans = Math.abs(  (s-s1)-(e-e1)) ; 
			maxx = Math.max(maxx,ans) ; 
		}
       System.out.print(maxx);
	}

}","public class Amain {

	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		int a[] = new int[100005];
		int vis[] = new int[100005];
		int maxx = -1;
		int n , k ;
		int e = 0  , s = 0 ;
		int ans = 0  ;
		
		n=sc.nextInt();
		k=sc.nextInt();

		for(int i = 1 ; i<=n ; i++ )
		{
			a[i]=sc.nextInt() ;
			if(a[i]== 1 )
			{
				e++ ; 
			}
			else
			{
				s++ ;
			}
		}
	    
		for(int i = 1 ; i<=k  ;i++ )
		{
			int e1 = 0 ; 
			int s1 = 0 ;  
			for(int j = i ; j<=n ;j+=k )
			{
				if(a[j]==1 )
				{
					e1++ ;
				}
				else
				{
					s1++ ;
				}
			}
	        
	 
			ans = Math.abs( (s-s1)-(e-e1)) ; 
			maxx = Math.max(maxx,ans) ; 
		System.out.print(maxx);
		}
	}

}",532
"public class Main {
	static class en implements Comparable<en>{
		int w,h,dex;
		en(int a,int b,int c){
			w=a;
			h=b;
			dex=c;
		}
		public int compareTo(en o) {
			return w-o.w;
		}
	}
	public static void main(String args[]) {
		Scanner cin=new Scanner(System.in);
		int n=cin.nextInt(),ww=cin.nextInt(),hh=cin.nextInt(),num=0;
		Queue<en> que=new PriorityQueue();
		for(int i=1;i<=n;i++) {
			int a=cin.nextInt(),b=cin.nextInt();
			if(a>ww&&b>hh) {
				que.add(new en(a,b,i));
				num++;
			}
		}
		int dp[][]=new int[num+5][2],ans=0,ad=0,arr[][]=new int[num+5][3];
		for(int i=1;i<=num;i++) {
			arr[i][0]=que.peek().w;
			arr[i][1]=que.peek().h;
			arr[i][2]=que.remove().dex;
		}
		for(int i=1;i<=num;i++) {
			int te=0,td=0;
			for(int j=1;j<i;j++) {
				if(arr[j][0]<arr[i][0]&&arr[j][1]<arr[i][1]&&dp[j][0]>te) {
					te=dp[j][0];
					td=j;
				}
			}
			dp[i][0]=te+1;
			dp[i][1]=td;
			if(dp[i][0]>ans) {
				ans=dp[i][0];
				ad=i;
			}
		}
		System.out.println(ans);
		ArrayList<Integer> an=new ArrayList();
		int u=ad;
		while(u>0) {
			an.add(arr[u][2]);
			u=dp[u][1];
			
		}
		for(int i=an.size()-1;i>=0;i--) System.out.print(an.get(i)+"" "");
	}
}","class Main {static class en implements Comparable<en>{int w,h,dex;en(int a,int b,int c){w=a;h=b;dex=c;}public int compareTo(en o) {return w-o.w;}}public static void main(String args[]) {Scanner cin=new Scanner(System.in);int n=cin.nextInt(),ww=cin.nextInt(),hh=cin.nextInt(),num=0;Queue<en> que=new PriorityQueue();for(int i=1;i<=n;i++) {int a=cin.nextInt(),b=cin.nextInt();if(a>ww&&b>hh) {que.add(new en(a,b,i));num++;}}int dp[][]=new int[num+5][2],ans=0,ad=0,arr[][]=new int[num+5][3];for(int i=1;i<=num;i++) {arr[i][0]=que.peek().w;arr[i][1]=que.peek().h;arr[i][2]=que.remove().dex;}for(int i=1;i<=num;i++) {int te=0,td=0;for(int j=1;j<i;j++) {if(arr[j][0]<arr[i][0]&&arr[j][1]<arr[i][1]&&dp[j][0]>te) {te=dp[j][0];td=j;}}dp[i][0]=te+1;dp[i][1]=td;if(dp[i][0]>ans) {ans=dp[i][0];ad=i;}}System.out.println(ans);ArrayList<Integer> an=new ArrayList();int u=ad;while(u>0) {an.add(arr[u][2]);u=dp[u][1];}for(int i=an.size()-1;i>=0;i--) System.out.print(an.get(i)+"" "");}}",533
"class
GFG 
{ 



static
int
findMinDiff(
int
[] arr, 
int
n) 

{ 



int
diff = Integer.MAX_VALUE; 






for
(
int
i=
0
; i<n-
1
; i++) 

for
(
int
j=i+
1
; j<n; j++) 

if
(Math.abs((arr[i] - arr[j]) )< diff) 

diff = Math.abs((arr[i] - arr[j])); 




return
diff; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = 
new
int
[]{
1
, 
5
, 
3
, 
19
, 
18
, 
25
}; 

System.out.println(
""Minimum difference is ""
+ 

findMinDiff(arr, arr.length)); 


} 
}","class GFG { static int findMinDiff(int[] arr, int n) { int diff = 2147483647; for (int i = 0; i < n - 1; i++) for (int j = i + 1; j < n; j++) if (Math.abs((arr[i] - arr[j])) < diff) diff = Math.abs((arr[i] - arr[j])); return diff; } public static void main(String[] args) { int arr[] = new int[]{1, 5, 3, 19, 18, 25}; System.out.println(""Minimum difference is "" + findMinDiff(arr, arr.length)); } }",534
"class
Test 
{ 

static
int
arr1[] = 
new
int
[]{
0
, 
1
, 
0
, 
1
, 
1
, 
1
, 
1
}; 

static
int
arr2[] = 
new
int
[]{
1
, 
1
, 
1
, 
1
, 
1
, 
0
, 
1
}; 






static
int
longestCommonSum(
int
n) 

{ 



int
maxLen = 
0
; 






for
(
int
i=
0
; i<n; i++) 

{ 



int
sum1 = 
0
, sum2 = 
0
; 




for
(
int
j=i; j<n; j++) 

{ 



sum1 += arr1[j]; 

sum2 += arr2[j]; 






if
(sum1 == sum2) 

{ 

int
len = j-i+
1
; 

if
(len > maxLen) 

maxLen = len; 

} 

} 

} 

return
maxLen; 

} 




public
static
void
main(String[] args) 

{ 

System.out.print(
""Length of the longest common span with same sum is ""
); 

System.out.println(longestCommonSum(arr1.length)); 

} 
}","class Test { static int arr1[] = new int[]{0, 1, 0, 1, 1, 1, 1}; static int arr2[] = new int[]{1, 1, 1, 1, 1, 0, 1}; static int longestCommonSum(int n) { int maxLen = 0; for (int i = 0; i < n; i++) { int sum1 = 0, sum2 = 0; for (int j = i; j < n; j++) { sum1 += arr1[j]; sum2 += arr2[j]; if (sum1 == sum2) { int len = j - i + 1; if (len > maxLen) maxLen = len; } } } return maxLen; } public static void main(String[] args) { System.out.print(""Length of the longest common span with same sum is ""); System.out.println(longestCommonSum(arr1.length)); } }",535
"public class Codechef{
      

    public static void main(String []args){
       Scanner sc = new Scanner(System.in);
        int n=sc.nextInt();
		Set<HashSet> s3 = new HashSet<>();

      
         for(int j=0;j<n;j++){
         	String a=sc.next();
         HashSet<Character> t = new HashSet<Character>();
			for(char c:a.toCharArray()){
			t.add(c);
			}

        s3.add(t);
    
          

         }
         System.out.println(s3.size());
    }
}","public class Codechef {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        Set<HashSet> s3 = new HashSet<>();

        for (int j = 0; j < n; j++) {
            String a = sc.next();
            HashSet<Character> t = new HashSet<Character>();
            for (char c : a.toCharArray()) {
                t.add(c);
            }

            s3.add(t);
        }
        System.out.println(s3.size());
    }
}",536
"public class Main {
	static int mod = (int) (1e9+7);
	static InputReader in;
    static PrintWriter out;
    
    		public static int n;
    		public static int m;
    
    		public static boolean valid(int i , int j) {
    			
    			return ( i<n && j<m && i>=0 && j>=0);
    		}
    		
   
		public static void main(String args[] )  {
			
		  in = new InputReader(System.in);
	      out = new PrintWriter(System.out);
	     
	     n = in.nextInt();
	    	 m = in.nextInt();
	    
	    	String[] s = new String[n];
	    	for(int i=0;i<n;i++) {
	    		s[i]= in.readString();
	    	}
	    	int f=0;
	    	for(int i=0;i<n;i++) {
	    		for(int j=0;j<s[i].length();j++) {
	    			int val=-1;
	    			if(s[i].charAt(j)=='.') {
	    				val=0;
	    			}
	    			else if(s[i].charAt(j)=='*') {
	    				continue;
	    			}
	    			else {
	    				val = s[i].charAt(j)-'0';
	    			}
	    			int c=0;
	    			if(valid(i-1,j) && s[i-1].charAt(j)=='*'){
	    				c++;
	    			}
	    			if(valid(i-1,j-1) && s[i-1].charAt(j-1)=='*'){
	    				c++;
	    			}
	    			if(valid(i-1,j+1) && s[i-1].charAt(j+1)=='*'){
	    				c++;
	    			}
	    			if(valid(i,j-1) && s[i].charAt(j-1)=='*'){
	    				c++;
	    			}
	    			if(valid(i,j+1) && s[i].charAt(j+1)=='*'){
	    				c++;
	    			}
	    			if(valid(i+1,j) && s[i+1].charAt(j)=='*'){
	    				c++;
	    			}
	    			if(valid(i+1,j+1) && s[i+1].charAt(j+1)=='*'){
	    				c++;
	    			}
	    			if(valid(i+1,j-1) && s[i+1].charAt(j-1)=='*'){
	    				c++;
	    			}
	    			if(c!=val) {
	    				f=1;
	    				break;
	    			}
	    		}
	    	}
	    	if(f==0) {
	    		out.println(""YES"");
	    	}
	    	else {
	    		out.println(""NO"");
	    	}
	     
	     
	     out.close();
		}
		

		
		static class InputReader
	    {

	        private final InputStream stream;
	        private final byte[] buf = new byte[8192];
	        private int curChar, snumChars;
	        private SpaceCharFilter filter;

	        public InputReader(InputStream stream)
	        {
	                this.stream = stream;
	        }

	        public int snext()
	        {
	                if (snumChars == -1)
	                        throw new InputMismatchException();
	                if (curChar >= snumChars)
	                {
	                        curChar = 0;
	                        try
	                        {
	                                snumChars = stream.read(buf);
	                        } catch (IOException e)
	                        {
	                                throw new InputMismatchException();
	                        }
	                        if (snumChars <= 0)
	                                return -1;
	                }
	                return buf[curChar++];
	        }

	        public int nextInt()
	        {
	                int c = snext();
	                while (isSpaceChar(c))
	                {
	                        c = snext();
	                }
	                int sgn = 1;
	                if (c == '-')
	                {
	                        sgn = -1;
	                        c = snext();
	                }
	                int res = 0;
	                do
	                {
	                        if (c < '0' || c > '9')
	                                throw new InputMismatchException();
	                        res *= 10;
	                        res += c - '0';
	                        c = snext();
	                } while (!isSpaceChar(c));
	                return res * sgn;
	        }

	        public long nextLong()
	        {
	                int c = snext();
	                while (isSpaceChar(c))
	                {
	                        c = snext();
	                }
	                int sgn = 1;
	                if (c == '-')
	                {
	                        sgn = -1;
	                        c = snext();
	                }
	                long res = 0;
	                do
	                {
	                        if (c < '0' || c > '9')
	                                throw new InputMismatchException();
	                        res *= 10;
	                        res += c - '0';
	                        c = snext();
	                } while (!isSpaceChar(c));
	                return res * sgn;
	        }

	        public int[] nextIntArray(int n)
	        {
	                int a[] = new int[n];
	                for (int i = 0; i < n; i++)
	                {
	                        a[i] = nextInt();
	                }
	                return a;
	        }

	        public long[] nextLongArray(int n)
	        {
	                long a[] = new long[n];
	                for (int i = 0; i < n; i++)
	                {
	                        a[i] = nextLong();
	                }
	                return a;
	        }

	        public String readString()
	        {
	                int c = snext();
	                while (isSpaceChar(c))
	                {
	                        c = snext();
	                }
	                StringBuilder res = new StringBuilder();
	                do
	                {
	                        res.appendCodePoint(c);
	                        c = snext();
	                } while (!isSpaceChar(c));
	                return res.toString();
	        }

	        public String nextLine()
	        {
	                int c = snext();
	                while (isSpaceChar(c))
	                        c = snext();
	                StringBuilder res = new StringBuilder();
	                do
	                {
	                        res.appendCodePoint(c);
	                        c = snext();
	                } while (!isEndOfLine(c));
	                return res.toString();
	        }

	        public boolean isSpaceChar(int c)
	        {
	                if (filter != null)
	                        return filter.isSpaceChar(c);
	                return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	        }

	        private boolean isEndOfLine(int c)
	        {
	                return c == '\n' || c == '\r' || c == -1;
	        }

	        public interface SpaceCharFilter
	        {
	                public boolean isSpaceChar(int ch);
	        }

	    }
		
}














class Pair { 
    int x; 
    int y; 
  
    
public Pair(int x, int y) 
    { 
        this.x = x; 
        this.y = y; 
    } 
} 
























class couple implements Comparable<couple>
{ int x,y;
  public couple(int m,int f) {
 	 x=m;
 	 y=f;
  }
	public int compareTo(couple o) {
		
		 
		return x-o.x;
	}  
}","public class Main {
    static int mod = (int) (1e9+7);
    static InputReader in;
    static PrintWriter out;
      
        public static int n;
        public static int m;
      
        public static boolean valid(int i , int j) {
            
            return (i < n && j < m && i >= 0 && j >= 0);
        }
        
   
    public static void main(String args[] )  {
            
          in = new InputReader(System.in);
          out = new PrintWriter(System.out);
         
         n = in.nextInt();
         m = in.nextInt();
        
         String[] s = new String[n];
         for(int i=0;i<n;i++) {
            s[i]= in.readString();
        }
        int f=0;
        for(int i=0;i<n;i++) {
            for(int j=0;j<s[i].length();j++) {
                int val=-1;
                if(s[i].charAt(j)=='.' && s[i].charAt(j)!='*') {
                    val=0;
                }
                else if(s[i].charAt(j)=='*' && s[i].charAt(j)!='.') {
                    continue;
                }
                else {
                    val = s[i].charAt(j)-'0';
                }
                int c=0;
                if(valid(i-1,j) && s[i-1].charAt(j)=='*' && s[i].charAt(j+1)=='*' && s[i+1].charAt(j+1)=='*'){
                    c++;
                }
                if(valid(i,j-1) && s[i].charAt(j-1)=='*' && s[i-1].charAt(j-1)=='*' && s[i+1].charAt(j-1)=='*'){
                    c++;
                }
                if(valid(i,j+1) && s[i].charAt(j+1)=='*' && s[i-1].charAt(j+1)=='*' && s[i+1].charAt(j+1)=='*'){
                    c++;
                }
                if(c!=val) {
                    f=1;
                    break;
                }
            }
        }
        if(f==0) {
            out.println(""YES"");
        }
        else {
            out.println(""NO"");
        }
         
         out.close();
    }
        

        
        static class InputReader
        {

            private final InputStream stream;
            private final byte[] buf = new byte[8192];
            private int curChar, snumChars;
            private SpaceCharFilter filter;

            public InputReader(InputStream stream)
            {
                    this.stream = stream;
            }

            public int snext()
            {
                    if (snumChars == -1)
                            throw new InputMismatchException();
                    if (curChar >= snumChars)
                    {
                            curChar = 0;
                            try
                            {
                                    snumChars = stream.read(buf);
                            } catch (IOException e)
                            {
                                    throw new InputMismatchException();
                            }
                            if (snumChars <= 0)
                                    return -1;
                    }
                    return buf[curChar++];
            }

            public int nextInt()
            {
                    int c = snext();
                    while (isSpaceChar(c))
                    {
                            c = snext();
                    }
                    int sgn = 1;
                    if (c == '-')
                    {
                            sgn = -1;
                            c = snext();
                    }
                    int res = 0;
                    do
                    {
                            if (c < '0' || c > '9')
                                    throw new InputMismatchException();
                            res *= 10;
                            res += c - '0';
                            c = snext();
                    } while (!isSpaceChar(c));
                    return res * sgn;
            }

            public long nextLong()
            {
                    int c = snext();
                    while (isSpaceChar(c))
                    {
                            c = snext();
                    }
                    int sgn = 1;
                    if (c == '-')
                    {
                            sgn = -1;
                            c = snext();
                    }
                    long res = 0;
                    do
                    {
                            if (c < '0' || c > '9')
                                    throw new InputMismatchException();
                            res *= 10;
                            res += c - '0';
                            c = snext();
                    } while (!isSpaceChar(c));
                    return res * sgn;
            }

            public int[] nextIntArray(int n)
            {
                    int a[] = new int[n];
                    for (int i = 0; i < n; i++)
                    {
                            a[i] = nextInt();
                    }
                    return a;
            }

            public long[] nextLongArray(int n)
            {
                    long a[] = new long[n];
                    for (int i = 0; i < n; i++)
                    {
                            a[i] = nextLong();
                    }
                    return a;
            }

            public String readString()
            {
                    int c = snext();
                    while (isSpaceChar(c))
                    {
                            c = snext();
                    }
                    StringBuilder res = new StringBuilder();
                    do
                    {
                            res.appendCodePoint(c);
                            c = snext();
                    } while (!isSpaceChar(c));
                    return res.toString();
            }

            public String nextLine()
            {
                    int c = snext();
                    while (isSpaceChar(c))
                            c = snext();
                    StringBuilder res = new StringBuilder();
                    do
                    {
                            res.appendCodePoint(c);
                            c = snext();
                    } while (!isEndOfLine(c));
                    return res.toString();
            }

            public boolean isSpaceChar(int c)
            {
                    if (filter != null)
                            return filter.isSpaceChar(c);
                    return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
            }

            private boolean isEndOfLine(int c)
            {
                    return c == '\n' || c == '\r' || c == -1;
            }

            public interface SpaceCharFilter
            {
                    public boolean isSpaceChar(int ch);
            }

        }
    }",537
"class
Test { 

static
int
arr[] = 
new
int
[] { 
1
, 
20
, 
6
, 
4
, 
5
}; 


static
int
getInvCount(
int
n) 

{ 

int
inv_count = 
0
; 

for
(
int
i = 
0
; i < n - 
1
; i++) 

for
(
int
j = i + 
1
; j < n; j++) 

if
(arr[i] > arr[j]) 

inv_count++; 


return
inv_count; 

} 




public
static
void
main(String[] args) 

{ 

System.out.println(
""Number of inversions are ""

+ getInvCount(arr.length)); 

} 
}","class Test {

static int arr[] = new int[] { 1, 20, 6, 4, 5 };

static int getInvCount(int n) {

int inv_count = 0;

int i = 0;
while (i < n - 1) {

int j = i + 1;
while (j < n) {

if (arr[i] > arr[j])

inv_count++;

j++;
}
i++;
}

return inv_count;
}

public static void main(String[] args) {

System.out.println(""Number of inversions are "" + getInvCount(arr.length));
}
}",538
"class
Main 
{ 

static
void
minAbsSumPair(
int
arr[], 
int
arr_size) 

{ 

int
inv_count = 
0
; 

int
l, r, min_sum, sum, min_l, min_r; 




if
(arr_size < 
2
) 

{ 

System.out.println(
""Invalid Input""
); 

return
; 

} 




min_l = 
0
; 

min_r = 
1
; 

min_sum = arr[
0
] + arr[
1
]; 


for
(l = 
0
; l < arr_size - 
1
; l++) 

{ 

for
(r = l+
1
; r < arr_size; r++) 

{ 

sum = arr[l] + arr[r]; 

if
(Math.abs(min_sum) > Math.abs(sum)) 

{ 

min_sum = sum; 

min_l = l; 

min_r = r; 

} 

} 

} 


System.out.println(
"" The two elements whose ""
+ 

""sum is minimum are ""
+ 

arr[min_l]+ 
"" and ""
+arr[min_r]); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
60
, -
10
, 
70
, -
80
, 
85
}; 

minAbsSumPair(arr, 
6
); 

} 

}","class Main { static void minAbsSumPair(int arr[], int arr_size) { int inv_count = 0; int l, r, min_sum, sum, min_l, min_r; if (arr_size < 2) { System.out.println(""Invalid Input""); return; } min_l = 0; min_r = 1; min_sum = arr[0] + arr[1]; for (l = 0; l < arr_size - 1; l++) { for (r = l + 1; r < arr_size; r++) { sum = arr[l] + arr[r]; if (Math.abs(min_sum) > Math.abs(sum)) { min_sum = sum; min_l = l; min_r = r; } } } System.out.println("" The two elements whose ""+ ""sum is minimum are ""+ arr[min_l] + "" and "" + arr[min_r]); } public static void main(String[] args) { int arr[] = { 1, 60, -10, 70, -80, 85 }; minAbsSumPair(arr, 6); } }",539
"public class Main {
	public static void main(String args[]) {new Main().run();}
	
	Scanner in = new Scanner(System.in);
	PrintWriter out = new PrintWriter(System.out);
	
	void run(){
	    int q=in.nextInt();
	    for(int i=0;i<q;i++){
	        out.println(work());
	    }
	    out.flush();
	}
	int work() {		
		int n=in.nextInt();
	    int k=in.nextInt();
	    String str=in.next();
	    char[] chs=new char[]{'R','G','B'};
	    int c1=0,c2=0,c3=0;
	    int ret=99999999;
	    for(int i=0,p1=0,p2=1,p3=2;i<n;i++,p1=(p1+1)%3,p2=(p2+1)%3,p3=(p3+1)%3){
	        char ch=str.charAt(i);
	        
	        if(ch!=chs[p1]){
	            c1++;
	        }
	        if(i>=k){
	            char pre1=str.charAt(i-k);
	            char pre2=chs[((p1-(k%3))+3)%3];
	            if(pre1!=pre2){
	                c1--;
	            }
	        }
	        if(i+1>=k){
	            ret=Math.min(ret,c1);
	        }
	        
	        
	        if(ch!=chs[p2]){
	            c2++;
	        }
	        if(i>=k){
	            char pre1=str.charAt(i-k);
	            char pre2=chs[((p2-(k%3))+3)%3];
	            if(pre1!=pre2){
	                c2--;
	            }
	        }
	        if(i+1>=k){
	            ret=Math.min(ret,c2);
	        }
	        
	        
	        if(ch!=chs[p3]){
	            c3++;
	        }
	        if(i>=k){
	            char pre1=str.charAt(i-k);
	            char pre2=chs[((p3-(k%3))+3)%3];
	            if(pre1!=pre2){
	                c3--;
	            }
	        }
	        if(i+1>=k){
	            ret=Math.min(ret,c3);
	        }
	    } 
	    return ret;
	   
	}
}","public class Main {
	public static void main(String args[]) {new Main().run();}
	
	Scanner in = new Scanner(System.in);
	PrintWriter out = new PrintWriter(System.out);
	
	void run(){
	    int q=in.nextInt();
	    for(int i=0;i<q;i++){
	        out.println(work());
	    }
	    out.flush();
	}
	int work() {
		int n=in.nextInt();
	    int k=in.nextInt();
	    String str=in.next();
	    char[] chs=new char[]{'R','G','B'};
	    int c1=0,c2=0,c3=0;
	    int ret=99999999;
	    for(int i=0,p1=0,p2=1,p3=2;i<n;i++,p1=(p1+1)%3,p2=(p2+1)%3,p3=(p3+1)%3){
	        char ch=str.charAt(i);
	        if(ch!=chs[p1]){
	            c1++;
	        }
	        if(i>=k){
	            char pre1=str.charAt(i-k);
	            char pre2=chs[((p1-(k%3))+3)%3];
	            if(pre1!=pre2){
	                c1--;
	            }
	        }
	        if(i+1>=k){
	            ret=Math.min(ret,c1);
	        }
	        if(ch!=chs[p2]){
	            c2++;
	        }
	        if(i>=k){
	            char pre1=str.charAt(i-k);
	            char pre2=chs[((p2-(k%3))+3)%3];
	            if(pre1!=pre2){
	                c2--;
	            }
	        }
	        if(i+1>=k){
	            ret=Math.min(ret,c2);
	        }
	        if(ch!=chs[p3]){
	            c3++;
	        }
	        if(i>=k){
	            char pre1=str.charAt(i-k);
	            char pre2=chs[((p3-(k%3))+3)%3];
	            if(pre1!=pre2){
	                c3--;
	            }
	        }
	        if(i+1>=k){
	            ret=Math.min(ret,c3);
	        }
	    }
	    return ret;
	} 
}",540
"public class CodeForces
{
	public static void main(String[] args)throws IOException
	{
		Scanner sc=new Scanner(System.in);
		
		
		int t,i,j,n,k,x,y,z,min1,min2,min3,arr1[],arr2[],arr3[];
		String s;
		char[] s1,s2,s3;

		t=sc.nextInt();
		
		while(t-->0)
		{
			n=sc.nextInt();
			k=sc.nextInt();
			s=sc.next();
			s1=new char[n];
			s2=new char[n];
			s3=new char[n];
			
			for(i=0;i<n;i++)
			{
				if(i%3==0)
				{
					s1[i]='R';
					s2[i]='G';
					s3[i]='B';
				}
				if(i%3==1)
				{
					s1[i]='G';
					s2[i]='B';
					s3[i]='R';
				}
				if(i%3==2)
				{
					s1[i]='B';
					s2[i]='R';
					s3[i]='G';
				}
			}
			arr1=new int[n];
			arr2=new int[n];
			arr3=new int[n];

			for(i=0;i<n;i++)
			{
				if(s.charAt(i)!=s1[i])
					arr1[i]=1;
				if(s.charAt(i)!=s2[i])
					arr2[i]=1;
				if(s.charAt(i)!=s3[i])
					arr3[i]=1;
			}
			for(i=1;i<n;i++)
			{
				arr1[i]=arr1[i]+arr1[i-1];
				arr2[i]=arr2[i]+arr2[i-1];
				arr3[i]=arr3[i]+arr3[i-1];
			}
			
			min1=arr1[k-1];
			min2=arr2[k-1];
			min3=arr3[k-1];

			for(i=k;i<n;i++)
			{
				if(min1>(arr1[i]-arr1[i-k]))
					min1=(arr1[i]-arr1[i-k]);
				if(min2>(arr2[i]-arr2[i-k]))
					min2=(arr2[i]-arr2[i-k]);
				if(min3>(arr3[i]-arr3[i-k]))
					min3=(arr3[i]-arr3[i-k]);
			}
			System.out.println(Math.min(min1,Math.min(min2,min3)));
		}
	}
}",ERROR,541
"public class D {

	public static int[][] dp = new int[200005][3];
	
	public static void main(String[] args) {
		Scanner cin = new Scanner(System.in);
		PrintWriter cout = new PrintWriter(System.out);
		
		int q = cin.nextInt();
		int[] a = new int[200005];
		int n, k;
		while (q-- > 0) {
			n = cin.nextInt();
			k = cin.nextInt();
			String chuoi = cin.nextLine();
			chuoi = cin.nextLine();
			for (int i = 1; i <= n; i++) {
				char ch = chuoi.charAt(i-1);
				if (ch == 'R') a[i] = 1;
				if (ch == 'G') a[i] = 2;
				if (ch == 'B') a[i] = 0;
			}
			
			for (int i = 1; i <= n; i++)
				for (int x = 0; x < 3; x++) {
					dp[i][x] = dp[i-1][x];
					if (a[i] != (x + i)%3) dp[i][x]++;
				}
			
			int res = 1000000007;
			for (int i = k; i <= n; i++) 
				for (int x = 0; x < 3; x++)
					res = Math.min(res, dp[i][x] - dp[i-k][x]);
					
			cout.println(res);
		}
		cout.close();
	}
}","public class D {

	public static int[][] dp = new int[200005][3];
	
	public static void main(String[] args) {
		Scanner cin = new Scanner(System.in);
		PrintWriter cout = new PrintWriter(System.out);
		
		int q = cin.nextInt();
		int[] a = new int[200005];
		int n, k;
		while (q-- > 0) {
			n = cin.nextInt();
			k = cin.nextInt();
			String chuoi = cin.nextLine();
			chuoi = cin.nextLine();
			for (int i = 1; i <= n; i++) {
				char ch = chuoi.charAt(i-1);
				if (ch == 'R') a[i] = 1;
				if (ch == 'G') a[i] = 2;
				if (ch == 'B') a[i] = 0;
			}
			
			for (int i = 1; i <= n; i++)
				for (int x = 0; x < 3; x++) {
					dp[i][x] = dp[i-1][x];
					if (a[i] != (x + i)%3) dp[i][x]++;
				}
			
			int res = 1000000007;
			for (int i = k; i <= n; i++) 
				for (int x = 0; x < 3; x++)
					res = Math.min(res, dp[i][x] - dp[i-k][x]);
					
			cout.println(res);
		}
		cout.close();
	}
}",542
"public class CodeForces {

	public static int difference(String s, String b, int n, int k) {
		int min = Integer.MAX_VALUE;
		int[] pre = new int[n];
		for (int i = 1; i < n; i++) {
			if (i == 1) {
				pre[i - 1] = (s.charAt(i-1) == b.charAt(i-1) ? 0 : 1);
			}
			pre[i] = pre[i - 1] + (s.charAt(i) == b.charAt(i) ? 0 : 1);
		}
		int v = -1;
		for (int i = k - 1; i < n; i++) {
			min = Math.min(min, pre[i] - (v == -1 ? 0 : pre[v]));
			v++;
		}
		return min;
	}

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		PrintWriter pw = new PrintWriter(System.out);
		int t = sc.nextInt();
		O: while (t-- > 0) {
			int n = sc.nextInt();
			int k = sc.nextInt();
			String s = sc.nextLine();
			int c = 1;
			StringBuilder R = new StringBuilder();
			StringBuilder G = new StringBuilder();
			StringBuilder B = new StringBuilder();

			for (int i = 0; i < n; i++) {
				if (c % 3 == 1) {
					R.append(""R"") ;
					G.append(""G"");
					B.append(""B"");
				} else if (c % 3 == 2) {
					R.append(""G"");
					G.append(""B"");
					B.append(""R"");
				} else {
					R.append(""B"");
					G.append(""R"");
					B.append(""G"");
				}
				c++;
			}
			String RR = R.toString(),BB = B.toString() , GG = G.toString();
			String[] arr = new String[] { RR, BB, GG };
			int i = 0;
			int j = k;
			int min = Integer.MAX_VALUE;
			while (i < 3) {
				min = Math.min(min, difference(s, arr[i], n, k));
				i++;
			}
			pw.println(min);
		}
		pw.close();
	}

	static class SegmentTree {
		static int[] S, in;
		static int N;

		public SegmentTree(int[] arr) {
			in = arr;
			N = in.length - 1;
			S = new int[N << 1];
			build(1, 1, N);
		}

		static int stat;

		void build(int node, int b, int e) {
			if (b == e) {
				S[node] = in[b];
				stat = 1;
			} else {
				int mid = (b + e) / 2;
				build(node << 1, b, mid);
				build(node << 1 | 1, mid + 1, e);
				if (stat == 1) {
					S[node] = S[node << 1] | S[node << 1 | 1];

				} else {
					S[node] = S[node << 1] ^ S[node << 1 | 1];
				}
				stat = 1 - stat;
			}
		}

		int update(int idx, int val) {
			idx += (N - 1);

			S[idx] = val;
			int stat = 1;
			while (idx > 1) {
				idx >>= 1;
				if (stat == 1) {
					S[idx] = S[idx << 1] | S[idx << 1 | 1];
					stat = 0;
				} else {
					S[idx] = S[idx << 1] ^ S[idx << 1 | 1];
					stat = 1;
				}
			}
			return S[1];
		}

	}

	public static class Pair implements Comparable<Pair> {
		int a, b;

		public Pair(int a, int b) {
			this.a = a;
			this.b = b;
		}

		public int compareTo(Pair A) {
			if (a != A.a)
				return A.a - a;
			return A.b - b;
		}

		public String toString() {
			return a + "" "" + b;
		}
	}

	static class Scanner {
		StringTokenizer st;
		BufferedReader br;

		public Scanner(InputStream s) {
			br = new BufferedReader(new InputStreamReader(s));
		}

		public Scanner(FileReader r) {
			br = new BufferedReader(r);
		}

		public String next() throws IOException {
			while (st == null || !st.hasMoreTokens())
				st = new StringTokenizer(br.readLine());
			return st.nextToken();
		}

		public int nextInt() throws IOException {
			return Integer.parseInt(next());
		}

		public long nextLong() throws IOException {
			return Long.parseLong(next());
		}

		public String nextLine() throws IOException {
			return br.readLine();
		}

		public double nextDouble() throws IOException {
			String x = next();
			StringBuilder sb = new StringBuilder(""0"");
			double res = 0, f = 1;
			boolean dec = false, neg = false;
			int start = 0;
			if (x.charAt(0) == '-') {
				neg = true;
				start++;
			}
			for (int i = start; i < x.length(); i++)
				if (x.charAt(i) == '.') {
					res = Long.parseLong(sb.toString());
					sb = new StringBuilder(""0"");
					dec = true;
				} else {
					sb.append(x.charAt(i));
					if (dec)
						f *= 10;
				}
			res += Long.parseLong(sb.toString()) / f;
			return res * (neg ? -1 : 1);
		}

		public boolean ready() throws IOException {
			return br.ready();
		}

	}

}","public class CodeForces {

	public static int difference(String s, String b, int n, int k) {
		int min = Integer.MAX_VALUE;
		int[] pre = new int[n];
		for (int i = 1; i <= n; i++) {
			if (i >= 1) {
				pre[i - 1] = (s.charAt(i-1) == b.charAt(i-1) ? 0 : 1);
			}
			pre[i] = pre[i - 1] + (s.charAt(i) == b.charAt(i) ? 0 : 1);
		}
		int v = 0;
		for (int i = k; i <= n; i++) {
			min = Math.min(min, pre[i - 1] - (v == 0 ? 0 : pre[v]));
			v++;
		}
		return min;
	}

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		PrintWriter pw = new PrintWriter(System.out);
		int t = sc.nextInt();
		O: while (t-- > 0) {
			int n = sc.nextInt();
			int k = sc.nextInt();
			String s = sc.nextLine();
			int c = 1;
			StringBuilder R = new StringBuilder();
			StringBuilder G = new StringBuilder();
			StringBuilder B = new StringBuilder();

			for (int i = 0; i < n; i++) {
				if (c % 3 == 1) {
					R.append(",543
"class
GFG { 


static
void
findTriplets(
int
arr[], 
int
n) 
{ 

boolean
found = 
false
; 




Arrays.sort(arr); 


for
(
int
i=
0
; i<n-
1
; i++) 

{ 



int
l = i + 
1
; 

int
r = n - 
1
; 

int
x = arr[i]; 

while
(l < r) 

{ 

if
(x + arr[l] + arr[r] == 
0
) 

{ 



System.out.print(x + 
"" ""
); 

System.out.print(arr[l]+ 
"" ""
); 

System.out.println(arr[r]+ 
"" ""
); 


l++; 

r--; 

found = 
true
; 

} 






else
if
(x + arr[l] + arr[r] < 
0
) 

l++; 






else

r--; 

} 

} 


if
(found == 
false
) 

System.out.println(
"" No Triplet Found""
); 
} 



public
static
void
main (String[] args) { 


int
arr[] = {
0
, -
1
, 
2
, -
3
, 
1
}; 

int
n =arr.length; 

findTriplets(arr, n); 

} 

}","class GFG { static void findTriplets(int arr[], int n) { boolean found = false; Arrays.sort(arr); for (int i = 0; i < n - 1; i++) { int l = i + 1; int r = n - 1; int x = arr[i]; while (l < r) { if (x + arr[l] + arr[r] == 0) { System.out.print(x + "" ""); System.out.print(arr[l]+ "" ""); System.out.println(arr[r]+ "" ""); l++; r--; found = true; } else if (x + arr[l] + arr[r] < 0) l++; else r--; } } if (found == false) System.out.println("" No Triplet Found""); } public static void main (String[] args) { int arr[] = {0, -1, 2, -3, 1}; int n = arr.length; findTriplets(arr, n); } }",544
"class
GFG { 


static
int
binomialCoeff(
int
n, 
int
k) 

{ 

int
C[] = 
new
int
[k + 
1
]; 




C[
0
] = 
1
; 


for
(
int
i = 
1
; i <= n; i++) 

{ 





for
(
int
j = Math.min(i, k); j > 
0
; j--) 

C[j] = C[j] + C[j-
1
]; 

} 

return
C[k]; 

} 




public
static
void
main(String[] args) 

{ 

int
n = 
5
, k = 
2
; 

System.out.printf(
""Value of C(%d, %d) is %d ""

, n, k, binomialCoeff(n, k)); 

} 
}","class GFG {

    static int binomialCoeff(int n, int k) {
        int C[] = new int[k + 1];
        C[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = Math.min(i, k); j > 0; j--) {
                C[j] = C[j] + C[j-1];
            }
        }
        return C[k];
    }

    public static void main(String[] args) {
        int n = 5, k = 2;
        System.out.printf(""Value of C(%d, %d) is %d "", n, k, binomialCoeff(n, k));
    }
}",545
"class
GFG { 




static
void
printArray(
int
A[], 
int
size) 

{ 

for
(
int
i = 
0
; i < size; i++) 

System.out.print(A[i] + 
"" ""
); 

System.out.println(
""""
); 

; 

} 




static
void
reverse(
int
arr[], 
int
l, 
int
r) 

{ 

if
(l < r) { 

arr = swap(arr, l, r); 

reverse(arr, ++l, --r); 

} 

} 








static
void
merge(
int
arr[], 
int
l, 
int
m, 
int
r) 

{ 

int
i = l; 


int
j = m + 
1
; 



while
(i <= m && arr[i] < 
0
) 

i++; 





while
(j <= r && arr[j] < 
0
) 

j++; 









reverse(arr, i, m); 






reverse(arr, m + 
1
, j - 
1
); 




reverse(arr, i, j - 
1
); 

} 






static
void
RearrangePosNeg(
int
arr[], 
int
l, 
int
r) 

{ 

if
(l < r) { 





int
m = l + (r - l) / 
2
; 




RearrangePosNeg(arr, l, m); 

RearrangePosNeg(arr, m + 
1
, r); 


merge(arr, l, m, r); 

} 

} 

static
int
[] swap(
int
[] arr, 
int
i, 
int
j) 

{ 

int
temp = arr[i]; 

arr[i] = arr[j]; 

arr[j] = temp; 

return
arr; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { -
12
, 
11
, -
13
, -
5
, 
6
, -
7
, 
5
, -
3
, -
6
}; 

int
arr_size = arr.length; 


RearrangePosNeg(arr, 
0
, arr_size - 
1
); 


printArray(arr, arr_size); 

} 
}","class GFG { static void printArray(int A[], int size) { for (int i = 0; i < size; i++) System.out.print(A[i] + "" ""); System.out.println(""""); } static void reverse(int arr[], int l, int r) { if (l < r) { arr = swap(arr, l, r); reverse(arr, ++l, --r); } } static void merge(int arr[], int l, int m, int r) { int i = l; int j = m + 1; while (i <= m && arr[i] < 0) i++; while (j <= r && arr[j] < 0) j++; reverse(arr, i, m); reverse(arr, m + 1, j - 1); reverse(arr, i, j - 1); } static void RearrangePosNeg(int arr[], int l, int r) { if (l < r) { int m = l + (r - l) / 2; RearrangePosNeg(arr, l, m); RearrangePosNeg(arr, m + 1, r); merge(arr, l, m, r); } } static int[] swap(int[] arr, int i, int j) { int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; return arr; } public static void main(String[] args) { int arr[] = { -12, 11, -13, -5, 6, -7, 5, -3, -6}; int arr_size = arr.length; RearrangePosNeg(arr, 0, arr_size - 1); printArray(arr, arr_size); } }",546
"class
GFG 
{ 


static
int
minJumps(
int
arr[], 

int
n) 
{ 





int
[] jumps = 
new
int
[n]; 

int
min; 










jumps[n - 
1
] = 
0
; 

















for
(
int
i = n - 
2
; i >= 
0
; i--) 

{ 





if
(arr[i] == 
0
) 

jumps[i] = Integer.MAX_VALUE; 








else
if
(arr[i] >= n - i - 
1
) 

jumps[i] = 
1
; 
















else

{ 



min = Integer.MAX_VALUE; 








for
(
int
j = i + 
1
; j < n && 

j <= arr[i] + i; j++) 

{ 

if
(min > jumps[j]) 

min = jumps[j]; 

} 




if
(min != Integer.MAX_VALUE) 

jumps[i] = min + 
1
; 

else

jumps[i] = min; 


} 

} 


return
jumps[
0
]; 
} 


public
static
void
main(String[] args) 
{ 

int
[] arr = {
1
, 
3
, 
6
, 
1
, 
0
, 
9
}; 

int
size = arr.length; 

System.out.println(
""Minimum number of""
+ 

"" jumps to reach end is ""
+ 

minJumps(arr, size)); 

} 
}","class GFG {
    static int minJumps(int arr[], int n) {
        int[] jumps = new int[n];
        int min;
        jumps[n - 1] = 0;
        for (int i = n - 2; i >= 0; i--) {
            if (arr[i] == 0)
                jumps[i] = Integer.MAX_VALUE;
            else if (arr[i] >= n - i - 1)
                jumps[i] = 1;
            else {
                min = Integer.MAX_VALUE;
                for (int j = i + 1; j < n && j <= arr[i] + i; j++) {
                    if (min > jumps[j])
                        min = jumps[j];
                }
                if (min != Integer.MAX_VALUE)
                    jumps[i] = min + 1;
                else
                    jumps[i] = min;
            }
        }
        return jumps[0];
    }
    public static void main(String[] args) {
        int[] arr = {1, 3, 6, 1, 0, 9};
        int size = arr.length;
        System.out.println(""Minimum number of"" + "" jumps to reach end is "" + minJumps(arr, size));
    }
}",547
"class
GFG 
{ 


static
int
minJumps(
int
arr[], 

int
n) 
{ 





int
[] jumps = 
new
int
[n]; 

int
min; 










jumps[n - 
1
] = 
0
; 

















for
(
int
i = n - 
2
; i >= 
0
; i--) 

{ 





if
(arr[i] == 
0
) 

jumps[i] = Integer.MAX_VALUE; 








else
if
(arr[i] >= n - i - 
1
) 

jumps[i] = 
1
; 
















else

{ 



min = Integer.MAX_VALUE; 








for
(
int
j = i + 
1
; j < n && 

j <= arr[i] + i; j++) 

{ 

if
(min > jumps[j]) 

min = jumps[j]; 

} 




if
(min != Integer.MAX_VALUE) 

jumps[i] = min + 
1
; 

else

jumps[i] = min; 


} 

} 


return
jumps[
0
]; 
} 


public
static
void
main(String[] args) 
{ 

int
[] arr = {
1
, 
3
, 
6
, 
1
, 
0
, 
9
}; 

int
size = arr.length; 

System.out.println(
""Minimum number of""
+ 

"" jumps to reach end is ""
+ 

minJumps(arr, size)); 

} 
}","class GFG { static int minJumps(int arr[], int n) { int[] jumps = new int[n]; int min; jumps[n - 1] = 0; for (int i = n - 2; i >= 0; i--) { if (arr[i] == 0) jumps[i] = Integer.MAX_VALUE; else if (arr[i] >= n - i - 1) jumps[i] = 1; else { min = Integer.MAX_VALUE; for (int j = i + 1; j < n && j <= arr[i] + i; j++) { if (min > jumps[j]) min = jumps[j]; } if (min != Integer.MAX_VALUE) jumps[i] = min + 1; else jumps[i] = min; } } return jumps[0]; } public static void main(String[] args) { int[] arr = {1, 3, 6, 1, 0, 9}; int size = arr.length; System.out.println(""Minimum number of""+ "" jumps to reach end is ""+ minJumps(arr, size)); } }",548
"public
class
GfG{ 



public
static
void
rearrangeArr(
int
arr[], 

int
n) 

{ 



int
evenPos = n / 
2
; 




int
oddPos = n - evenPos; 


int
[] tempArr = 
new
int
[n]; 






for
(
int
i = 
0
; i < n; i++) 

tempArr[i] = arr[i]; 




Arrays.sort(tempArr); 


int
j = oddPos - 
1
; 






for
(
int
i = 
0
; i < n; i += 
2
) { 

arr[i] = tempArr[j]; 

j--; 

} 


j = oddPos; 






for
(
int
i = 
1
; i < n; i += 
2
) { 

arr[i] = tempArr[j]; 

j++; 

} 




for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 




public
static
void
main(String argc[]){ 

int
[] arr = 
new
int
[]{ 
1
, 
2
, 
3
, 
4
, 
5
, 

6
, 
7
}; 

int
size = 
7
; 

rearrangeArr(arr, size); 


} 
}","public class Solution {

    static void rearrangeArr(int arr[], int n) {

        int evenPos = n / 2;

        int oddPos = n - evenPos;

        int[] tempArr = new int[n];



        for (int i = 0; i < n; i++)

            tempArr[i] = arr[i];


        Arrays.sort(tempArr);


        int j = oddPos - 1;





        for (int i = 0; i < n; i += 2) {

            arr[i] = tempArr[j];

            j--;

        }


        j = oddPos;





        for (int i = 1; i < n; i += 2) {

            arr[i] = tempArr[j];

            j++;

        }



        for (int i = 0; i < n; i++)

            System.out.print(arr[i] + "" "");

    }


    public static void main(String argc[]) {

        int[] arr = new int[]{1, 2, 3, 4, 5, 6, 7};

        int size = 7;

        rearrangeArr(arr, size);

    }
}",549
"public class ladder {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int problems = sc.nextInt();
        for (int i = 0; i < problems; i++) {
            int numPlanks = sc.nextInt();
            solve(numPlanks, sc);
        }





    }
    public static void solve(int numPlanks, Scanner sc) {
        int answer;
        ArrayList<Integer> planks  = new ArrayList<>();
        for (int i = 0; i < numPlanks; i++) {
            planks.add(sc.nextInt());
        }

        Collections.sort(planks);

        planks.remove(numPlanks - 1);
        planks.add(planks.get(numPlanks - 2));
        int base = planks.get(numPlanks - 1) - 1;
        if ((numPlanks - 2) > base) {
            answer = base;
        }
        else {
            answer = numPlanks - 2;
        }
        if (base == 0) {
            answer = 0;
        }
        System.out.println(answer);
    }
}","public class Ladder {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int problems = sc.nextInt();
        for (int i = 0; i < problems; i++) {
            int numPlanks = sc.nextInt();
            solve(numPlanks, sc);
        }
    }

    public static void solve(int numPlanks, Scanner sc) {
        int answer;
        List<Integer> planks = new ArrayList<>();
        for (int i = 0; i < numPlanks; i++) {
            planks.add(sc.nextInt());
        }
        Collections.sort(planks);
        planks.remove(numPlanks - 1);
        planks.add(planks.get(numPlanks - 2));
        int base = planks.get(numPlanks - 1) - 1;
        if ((numPlanks - 2) > base) {
            answer = base;
        } else {
            answer = numPlanks - 2;
        }
        if (base == 0) {
            answer = 0;
        }
        System.out.println(answer);
    }
}",550
"public class Main
{
    
     static void merge(int arr[], int l, int m, int r) 
    { 
        
        int n1 = m - l + 1; 
        int n2 = r - m; 
  
        
        int L[] = new int [n1]; 
        int R[] = new int [n2]; 
  
        
        for (int i=0; i<n1; ++i) 
            L[i] = arr[l + i]; 
        for (int j=0; j<n2; ++j) 
            R[j] = arr[m + 1+ j]; 
  
  
        
  
        
        int i = 0, j = 0; 
  
        
        int k = l; 
        while (i < n1 && j < n2) 
        { 
            if (L[i] <= R[j]) 
            { 
                arr[k] = L[i]; 
                i++; 
            } 
            else
            { 
                arr[k] = R[j]; 
                j++; 
            } 
            k++; 
        } 
  
        
        while (i < n1) 
        { 
            arr[k] = L[i]; 
            i++; 
            k++; 
        } 
  
        
        while (j < n2) 
        { 
            arr[k] = R[j]; 
            j++; 
            k++; 
        } 
    } 
  
    
    
    static void sort(int arr[], int l, int r) 
    { 
        if (l < r) 
        { 
            
            int m = (l+r)/2; 
  
            
            sort(arr, l, m); 
            sort(arr , m+1, r); 
  
            
            merge(arr, l, m, r); 
        } 
    } 
  
    public static void main(String args[]) throws Exception
    {
        Scanner sc=new Scanner(System.in);
        int q=sc.nextInt();
        while(q>0)
        {
            
            int n=sc.nextInt();
            int a[]=new int[n];
            int i=0;
            for(i=0;i<n;i++)
                a[i]=sc.nextInt();
           sort(a,0,n-1);
           int p=a[n-2]-1;
            if(n-2>=p)
                System.out.println(p);
            else if (n-2==0)
            System.out.println(0);
            else 
                System.out.println(n-2);
            q--;
        }
        
    }
        
    }","public class Main {
    static void merge(int arr[], int l, int m, int r) {
        int n1 = m - l + 1;
        int n2 = r - m;
        int L[] = new int[n1];
        int R[] = new int[n2];
        for (int i = 0; i < n1; ++i) L[i] = arr[l + i];
        for (int j = 0; j < n2; ++j) R[j] = arr[m + 1 + j];
        int i = 0, j = 0;
        int k = l;
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    static void sort(int arr[], int l, int r) {
        if (l < r) {
            int m = (l + r) / 2;
            sort(arr, l, m);
            sort(arr, m + 1, r);
            merge(arr, l, m, r);
        }
    }
    public static void main(String args[]) throws Exception {
        Scanner sc = new Scanner(System.in);
        int q = sc.nextInt();
        while (q > 0) {
            int n = sc.nextInt();
            int a[] = new int[n];
            int i = 0;
            for (i = 0; i < n; i++) a[i] = sc.nextInt();
            sort(a, 0, n - 1);
            int p = a[n - 2] - 1;
            if (n - 2 >= p) System.out.println(p);
            else if (n - 2 == 0) System.out.println(0);
            else System.out.println(n - 2);
            q--;
        }
    }
}",551
"public class Solution{
    public static void main(String[] args)throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        long[] a = new long[n];
        for(int i=0;i<n;i++) a[i] = Long.parseLong(st.nextToken());
        Queue<Long> ts = new PriorityQueue<Long>();
        for(int i=1;i<n;i++) ts.add(a[i]-a[i-1]);
        long sum = 0;
        for(int i=0;i<n-k;i++){
            sum += ts.poll();
        }
        System.out.println(sum);
    }
}","public class Solution{
    public static void main(String[] args)throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        st = new StringTokenizer(br.readLine());
        long[] a = new long[n];
        for(int i=0;i<n;i++) a[i] = Long.parseLong(st.nextToken());
        Queue<Long> ts = new PriorityQueue<Long>();
        for(int i=1;i<n;i++) ts.add(a[i]-a[i-1]);
        long sum = 0;
        for(int i=0;i<n-k;i++){
            sum += ts.poll();
        }
        System.out.println(sum);
    }
}",552
"public final class Cf
{
    public static void main(String[]args)
    {
        FastReader ob=new FastReader();
        
        
        {
            int n=ob.nextInt();
            int k=ob.nextInt();
            int a[]=new int[n];
            for(int i=0;i<n;i++)
            a[i]=ob.nextInt();
            int x=a[n-1]-a[0];
            ArrayList<Integer> b=new ArrayList<>();
            for(int i=0;i<n-1;i++)
            b.add(-a[i+1]+a[i]);
            Collections.sort(b);
            for(int i=0;i<k-1;i++)
            x+=b.get(i);
            System.out.println(x);
        }
    }
}
class FastReader {
    BufferedReader br;
    StringTokenizer st;
    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    public String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (IOException e)  {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }
    public String nextLine()
    {
        String s="""";
        try {
        s=br.readLine();
        } catch (IOException e)  {
                e.printStackTrace();
            }
        return s;
    }
    public int nextInt() {
        return Integer.parseInt(next());
    }
    public long nextLong() {
        return Long.parseLong(next());
    }
    public double nextDouble() {
        return Double.parseDouble(next());
    }
}","public final class Cf {
    public static void main(String[] args) {
        FastReader ob = new FastReader();

        {
            int n = ob.nextInt();
            int k = ob.nextInt();
            int[] a = new int[n];
            for (int i = 0; i < n; i++)
                a[i] = ob.nextInt();
            int x = a[n - 1] - a[0];
            ArrayList<Integer> b = new ArrayList<>();
            for (int i = 0; i < n - 1; i++)
                b.add(-a[i + 1] + a[i]);
            Collections.sort(b);
            for (int i = 0; i < k - 1; i++)
                x += b.get(i);
            System.out.println(x);
        }
    }
}

class FastReader {
    BufferedReader br;
    StringTokenizer st;

    public FastReader() {
        br = new BufferedReader(new InputStreamReader(System.in));
    }

    public String next() {
        while (st == null || !st.hasMoreElements()) {
            try {
                st = new StringTokenizer(br.readLine());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return st.nextToken();
    }

    public String nextLine() {
        String s = """";
        try {
            s = br.readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return s;
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

    public long nextLong() {
        return Long.parseLong(next());
    }

    public double nextDouble() {
        return Double.parseDouble(next());
    }
}",553
"class
GfG 
{ 






public
static
int
minMaxProduct(
int
arr1[], 

int
arr2[], 

int
n1, 

int
n2) 

{ 








Arrays.sort(arr1); 

Arrays.sort(arr2); 






return
arr1[n1 - 
1
] * arr2[
0
]; 

} 




public
static
void
main(String argc[]) 

{ 

int
[] arr1= 
new
int
[]{ 
10
, 
2
, 
3
, 

6
, 
4
, 
1
}; 

int
[] arr2 = 
new
int
[]{ 
5
, 
1
, 
4
, 

2
, 
6
, 
9
}; 

int
n1 = 
6
; 

int
n2 = 
6
; 

System.out.println(minMaxProduct(arr1, 

arr2, 

n1, n2)); 

} 
}","class GfG { public static int minMaxProduct(int[] arr1, int[] arr2, int n1, int n2) { Arrays.sort(arr1); Arrays.sort(arr2); return arr1[n1 - 1] * arr2[0]; } public static void main(String argc[]) { int[] arr1 = new int[]{ 10, 2, 3, 6, 4, 1 }; int[] arr2 = new int[]{ 5, 1, 4, 2, 6, 9 }; int n1 = 6; int n2 = 6; System.out.println(minMaxProduct(arr1, arr2, n1, n2)); } }",554
"class
GFG 
{ 














static
int
findMaxSubarraySumUtil(
int
A[], 
int
B[], 

int
n, 
int
m) 

{ 




int
max_so_far = Integer.MIN_VALUE, curr_max = 
0
; 


for
(
int
i = 
0
; i < n; i++) 

{ 








if
(Arrays.binarySearch(B, A[i]) >= 
0
) 

{ 

curr_max = 
0
; 

continue
; 

} 




curr_max = Math.max(A[i], curr_max + A[i]); 

max_so_far = Math.max(max_so_far, curr_max); 

} 

return
max_so_far; 

} 




static
void
findMaxSubarraySum(
int
A[], 
int
B[], 

int
n, 
int
m) 

{ 



Arrays.sort(B); 


int
maxSubarraySum = findMaxSubarraySumUtil(A, B, 

n, m); 








if
(maxSubarraySum == Integer.MIN_VALUE) 

{ 

System.out.println(
""Maximum subarray sum cant be found""
); 

} 

else

{ 

System.out.println(
""The Maximum subarray sum = ""

+ maxSubarraySum); 

} 

} 




public
static
void
main(String[] args) 

{ 

int
A[] = {
3
, 
4
, 
5
, -
4
, 
6
}; 

int
B[] = {
1
, 
8
, 
5
}; 


int
n = A.length; 

int
m = B.length; 




findMaxSubarraySum(A, B, n, m); 

} 
}","class GFG { static int findMaxSubarraySumUtil(int A[], int B[], int n, int m) { int max_so_far = Integer.MIN_VALUE, curr_max = 0; for (int i = 0; i < n; i++) { if (Arrays.binarySearch(B, A[i]) >= 0) { curr_max = 0; continue; } curr_max = Math.max(A[i], curr_max + A[i]); max_so_far = Math.max(max_so_far, curr_max); } return max_so_far; } static void findMaxSubarraySum(int A[], int B[], int n, int m) { Arrays.sort(B); int maxSubarraySum = findMaxSubarraySumUtil(A, B, n, m); if (maxSubarraySum == Integer.MIN_VALUE) { System.out.println(""Maximum subarray sum cant be found""); } else { System.out.println(""The Maximum subarray sum = "" + maxSubarraySum); } } public static void main(String[] args) { int A[] = {3, 4, 5, -4, 6}; int B[] = {1, 8, 5}; int n = A.length; int m = B.length; findMaxSubarraySum(A, B, n, m); } }",555
"class
GFG { 






static
int
maxTripletSum(
int
arr[], 
int
n) 

{ 



Arrays.sort(arr); 








return
arr[n - 
1
] + arr[n - 
2
] + arr[n - 
3
]; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = { 
1
, 
0
, 
8
, 
6
, 
4
, 
2
}; 

int
n = arr.length; 

System.out.println(maxTripletSum(arr, n)); 

} 
}","class GFG { 

static int maxTripletSum(int arr[], int n) { 
Arrays.sort(arr); 
return arr[n - 1] + arr[n - 2] + arr[n - 3]; 
} 

public static void main(String args[]) { 
int arr[] = { 1, 0, 8, 6, 4, 2 }; 
int n = arr.length; 
System.out.println(maxTripletSum(arr, n)); 
} 
}",556
"class
GFG { 




static
int
maximum(
int
a, 
int
b, 
int
c) 

{ 

return
Math.max(Math.max(a, b), c); 

} 




static
int
minimum(
int
a, 
int
b, 
int
c) 

{ 

return
Math.min(Math.min(a, b), c); 

} 






static
void
smallestDifferenceTriplet(
int
arr1[], 

int
arr2[], 
int
arr3[], 
int
n) 

{ 




Arrays.sort(arr1); 

Arrays.sort(arr2); 

Arrays.sort(arr3); 




int
res_min=
0
, res_max=
0
, res_mid=
0
; 






int
i = 
0
, j = 
0
, k = 
0
; 






int
diff = 
2147483647
; 


while
(i < n && j < n && k < n) 

{ 

int
sum = arr1[i] + arr2[j] + arr3[k]; 




int
max = maximum(arr1[i], arr2[j], arr3[k]); 




int
min = minimum(arr1[i], arr2[j], arr3[k]); 

if
(min == arr1[i]) 

i++; 

else
if
(min == arr2[j]) 

j++; 

else

k++; 






if
(diff > (max - min)) 

{ 

diff = max - min; 

res_max = max; 

res_mid = sum - (max + min); 

res_min = min; 

} 

} 




System.out.print(res_max + 
"", ""
+ res_mid 

+ 
"", ""
+ res_min); 

} 




public
static
void
main (String[] args) 

{ 


int
arr1[] = {
5
, 
2
, 
8
}; 

int
arr2[] = {
10
, 
7
, 
12
}; 

int
arr3[] = {
9
, 
14
, 
6
}; 


int
n = arr1.length; 


smallestDifferenceTriplet(arr1, arr2, arr3, n); 

} 
}","class GFG { static int maximum(int a, int b, int c) { return Math.max(Math.max(a, b), c); } static int minimum(int a, int b, int c) { return Math.min(Math.min(a, b), c); } static void smallestDifferenceTriplet(int[] arr1, int[] arr2, int[] arr3, int n) { Arrays.sort(arr1); Arrays.sort(arr2); Arrays.sort(arr3); int res_min = 0, res_max = 0, res_mid = 0; int i = 0, j = 0, k = 0; int diff = 2147483647; while (i < n && j < n && k < n) { int sum = arr1[i] + arr2[j] + arr3[k]; int max = maximum(arr1[i], arr2[j], arr3[k]); int min = minimum(arr1[i], arr2[j], arr3[k]); if (min == arr1[i]) i++; else if (min == arr2[j]) j++; else k++; if (diff > (max - min)) { diff = max - min; res_max = max; res_mid = sum - (max + min); res_min = min; } } System.out.print(res_max + "", "" + res_mid + "", "" + res_min); } public static void main(String[] args) { int[] arr1 = {5, 2, 8}; int[] arr2 = {10, 7, 12}; int[] arr3 = {9, 14, 6}; int n = arr1.length; smallestDifferenceTriplet(arr1, arr2, arr3, n); } }",557
"class
GFG { 

static
int
R = 
4
, C = 
4
; 





static
int
first(
int
arr[], 
int
low, 
int
high) 

{ 

if
(high >= low) { 



int
mid = low + (high - low) / 
2
; 




if
((mid == 
0
|| (arr[mid - 
1
] == 
0
)) && arr[mid] == 
1
) 

return
mid; 




else
if
(arr[mid] == 
0
) 

return
first(arr, (mid + 
1
), high); 




else

return
first(arr, low, (mid - 
1
)); 

} 

return
-
1
; 

} 






static
int
rowWithMax1s(
int
mat[][]) 

{ 



int
max_row_index = 
0
, max = -
1
; 






int
i, index; 

for
(i = 
0
; i < R; i++) { 

index = first(mat[i], 
0
, C - 
1
); 

if
(index != -
1
&& C - index > max) { 

max = C - index; 

max_row_index = i; 

} 

} 


return
max_row_index; 

} 



public
static
void
main(String[] args) 

{ 

int
mat[][] = { { 
0
, 
0
, 
0
, 
1
}, 

{ 
0
, 
1
, 
1
, 
1
}, 

{ 
1
, 
1
, 
1
, 
1
}, 

{ 
0
, 
0
, 
0
, 
0
} }; 

System.out.println(
""Index of row with maximum 1s is ""

+ rowWithMax1s(mat)); 

} 
}","class GFG { static int R = 4, C = 4; static int first(int arr[], int low, int high) { if(high >= low) { int mid = low + (high - low) / 2; if((mid == 0 || (arr[mid - 1] == 0)) && arr[mid] == 1) return mid; else if(arr[mid] == 0) return first(arr, (mid + 1), high); else return first(arr, low, (mid - 1)); } return -1; } static int rowWithMax1s(int mat[][]) { int max_row_index = 0, max = -1; int i, index; for(i = 0; i < R; i++) { index = first(mat[i], 0, C - 1); if(index != -1 && C - index > max) { max = C - index; max_row_index = i; } } return max_row_index ; } public static void main(String[] args) { int mat[][] = { { 0, 0, 0, 1}, { 0, 1, 1, 1}, { 1, 1, 1, 1}, { 0, 0, 0, 0} }; System.out.println(""Index of row with maximum 1s is "" + rowWithMax1s(mat)); } }",558
"public
class
GFG { 




static
void
rearrangeArray(
int
arr[], 
int
n) 

{ 



Arrays.sort(arr); 


int
[] tempArr = 
new
int
[n]; 







int
ArrIndex = 
0
; 




for
(
int
i = 
0
, j = n-
1
; i <= n / 
2
|| j > n / 
2
; 

i++, j--) { 

if
(ArrIndex < n) 

{ 

tempArr[ArrIndex] = arr[i]; 

ArrIndex++; 

} 


if
(ArrIndex < n) 

{ 

tempArr[ArrIndex] = arr[j]; 

ArrIndex++; 

} 

} 




for
(
int
i = 
0
; i < n; i++) 

arr[i] = tempArr[i]; 

} 




public
static
void
main(String args[]) 

{ 

int
arr[] = { 
5
, 
8
, 
1
, 
4
, 
2
, 
9
, 
3
, 
7
, 
6
}; 

int
n = arr.length; 

rearrangeArray(arr, n); 


for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i]+
"" ""
); 

} 
}","public class GFG {

static void rearrangeArray(int arr[], int n) {

Arrays.sort(arr);

int[] tempArr = new int[n];

int ArrIndex = 0;

for(int i = 0, j = n-1; i <= n / 2 || j > n / 2; i++, j--) {

if(ArrIndex < n) {

tempArr[ArrIndex] = arr[i];

ArrIndex++;

}

if(ArrIndex < n) {

tempArr[ArrIndex] = arr[j];

ArrIndex++;

}

}

for(int i = 0; i < n; i++)

arr[i] = tempArr[i];

}

public static void main(String args[]) {

int arr[] = {5, 8, 1, 4, 2, 9, 3, 7, 6};

int n = arr.length;

rearrangeArray(arr, n);

for(int i = 0; i < n; i++)

System.out.print(arr[i]+"" "");

}

}",559
"class
LinkedList { 


static
Node head; 





static
class
Node { 


int
data; 

Node next, prev; 




Node(
int
d) { 

data = d; 

next = prev = 
null
; 

} 

} 


void
print(Node node) { 

Node temp = node; 

System.out.println(
""Forward Traversal using next pointer""
); 

while
(node != 
null
) { 

System.out.print(node.data + 
"" ""
); 

temp = node; 

node = node.next; 

} 

System.out.println(
""\nBackward Traversal using prev pointer""
); 

while
(temp != 
null
) { 

System.out.print(temp.data + 
"" ""
); 

temp = temp.prev; 

} 

} 






Node split(Node head) { 

Node fast = head, slow = head; 

while
(fast.next != 
null
&& fast.next.next != 
null
) { 

fast = fast.next.next; 

slow = slow.next; 

} 

Node temp = slow.next; 

slow.next = 
null
; 

return
temp; 

} 


Node mergeSort(Node node) { 

if
(node == 
null
|| node.next == 
null
) { 

return
node; 

} 

Node second = split(node); 




node = mergeSort(node); 

second = mergeSort(second); 




return
merge(node, second); 

} 




Node merge(Node first, Node second) { 



if
(first == 
null
) { 

return
second; 

} 




if
(second == 
null
) { 

return
first; 

} 




if
(first.data < second.data) { 

first.next = merge(first.next, second); 

first.next.prev = first; 

first.prev = 
null
; 

return
first; 

} 
else
{ 

second.next = merge(first, second.next); 

second.next.prev = second; 

second.prev = 
null
; 

return
second; 

} 

} 




public
static
void
main(String[] args) { 


LinkedList list = 
new
LinkedList(); 

list.head = 
new
Node(
10
); 

list.head.next = 
new
Node(
30
); 

list.head.next.next = 
new
Node(
3
); 

list.head.next.next.next = 
new
Node(
4
); 

list.head.next.next.next.next = 
new
Node(
20
); 

list.head.next.next.next.next.next = 
new
Node(
5
); 



Node node = 
null
; 

node = list.mergeSort(head); 

System.out.println(
""Linked list after sorting :""
); 

list.print(node); 


} 
}","class LinkedList { static Node head; static class Node { int data; Node next, prev; Node(int d) { data = d; next = prev = null; } } void print(Node node) { Node temp = node; System.out.println(""Forward Traversal using next pointer""); while (node != null) { System.out.print(node.data + "" ""); temp = node; node = node.next; } System.out.println(""\nBackward Traversal using prev pointer""); while (temp != null) { System.out.print(temp.data + "" ""); temp = temp.prev; } } Node split(Node head) { Node fast = head, slow = head; while (fast.next != null && fast.next.next != null) { fast = fast.next.next; slow = slow.next; } Node temp = slow.next; slow.next = null; return temp; } Node mergeSort(Node node) { if (node == null || node.next == null) { return node; } Node second = split(node); node = mergeSort(node); second = mergeSort(second); return merge(node, second); } Node merge(Node first, Node second) { if (first == null) { return second; } if (second == null) { return first; } if (first.data < second.data) { first.next = merge(first.next, second); first.next.prev = first; first.prev = null; return first; } else { second.next = merge(first, second.next); second.next.prev = second; second.prev = null; return second; } } public static void main(String[] args) { LinkedList list = new LinkedList(); list.head = new Node(10); list.head.next = new Node(30); list.head.next.next = new Node(3); list.head.next.next.next = new Node(4); list.head.next.next.next.next = new Node(20); list.head.next.next.next.next.next = new Node(5); Node node = null; node = list.mergeSort(head); System.out.println(""Linked list after sorting :""); list.print(node); } }",560
"public
class
GenerateBNo 
{ 



static
void
generatePrintBinary(
int
n) 

{ 



Queue<String> q = 
new
LinkedList<String>(); 




q.add(
""1""
); 






while
(n-- > 
0
) 

{ 



String s1 = q.peek(); 

q.remove(); 

System.out.println(s1); 




String s2 = s1; 




q.add(s1 + 
""0""
); 






q.add(s2 + 
""1""
); 

} 

} 




public
static
void
main(String[] args) 

{ 

int
n=
10
; 

generatePrintBinary(n); 

} 
}","public class GenerateBNo {

    static void generatePrintBinary(int n) {

        Queue<String> q = new LinkedList<String>();

        q.add(""1"");

        while (n-- > 0) {

            String s1 = q.peek();
            q.remove();
            System.out.println(s1);

            String s2 = s1;

            q.add(s1 + ""0"");
            q.add(s2 + ""1"");
        }
    }

    public static void main(String[] args) {

        int n = 10;
        generatePrintBinary(n);
    }
}",561
"class
LIS { 





static
int
CeilIndex(
int
A[], 
int
l, 
int
r, 
int
key) 

{ 

while
(r - l > 
1
) { 

int
m = l + (r - l) / 
2
; 

if
(A[m] >= key) 

r = m; 

else

l = m; 

} 


return
r; 

} 


static
int
LongestIncreasingSubsequenceLength(
int
A[], 
int
size) 

{ 




int
[] tailTable = 
new
int
[size]; 

int
len; 



tailTable[
0
] = A[
0
]; 

len = 
1
; 

for
(
int
i = 
1
; i < size; i++) { 

if
(A[i] < tailTable[
0
]) 



tailTable[
0
] = A[i]; 


else
if
(A[i] > tailTable[len - 
1
]) 



tailTable[len++] = A[i]; 


else





tailTable[CeilIndex(tailTable, -
1
, len - 
1
, A[i])] = A[i]; 

} 


return
len; 

} 




public
static
void
main(String[] args) 

{ 

int
A[] = { 
2
, 
5
, 
3
, 
7
, 
11
, 
8
, 
10
, 
13
, 
6
}; 

int
n = A.length; 

System.out.println(
""Length of Longest Increasing Subsequence is ""
+ LongestIncreasingSubsequenceLength(A, n)); 

} 
}","class LIS {

    static int CeilIndex(int A[], int l, int r, int key) {
        while (r - l > 1) {
            int m = l + (r - l) / 2;
            if (A[m] >= key)
                r = m;
            else
                l = m;
        }
        return r;
    }

    static int LongestIncreasingSubsequenceLength(int A[], int size) {
        int[] tailTable = new int[size];
        int len;
        tailTable[0] = A[0];
        len = 1;
        for (int i = 1; i < size; i++) {
            if (A[i] < tailTable[0])
                tailTable[0] = A[i];
            else if (A[i] > tailTable[len - 1])
                tailTable[len++] = A[i];
            else
                tailTable[CeilIndex(tailTable, -1, len - 1, A[i])] = A[i];
        }
        return len;
    }

    public static void main(String[] args) {
        int A[] = {2, 5, 3, 7, 11, 8, 10, 13, 6};
        int n = A.length;
        System.out.println(""Length of Longest Increasing Subsequence is "" + LongestIncreasingSubsequenceLength(A, n));
    }
}",562
"class
GFG { 






static
int
maxSumPairWithDifferenceLessThanK(
int
arr[], 

int
N, 
int
K) 

{ 




Arrays.sort(arr); 






int
dp[] = 
new
int
[N]; 




dp[
0
] = 
0
; 


for
(
int
i = 
1
; i < N; i++) 

{ 





dp[i] = dp[i-
1
]; 




if
(arr[i] - arr[i-
1
] < K) 

{ 






if
(i >= 
2
) 

dp[i] = Math.max(dp[i], dp[i-
2
] + arr[i] + 

arr[i-
1
]); 

else

dp[i] = Math.max(dp[i], arr[i] + arr[i-
1
]); 

} 

} 




return
dp[N - 
1
]; 

} 




public
static
void
main (String[] args) { 


int
arr[] = {
3
, 
5
, 
10
, 
15
, 
17
, 
12
, 
9
}; 

int
N = arr.length; 

int
K = 
4
; 


System.out.println ( maxSumPairWithDifferenceLessThanK( 

arr, N, K)); 


} 
}","class GFG { static int maxSumPairWithDifferenceLessThanK(int arr[], int N, int K) { Arrays.sort(arr); int dp[] = new int[N]; dp[0] = 0; for (int i = 1; < N; i++) { dp[i] = dp[i-1]; if (arr[i] - arr[i-1] < K) { if (i >= 2) dp[i] = Math.max(dp[i], dp[i-2] + arr[i] + arr[i-1]); else dp[i] = Math.max(dp[i], arr[i] + arr[i-1]); } } return dp[N - 1]; } public static void main(String[] args) { int arr[] = { 3, 5, 10, 15, 17, 12, 9 }; int N = arr.length; int K = 4; System.out.println(maxSumPairWithDifferenceLessThanK(arr, N, K)); } }",563
"class
GFG { 






static
int
maxSumPairWithDifferenceLessThanK(
int
arr[], 

int
N, 
int
k) 

{ 

int
maxSum = 
0
; 






Arrays.sort(arr); 








for
(
int
i = N-
1
; i > 
0
; --i) 

{ 













if
(arr[i] - arr[i-
1
] < k) 

{ 



maxSum += arr[i]; 

maxSum += arr[i-
1
]; 




--i; 

} 

} 


return
maxSum; 

} 




public
static
void
main (String[] args) { 


int
arr[] = {
3
, 
5
, 
10
, 
15
, 
17
, 
12
, 
9
}; 

int
N = arr.length; 

int
K = 
4
; 


System.out.println ( maxSumPairWithDifferenceLessThanK( 

arr, N, K)); 

} 
}","class GFG { static int maxSumPairWithDifferenceLessThanK(int arr[], int N, int k) { int maxSum = 0; Arrays.sort(arr); for(int i = N-1; i > 0; --i) { if(arr[i] - arr[i-1] < k) { maxSum += arr[i]; maxSum += arr[i-1]; --i; } } return maxSum; } public static void main(String[] args) { int arr[] = {3, 5, 10, 15, 17, 12, 9}; int N = arr.length; int K = 4; System.out.println(maxSumPairWithDifferenceLessThanK(arr, N, K)); } }",564
"class
GFG 
{ 





public
static
int
kthSmallest(Integer [] arr, 

int
k) 

{ 



Arrays.sort(arr); 






return
arr[k-
1
]; 

} 




public
static
void
main(String[] args) 

{ 

Integer arr[] = 
new
Integer[]{
12
, 
3
, 
5
, 
7
, 
19
}; 

int
k = 
2
; 

System.out.print( 
""K'th smallest element is ""
+ 

kthSmallest(arr, k) ); 

} 
}","public class GFG {
    public static int kthSmallest(Integer[] arr, int k) {
        Arrays.sort(arr);
        return arr[k - 1];
    }

    public static void main(String[] args) {
        Integer arr[] = new Integer[]{12, 3, 5, 7, 19};
        int k = 2;
        System.out.print(""K'th smallest element is "" + kthSmallest(arr, k));
    }
}",565
"class
GFG { 


static
void
find_max(
int
[] A, 
int
N, 
int
K) 

{ 





HashMap<Integer, Integer> Count = 
new
HashMap<>(); 

for
(
int
i = 
0
; i < K - 
1
; i++) 

if
(Count.containsKey(A[i])) 

Count.put(A[i], 
1
+ Count.get(A[i])); 

else

Count.put(A[i], 
1
); 


TreeSet<Integer> Myset = 
new
TreeSet<Integer>(); 

for
(Map.Entry x : Count.entrySet()) { 

if
(Integer.parseInt(String.valueOf(x.getValue())) == 
1
) 

Myset.add(Integer.parseInt(String.valueOf(x.getKey()))); 

} 








for
(
int
i = K - 
1
; i < N; i++) { 




if
(Count.containsKey(A[i])) 

Count.put(A[i], 
1
+ Count.get(A[i])); 

else

Count.put(A[i], 
1
); 


if
(Integer.parseInt(String.valueOf(Count.get(A[i]))) == 
1
) 

Myset.add(A[i]); 

else

Myset.remove(A[i]); 






if
(Myset.size() == 
0
) 

System.out.println(
""Nothing""
); 






else

System.out.println(Myset.last()); 






int
x = A[i - K + 
1
]; 

Count.put(x, Count.get(x) - 
1
); 


if
(Integer.parseInt(String.valueOf(Count.get(x))) == 
1
) 

Myset.add(x); 

if
(Integer.parseInt(String.valueOf(Count.get(x))) == 
0
) 

Myset.remove(x); 

} 

} 




public
static
void
main(String args[]) 

{ 

int
[] a = { 
1
, 
2
, 
2
, 
3
, 
3
}; 

int
n = a.length; 

int
k = 
3
; 

find_max(a, n, k); 

} 
}","class GFG {

static void find_max(int [] A, int N, int K) {

HashMap<Integer, Integer> Count = new HashMap<>();

for (int i = 0; i < K - 1; i++)
if (Count.containsKey(A[i]))
Count.put(A[i], 1 + Count.get(A[i]));
else
Count.put(A[i], 1);

TreeSet<Integer> Myset = new TreeSet<Integer>();

for (Map.Entry x : Count.entrySet()) {
if (Integer.parseInt(String.valueOf(x.getValue())) == 1)
Myset.add(Integer.parseInt(String.valueOf(x.getKey()));
}

for (int i = K - 1; i < N; i++) {
if (Count.containsKey(A[i]))
Count.put(A[i], 1 + Count.get(A[i]));
else
Count.put(A[i], 1);

if (Integer.parseInt(String.valueOf(Count.get(A[i]))) == 1)
Myset.add(A[i]);
else
Myset.remove(A[i]);

if (Myset.size() == 0)
System.out.println(""Nothing"");
else
System.out.println(Myset.last());

int x = A[i - K + 1];
Count.put(x, Count.get(x) - 1);

if (Integer.parseInt(String.valueOf(Count.get(x))) == 1)
Myset.add(x);
if (Integer.parseInt(String.valueOf(Count.get(x))) == 0)
Myset.remove(x);
}
}

public static void main(String args[]) {

int [] a = {1, 2, 2, 3, 3};
int n = a.length;
int k = 3;
find_max(a, n, k);
}
}",566
"class
GFG { 




static
void
pairs(
int
arr[], 
int
n, 
int
k) 

{ 



int
smallest = Integer.MAX_VALUE; 

int
count=
0
; 




for
(
int
i=
0
; i<n; i++) 

for
(
int
j=i+
1
; j<n; j++) 

{ 







if
( Math.abs(arr[i] + arr[j] - k) < 

smallest ) 

{ 

smallest = Math.abs(arr[i] + arr[j] 

- k); 

count = 
1
; 

} 






else
if
(Math.abs(arr[i] + arr[j] - k) 

== smallest) 

count++; 

} 




System.out.println(
""Minimal Value = ""
+ 

smallest); 

System.out.println(
""Total Pairs = ""
+ 

count); 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
3
, 
5
, 
7
, 
5
, 
1
, 
9
, 
9
}; 

int
k = 
12
; 

int
n = arr.length; 

pairs(arr, n, k); 

} 
}","class GFG {

    static void pairs(int[] arr, int n, int k) {
        int smallest = Integer.MAX_VALUE;
        int count = 0;

        for (int i = 0; i < n; i++)
            for (int j = i + 1; j < n; j++) {
                if (Math.abs(arr[i] + arr[j] - k) < smallest) {
                    smallest = Math.abs(arr[i] + arr[j] - k);
                    count = 1;
                } else if (Math.abs(arr[i] + arr[j] - k) == smallest)
                    count++;
            }

        System.out.println(""Minimal Value = "" + smallest);
        System.out.println(""Total Pairs = "" + count);
    }

    public static void main(String[] args) {
        int arr[] = { 3, 5, 7, 5, 1, 9, 9 };
        int k = 12;
        int n = arr.length;
        pairs(arr, n, k);
    }
}",567
"class
ActivitySelection 
{ 











public
static
void
printMaxActivities(
int
s[], 
int
f[], 
int
n) 

{ 

int
i, j; 


System.out.print(
""Following activities are selected : n""
); 




i = 
0
; 

System.out.print(i+
"" ""
); 




for
(j = 
1
; j < n; j++) 

{ 







if
(s[j] >= f[i]) 

{ 

System.out.print(j+
"" ""
); 

i = j; 

} 

} 

} 




public
static
void
main(String[] args) 

{ 

int
s[] = {
1
, 
3
, 
0
, 
5
, 
8
, 
5
}; 

int
f[] = {
2
, 
4
, 
6
, 
7
, 
9
, 
9
}; 

int
n = s.length; 


printMaxActivities(s, f, n); 

} 

}","class ActivitySelection { public static void printMaxActivities(int s[], int f[], int n) { int i, j; System.out.print(""Following activities are selected : ""); i = 0; System.out.print(i + "" ""); for (j = 1; j < n; j++) { if (s[j] >= f[i]) { System.out.print(j + "" ""); i = j; } } } public static void main(String[] args) { int s[] = {1, 3, 0, 5, 8, 5}; int f[] = {2, 4, 6, 7, 9, 9}; int n = s.length; printMaxActivities(s, f, n); } }",568
"class
DisjointSet 
{ 

int
parent[]; 




DisjointSet(
int
n) 

{ 

parent = 
new
int
[n + 
1
]; 




for
(
int
i = 
0
; i <= n; i++) 

parent[i] = i; 

} 




int
find(
int
s) 

{ 



if
(s == parent[s]) 

return
s; 

return
parent[s] = find(parent[s]); 

} 




void
merge(
int
u, 
int
v) 

{ 





parent[v] = u; 

} 
} 

class
Job 
implements
Comparator<Job> 
{ 



char
id; 

int
deadline, profit; 




public
Job() { } 

public
Job(
char
id,
int
deadline,
int
profit) 

{ 

this
.id = id; 

this
.deadline = deadline; 

this
.profit = profit; 

} 




public
static
int
findMaxDeadline(ArrayList<Job> arr) 

{ 

int
ans = Integer.MIN_VALUE; 

for
(Job temp : arr) 

ans = Math.max(temp.deadline, ans); 

return
ans; 

} 




public
static
void
printJobScheduling(ArrayList<Job> arr) 

{ 





Collections.sort(arr, 
new
Job()); 








int
maxDeadline = findMaxDeadline(arr); 

DisjointSet dsu = 
new
DisjointSet(maxDeadline); 




for
(Job temp : arr) 

{ 





int
availableSlot = dsu.find(temp.deadline); 







if
(availableSlot > 
0
) 

{ 















dsu.merge(dsu.find(availableSlot - 
1
), 

availableSlot); 

System.out.print(temp.id + 
"" ""
); 

} 

} 

System.out.println(); 

} 






public
int
compare(Job j1, Job j2) 

{ 

return
j1.profit > j2.profit? -
1
: 
1
; 

} 
} 


class
Main 
{ 

public
static
void
main(String args[]) 

{ 

ArrayList<Job> arr=
new
ArrayList<Job>(); 

arr.add(
new
Job(
'a'
,
2
,
100
)); 

arr.add(
new
Job(
'b'
,
1
,
19
)); 

arr.add(
new
Job(
'c'
,
2
,
27
)); 

arr.add(
new
Job(
'd'
,
1
,
25
)); 

arr.add(
new
Job(
'e'
,
3
,
15
)); 

System.out.println(
""Following jobs need to be ""
+ 

""executed for maximum profit""
); 

Job.printJobScheduling(arr); 

} 
}","class DisjointSet {

    int parent[];

    DisjointSet(int n) {
        parent = new int[n + 1];
        for (int i = 0; i <= n; i++)
            parent[i] = i;
    }

    int find(int s) {
        if (s == parent[s])
            return s;
        return parent[s] = find(parent[s]);
    }

    void merge(int u, int v) {
        parent[v] = u;
    }
}

class Job implements Comparator<Job> {

    char id;
    int deadline, profit;

    public Job() { }

    public Job(char id, int deadline, int profit) {
        this.id = id;
        this.deadline = deadline;
        this.profit = profit;
    }

    public static int findMaxDeadline(ArrayList<Job> arr) {
        int ans = Integer.MIN_VALUE;
        for (Job temp : arr)
            ans = Math.max(temp.deadline, ans);
        return ans;
    }

    public static void printJobScheduling(ArrayList<Job> arr) {

        Collections.sort(arr, new Job());

        int maxDeadline = findMaxDeadline(arr);
        DisjointSet dsu = new DisjointSet(maxDeadline);

        for (Job temp : arr) {
            int availableSlot = dsu.find(temp.deadline);

            if (availableSlot > 0) {
                dsu.merge(dsu.find(availableSlot - 1), availableSlot);
                System.out.print(temp.id + "" "");
            }
        }

        System.out.println();
    }

    public int compare(Job j1, Job j2) {
        return j1.profit > j2.profit ? -1 : 1;
    }
}

class Main {

    public static void main(String args[]) {

        ArrayList<Job> arr = new ArrayList<Job>();
        arr.add(new Job('a', 2, 100));
        arr.add(new Job('b', 1, 19));
        arr.add(new Job('c', 2, 27));
        arr.add(new Job('d', 1, 25));
        arr.add(new Job('e', 3, 15));

        System.out.println(""Following jobs need to be "" + ""executed for maximum profit"");
        Job.printJobScheduling(arr);
    }
}",569
"class
GFG { 

void
find3largest(
int
[] arr) 

{ 

Arrays.sort(arr); 




int
n = arr.length; 

int
check = 
0
, count = 
1
; 


for
(
int
i = 
1
; i <= n; i++){ 


if
(count<
4
){ 

if
(check!=arr[n-i]) 

{ 



System.out.print(arr[n-i]+
"" ""
); 

check = arr[n-i]; 

count++; 

} 

} 

else

break
; 

} 


} 




public
static
void
main(String[] args) 

{ 

GFG obj = 
new
GFG(); 

int
[] arr={
12
,
45
,
1
,-
1
,
45
,
54
,
23
,
5
,
0
,-
10
}; 

obj.find3largest(arr); 

} 

}","class GFG { void find3largest(int[] arr) { Arrays.sort(arr); int n = arr.length; int check = 0, count = 1; for (int i = 1; i <= n; i++) { if (count < 4) { if (check != arr[n - i]) { System.out.print(arr[n - i] + "" ""); check = arr[n - i]; count++; } } else break; } } public static void main(String[] args) { GFG obj = new GFG(); int[] arr = {12, 45, 1, -1, 45, 54, 23, 5, 0, -10}; obj.find3largest(arr); } }",570
"class
HuffmanNode { 


int
data; 

char
c; 


HuffmanNode left; 

HuffmanNode right; 
} 





class
MyComparator 
implements
Comparator<HuffmanNode> { 

public
int
compare(HuffmanNode x, HuffmanNode y) 

{ 


return
x.data - y.data; 

} 
} 

public
class
Huffman { 








public
static
void
printCode(HuffmanNode root, String s) 

{ 








if
(root.left 

== 
null

&& root.right 

== 
null

&& Character.isLetter(root.c)) { 




System.out.println(root.c + 
"":""
+ s); 


return
; 

} 











printCode(root.left, s + 
""0""
); 

printCode(root.right, s + 
""1""
); 

} 




public
static
void
main(String[] args) 

{ 


Scanner s = 
new
Scanner(System.in); 




int
n = 
6
; 

char
[] charArray = { 
'a'
, 
'b'
, 
'c'
, 
'd'
, 
'e'
, 
'f'
}; 

int
[] charfreq = { 
5
, 
9
, 
12
, 
13
, 
16
, 
45
}; 






PriorityQueue<HuffmanNode> q 

= 
new
PriorityQueue<HuffmanNode>(n, 
new
MyComparator()); 


for
(
int
i = 
0
; i < n; i++) { 






HuffmanNode hn = 
new
HuffmanNode(); 


hn.c = charArray[i]; 

hn.data = charfreq[i]; 


hn.left = 
null
; 

hn.right = 
null
; 






q.add(hn); 

} 




HuffmanNode root = 
null
; 










while
(q.size() > 
1
) { 




HuffmanNode x = q.peek(); 

q.poll(); 




HuffmanNode y = q.peek(); 

q.poll(); 




HuffmanNode f = 
new
HuffmanNode(); 






f.data = x.data + y.data; 

f.c = 
'-'
; 




f.left = x; 




f.right = y; 




root = f; 




q.add(f); 

} 




printCode(root, 
""""
); 

} 
}","class HuffmanNode { int data; char c; HuffmanNode left; HuffmanNode right; } class MyComparator implements Comparator<HuffmanNode> { public int compare(HuffmanNode x, HuffmanNode y) { return x.data - y.data; } } public class Huffman { public static void printCode(HuffmanNode root, String s) { if (root.left == null && root.right == null && Character.isLetter(root.c)) { System.out.println(root.c + "":"" + s); return; } printCode(root.left, s + ""0""); printCode(root.right, s + ""1""); } public static void main(String[] args) { Scanner s = new Scanner(System.in); int n = 6; char[] charArray = { 'a', 'b', 'c', 'd', 'e', 'f'}; int[] charfreq = { 5, 9, 12, 13, 16, 45}; PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(n, new MyComparator()); for (int i = 0; i < n; i++) { HuffmanNode hn = new HuffmanNode(); hn.c = charArray[i]; hn.data = charfreq[i]; hn.left = null; hn.right = null; q.add(hn); } HuffmanNode root = null; while (q.size() > 1) { HuffmanNode x = q.peek(); q.poll(); HuffmanNode y = q.peek(); q.poll(); HuffmanNode f = new HuffmanNode(); f.data = x.data + y.data; f.c = '-'; f.left = x; f.right = y; root = f; q.add(f); } printCode(root, """"); } }",571
"class
Graph 
{ 



class
Edge 
implements
Comparable<Edge> 

{ 

int
src, dest, weight; 






public
int
compareTo(Edge compareEdge) 

{ 

return
this
.weight-compareEdge.weight; 

} 

}; 




class
subset 

{ 

int
parent, rank; 

}; 


int
V, E; 


Edge edge[]; 





Graph(
int
v, 
int
e) 

{ 

V = v; 

E = e; 

edge = 
new
Edge[E]; 

for
(
int
i=
0
; i<e; ++i) 

edge[i] = 
new
Edge(); 

} 






int
find(subset subsets[], 
int
i) 

{ 



if
(subsets[i].parent != i) 

subsets[i].parent = find(subsets, subsets[i].parent); 


return
subsets[i].parent; 

} 






void
Union(subset subsets[], 
int
x, 
int
y) 

{ 

int
xroot = find(subsets, x); 

int
yroot = find(subsets, y); 






if
(subsets[xroot].rank < subsets[yroot].rank) 

subsets[xroot].parent = yroot; 

else
if
(subsets[xroot].rank > subsets[yroot].rank) 

subsets[yroot].parent = xroot; 






else

{ 

subsets[yroot].parent = xroot; 

subsets[xroot].rank++; 

} 

} 




void
KruskalMST() 

{ 

Edge result[] = 
new
Edge[V]; 


int
e = 
0
; 


int
i = 
0
; 


for
(i=
0
; i<V; ++i) 

result[i] = 
new
Edge(); 








Arrays.sort(edge); 




subset subsets[] = 
new
subset[V]; 

for
(i=
0
; i<V; ++i) 

subsets[i]=
new
subset(); 




for
(
int
v = 
0
; v < V; ++v) 

{ 

subsets[v].parent = v; 

subsets[v].rank = 
0
; 

} 


i = 
0
; 





while
(e < V - 
1
) 

{ 





Edge next_edge = 
new
Edge(); 

next_edge = edge[i++]; 


int
x = find(subsets, next_edge.src); 

int
y = find(subsets, next_edge.dest); 








if
(x != y) 

{ 

result[e++] = next_edge; 

Union(subsets, x, y); 

} 



} 






System.out.println(
""Following are the edges in ""
+ 

""the constructed MST""
); 

for
(i = 
0
; i < e; ++i) 

System.out.println(result[i].src+
"" -- ""
+ 

result[i].dest+
"" == ""
+ result[i].weight); 

} 




public
static
void
main (String[] args) 

{ 




int
V = 
4
; 


int
E = 
5
; 


Graph graph = 
new
Graph(V, E); 




graph.edge[
0
].src = 
0
; 

graph.edge[
0
].dest = 
1
; 

graph.edge[
0
].weight = 
10
; 




graph.edge[
1
].src = 
0
; 

graph.edge[
1
].dest = 
2
; 

graph.edge[
1
].weight = 
6
; 




graph.edge[
2
].src = 
0
; 

graph.edge[
2
].dest = 
3
; 

graph.edge[
2
].weight = 
5
; 




graph.edge[
3
].src = 
1
; 

graph.edge[
3
].dest = 
3
; 

graph.edge[
3
].weight = 
15
; 




graph.edge[
4
].src = 
2
; 

graph.edge[
4
].dest = 
3
; 

graph.edge[
4
].weight = 
4
; 


graph.KruskalMST(); 

} 
}","public class Graph { class Edge implements Comparable<Edge> { int src, dest, weight; public int compareTo(Edge compareEdge) { return this.weight - compareEdge.weight; } }; class Subset { int parent, rank; }; int V, E; Edge edge[]; Graph(int v, int e) { V = v; E = e; edge = new Edge[E]; for (int i = 0; i < e; ++i) edge[i] = new Edge(); } int find(Subset subsets[], int i) { if (subsets[i].parent != i) subsets[i].parent = find(subsets, subsets[i].parent); return subsets[i].parent; } void union(Subset subsets[], int x, int y) { int xroot = find(subsets, x); int yroot = find(subsets, y); if (subsets[xroot].rank < subsets[yroot].rank) subsets[xroot].parent = yroot; else if (subsets[xroot].rank > subsets[yroot].rank) subsets[yroot].parent = xroot; else { subsets[yroot].parent = xroot; subsets[xroot].rank++; } } void kruskalMST() { Edge result[] = new Edge[V]; int e = 0; int i = 0; for (i = 0; i < V; ++i) result[i] = new Edge(); Arrays.sort(edge); Subset subsets[] = new Subset[V]; for (i = 0; i < V; ++i) subsets[i] = new Subset(); for (int v = 0; v < V; ++v) { subsets[v].parent = v; subsets[v].rank = 0; } i = 0; while (e < V - 1) { Edge nextEdge = new Edge(); nextEdge = edge[i++]; int x = find(subsets, nextEdge.src); int y = find(subsets, nextEdge.dest); if (x != y) { result[e++] = nextEdge; union(subsets, x, y); } } System.out.println(""Following are the edges in "" + ""the constructed MST""); for (i = 0; i < e; ++i) System.out.println(result[i].src + "" -- "" + result[i].dest + "" == "" + result[i].weight); } public static void main(String[] args) { int V = 4; int E = 5; Graph graph = new Graph(V, E); graph.edge[0].src = 0; graph.edge[0].dest = 1; graph.edge[0].weight = 10; graph.edge[1].src = 0; graph.edge[1].dest = 2; graph.edge[1].weight = 6; graph.edge[2].src = 0; graph.edge[2].dest = 3; graph.edge[2].weight = 5; graph.edge[3].src = 1; graph.edge[3].dest = 3; graph.edge[3].weight = 15; graph.edge[4].src = 2; graph.edge[4].dest = 3; graph.edge[4].weight = 4; graph.kruskalMST(); } }",572
"public
class
prims { 

class
node1 { 




int
dest; 




int
weight; 




node1(
int
a, 
int
b) 

{ 

dest = a; 

weight = b; 

} 

} 

static
class
Graph { 




int
V; 




LinkedList<node1>[] adj; 




Graph(
int
e) 

{ 

V = e; 

adj = 
new
LinkedList[V]; 

for
(
int
o = 
0
; o < V; o++) 

adj[o] = 
new
LinkedList<>(); 

} 

} 








class
node { 

int
vertex; 

int
key; 

} 










class
comparator 
implements
Comparator<node> { 


@Override

public
int
compare(node node0, node node1) 

{ 

return
node0.key - node1.key; 

} 

} 






void
addEdge(Graph graph, 
int
src, 
int
dest, 
int
weight) 

{ 


node1 node0 = 
new
node1(dest, weight); 

node1 node = 
new
node1(src, weight); 

graph.adj[src].addLast(node0); 

graph.adj[dest].addLast(node); 

} 




void
prims_mst(Graph graph) 

{ 




Boolean[] mstset = 
new
Boolean[graph.V]; 

node[] e = 
new
node[graph.V]; 




int
[] parent = 
new
int
[graph.V]; 


for
(
int
o = 
0
; o < graph.V; o++) 

e[o] = 
new
node(); 


for
(
int
o = 
0
; o < graph.V; o++) { 




mstset[o] = 
false
; 




e[o].key = Integer.MAX_VALUE; 

e[o].vertex = o; 

parent[o] = -
1
; 

} 




mstset[
0
] = 
true
; 








e[
0
].key = 
0
; 




TreeSet<node> queue = 
new
TreeSet<node>(
new
comparator()); 


for
(
int
o = 
0
; o < graph.V; o++) 

queue.add(e[o]); 




while
(!queue.isEmpty()) { 




node node0 = queue.pollFirst(); 




mstset[node0.vertex] = 
true
; 




for
(node1 iterator : graph.adj[node0.vertex]) { 




if
(mstset[iterator.dest] == 
false
) { 









if
(e[iterator.dest].key > iterator.weight) { 

queue.remove(e[iterator.dest]); 

e[iterator.dest].key = iterator.weight; 

queue.add(e[iterator.dest]); 

parent[iterator.dest] = node0.vertex; 

} 

} 

} 

} 




for
(
int
o = 
1
; o < graph.V; o++) 

System.out.println(parent[o] + 
"" ""

+ 
""-""

+ 
"" ""
+ o); 

} 


public
static
void
main(String[] args) 

{ 

int
V = 
9
; 


Graph graph = 
new
Graph(V); 


prims e = 
new
prims(); 


e.addEdge(graph, 
0
, 
1
, 
4
); 

e.addEdge(graph, 
0
, 
7
, 
8
); 

e.addEdge(graph, 
1
, 
2
, 
8
); 

e.addEdge(graph, 
1
, 
7
, 
11
); 

e.addEdge(graph, 
2
, 
3
, 
7
); 

e.addEdge(graph, 
2
, 
8
, 
2
); 

e.addEdge(graph, 
2
, 
5
, 
4
); 

e.addEdge(graph, 
3
, 
4
, 
9
); 

e.addEdge(graph, 
3
, 
5
, 
14
); 

e.addEdge(graph, 
4
, 
5
, 
10
); 

e.addEdge(graph, 
5
, 
6
, 
2
); 

e.addEdge(graph, 
6
, 
7
, 
1
); 

e.addEdge(graph, 
6
, 
8
, 
6
); 

e.addEdge(graph, 
7
, 
8
, 
7
); 




e.prims_mst(graph); 

} 
}","public class prims {

static class node1 {

int dest;

int weight;

node1(int a, int b) {

dest = a;

weight = b;

}

}

static class Graph {

int V;

LinkedList<node1>[] adj;

Graph(int e) {

V = e;

adj = new LinkedList[V];

for (int o = 0; o < V; o++)

adj[o] = new LinkedList<>();

}

}

static class node {

int vertex;

int key;

}

static class comparator implements Comparator<node> {

@Override

public int compare(node node0, node node1) {

return node0.key - node1.key;

}

}

void addEdge(Graph graph, int src, int dest, int weight) {

node1 node0 = new node1(dest, weight);

node1 node = new node1(src, weight);

graph.adj[src].addLast(node0);

graph.adj[dest].addLast(node);

}

void prims_mst(Graph graph) {

Boolean[] mstset = new Boolean[graph.V];

node[] e = new node[graph.V];

int[] parent = new int[graph.V];

for (int o = 0; o < graph.V; o++)

e[o] = new node();

for (int o = 0; o < graph.V; o++) {

mstset[o] = false;

e[o].key = Integer.MAX_VALUE;

e[o].vertex = o;

parent[o] = -1;

}

mstset[0] = true;

e[0].key = 0;

TreeSet<node> queue = new TreeSet<node>(new comparator());

for (int o = 0; o < graph.V; o++)

queue.add(e[o]);

while (!queue.isEmpty()) {

node node0 = queue.pollFirst();

mstset[node0.vertex] = true;

for (node1 iterator : graph.adj[node0.vertex]) {

if (mstset[iterator.dest] == false) {

if (e[iterator.dest].key > iterator.weight) {

queue.remove(e[iterator.dest]);

e[iterator.dest].key = iterator.weight;

queue.add(e[iterator.dest]);

parent[iterator.dest] = node0.vertex;

}

}

}

}

for (int o = 1; o < graph.V; o++)

System.out.println(parent[o] + "" "" + ""-"" + "" "" + o);

}

public static void main(String[] args) {

int V = 9;

Graph graph = new Graph(V);

prims e = new prims();

e.addEdge(graph, 0, 1, 4);

e.addEdge(graph, 0, 7, 8);

e.addEdge(graph, 1, 2, 8);

e.addEdge(graph, 1, 7, 11);

e.addEdge(graph, 2, 3, 7);

e.addEdge(graph, 2, 8, 2);

e.addEdge(graph, 2, 5, 4);

e.addEdge(graph, 3, 4, 9);

e.addEdge(graph, 3, 5, 14);

e.addEdge(graph, 4, 5, 10);

e.addEdge(graph, 5, 6, 2);

e.addEdge(graph, 6, 7, 1);

e.addEdge(graph, 6, 8, 6);

e.addEdge(graph, 7, 8, 7);

e.prims_mst(graph);

}

}",573
"public
class
GFG { 


static
int
MaxSumDifference(Integer []a, 
int
n) 

{ 




List<Integer> finalSequence = 

new
ArrayList<Integer>(); 










Arrays.sort(a); 


























for
(
int
i = 
0
; i < n / 
2
; ++i) { 

finalSequence.add(a[i]); 

finalSequence.add(a[n - i - 
1
]); 

} 








int
MaximumSum = 
0
; 








for
(
int
i = 
0
; i < n - 
1
; ++i) { 

MaximumSum = MaximumSum + 

Math.abs(finalSequence.get(i) 

- finalSequence.get(i + 
1
)); 

} 






MaximumSum = MaximumSum + 

Math.abs(finalSequence.get(n - 
1
) 

- finalSequence.get(
0
)); 




return
MaximumSum; 

} 




public
static
void
main(String args[]) 

{ 

Integer []a = { 
1
, 
2
, 
4
, 
8
}; 

int
n = a.length; 


System.out.print(MaxSumDifference(a, n)); 

} 
}","public class GFG {

    static int MaxSumDifference(Integer[] a, int n) {

        List<Integer> finalSequence = new ArrayList<Integer>();

        Arrays.sort(a);

        for (int i = 0; i < n / 2; ++i) {
            finalSequence.add(a[i]);
            finalSequence.add(a[n - i - 1]);
        }

        int MaximumSum = 0;

        for (int i = 0; i < n - 1; ++i) {
            MaximumSum = MaximumSum + Math.abs(finalSequence.get(i) - finalSequence.get(i + 1));
        }

        MaximumSum = MaximumSum + Math.abs(finalSequence.get(n - 1) - finalSequence.get(0));

        return MaximumSum;
    }

    public static void main(String args[]) {
        Integer[] a = {1, 2, 4, 8};
        int n = a.length;

        System.out.print(MaxSumDifference(a, n));
    }
}",574
"class
MaxSum 
{ 





static
int
maxSum(
int
arr[], 
int
n) 

{ 

int
sum = 
0
; 




Arrays.sort(arr); 








for
(
int
i = 
0
; i < n/
2
; i++) 

{ 

sum -= (
2
* arr[i]); 

sum += (
2
* arr[n - i - 
1
]); 

} 


return
sum; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = { 
4
, 
2
, 
1
, 
8
}; 

int
n = arr.length; 

System.out.println(maxSum(arr, n)); 

} 
}","class MaxSum { static int maxSum(int arr[], int n) { int sum = 0; Arrays.sort(arr); for (int i = 0; i < n/2; i++) { sum -= (2 * arr[i]); sum += (2 * arr[n - i - 1]); } return sum; } public static void main(String[] args) { int arr[] = { 4, 2, 1, 8 }; int n = arr.length; System.out.println(maxSum(arr, n)); } }",575
"class
GFG { 






static
int
maxLevel(
int
[]boxes, 
int
n) 

{ 






Arrays.sort(boxes); 


int
ans = 
1
; 









int
prev_width = boxes[
0
]; 

int
prev_count = 
1
; 






int
curr_count = 
0
; 




int
curr_width = 
0
; 

for
(
int
i = 
1
; i < n; i++) 

{ 







curr_width += boxes[i]; 

curr_count += 
1
; 








if
(curr_width > prev_width && 

curr_count > prev_count) 

{ 








prev_width = curr_width; 

prev_count = curr_count; 








curr_count = 
0
; 

curr_width = 
0
; 






ans++; 

} 

} 


return
ans; 

} 




static
public
void
main (String[] args) 

{ 

int
[]boxes = {
10
, 
20
, 
30
, 
50
, 
60
, 
70
}; 

int
n = boxes.length; 

System.out.println(maxLevel(boxes, n)); 

} 
}","class GFG {
    static int maxLevel(int[] boxes, int n) {
        Arrays.sort(boxes);
        int ans = 1;
        int prev_width = boxes[0];
        int prev_count = 1;
        int curr_count = 0;
        int curr_width = 0;
        for (int i = 1; i < n; i++) {
            curr_width += boxes[i];
            curr_count += 1;
            if (curr_width > prev_width && curr_count > prev_count) {
                prev_width = curr_width;
                prev_count = curr_count;
                curr_count = 0;
                curr_width = 0;
                ans++;
            }
        }
        return ans;
    }
    static public void main (String[] args) {
        int[] boxes = {10, 20, 30, 50, 60, 70};
        int n = boxes.length;
        System.out.println(maxLevel(boxes, n));
    }
}",576
"class
GFG 
{ 


static
int
maxDifference(
int
arr[], 
int
N, 
int
k) 
{ 

int
M, S = 
0
, S1 = 
0
, max_difference = 
0
; 




for
(
int
i = 
0
; i < N; i++) 

S += arr[i]; 

int
temp; 




for
(
int
i = 
0
; i < N; i++) 

{ 

for
(
int
j = i + 
1
; j < N; j++) 

{ 

if
(arr[i] < arr[j]) 

{ 

temp = arr[i]; 

arr[i] = arr[j]; 

arr[j] = temp; 

} 

} 

} 


M = Math.max(k, N - k); 

for
(
int
i = 
0
; i < M; i++) 

S1 += arr[i]; 




max_difference = S1 - (S - S1); 

return
max_difference; 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = { 
8
, 
4
, 
5
, 
2
, 
10
}; 

int
N = arr.length; 

int
k = 
2
; 

System.out.println(maxDifference(arr, N, k)); 
} 
}","class GFG { static int maxDifference(int[] arr, int N, int k) { int M, S = 0, S1 = 0, max_difference = 0; for (int i = 0; i < N; i++) S += arr[i]; int temp; for (int i = 0; i < N; i++) { for (int j = i + 1; j < N; j++) { if (arr[i] < arr[j]) { temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } } M = Math.max(k, N - k); for (int i = 0; i < M; i++) S1 += arr[i]; max_difference = S1 - (S - S1); return max_difference; } public static void main(String args[]) { int arr[] = { 8, 4, 5, 2, 10 }; int N = arr.length; int k = 2; System.out.println(maxDifference(arr, N, k)); } }",577
"class
GFG 
{ 

static
void
findElements(
int
arr[], 
int
n) 
{ 

Arrays.sort(arr); 


for
(
int
i = 
0
; i < n - 
2
; i++) 

System.out.print(arr[i] + 
"" ""
); 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = { 
2
, -
6
,
3
, 
5
, 
1
}; 

int
n = arr.length; 

findElements(arr, n); 

} 
}","class GFG { static void findElements(int[] arr, int n) { Arrays.sort(arr); for (int i = 0; i < n - 2; i++) System.out.print(arr[i] + "" ""); } public static void main(String args[]) { int[] arr = { 2, -6, 3, 5, 1 }; int n = arr.length; findElements(arr, n); } }",578
"class
MinSum 
{ 





static
long
findMinSum(
long
a[], 
long
b[], 
long
n) 

{ 



Arrays.sort(a); 

Arrays.sort(b); 




long
sum = 
0
; 

for
(
int
i = 
0
; i < n; i++) 

sum = sum + Math.abs(a[i] - b[i]); 


return
sum; 

} 




public
static
void
main(String[] args) 

{ 



long
a[] = {
4
, 
1
, 
8
, 
7
}; 

long
b[] = {
2
, 
3
, 
6
, 
5
}; 

int
n = a.length; 

System.out.println(findMinSum(a, b, n)); 

} 
}","class MinSum {

    static long findMinSum(long[] a, long[] b, long n) {
        Arrays.sort(a);
        Arrays.sort(b);

        long sum = 0;

        for (int i = 0; i < n; i++)
            sum = sum + Math.abs(a[i] - b[i]);

        return sum;
    }

    public static void main(String[] args) {
        long a[] = {4, 1, 8, 7};
        long b[] = {2, 3, 6, 5};
        int n = a.length;

        System.out.println(findMinSum(a, b, n));
    }
}",579
"class
MinSum 
{ 





public
static
long
solve(
int
[] a) 

{ 



PriorityQueue<Integer> pq = 
new
PriorityQueue<Integer>(); 






StringBuilder num1 = 
new
StringBuilder(); 

StringBuilder num2 = 
new
StringBuilder(); 




for
(
int
x : a) 

pq.add(x); 




while
(!pq.isEmpty()) 

{ 

num1.append(pq.poll()+ 
""""
); 

if
(!pq.isEmpty()) 

num2.append(pq.poll()+ 
""""
); 

} 




long
sum = Long.parseLong(num1.toString()) + 

Long.parseLong(num2.toString()); 


return
sum; 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
6
, 
8
, 
4
, 
5
, 
2
, 
3
}; 

System.out.println(
""The required sum is ""
+ solve(arr)); 

} 
}","class MinSum {
    public static long solve(int[] a) {
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        StringBuilder num1 = new StringBuilder();
        StringBuilder num2 = new StringBuilder();
        for (int x : a)
            pq.add(x);
        while (!pq.isEmpty()) {
            num1.append(pq.poll() + """");
            if (!pq.isEmpty())
                num2.append(pq.poll() + """");
        }
        long sum = Long.parseLong(num1.toString()) + Long.parseLong(num2.toString());
        return sum;
    }
    public static void main(String[] args) {
        int arr[] = {6, 8, 4, 5, 2, 3};
        System.out.println(""The required sum is "" + solve(arr));
    }
}",580
"class
GFG 
{ 

public
static
int
DecreasingArray(
int
a[], 
int
n) 

{ 

int
sum = 
0
, dif = 
0
; 


PriorityQueue<Integer> pq = 
new
PriorityQueue<>(); 




















for
(
int
i = 
0
; i < n; i++) 

{ 

if
(!pq.isEmpty() && pq.element() < a[i]) 

{ 

dif = a[i] - pq.element(); 

sum += dif; 

pq.remove(); 

pq.add(a[i]); 

} 

pq.add(a[i]); 

} 


return
sum; 

} 




public
static
void
main(String[] args) 

{ 


int
[] a = {
3
, 
1
, 
2
, 
1
}; 


int
n = a.length; 


System.out.println(DecreasingArray(a, n)); 

} 
}","class GFG { public static int DecreasingArray(int[] a, int n) { int sum = 0, dif = 0; PriorityQueue<Integer> pq = new PriorityQueue<>(); for (int i = 0; i < n; i++) { if (!pq.isEmpty() && pq.peek() < a[i]) { dif = a[i] - pq.peek(); sum += dif; pq.poll(); pq.add(a[i]); } pq.add(a[i]); } return sum; } public static void main(String[] args) { int[] a = {3, 1, 2, 1}; int n = a.length; System.out.println(DecreasingArray(a, n)); } }",581
"class
GFG 
{ 
static
int
MinOperation(
int
a[], 

int
b[], 

int
n) 
{ 





Arrays.sort(a); 

Arrays.sort(b); 







int
result = 
0
; 


















for
(
int
i = 
0
; i < n; ++i) 

{ 

if
(a[i] > b[i]) 

result = result + 

Math.abs(a[i] - b[i]); 


else
if
(a[i] < b[i]) 

result = result + 

Math.abs(a[i] - b[i]); 

} 


return
result; 
} 


public
static
void
main (String[] args) 
{ 

int
a[] = {
3
, 
1
, 
1
}; 

int
b[] = {
1
, 
2
, 
2
}; 

int
n = a.length; 

System.out.println(MinOperation(a, b, n)); 
} 
}","class GFG { static int MinOperation(int[] a, int[] b, int n) { Arrays.sort(a); Arrays.sort(b); int result = 0; for (int i = 0; i < n; ++i) { if (a[i] > b[i]) result = result + Math.abs(a[i] - b[i]); else if (a[i] < b[i]) result = result + Math.abs(a[i] - b[i]); } return result; } public static void main(String[] args) { int a[] = {3, 1, 1}; int b[] = {1, 2, 2}; int n = a.length; System.out.println(MinOperation(a, b, n)); } }",582
"class
GFG { 


static
boolean
ifPossible(
int
arr[], 
int
n) 

{ 




int
copy[] = Arrays.copyOf(arr, arr.length); 




Arrays.sort(copy); 


for
(
int
i = 
0
; i < n; i++) { 








if
(!(arr[i] == copy[i]) && !(arr[n - 
1
- i] == copy[i])) 

return
false
; 

} 


return
true
; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
1
, 
7
, 
6
, 
4
, 
5
, 
3
, 
2
, 
8
}; 

int
n = arr.length; 

if
(ifPossible(arr, n)) 

System.out.println(
""Yes""
); 

else

System.out.println(
""No""
); 

} 
}","class GFG { static boolean ifPossible(int arr[], int n) { int copy[] = Arrays.copyOf(arr, arr.length); Arrays.sort(copy); for (int i = 0; i < n; i++) { if (!(arr[i] == copy[i]) && !(arr[n - 1 - i] == copy[i])) return false; } return true; } public static void main(String[] args) { int arr[] = {1, 7, 6, 4, 5, 3, 2, 8}; int n = arr.length; if (ifPossible(arr, n)) System.out.println(""Yes""); else System.out.println(""No""); } }",583
"class
GFG 
{ 





static
int
MaxTotalRectangleArea(
int
[]a, 

int
n) 

{ 






Arrays.sort(a); 








int
sum = 
0
; 

boolean
flag = 
false
; 






int
len = 
0
; 


for
(
int
i = 
0
; i < n; i++) 

{ 












if
((a[i] == a[i + 
1
] || 

a[i] - a[i + 
1
] == 
1
) && 

!flag) 

{ 







flag = 
true
; 














len = a[i + 
1
]; 










i++; 

} 












else
if
((a[i] == a[i + 
1
] || 

a[i] - a[i + 
1
] == 
1
) && 

(flag)) 

{ 





sum = sum + a[i + 
1
] * len; 










flag = 
false
; 










i++; 

} 

} 


return
sum; 

} 




public
static
void
main (String args[]) 

{ 

int
[]a = { 
10
, 
10
, 
10
, 
10
, 

11
, 
10
, 
11
, 
10
, 

9
, 
9
, 
8
, 
8
}; 

int
n = a.length; 


System.out.print(MaxTotalRectangleArea(a, n)); 

} 
}","class GFG { static int MaxTotalRectangleArea(int[] a, int n) { Arrays.sort(a); int sum = 0; boolean flag = false; int len = 0; for (int i = 0; i < n; i++) { if ((a[i] == a[i + 1] || a[i] - a[i + 1] == 1) && !flag) { flag = true; len = a[i + 1]; i++; } else if ((a[i] == a[i + 1] || a[i] - a[i + 1] == 1) && (flag)) { sum = sum + a[i + 1] * len; flag = false; i++; } } return sum; } public static void main(String args[]) { int[] a = { 10, 10, 10, 10, 11, 10, 11, 10, 9, 9, 8, 8 }; int n = a.length; System.out.print(MaxTotalRectangleArea(a, n)); } }",584
"public
class
FractionalKnapSack 
{ 



public
static
void
main(String[] args) 

{ 

int
[] wt = {
10
, 
40
, 
20
, 
30
}; 

int
[] val = {
60
, 
40
, 
100
, 
120
}; 

int
capacity = 
50
; 


double
maxValue = getMaxValue(wt, val, capacity); 

System.out.println(
""Maximum value we can obtain = ""
+ 

maxValue); 


} 




private
static
double
getMaxValue(
int
[] wt, 

int
[] val, 
int
capacity) 

{ 

ItemValue[] iVal = 
new
ItemValue[wt.length]; 


for
(
int
i = 
0
; i < wt.length; i++) 

{ 

iVal[i] = 
new
ItemValue(wt[i], val[i], i); 

} 




Arrays.sort(iVal, 
new
Comparator<ItemValue>() 

{ 

@Override

public
int
compare(ItemValue o1, ItemValue o2) 

{ 

return
o2.cost.compareTo(o1.cost) ; 

} 

}); 



double
totalValue = 0d; 


for
(ItemValue i: iVal) 

{ 


int
curWt = (
int
) i.wt; 

int
curVal = (
int
) i.val; 


if
(capacity - curWt >= 
0
) 

{ 



capacity = capacity-curWt; 

totalValue += curVal; 


} 

else

{ 



double
fraction = ((
double
)capacity/(
double
)curWt); 

totalValue += (curVal*fraction); 

capacity = (
int
)(capacity - (curWt*fraction)); 

break
; 

} 



} 


return
totalValue; 

} 




static
class
ItemValue 

{ 

Double cost; 

double
wt, val, ind; 




public
ItemValue(
int
wt, 
int
val, 
int
ind) 

{ 

this
.wt = wt; 

this
.val = val; 

this
.ind = ind; 

cost = 
new
Double(val/wt ); 

} 

} 
}","public class FractionalKnapSack {

    public static void main(String[] args) {
        int[] wt = { 10, 40, 20, 30 };
        int[] val = { 60, 40, 100, 120 };
        int capacity = 50;

        double maxValue = getMaxValue(wt, val, capacity);

        System.out.println(""Maximum value we can obtain = "" + maxValue);
    }

    private static double getMaxValue(int[] wt, int[] val, int capacity) {
        ItemValue[] iVal = new ItemValue[wt.length];

        for (int i = 0; i < wt.length; i++) {
            iVal[i] = new ItemValue(wt[i], val[i], i);
        }

        Arrays.sort(iVal, new Comparator<ItemValue>() {
            @Override
            public int compare(ItemValue o1, ItemValue o2) {
                return o2.cost.compareTo(o1.cost);
            }
        });

        double totalValue = 0d;

        for (ItemValue i : iVal) {
            int curWt = (int) i.wt;
            int curVal = (int) i.val;

            if (capacity - curWt >= 0) {
                capacity = capacity - curWt;
                totalValue += curVal;
            } else {
                double fraction = ((double) capacity / (double) curWt);
                totalValue += (curVal * fraction);
                capacity = (int) (capacity - (curWt * fraction));
                break;
            }
        }

        return totalValue;
    }

    static class ItemValue {
        Double cost;
        double wt, val, ind;

        public ItemValue(int wt, int val, int ind) {
            this.wt = wt;
            this.val = val;
            this.ind = ind;
            cost = new Double(val / wt);
        }
    }
}",585
"class
GFG { 






static
int
findMinimum(
int
arr[], 
int
n, 
int
k) 

{ 

int
res = 
0
; 

for
(
int
i = 
0
; i < n; i++) 

{ 



res += arr[i]; 






n = n - k; 

} 

return
res; 

} 






static
int
findMaximum(
int
arr[], 
int
n, 
int
k) 

{ 

int
res = 
0
, index = 
0
; 


for
(
int
i = n - 
1
; i >= index; i--) 

{ 



res += arr[i]; 






index += k; 

} 

return
res; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
3
, 
2
, 
1
, 
4
}; 

int
n = arr.length; 

int
k = 
2
; 

Arrays.sort(arr); 


System.out.println(findMinimum(arr, n, k) + 

"" ""
+ findMaximum(arr, n, k)); 

} 
}","class GFG { static int findMinimum(int arr[], int n, int k) { int res = 0; for (int i = 0; i < n; i++) { res += arr[i]; n = n - k; } return res; } static int findMaximum(int arr[], int n, int k) { int res = 0, index = 0; for (int i = n - 1; i >= index; i--) { res += arr[i]; index += k; } return res; } public static void main(String[] args) { int arr[] = { 3, 2, 1, 4 }; int n = arr.length; int k = 2; Arrays.sort(arr); System.out.println(findMinimum(arr, n, k) + "" "" + findMaximum(arr, n, k)); } }",586
"class
GFG { 

static
long
calculate(
long
a[], 
int
n) 
{ 



Arrays.sort(a); 

int
i,j; 




Vector<Long> s = 
new
Vector<>(); 

for
(i = 
0
, j = n - 
1
; i < j; i++, j--) 

s.add((a[i] + a[j])); 


long
mini = Collections.min(s); 

long
maxi = Collections.max(s); 

return
Math.abs(maxi - mini); 
} 


public
static
void
main(String[] args) 
{ 

long
a[] = { 
2
, 
6
, 
4
, 
3
}; 

int
n = a.length; 

System.out.println(calculate(a, n)); 

} 
}","class GFG { static long calculate(long a[], int n) { Arrays.sort(a); int i, j; Vector<Long> s = new Vector<>(); for (i = 0, j = n - 1; i < n / 2; i++, j--) s.add((a[i] + a[j])); long mini = Collections.min(s); long maxi = Collections.max(s); return Math.abs(maxi - mini); } public static void main(String[] args) { long a[] = {2, 6, 4, 3}; int n = a.length; System.out.println(calculate(a, n)); } }",587
"class
MinHeap { 

int
[] harr; 


int
heap_size; 


int
capacity; 







public
MinHeap(
int
a[], 
int
size) 

{ 

heap_size = size; 

capacity = size; 

harr = a; 

int
i = (heap_size - 
1
) / 
2
; 

while
(i >= 
0
) { 

MinHeapify(i); 

i--; 

} 

} 










void
MinHeapify(
int
i) 

{ 

int
l = left(i); 

int
r = right(i); 

int
smallest = i; 

if
(l < heap_size && harr[l] < harr[i]) 

smallest = l; 

if
(r < heap_size && harr[r] < harr[smallest]) 

smallest = r; 

if
(smallest != i) { 

swap(i, smallest); 

MinHeapify(smallest); 

} 

} 


int
parent(
int
i) { 
return
(i - 
1
) / 
2
; } 




int
left(
int
i) { 
return
(
2
* i + 
1
); } 




int
right(
int
i) { 
return
(
2
* i + 
2
); } 




int
extractMin() 

{ 

if
(heap_size <= 
0
) 

return
Integer.MAX_VALUE; 

if
(heap_size == 
1
) { 

heap_size--; 

return
harr[
0
]; 

} 




int
root = harr[
0
]; 

harr[
0
] = harr[heap_size - 
1
]; 

heap_size--; 

MinHeapify(
0
); 


return
root; 

} 




void
insertKey(
int
k) 

{ 

if
(heap_size == capacity) { 

System.out.println(
""Overflow: Could not insertKey""
); 

return
; 

} 




heap_size++; 

int
i = heap_size - 
1
; 

harr[i] = k; 




while
(i != 
0
&& harr[parent(i)] > harr[i]) { 

swap(i, parent(i)); 

i = parent(i); 

} 

} 






boolean
isSizeOne() 

{ 

return
(heap_size == 
1
); 

} 




void
swap(
int
x, 
int
y) 

{ 

int
temp = harr[x]; 

harr[x] = harr[y]; 

harr[y] = temp; 

} 








static
int
minCost(
int
len[], 
int
n) 

{ 

int
cost = 
0
; 







MinHeap minHeap = 
new
MinHeap(len, n); 




while
(!minHeap.isSizeOne()) { 



int
min = minHeap.extractMin(); 

int
sec_min = minHeap.extractMin(); 


cost += (min + sec_min); 







minHeap.insertKey(min + sec_min); 

} 






return
cost; 

} 




public
static
void
main(String args[]) 

{ 

int
len[] = { 
4
, 
3
, 
2
, 
6
}; 

int
size = len.length; 


System.out.println(
""Total cost for connecting ropes is ""
+ minCost(len, size)); 

} 
};","class MinHeap { int[] harr; int heap_size; int capacity; public MinHeap(int a[], int size) { heap_size = size; capacity = size; harr = a; int i = (heap_size - 1) / 2; while (i >= 0) { MinHeapify(i); i--; } } void MinHeapify(int i) { int l = left(i); int r = right(i); int smallest = i; if (l < heap_size && harr[l] < harr[i]) smallest = l; if (r < heap_size && harr[r] < harr[smallest]) smallest = r; if (smallest != i) { swap(i, smallest); MinHeapify(smallest); } } int parent(int i) { return (i - 1) / 2; } int left(int i) { return (2 * i + 1); } int right(int i) { return (2 * i + 2); } int extractMin() { if (heap_size <= 0) return Integer.MAX_VALUE; if (heap_size == 1) { heap_size--; return harr[0]; } int root = harr[0]; harr[0] = harr[heap_size - 1]; heap_size--; MinHeapify(0); return root; } void insertKey(int k) { if (heap_size == capacity) { System.out.println(\",588
"class
GFG 
{ 




static
int
minCost(
int
coin[], 

int
n, 
int
k) 

{ 




Arrays.sort(coin); 






int
coins_needed = (
int
)Math.ceil(
1.0
* 

n / (k + 
1
)); 






int
ans = 
0
; 


for
(
int
i = 
0
; i <= coins_needed - 
1
; 

i++) 

ans += coin[i]; 


return
ans; 

} 




public
static
void
main(String arg[]) 

{ 

int
coin[] = { 
8
, 
5
, 
3
, 
10
, 

2
, 
1
, 
15
, 
25
}; 

int
n = coin.length; 

int
k = 
3
; 


System.out.print(minCost(coin, n, k)); 

} 
}","class GFG { static int minCost(int coin[], int n, int k) { Arrays.sort(coin); int coins_needed = (int)Math.ceil(1.0 * n / (k + 1)); int ans = 0; for (int i = 0; i <= coins_needed - 1; i++) ans += coin[i]; return ans; } public static void main(String arg[]) { int coin[] = { 8, 5, 3, 10, 2, 1, 15, 25 }; int n = coin.length; int k = 3; System.out.print(minCost(coin, n, k)); } }",589
"public
class
GFG { 




static
void
preprocess(
int
[]coin, 
int
n) 

{ 




Arrays.sort(coin); 




for
(
int
i = 
1
; i <= n - 
1
; i++) 

coin[i] += coin[i - 
1
]; 

} 








static
int
minCost(
int
[]coin, 
int
n, 
int
k) 

{ 




int
coins_needed =(
int
) Math.ceil(
1.0

* n / (k + 
1
)); 




return
coin[coins_needed - 
1
]; 

} 




static
public
void
main (String[] args) 

{ 

int
[]coin = {
8
, 
5
, 
3
, 
10
, 
2
, 
1
, 
15
, 
25
}; 

int
n = coin.length; 


preprocess(coin, n); 


int
k = 
3
; 

System.out.println(minCost(coin, n, k)); 


k = 
7
; 

System.out.println( minCost(coin, n, k)); 

} 
}","public class GFG {
    static void preprocess(int[] coin, int n) {
        Arrays.sort(coin);
        for (int i = 1; i <= n - 1; i++)
            coin[i] += coin[i - 1];
    }

    static int minCost(int[] coin, int n, int k) {
        int coins_needed = (int) Math.ceil(1.0 * n / (k + 1));
        return coin[coins_needed - 1];
    }

    public static void main(String[] args) {
        int[] coin = { 8, 5, 3, 10, 2, 1, 15, 25 };
        int n = coin.length;

        preprocess(coin, n);

        int k = 3;
        System.out.println(minCost(coin, n, k));

        k = 7;
        System.out.println(minCost(coin, n, k));
    }
}",590
"class
GFG { 


static
int
findPlatform(
int
arr[], 
int
dep[], 
int
n) 
{ 



Arrays.sort(arr); 

Arrays.sort(dep); 






int
plat_needed = 
1
, result = 
1
; 

int
i = 
1
, j = 
0
; 






while
(i < n && j < n) 

{ 





if
(arr[i] <= dep[j]) 

{ 

plat_needed++; 

i++; 




if
(plat_needed > result) 

result = plat_needed; 

} 




else

{ 

plat_needed--; 

j++; 

} 

} 


return
result; 
} 


public
static
void
main(String[] args) 
{ 

int
arr[] = {
900
, 
940
, 
950
, 
1100
, 
1500
, 
1800
}; 

int
dep[] = {
910
, 
1200
, 
1120
, 
1130
, 
1900
, 
2000
}; 

int
n = arr.length; 

System.out.println(
""Minimum Number of Platforms Required = ""

+ findPlatform(arr, dep, n)); 
} 
}","static int findPlatform(int arr[], int dep[], int n) {Arrays.sort(arr);Arrays.sort(dep);int plat_needed = 1, result = 1;int i = 1, j = 0;while (i < n && j < n) {if (arr[i] <= dep[j]) {plat_needed++;i++;if (plat_needed > result) {result = plat_needed;}} else {plat_needed--;j++;}}return result;}public static void main(String[] args) {int arr[] = {900, 940, 950, 1100, 1500, 1800};int dep[] = {910, 1200, 1120, 1130, 1900, 2000};int n = arr.length;System.out.println(""Minimum Number of Platforms Required = "" + findPlatform(arr, dep, n));}",591
"class
GFG { 








static
int
getMinDiff(
int
arr[], 
int
n, 
int
k) 

{ 

if
(n == 
1
) 

return
0
; 




Arrays.sort(arr); 




int
ans = arr[n-
1
] - arr[
0
]; 




int
small = arr[
0
] + k; 

int
big = arr[n-
1
] - k; 

int
temp = 
0
; 


if
(small > big) 

{ 

temp = small; 

small = big; 

big = temp; 

} 




for
(
int
i = 
1
; i < n-
1
; i ++) 

{ 

int
subtract = arr[i] - k; 

int
add = arr[i] + k; 






if
(subtract >= small || add <= big) 

continue
; 














if
(big - subtract <= add - small) 

small = subtract; 

else

big = add; 

} 


return
Math.min(ans, big - small); 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
4
, 
6
}; 

int
n = arr.length; 

int
k = 
10
; 

System.out.println(
""Maximum difference is ""
+ 

getMinDiff(arr, n, k)); 

} 
}","class GFG { static int getMinDiff(int arr[], int n, int k) { if (n == 1) return 0; Arrays.sort(arr); int ans = arr[n-1] - arr[0]; int small = arr[0] + k; int big = arr[n-1] - k; int temp = 0; if (small > big) { temp = small; small = big; big = temp; } for (int i = 1; i < n-1; i ++) { int subtract = arr[i] - k; int add = arr[i] + k; if (subtract >= small || add <= big) continue; if (big - subtract <= add - small) small = subtract; else big = add; } return Math.min(ans, big - small); } public static void main(String[] args) { int arr[] = {4, 6}; int n = arr.length; int k = 10; System.out.println(""Maximum difference is "" + getMinDiff(arr, n, k)); } }",592
"class
GFG { 



static
int
minOps(
int
arr[], 
int
n, 
int
k) 

{ 



Arrays.sort(arr); 

int
max = arr[arr.length - 
1
]; 

int
res = 
0
; 




for
(
int
i = 
0
; i < n; i++) { 






if
((max - arr[i]) % k != 
0
) 

return
-
1
; 




else

res += (max - arr[i]) / k; 

} 




return
res; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = { 
21
, 
33
, 
9
, 
45
, 
63
}; 

int
n = arr.length; 

int
k = 
6
; 

System.out.println(minOps(arr, n, k)); 

} 
}","class GFG { static int minOps(int arr[], int n, int k) { Arrays.sort(arr); int max = arr[arr.length - 1]; int res = 0; for (int i = 0; i < n; i++) { if ((max - arr[i]) % k != 0) return -1; else res += (max - arr[i]) / k; } return res; } public static void main(String[] args) { int arr[] = { 21, 33, 9, 45, 63 }; int n = arr.length; int k = 6; System.out.println(minOps(arr, n, k)); } }",593
"class
GFG { 




static
int
minElements(
int
arr[], 
int
n) 

{ 



int
halfSum = 
0
; 

for
(
int
i = 
0
; i < n; i++) 

halfSum = halfSum + arr[i]; 

halfSum = halfSum / 
2
; 









Arrays.sort(arr); 


int
res = 
0
, curr_sum = 
0
; 

for
(
int
i = n-
1
; i >= 
0
; i--) { 


curr_sum += arr[i]; 

res++; 




if
(curr_sum > halfSum) 

return
res; 

} 

return
res; 

} 




public
static
void
main (String[] args) { 

int
arr[] = {
3
, 
1
, 
7
, 
1
}; 

int
n = arr.length; 

System.out.println(minElements(arr, n)); 

} 

}","class GFG { static int minElements(int arr[], int n) { int halfSum = 0; for (int i = 0; i < n; i++) halfSum = halfSum + arr[i]; halfSum = halfSum / 2; Arrays.sort(arr); int res = 0, curr_sum = 0; for (int i = n-1; i >= 0; i--) { curr_sum += arr[i]; res++; if (curr_sum > halfSum) return res; } return res; } public static void main(String[] args) { int arr[] = {3, 1, 7, 1}; int n = arr.length; System.out.println(minElements(arr, n)); } }",594
"class
Main 
{ 

static
void
minAbsSumPair(
int
arr[], 
int
n) 

{ 



int
sum, min_sum = 
999999
; 




int
l = 
0
, r = n-
1
; 




int
min_l = l, min_r = n-
1
; 




if
(n < 
2
) 

{ 

System.out.println(
""Invalid Input""
); 

return
; 

} 




sort(arr, l, r); 


while
(l < r) 

{ 

sum = arr[l] + arr[r]; 




if
(Math.abs(sum) < Math.abs(min_sum)) 

{ 

min_sum = sum; 

min_l = l; 

min_r = r; 

} 

if
(sum < 
0
) 

l++; 

else

r--; 

} 



System.out.println(
"" The two elements whose ""
+ 

""sum is minimum are ""
+ 

arr[min_l]+ 
"" and ""
+arr[min_r]); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
60
, -
10
, 
70
, -
80
, 
85
}; 

int
n = arr.length; 

minAbsSumPair(arr, n); 

} 







static
int
partition(
int
arr[], 
int
low, 
int
high) 

{ 

int
pivot = arr[high]; 

int
i = (low-
1
); 


for
(
int
j=low; j<high; j++) 

{ 





if
(arr[j] <= pivot) 

{ 

i++; 




int
temp = arr[i]; 

arr[i] = arr[j]; 

arr[j] = temp; 

} 

} 




int
temp = arr[i+
1
]; 

arr[i+
1
] = arr[high]; 

arr[high] = temp; 


return
i+
1
; 

} 





static
void
sort(
int
arr[], 
int
low, 
int
high) 

{ 

if
(low < high) 

{ 



int
pi = partition(arr, low, high); 






sort(arr, low, pi-
1
); 

sort(arr, pi+
1
, high); 

} 

} 
}","class Main {

static void minAbsSumPair(int arr[], int n) {

int sum, min_sum = 999999;

int l = 0, r = n-1;

int min_l = l, min_r = n-1;

if (n < 2) {

System.out.println(""Invalid Input"");

return;

}

sort(arr, l, r);

while (l < r) {

sum = arr[l] + arr[r];

if (Math.abs(sum) < Math.abs(min_sum)) {

min_sum = sum;

min_l = l;

min_r = r;

}

if (sum < 0)

l++;

else

r--;

}

System.out.println("" The two elements whose ""+""sum is minimum are ""+ arr[min_l] + "" and "" + arr[min_r]);

}

public static void main(String[] args) {

int arr[] = {1, 60, -10, 70, -80, 85};

int n = arr.length;

minAbsSumPair(arr, n);

}

static int partition(int arr[], int low, int high) {

int pivot = arr[high];

int i = (low-1);

for (int j = low; j < high; j++) {

if (arr[j] <= pivot) {

i++;

int temp = arr[i];

arr[i] = arr[j];

arr[j] = temp;

}

}

int temp = arr[i+1];

arr[i+1] = arr[high];

arr[high] = temp;

return i+1;

}

static void sort(int arr[], int low, int high) {

if (low < high) {

int pi = partition(arr, low, high);

sort(arr, low, pi-1);

sort(arr, pi+1, high);

}

}
}",595
"class
GFG { 

public
static
void
kLargest(Integer[] arr, 
int
k) 

{ 









Arrays.sort(arr, Collections.reverseOrder()); 




for
(
int
i = 
0
; i < k; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 


public
static
void
main(String[] args) 

{ 

Integer arr[] = 
new
Integer[] { 
1
, 
23
, 
12
, 
9
, 

30
, 
2
, 
50
}; 

int
k = 
3
; 

kLargest(arr, k); 

} 
}","class GFG { public static void kLargest(Integer[] arr, int k) { Arrays.sort(arr, Collections.reverseOrder()); for(int i = 0; i < k; i++) System.out.print(arr[i] + "" ""); } public static void main(String[] args) { Integer arr[] = new Integer[] { 1, 23, 12, 9, 30, 2, 50 }; int k = 3; kLargest(arr, k); } }",596
"class
GFG 
{ 





public
static
int
kthSmallest(Integer [] arr, 

int
k) 

{ 



Arrays.sort(arr); 






return
arr[k-
1
]; 

} 




public
static
void
main(String[] args) 

{ 

Integer arr[] = 
new
Integer[]{
12
, 
3
, 
5
, 
7
, 
19
}; 

int
k = 
2
; 

System.out.print( 
""K'th smallest element is ""
+ 

kthSmallest(arr, k) ); 

} 
}","class GFG { public static int kthSmallest(Integer[] arr, int k) { Arrays.sort(arr); return arr[k-1]; } public static void main(String[] args) { Integer arr[] = new Integer[]{12, 3, 5, 7, 19}; int k = 2; System.out.print(""K'th smallest element is ""+ kthSmallest(arr, k)); } }",597
"public class Fly {

    static double ERROR = 0.0000001;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n =  scanner.nextInt();
        int m = scanner.nextInt();
        int [] a = new int[n + 1];
        int [] b = new int[n + 1];
        for(int i =0; i< n; i++ ) {
            a[i] = scanner.nextInt();
        }

        for(int i =0; i< n; i++ ) {
            b[i] = scanner.nextInt();
        }
        b[n] = b[0];

        double max =  1000000000;
        double min = 0;
        boolean found = false;
        while (max >= min) {
            double mid = max + min;
             mid /= 2;
             boolean v = isValid(a, b, m, n, mid);
             
             if (v) {
                 max = mid;
             }
             else {
                 min = mid;
             }
             if (max - min <= ERROR && v) {
                 
                 found = true;
                 break;
             }
             if (max ==  min) {
                 break;
             }
        }
        
        if (found) {
            System.out.println(max);
        }
        else System.out.println(-1);
    }


    static boolean isValid(int [] a, int [] b, int m, int n, double fuel) {
        double total =  m + fuel;
        for (int i=0; i<n;i++) {
            double lost = total;
            lost/= a[i];
            total -= lost;

            lost = total;
            lost/=b[i+1];
            total -= lost;
            if ((total-m) < 0) {
                return false;
            }
        }
        if ((total-m) < 0) return false;
        return  true;
    }
}","public class Fly {

    static double ERROR = 0.0000001;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] a = new int[n + 1];
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        b[n] = b[0];

        double max = 1000000000;
        double min = 0;
        boolean found = false;
        while (max >= min) {
            double mid = max + min;
            mid /= 2;
            boolean v = isValid(a, b, m, n, mid);

            if (v) {
                max = mid;
            } else {
                min = mid;
            }
            if (max - min <= ERROR && v) {

                found = true;
                break;
            }
            if (max == min) {
                break;
            }
        }

        if (found) {
            System.out.println(max);
        } else
            System.out.println(-1);
    }


    static boolean isValid(int[] a, int[] b, int m, int n, double fuel) {
        double total = m + fuel;
        for (int i = 0; i < n; i++) {
            double lost = total;
            lost /= a[i];
            total -= lost;

            lost = total;
            lost /= b[i + 1];
            total -= lost;
            if ((total - m) < 0) {
                return false;
            }
        }
        if ((total - m) < 0)
            return false;
        return true;
    }
}",598
"public class BigInteger7 {
    public static void main(String[] args) {
        
        Scanner scanner = new Scanner(System.in);
        BigInteger n = scanner.nextBigInteger();
        BigInteger k = scanner.nextBigInteger();
        scanner.nextLine();
        String string = scanner.nextLine();
        char ch[] = string.toCharArray();
        BigInteger ans = BigInteger.ZERO;
        BigInteger number = BigInteger.ZERO;
        Arrays.sort(ch);
        int prev = 0;
        for (int i = 0; BigInteger.valueOf(i).subtract(n).compareTo(BigInteger.ZERO) < 0; i++) {
            if (i == 0) {
                ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                prev = i;
                number = number.add(BigInteger.ONE);
            } else {
                if (ch[i] - ch[prev] > 1) {
                    ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                    prev = i;
                    number = number.add(BigInteger.ONE);
                }
            }
            if (number.equals(k)) {
                break;
            }
        }
        if (number.subtract(k).compareTo(BigInteger.ZERO) < 0) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}","public class TransformedBigInteger7 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BigInteger n = scanner.nextBigInteger();
        BigInteger k = scanner.nextBigInteger();
        scanner.nextLine();
        String string = scanner.nextLine();
        char ch[] = string.toCharArray();
        BigInteger ans = BigInteger.ZERO;
        BigInteger number = BigInteger.ZERO;
        Arrays.sort(ch);
        int prev = 0;
        for (int i = 0; BigInteger.valueOf(i).subtract(n).compareTo(BigInteger.ZERO) < 0; i++) {
            if (i == 0) {
                ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                prev = i;
                number = number.add(BigInteger.ONE);
            } else {
                if (ch[i] - ch[prev] > 1) {
                    ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                    prev = i;
                    number = number.add(BigInteger.ONE);
                }
            }
            if (number.equals(k)) {
                break;
            }
        }
        if (number.subtract(k).compareTo(BigInteger.ZERO) < 0) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}",599
"public class HelloWorld {
	static long SQR(long a) {
		return a * a;
	}
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		String str = sc.next();
		char s[] = str.toCharArray();
		Arrays.parallelSort(s);
		str = new String(s);
		int d = 0;
		int ans = 0;

		for(int i = 0;i < str.length();i++) {
			int x = str.charAt(i) - 'a';
			if(k == 0)continue;
			if(x >= d) {
				ans = ans + x + 1;
				d = x + 2;
				k = k - 1;
			}
		}
		if(k > 0)ans = -1;
		System.out.println(ans);
	}
}","public class HelloWorld {
	static long SQR(long a) {
		return a * a;
	}
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		String str = sc.next();
		char s[] = str.toCharArray();
		Arrays.parallelSort(s);
		str = new String(s);
		int d = 0;
		int ans = 0;

		for(int i = 0;i < str.length();i++) {
			int x = str.charAt(i) - 'a';
			if(k == 0){
				continue;
			}
			if(x >= d) {
				ans = ans + x + 1;
				d = x + 2;
				k = k - 1;
			}
		}
		if(k > 0){
			ans = -1;
		}
		System.out.println(ans);
	}
}",600
"class
GFG 
{ 


static
int
k = 
16
; 


static
int
N = 
100000
; 



static
long
table[][] = 
new
long
[N][k + 
1
]; 


static
void
buildSparseTable(
int
arr[], 

int
n) 
{ 

for
(
int
i = 
0
; i < n; i++) 

table[i][
0
] = arr[i]; 


for
(
int
j = 
1
; j <= k; j++) 

for
(
int
i = 
0
; i <= n - (
1
<< j); i++) 

table[i][j] = table[i][j - 
1
] + 

table[i + (
1
<< (j - 
1
))][j - 
1
]; 
} 



static
long
query(
int
L, 
int
R) 
{ 





long
answer = 
0
; 

for
(
int
j = k; j >= 
0
; j--) 

{ 

if
(L + (
1
<< j) - 
1
<= R) 

{ 

answer = answer + table[L][j]; 






L += 
1
<< j; 

} 

} 

return
answer; 
} 


public
static
void
main(String args[]) 
{ 

int
arr[] = { 
3
, 
7
, 
2
, 
5
, 
8
, 
9
}; 

int
n = arr.length; 


buildSparseTable(arr, n); 


System.out.println(query(
0
, 
5
)); 

System.out.println(query(
3
, 
5
)); 

System.out.println(query(
2
, 
4
)); 
} 
}","class GFG { static int k = 16; static int N = 100000; static long table[][] = new long[N][k + 1]; static void buildSparseTable(int arr[], int n) { for (int i = 0; i < n; i++) table[i][0] = arr[i]; for (int j = 1; j <= k; j++) for (int i = 0; i <= n - (1 << j); i++) table[i][j] = table[i][j - 1] + table[i + (1 << (j - 1))][j - 1]; } static long query(int L, int R) { long answer = 0; for (int j = k; j >= 0; j--) { if (L + (1 << j) - 1 <= R) { answer = answer + table[L][j]; L += 1 << j; } } return answer; } public static void main(String args[]) { int arr[] = { 3, 7, 2, 5, 8, 9 }; int n = arr.length; buildSparseTable(arr, n); System.out.println(query(0, 5)); System.out.println(query(3, 5)); System.out.println(query(2, 4)); } }",601
"public class loser
{
    static class InputReader {
        public BufferedReader br;
        public StringTokenizer token;
        public InputReader(InputStream stream)
        {
            br=new BufferedReader(new InputStreamReader(stream),32768);
            token=null;
        }

        public String next()
        {
            while(token==null || !token.hasMoreTokens())
            {
                try
                {
                    token=new StringTokenizer(br.readLine());
                }
                catch(IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return token.nextToken();
        }

        public int nextInt()
        {
            return Integer.parseInt(next());
        }

        public long nextLong()
        {
            return Long.parseLong(next());
        }
    }
    static class card{
        String s;
        int l;
        public card(String s,int i)
        {
            this.s=s;
            this.l=i;
        }
    }
    static class sort implements Comparator<card>
    {
        public int compare(card o1,card o2)
        {
            if(o1.l!=o2.l)
                return (o1.l-o2.l);
            else
                return o1.s.compareTo(o2.s);
        }
    }
    static void shuffle(long a[])
    {
        List<Long> l=new ArrayList<>();
        for(int i=0;i<a.length;i++)
            l.add(a[i]);
        Collections.shuffle(l);
        for(int i=0;i<a.length;i++)
            a[i]=l.get(i);
    }

    
    static class Pair
    {
        int a;int b;
        public Pair(int a,int b)
        {
            this.a =a;
            this.b =b;
        }
    }
    public  static void main(String[] args) 
    {
        InputReader sc=new InputReader(System.in);
        int n=sc.nextInt();
        HashMap<String ,Integer> m=new HashMap<>();
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t))
            m.put(t,m.get(t)+1);
            else
            m.put(t,1);
        }
        int ans=0;
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t) && m.get(t)>0)
            {
                m.put(t,m.get(t)-1);
                ans++;
            }
        }
        System.out.println(n-ans);
    }
}","public class winner
{
    static class InputReader {
        public BufferedReader br;
        public StringTokenizer token;
        public InputReader(InputStream stream)
        {
            br=new BufferedReader(new InputStreamReader(stream),32768);
            token=null;
        }

        public String next()
        {
            while(token==null || !token.hasMoreTokens())
            {
                try
                {
                    token=new StringTokenizer(br.readLine());
                }
                catch(IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return token.nextToken();
        }

        public int nextInt()
        {
            return Integer.parseInt(next());
        }

        public long nextLong()
        {
            return Long.parseLong(next());
        }
    }
    static class card{
        String s;
        int l;
        public card(String s,int i)
        {
            this.s=s;
            this.l=i;
        }
    }
    static class sort implements Comparator<card>
    {
        public int compare(card o1,card o2)
        {
            if(o1.l!=o2.l)
                return (o1.l-o2.l);
            else
                return o1.s.compareTo(o2.s);
        }
    }
    static void shuffle(long a[])
    {
        List<Long> l=new ArrayList<>();
        for(int i=0;i<a.length;i++)
            l.add(a[i]);
        Collections.shuffle(l);
        for(int i=0;i<a.length;i++)
            a[i]=l.get(i);
    }

    
    static class Pair
    {
        int a;int b;
        public Pair(int a,int b)
        {
            this.a =a;
            this.b =b;
        }
    }
    public  static void main(String[] args) 
    {
        InputReader sc=new InputReader(System.in);
        int n=sc.nextInt();
        Map<String ,Integer> m=new HashMap<>();
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t))
                m.put(t,m.get(t)+1);
            else
                m.put(t,1);
        }
        int ans=0;
        for(int i=0;i<n;i++)
        {
            String t=sc.next();
            if(m.containsKey(t) && m.get(t)>0)
            {
                m.put(t,m.get(t)-1);
                ans++;
            }
        }
        System.out.println(n-ans);
    }
}",602
"public class Fly {

    static double ERROR = 0.0000001;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n =  scanner.nextInt();
        int m = scanner.nextInt();
        int [] a = new int[n + 1];
        int [] b = new int[n + 1];
        for(int i =0; i< n; i++ ) {
            a[i] = scanner.nextInt();
        }

        for(int i =0; i< n; i++ ) {
            b[i] = scanner.nextInt();
        }
        b[n] = b[0];

        double max =  1000000000;
        double min = 0;
        boolean found = false;
        while (max >= min) {
            double mid = max + min;
             mid /= 2;
             boolean v = isValid(a, b, m, n, mid);
             
             if (v) {
                 max = mid;
             }
             else {
                 min = mid;
             }
             if (max - min <= ERROR && v) {
                 
                 found = true;
                 break;
             }
             if (max ==  min) {
                 break;
             }
        }
        
        if (found) {
            System.out.println(max);
        }
        else System.out.println(-1);
    }


    static boolean isValid(int [] a, int [] b, int m, int n, double fuel) {
        double total =  m + fuel;
        for (int i=0; i<n;i++) {
            double lost = total;
            lost/= a[i];
            total -= lost;

            lost = total;
            lost/=b[i+1];
            total -= lost;
            if ((total-m) < 0) {
                return false;
            }
        }
        if ((total-m) < 0) return false;
        return  true;
    }
}","public class FlyBack {

    static double ERROR = 0.0000001;

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        int[] a = new int[n + 1];
        int[] b = new int[n + 1];
        for (int i = 0; i < n; i++) {
            a[i] = scanner.nextInt();
        }

        for (int i = 0; i < n; i++) {
            b[i] = scanner.nextInt();
        }
        b[n] = b[0];

        double max = 1000000000;
        double min = 0;
        boolean found = false;
        while (max >= min) {
            double mid = max + min;
            mid /= 2;
            boolean v = isValid(a, b, m, n, mid);

            if (v) {
                max = mid;
            } else {
                min = mid;
            }
            if (max - min <= ERROR && v) {

                found = true;
                break;
            }
            if (max == min) {
                break;
            }
        }

        if (found) {
            System.out.println(max);
        } else System.out.println(-1);
    }

    static boolean isValid(int[] a, int[] b, int m, int n, double fuel) {
        double total = m + fuel;
        for (int i = 0; i < n; i++) {
            double lost = total;
            lost /= a[i];
            total -= lost;

            lost = total;
            lost /= b[i + 1];
            total -= lost;
            if ((total - m) < 0) {
                return false;
            }
        }
        if ((total - m) < 0) return false;
        return true;
    }
}",603
"public class BigInteger7 {
    public static void main(String[] args) {
        
        Scanner scanner = new Scanner(System.in);
        BigInteger n = scanner.nextBigInteger();
        BigInteger k = scanner.nextBigInteger();
        scanner.nextLine();
        String string = scanner.nextLine();
        char ch[] = string.toCharArray();
        BigInteger ans = BigInteger.ZERO;
        BigInteger number = BigInteger.ZERO;
        Arrays.sort(ch);
        int prev = 0;
        for (int i = 0; BigInteger.valueOf(i).subtract(n).compareTo(BigInteger.ZERO) < 0; i++) {
            if (i == 0) {
                ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                prev = i;
                number = number.add(BigInteger.ONE);
            } else {
                if (ch[i] - ch[prev] > 1) {
                    ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                    prev = i;
                    number = number.add(BigInteger.ONE);
                }
            }
            if (number.equals(k)) {
                break;
            }
        }
        if (number.subtract(k).compareTo(BigInteger.ZERO) < 0) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}","public class BigInteger7 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        BigInteger n = scanner.nextBigInteger();
        BigInteger k = scanner.nextBigInteger();
        scanner.nextLine();
        String string = scanner.nextLine();
        char ch[] = string.toCharArray();
        BigInteger ans = BigInteger.ZERO;
        BigInteger number = BigInteger.ZERO;
        Arrays.sort(ch);
        int prev = 0;
        for (int i = 0; BigInteger.valueOf(i).subtract(n).compareTo(BigInteger.ZERO) < 0; i++) {
            if (i == 0) {
                ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                prev = i;
                number = number.add(BigInteger.ONE);
            } else {
                if (ch[i] - ch[prev] > 1) {
                    ans = ans.add(BigInteger.valueOf(ch[i] - 'a' + 1));
                    prev = i;
                    number = number.add(BigInteger.ONE);
                }
            }
            if (number.equals(k)) {
                break;
            }
        }
        if (number.compareTo(k) < 0) {
            System.out.println(-1);
        } else {
            System.out.println(ans);
        }
    }
}",604
"public class HelloWorld {
	static long SQR(long a) {
		return a * a;
	}
	public static void main(String[] args){
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		String str = sc.next();
		char s[] = str.toCharArray();
		Arrays.parallelSort(s);
		str = new String(s);
		int d = 0;
		int ans = 0;

		for(int i = 0;i < str.length();i++) {
			int x = str.charAt(i) - 'a';
			if(k == 0)continue;
			if(x >= d) {
				ans = ans + x + 1;
				d = x + 2;
				k = k - 1;
			}
		}
		if(k > 0)ans = -1;
		System.out.println(ans);
	}
}","public class HelloWorld {
	static long SQR(long a) {
		return a * a;
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int n = sc.nextInt();
		int k = sc.nextInt();
		String str = sc.next();
		char[] s = str.toCharArray();
		Arrays.parallelSort(s);
		str = new String(s);
		int d = 0;
		int ans = 0;
		for (int i = 0; i < str.length(); i++) {
			int x = str.charAt(i) - 'a';
			if (k == 0) continue;
			if (x >= d) {
				ans = ans + x + 1;
				d = x + 2;
				k = k - 1;
			}
		}
		if (k > 0) ans = -1;
		System.out.println(ans);
	}
}",605
"class
GFG { 








static
int
getMinDiff(
int
arr[], 
int
n, 
int
k) 

{ 

if
(n == 
1
) 

return
0
; 




Arrays.sort(arr); 




int
ans = arr[n-
1
] - arr[
0
]; 




int
small = arr[
0
] + k; 

int
big = arr[n-
1
] - k; 

int
temp = 
0
; 


if
(small > big) 

{ 

temp = small; 

small = big; 

big = temp; 

} 




for
(
int
i = 
1
; i < n-
1
; i ++) 

{ 

int
subtract = arr[i] - k; 

int
add = arr[i] + k; 






if
(subtract >= small || add <= big) 

continue
; 














if
(big - subtract <= add - small) 

small = subtract; 

else

big = add; 

} 


return
Math.min(ans, big - small); 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = {
4
, 
6
}; 

int
n = arr.length; 

int
k = 
10
; 

System.out.println(
""Maximum difference is ""
+ 

getMinDiff(arr, n, k)); 

} 
}","class GFG { static int getMinDiff(int[] arr, int n, int k) { if (n == 1) return 0; Arrays.sort(arr); int ans = arr[n - 1] - arr[0]; int small = arr[0] + k; int big = arr[n - 1] - k; int temp = 0; if (small > big) { temp = small; small = big; big = temp; } for (int i = 1; i < n - 1; i++) { int subtract = arr[i] - k; int add = arr[i] + k; if (subtract >= small || add <= big) continue; if (big - subtract <= add - small) small = subtract; else big = add; } return Math.min(ans, big - small); } public static void main(String[] args) { int arr[] = {4, 6}; int n = arr.length; int k = 10; System.out.println(""Maximum difference is "" + getMinDiff(arr, n, k)); } }",606
"public class Main implements Runnable {
    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;
        private SpaceCharFilter filter;
        private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        public InputReader(InputStream stream) {
            this.stream = stream;
        }
        
        public int read() {
            if (numChars==-1) 
                throw new InputMismatchException();
            
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                }
                catch (IOException e) {
                    throw new InputMismatchException();
                }
                
                if(numChars <= 0)               
                    return -1;
            }
            return buf[curChar++];
        }
     
        public String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            }
            catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
        public int nextInt() {
            int c = read();
            
            while(isSpaceChar(c)) 
                c = read();
            
            int sgn = 1;
            
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            
            int res = 0;
            do {
                if(c<'0'||c>'9') 
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c)); 
            
            return res * sgn;
        }
        
        public long nextLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            while (!isSpaceChar(c));
                return res * sgn;
        }
        
        public double nextDouble() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            double res = 0;
            while (!isSpaceChar(c) && c != '.') {
                if (c == 'e' || c == 'E')
                    return res * Math.pow(10, nextInt());
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            }
            if (c == '.') {
                c = read();
                double m = 1;
                while (!isSpaceChar(c)) {
                    if (c == 'e' || c == 'E')
                        return res * Math.pow(10, nextInt());
                    if (c < '0' || c > '9')
                        throw new InputMismatchException();
                    m /= 10;
                    res += (c - '0') * m;
                    c = read();
                }
            }
            return res * sgn;
        }
        
        public String readString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder res = new StringBuilder();
            do {
                res.appendCodePoint(c);
                c = read();
            } 
            while (!isSpaceChar(c));
            
            return res.toString();
        }
     
        public boolean isSpaceChar(int c) {
            if (filter != null)
                return filter.isSpaceChar(c);
            return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
        }
     
        public String next() {
            return readString();
        }
        
        public interface SpaceCharFilter {
            public boolean isSpaceChar(int ch);
        }
    }
    public static void main(String args[]) throws Exception {
        new Thread(null, new Main(),""Main"",1<<26).start();
    }
    public void run() {
        InputReader sc = new InputReader(System.in);
        PrintWriter w = new PrintWriter(System.out);
             
            int n=sc.nextInt();
            long s=sc.nextLong();
            long arr[]=new long[n];
            int i=0;
            for(i=0;i<n;i++)
            {
                              arr[i]=sc.nextLong();
            }
            Arrays.sort(arr);
            
            
            long count=0;
            if(arr[n/2]==s)
            {
                              
                              w.print(0);
            }
            else
            {
                              int temp=n/2;
                              
                              if(arr[temp]>s)
                              {
                                                while(arr[temp]>s)
                                                {
                                                                  count=count+(arr[temp]-s);
                                                                  temp--;
                                                                  if(temp<0)
                                                                  {
                                                                                    break;
                                                                  }
                                                }
                              }
                              else
                              {
                                               
                                               while(arr[temp]<s)
                                               {
                                                                 
                                                                 count=count+(s-arr[temp]);
                                                                 temp++;
                                                                 if(temp>=n)
                                                                 {
                                                                                   break;
                                                                 }
                                               }
                              }
                              w.print(count);
            }
            
               
               

        w.close();
    }
}","public class Main implements Runnable {static class InputReader {private InputStream stream;private byte[] buf = new byte[1024];private int curChar;private int numChars;private SpaceCharFilter filter;private BufferedReader br = new BufferedReader(new InputStreamReader(System.in));public InputReader(InputStream stream) {this.stream = stream;}public int read() {if (numChars==-1) throw new InputMismatchException();if (curChar >= numChars) {curChar = 0;try {numChars = stream.read(buf);}catch (IOException e) {throw new InputMismatchException();}if(numChars <= 0) return -1;}return buf[curChar++];}public String nextLine() {String str = """";try {str = br.readLine();}catch (IOException e) {e.printStackTrace();}return str;}public int nextInt() {int c = read();while(isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') {sgn = -1;c = read();}int res = 0;do {if(c<'0'||c>'9') throw new InputMismatchException();res *= 10;res += c - '0';c = read();}while (!isSpaceChar(c));return res * sgn;}public long nextLong() {int c = read();while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') {sgn = -1;c = read();}long res = 0;do {if (c < '0' || c > '9') throw new InputMismatchException();res *= 10;res += c - '0';c = read();}while (!isSpaceChar(c));return res * sgn;}public double nextDouble() {int c = read();while (isSpaceChar(c)) c = read();int sgn = 1;if (c == '-') {sgn = -1;c = read();}double res = 0;while (!isSpaceChar(c) && c != '.') {if (c == 'e' || c == 'E') return res * Math.pow(10, nextInt());if (c < '0' || c > '9') throw new InputMismatchException();res *= 10;res += c - '0';c = read();}if (c == '.') {c = read();double m = 1;while (!isSpaceChar(c)) {if (c == 'e' || c == 'E') return res * Math.pow(10, nextInt());if (c < '0' || c > '9') throw new InputMismatchException();m /= 10;res += (c - '0') * m;c = read();}}return res * sgn;}public String readString() {int c = read();while (isSpaceChar(c)) c = read();StringBuilder res = new StringBuilder();do {res.appendCodePoint(c);c = read();}while (!isSpaceChar(c));return res.toString();}public boolean isSpaceChar(int c) {if (filter != null) return filter.isSpaceChar(c);return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;}public String next() {return readString();}public interface SpaceCharFilter {public boolean isSpaceChar(int ch);}}public static void main(String args[]) throws Exception {new Thread(null, new Main(),",607
"public class gambling {
    public static void main(String[] args) throws IOException{
        Reader rd = new Reader();
        PrintWriter out = new PrintWriter(System.out);
        int n = rd.nextInt();
        Integer[] a = new Integer[n];
        Integer[] b = new Integer[n];
        for (int i = 0; i < n; i++) {
            a[i] = rd.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = rd.nextInt();
        }
        solve(n, a, b, out);
        out.flush();
        out.close();
    }

    private static void solve(int n, Integer[] a, Integer[] b, PrintWriter out) {
        Arrays.sort(a, Collections.reverseOrder());
        Arrays.sort(b, Collections.reverseOrder());
        int aP = 0, bP = 0;
        long aScore = 0, bScore = 0;
        for (int i = 0; i < n * 2; i++) {
                if(i % 2 == 0) {
                    if(bP ==  n || (aP < n && a[aP] > b[bP])){
                        aScore += a[aP];
                        aP++;
                    }
                    else bP++;
                }
                else{
                    if(aP == n || (bP < n && b[bP] > a[aP])) {
                        bScore += b[bP];
                        bP++;
                    }
                    else aP++;
                }
        }
        out.println(aScore-bScore);
    }

    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; 
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');

            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }
}","public class gambling_back {
    public static void main(String[] args) throws IOException{
        Reader rd = new Reader();
        PrintWriter out = new PrintWriter(System.out);
        int n = rd.nextInt();
        Integer[] a = new Integer[n];
        Integer[] b = new Integer[n];
        for (int i = 0; i < n; i++) {
            a[i] = rd.nextInt();
        }
        for (int i = 0; i < n; i++) {
            b[i] = rd.nextInt();
        }
        solve(n, a, b, out);
        out.flush();
        out.close();
    }

    private static void solve(int n, Integer[] a, Integer[] b, PrintWriter out) {
        Arrays.sort(a, Collections.reverseOrder());
        Arrays.sort(b, Collections.reverseOrder());
        int aP = 0, bP = 0;
        long aScore = 0, bScore = 0;
        for (int i = 0; i < 2 * n; i++) {
                if(i % 2 == 0) {
                    if(bP == n || (aP < n && a[aP] > b[bP])){
                        aScore += a[aP];
                        aP++;
                    }
                    else bP++;
                }
                else{
                    if(aP == n || (bP < n && b[bP] > a[aP])) {
                        bScore += b[bP];
                        bP++;
                    }
                    else aP++;
                }
        }
        out.println(aScore-bScore);
    }

    static class Reader
    {
        final private int BUFFER_SIZE = 1 << 16;
        private DataInputStream din;
        private byte[] buffer;
        private int bufferPointer, bytesRead;

        public Reader()
        {
            din = new DataInputStream(System.in);
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public Reader(String file_name) throws IOException
        {
            din = new DataInputStream(new FileInputStream(file_name));
            buffer = new byte[BUFFER_SIZE];
            bufferPointer = bytesRead = 0;
        }

        public String readLine() throws IOException
        {
            byte[] buf = new byte[64]; 
            int cnt = 0, c;
            while ((c = read()) != -1)
            {
                if (c == '\n')
                    break;
                buf[cnt++] = (byte) c;
            }
            return new String(buf, 0, cnt);
        }

        public int nextInt() throws IOException
        {
            int ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do
            {
                ret = ret * 10 + c - '0';
            } while ((c = read()) >= '0' && c <= '9');

            if (neg)
                return -ret;
            return ret;
        }

        public long nextLong() throws IOException
        {
            long ret = 0;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();
            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');
            if (neg)
                return -ret;
            return ret;
        }

        public double nextDouble() throws IOException
        {
            double ret = 0, div = 1;
            byte c = read();
            while (c <= ' ')
                c = read();
            boolean neg = (c == '-');
            if (neg)
                c = read();

            do {
                ret = ret * 10 + c - '0';
            }
            while ((c = read()) >= '0' && c <= '9');

            if (c == '.')
            {
                while ((c = read()) >= '0' && c <= '9')
                {
                    ret += (c - '0') / (div *= 10);
                }
            }

            if (neg)
                return -ret;
            return ret;
        }

        private void fillBuffer() throws IOException
        {
            bytesRead = din.read(buffer, bufferPointer = 0, BUFFER_SIZE);
            if (bytesRead == -1)
                buffer[0] = -1;
        }

        private byte read() throws IOException
        {
            if (bufferPointer == bytesRead)
                fillBuffer();
            return buffer[bufferPointer++];
        }

        public void close() throws IOException
        {
            if (din == null)
                return;
            din.close();
        }
    }
}",608
"public class cf {
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;
        
        public FastScanner(Reader in) {
            br = new BufferedReader(in);
        }
        
        public FastScanner() {
            this(new InputStreamReader(System.in));
        }
        
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt() {
            return Integer.parseInt(next());
        }
        
        long nextLong() {
            return Long.parseLong(next());
        }
        
        double nextDouble() {
            return Double.parseDouble(next());
        }
        
        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
        
        int[] nextIntArray(int n) {
            int[] a = new int[n];
            for (int idx = 0; idx < n; idx++) {
                a[idx] = nextInt();
            }
            return a;
        }
    }

    static int mod = 1000000007;
    
	public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        PrintWriter pw = new PrintWriter(System.out); 

        int n=sc.nextInt(), k = sc.nextInt();
        int[] a = new int[n+1];

        for(int i=0;i<n;i++) {
            a[i] = sc.nextInt();
        }
        a[n] = 0;
        Arrays.sort(a);

        for(int i=1;i<=n;i++) {
            if(k == 0) {
                break;
            }
            if(a[i] != a[i-1]) {
                k--;
                pw.println(a[i] - a[i-1]);
            }
        }
        for(int i=0;i<k;i++) pw.println(0);
        pw.close();
    }
}","public class cf {
    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;
        
        public FastScanner(Reader in) {
            br = new BufferedReader(in);
        }
        
        public FastScanner() {
            this(new InputStreamReader(System.in));
        }
        
        String next() {
            while (st == null || !st.hasMoreElements()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }
 
        int nextInt() {
            return Integer.parseInt(next());
        }
        
        long nextLong() {
            return Long.parseLong(next());
        }
        
        double nextDouble() {
            return Double.parseDouble(next());
        }
        
        String nextLine() {
            String str = """";
            try {
                str = br.readLine();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return str;
        }
        
        int[] nextIntArray(int n) {
            int[] a = new int[n];
            for (int idx = 0; idx < n; idx++) {
                a[idx] = nextInt();
            }
            return a;
        }
    }

    static int mod = 1000000007;
    
	public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        PrintWriter pw = new PrintWriter(System.out); 

        int n = sc.nextInt();
        int k = sc.nextInt();
        int[] a = new int[n + 1];

        for (int i = 0; i < n; i++) {
            a[i] = sc.nextInt();
        }
        a[n] = 0;
        Arrays.sort(a);

        for (int i = 1; i <= n; i++) {
            if (k == 0) {
                break;
            }
            if (a[i] != a[i - 1]) {
                k--;
                pw.println(a[i] - a[i - 1]);
            }
        }
        for (int i = 0; i < k; i++) pw.println(0);
        pw.close();
    }
}",609
"public class bOX {

    public static void main(String ars[]){

        Scanner  s = new Scanner(System.in);
        int n = s.nextInt();
        int max = 0;

        Map<Integer,Integer> map = new HashMap<>();

        for(int i=0;i<n;i++){
            int x = s.nextInt();
            if(!map.containsKey(x)){
                map.put(x,1);
                max = Math.max(max,1);
            }
            else{
                map.put(x,map.get(x)+1);
                max = Math.max(max,map.get(x));
            }
        }

        System.out.println(max);
    }

}","public class Box {

    public static void main(String[] ars) {

        Scanner s = new Scanner(System.in);
        int n = s.nextInt();
        int max = 0;

        HashMap<Integer, Integer> map = new HashMap<>();

        for (int i = 0; i < n; i++) {
            int x = s.nextInt();
            if (!map.containsKey(x)) {
                map.put(x, 1);
                max = Math.max(max, 1);
            } else {
                map.put(x, map.get(x) + 1);
                max = Math.max(max, map.get(x));
            }
        }

        System.out.println(max);
    }

}",610
"class
GFG 
{ 



static
int
findMinDiff(
int
[] arr, 
int
n) 

{ 



Arrays.sort(arr); 




int
diff = Integer.MAX_VALUE; 






for
(
int
i=
0
; i<n-
1
; i++) 

if
(arr[i+
1
] - arr[i] < diff) 

diff = arr[i+
1
] - arr[i]; 




return
diff; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = 
new
int
[]{
1
, 
5
, 
3
, 
19
, 
18
, 
25
}; 

System.out.println(
""Minimum difference is ""
+ 

findMinDiff(arr, arr.length)); 


} 
}","class GFG { static int findMinDiff(int[] arr, int n) { Arrays.sort(arr); int diff = Integer.MAX_VALUE; for (int i = 0; i < n - 1; i++) if (arr[i + 1] - arr[i] < diff) diff = arr[i + 1] - arr[i]; return diff; } public static void main(String[] args) { int arr[] = new int[]{ 1, 5, 3, 19, 18, 25 }; System.out.println(""Minimum difference is "" + findMinDiff(arr, arr.length)); } }",611
"public class RadioStation {
	public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
	public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
	public static StringTokenizer st;
	
	public static void main(String[] args) throws IOException {
		int n = nextInt();
		int m = nextInt();
		Map<String, String> map = new HashMap<String, String>();
		for (int i = 0; i < n; i++) {
			String s = nextString();
			String t = nextString();
			map.put(t, s);
		}
		for (int i = 0; i < m; i++) {
			String s = nextString();
			String t = nextString();
			System.out.println(s + "" "" + t + "" #"" + map.get(t.substring(0, t.length()-1)));
		}
	}
	
	public static String nextLine() throws IOException {
		return in.readLine();
	}

	public static String nextString() throws IOException {
		while (st == null || !st.hasMoreTokens())
			st = new StringTokenizer(in.readLine());
		return st.nextToken();
	}

	public static int nextInt() throws IOException {
		return Integer.parseInt(nextString());
	}

	public static long nextLong() throws IOException {
		return Long.parseLong(nextString());
	}

	public static int[] intArray(int n) throws IOException {
		int[] a = new int[n];
		for (int i = 0; i < n; i++)
			a[i] = nextInt();
		return a;
	}

	public static int[][] intArray(int n, int m) throws IOException {
		int[][] a = new int[n][m];
		for (int i = 0; i < n; i++)
			for (int j = 0; j < m; j++)
				a[i][j] = nextInt();
		return a;
	}

	public static long[] longArray(int n) throws IOException {
		long[] a = new long[n];
		for (int i = 0; i < n; i++)
			a[i] = nextLong();
		return a;
	}
}","public class RadioStation {
    public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
    public static PrintWriter out = new PrintWriter(new BufferedOutputStream(System.out));
    public static StringTokenizer st;
    
    public static void main(String[] args) throws IOException {
        int n = nextInt();
        int m = nextInt();
        Map<String, String> map = new HashMap<String, String>();
        for (int i = 0; i < n; i++) {
            String s = nextString();
            String t = nextString();
            map.put(t, s);
        }
        for (int i = 0; i < m; i++) {
            String s = nextString();
            String t = nextString();
            System.out.println(s + "" "" + t + "" #"" + map.get(t.substring(0, t.length()-1)));
        }
    }
    
    public static String nextLine() throws IOException {
        return in.readLine();
    }

    public static String nextString() throws IOException {
        while (st == null || !st.hasMoreTokens())
            st = new StringTokenizer(in.readLine());
        return st.nextToken();
    }

    public static int nextInt() throws IOException {
        return Integer.parseInt(nextString());
    }

    public static long nextLong() throws IOException {
        return Long.parseLong(nextString());
    }

    public static int[] intArray(int n) throws IOException {
        int[] a = new int[n];
        for (int i = 0; i < n; i++)
            a[i] = nextInt();
        return a;
    }

    public static int[][] intArray(int n, int m) throws IOException {
        int[][] a = new int[n][m];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                a[i][j] = nextInt();
        return a;
    }

    public static long[] longArray(int n) throws IOException {
        long[] a = new long[n];
        for (int i = 0; i < n; i++)
            a[i] = nextLong();
        return a;
    }
}",612
"class
AlternativeString 
{ 



static
void
alternateSort(
int
arr[], 
int
n) 

{ 

Arrays.sort(arr); 










int
i = 
0
, j = n-
1
; 

while
(i < j) { 

System.out.print(arr[j--] + 
"" ""
); 

System.out.print(arr[i++] + 
"" ""
); 

} 






if
(n % 
2
!= 
0
) 

System.out.print(arr[i]); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
12
, 
4
, 
6
, 
7
, 
10
}; 

int
n = arr.length; 

alternateSort(arr, n); 

} 
}","class AlternativeString {

    static void alternateSort(int[] arr, int n) {
        Arrays.sort(arr);
        int i = 0, j = n-1;
        while (i < j) {
            System.out.print(arr[j--] + "" "");
            System.out.print(arr[i++] + "" "");
        }
        if (n % 2 != 0)
            System.out.print(arr[i]);
    }

    public static void main(String[] args) {
        int arr[] = {1, 12, 4, 6, 7, 10};
        int n = arr.length;
        alternateSort(arr, n);
    }
}",613
"public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int height = in.nextInt();
            int width = in.nextInt();
            int n1 = in.nextInt();
            int n2 = in.nextInt();
            int v = in.nextInt();
            int[] p1 = new int[n1];
            for (int i = 0; i < n1; ++i) p1[i] = in.nextInt();
            int[] p2 = new int[n2];
            for (int i = 0; i < n2; ++i) p2[i] = in.nextInt();
            int nq = in.nextInt();
            for (int iq = 0; iq < nq; ++iq) {
                int r1 = in.nextInt();
                int c1 = in.nextInt();
                int r2 = in.nextInt();
                int c2 = in.nextInt();
                if (r1 == r2) {
                    out.println(Math.abs(c1 - c2));
                } else {
                    long res = Long.MAX_VALUE;
                    int pos = Arrays.binarySearch(p1, c1);
                    if (pos < 0) pos = -(pos + 1);
                    if (pos >= 0 && pos < p1.length) {
                        res = Math.min(res, Math.abs(p1[pos] - c1) + Math.abs(p1[pos] - c2) + Math.abs(r1 - r2));
                    }
                    --pos;
                    if (pos >= 0 && pos < p1.length) {
                        res = Math.min(res, Math.abs(p1[pos] - c1) + Math.abs(p1[pos] - c2) + Math.abs(r1 - r2));
                    }
                    pos = Arrays.binarySearch(p2, c1);
                    if (pos < 0) pos = -(pos + 1);
                    if (pos >= 0 && pos < p2.length) {
                        res = Math.min(res, Math.abs(p2[pos] - c1) + Math.abs(p2[pos] - c2) + (Math.abs(r1 - r2) + v - 1) / v);
                    }
                    --pos;
                    if (pos >= 0 && pos < p2.length) {
                        res = Math.min(res, Math.abs(p2[pos] - c1) + Math.abs(p2[pos] - c2) + (Math.abs(r1 - r2) + v - 1) / v);
                    }
                    out.println(res);
                }
            }
        }

    }

    static class InputReader {
        public BufferedReader reader;
        public StringTokenizer tokenizer;

        public InputReader(InputStream stream) {
            reader = new BufferedReader(new InputStreamReader(stream), 32768);
            tokenizer = null;
        }

        public String next() {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                try {
                    tokenizer = new StringTokenizer(reader.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return tokenizer.nextToken();
        }

        public int nextInt() {
            return Integer.parseInt(next());
        }

    }
}","public class Main {
    public static void main(String[] args) {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        TaskA solver = new TaskA();
        solver.solve(1, in, out);
        out.close();
    }

    static class TaskA {
        public void solve(int testNumber, InputReader in, PrintWriter out) {
            int height = in.nextInt();
            int width = in.nextInt();
            int n1 = in.nextInt();
            int n2 = in.nextInt();
            int v = in.nextInt();
            int[] p1 = new int[n1];
            for (int i = 0; i < n1; ++i) p1[i] = in.nextInt();
            int[] p2 = new int[n2];
            for (int i = 0; i < n2; ++i) p2[i] = in.nextInt();
            int nq = in.nextInt();
            for (int iq = 0; iq < nq; ++iq) {
                int r1 = in.nextInt();
                int c1 = in.nextInt();
                int r2 = in.nextInt();
                int c2 = in.nextInt();
                if (r1 == r2) {
                    out.println(Math.abs(c1 - c2));
                } else {
                    long res = Long.MAX_VALUE;
                    int pos = Arrays.binarySearch(p1, c1);
                    if (pos < 0) pos = -(pos + 1);
                    if (pos >= 0 && pos < p1.length) {
                        res = Math.min(res, Math.abs(p1[pos] - c1) + Math.abs(p1[pos] - c2) + Math.abs(r1 - r2));
                    }
                    --pos;
                    if (pos >= 0 && pos < p1.length) {
                        res = Math.min(res, Math.abs(p1[pos] - c1) + Math.abs(p1[pos] - c2) + Math.abs(r1 - r2));
                    }
                    pos = Arrays.binarySearch(p2, c1);
                    if (pos < 0) pos = -(pos + 1);
                    if (pos >= 0 && pos < p2.length) {
                        res = Math.min(res, Math.abs(p2[pos] - c1) + Math.abs(p2[pos] - c2) + (Math.abs(r1 - r2) + v - 1) / v);
                    }
                    --pos;
                    if (pos >= 0 && pos < p2.length) {
                        res = Math.min(res, Math.abs(p2[pos] - c1) + Math.abs(p2[pos] - c2) + (Math.abs(r1 - r2) + v - 1) / v);
                    }
                    out.println(res);
                }
            }
        }

    }
}",614
"class
GFG 
{ 






static
void
rearrange(
int
[] arr, 
int
n, 
int
x) 

{ 

TreeMap<Integer, ArrayList<Integer>> m = 
new
TreeMap<>(); 






for
(
int
i = 
0
; i < n; i++) 

{ 

int
diff = Math.abs(x - arr[i]); 

if
(m.containsKey(diff)) 

{ 

ArrayList<Integer> al = m.get(diff); 

al.add(arr[i]); 

m.put(diff, al); 

} 

else

{ 

ArrayList<Integer> al = 
new
ArrayList<>(); 

al.add(arr[i]); 

m.put(diff,al); 

} 

} 




int
index = 
0
; 

for
(Map.Entry entry : m.entrySet()) 

{ 

ArrayList<Integer> al = m.get(entry.getKey()); 

for
(
int
i = 
0
; i < al.size(); i++) 

arr[index++] = al.get(i); 

} 

} 




static
void
printArray(
int
[] arr, 
int
n) 

{ 

for
(
int
i = 
0
; i < n; i++) 

System.out.print(arr[i] + 
"" ""
); 

} 




public
static
void
main(String args[]) 

{ 

int
[] arr = {
10
, 
5
, 
3
, 
9
,
2
}; 

int
n = arr.length; 

int
x = 
7
; 

rearrange(arr, n, x); 

printArray(arr, n); 

} 
}","class GFG { static void rearrange(int[] arr, int n, int x) { TreeMap<Integer, ArrayList<Integer>> m = new TreeMap<>(); for(int i = 0; i < n; i++) { int diff = Math.abs(x - arr[i]); if(m.containsKey(diff)) { ArrayList<Integer> al = m.get(diff); al.add(arr[i]); m.put(diff, al); } else { ArrayList<Integer> al = new ArrayList<>(); al.add(arr[i]); m.put(diff, al); } } int index = 0; for(Map.Entry entry : m.entrySet()) { ArrayList<Integer> al = m.get(entry.getKey()); for(int i = 0; i < al.size(); i++) arr[index++] = al.get(i); } } static void printArray(int[] arr, int n) { for(int i = 0; i < n; i++) System.out.print(arr[i] + ",615
"public class LessorEqual_CodeForces {
	
	
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String temp[]=br.readLine().split("" "");
		int n = Integer.parseInt(temp[0]);
		int k = Integer.parseInt(temp[1]);
		temp=br.readLine().split("" "");
		int [] num = new int[n];

		PriorityQueue<Integer>pq = new PriorityQueue<Integer>();  
		for(int i=0;i<n;i++){
			num[i]=Integer.parseInt(temp[i]);
			pq.add(num[i]);
		
						
		}
		if(k==0){
			int y= pq.poll();
			if(y==1){
				System.out.println(-1);
				System.exit(0);
			}
			else 
				{
				System.out.println(y-1);
				System.exit(0);
			}
				
		}
		
		
		int count=0;
		int max=0;
		while (!pq.isEmpty()){
			int x = pq.poll();
			while(count<=k&&!pq.isEmpty()&& pq.peek()==x){
				pq.poll();
				count++;
			}
		
			count++;
			max=x;
			if(count==k)
				break;
		}
		
		
		if(count==k){
			if(!pq.contains(max+1)&& max<1e9)
				System.out.println(max+1);
			else 
				System.out.println(max);
			}
		else 
			System.out.println(-1);
 
		
	}

}","public class LessorEqual_CodeForces {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String temp[]=br.readLine().split("" "");
        int n = Integer.parseInt(temp[0]);
        int k = Integer.parseInt(temp[1]);
        temp=br.readLine().split("" "");
        int [] num = new int[n];

        PriorityQueue<Integer>pq = new PriorityQueue<Integer>();
        for(int i=0;i<n;i++){
            num[i]=Integer.parseInt(temp[i]);
            pq.add(num[i]);

        }
        if(k==0){
            int y= pq.poll();
            if(y==1){
                System.out.println(-1);
                System.exit(0);
            }
            else 
                {
                System.out.println(y-1);
                System.exit(0);
            }

        }

        int count=0;
        int max=0;
        while (!pq.isEmpty()){
            int x = pq.poll();
            while(count<=k&&!pq.isEmpty()&& pq.peek()==x){
                pq.poll();
                count++;
            }

            count++;
            max=x;
            if(count==k)
                break;
        }

        if(count==k){
            if(!pq.contains(max+1)&& max<1e9)
                System.out.println(max+1);
            else 
                System.out.println(max);
            }
        else 
            System.out.println(-1);

    }

}",616
"public class JavaApplication7 {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n= sc.nextInt();
        int m=sc.nextInt();
        long sum=0;
        long []d=new long[n];
        long[]ds=new long[n];
        for(int i =0;i<n;i++){
            d[i]=sc.nextLong();
            sum+=d[i];
            ds[i]=sum;
        }
        long[]le=new long[m];
        for(int i =0;i<m;i++){
            le[i]=sc.nextLong();
        }
        int l=0;
        int h=n;
        int k=(h-l)/2;
        k+=l;
        for(int i=0;i<m;i++){
        l=0;
        h=n;
        k=(h-l)/2;
        k+=l;
            for(;l<=h;){
                k=(h-l)/2;
                k+=l;
                if(ds[k]<le[i]){
                    l=k+1;
                }
                else if(ds[k]==le[i]){break;}
                else{
                    h=k-1;
                }
            }
            
            if(ds[k]<le[i]){
                    k++;
                }
          if(k==0){
              System.out.println((int)(k+1)+"" ""+le[i]);
           }
            else{
                System.out.println((int)(k+1)+"" ""+(long)(le[i]-ds[k-1]));
           }
        }
        
    }
    
}","public class JavaApplication7 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        long sum = 0;
        long[] d = new long[n];
        long[] ds = new long[n];
        for (int i = 0; i < n; i++) {
            d[i] = sc.nextLong();
            sum += d[i];
            ds[i] = sum;
        }
        long[] le = new long[m];
        for (int i = 0; i < m; i++) {
            le[i] = sc.nextLong();
        }
        int l = 0;
        int h = n;
        int k = (h - l) / 2;
        k += l;
        for (int i = 0; i < m; i++) {
            l = 0;
            h = n;
            k = (h - l) / 2;
            k += l;
            for (; l <= h; ) {
                k = (h - l) / 2;
                k += l;
                if (ds[k] < le[i]) {
                    l = k + 1;
                } else if (ds[k] == le[i]) {
                    break;
                } else {
                    h = k - 1;
                }
            }
            if (ds[k] < le[i]) {
                k++;
            }
            if (k == 0) {
                System.out.println((int) (k + 1) + "" "" + le[i]);
            } else {
                System.out.println((int) (k + 1) + "" "" + (long) (le[i] - ds[k - 1]));
            }
        }
    }
}",617
"public final class Codeforces
{	
	public static void main (String[] args) throws java.lang.Exception
	{
	    Scanner sc=new Scanner(System.in);
			int n=sc.nextInt();
			ArrayList<Integer> list=new ArrayList<Integer>();
			for(int i=0;i<n;i++){
				int temp=sc.nextInt();
				list.add(temp);
			}
			Collections.sort(list);
			if(n%2==0)
			System.out.println(list.get((n/2)-1));
			else
			System.out.println(list.get(n/2));
	}
}","public class CodeforcesFinal {
    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        List<Integer> list = new ArrayList<Integer>();
        for (int i = 0; i < n; i++) {
            int temp = sc.nextInt();
            list.add(temp);
        }
        Collections.sort(list);
        if (n % 2 == 0) {
            System.out.println(list.get((n / 2) - 1));
        } else {
            System.out.println(list.get(n / 2));
        }
    }
}",618
"public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int[] p = new int[n / 2];
		for (int i = 0; i < p.length; i++) {
			p[i] = sc.nextInt();
		}
		System.out.println(solve(p));

		sc.close();
	}

	static int solve(int[] p) {
		return Math.min(computeMoveNum(p, 1), computeMoveNum(p, 2));
	}

	static int computeMoveNum(int[] p, int offset) {
		Arrays.sort(p);

		return IntStream.range(0, p.length).map(i -> Math.abs(p[i] - (i * 2 + offset))).sum();
	}
}","public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);

		int n = sc.nextInt();
		int[] p = new int[n / 2];
		for (int i = 0; i < p.length; i++) {
			p[i] = sc.nextInt();
		}
		System.out.println(solve(p));

		sc.close();
	}

	static int solve(int[] p) {
		int total = 0;
		Arrays.sort(p);

		for (int i = 0; i < p.length; i++) {
			total += Math.abs(p[i] - (i * 2 + 1));
		}

		int total2 = 0;
		Arrays.sort(p);

		for (int i = 0; i < p.length; i++) {
			total2 += Math.abs(p[i] - (i * 2 + 2));
		}

		return Math.min(total, total2);
	}
}",619
"public class Sol {
	public static void main(String[] args) {
		MyScanner sc = new MyScanner();
		out = new PrintWriter(new BufferedOutputStream(System.out));
		int n = sc.nextInt();
		int k = sc.nextInt();
		int l = sc.nextInt();
		Integer[] a = new Integer[n*k];
		for(int i = 0; i < n*k; i++){
			a[i] = sc.nextInt();
		}
		Arrays.sort(a);
		if (a[n - 1] - a[0] > l) {
			out.println(0);
		} else {
			int maxPos = n*k - 1;
			for (int i = 0; i < n*k; i++) {
				if (a[i] - a[0] > l) {
					maxPos = i-1;
					break;
				}
			}
			long o = a[0];
			int s = 0;
			int t = 1;
			for (int i = 1; i <= maxPos; i++) {
				
				if (s < k - 1 && maxPos-i+1 > n-t) {
					
					s++;
				} else {
					
					s = 0;
					t++;
					o += a[i];
				}
			}
			out.println(o);
		}
		out.close();
	}

	
	public static PrintWriter out;

	
	public static class MyScanner {
		BufferedReader br;
		StringTokenizer st;

		public MyScanner() {
			br = new BufferedReader(new InputStreamReader(System.in));
		}

		String next() {
			while (st == null || !st.hasMoreElements()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		String nextLine() {
			String str = """";
			try {
				str = br.readLine();
			} catch (IOException e) {
				e.printStackTrace();
			}
			return str;
		}

	}
	
}",ERROR,620
"public class MicroWorld {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        Integer[] a = new Integer[n];

        st = new StringTokenizer(br.readLine());
        for(int i=0; i<n; i++){
            a[i] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(a);

        int count = 1;
        int remaining = n;
        for(int i=0; i<n-1; i++){
            if((int)a[i] == (int)a[i+1]){
                count++;
                continue;
            }
            if((a[i] + k) >= a[i+1]){
                remaining -= count;
            }
            count = 1;
        }
        System.out.println(remaining);
    }
}","public class MicroWorld {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int n = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        Integer[] a = new Integer[n];

        st = new StringTokenizer(br.readLine());
        for (int i = 0; i < n; i++) {
            a[i] = Integer.parseInt(st.nextToken());
        }

        Arrays.sort(a);

        int count = 1;
        int remaining = n;
        for (int i = 0; i < n - 1; i++) {
            if ((int) a[i] == (int) a[i + 1]) {
                count++;
                continue;
            }
            if ((a[i] + k) >= a[i + 1]) {
                remaining -= count;
            }
            count = 1;
        }
        System.out.println(remaining);
    }
}",621
"public class gr1 {

    static class InputReader {
        public BufferedReader br;
        public StringTokenizer token;
        public InputReader(InputStream stream)
        {
            br=new BufferedReader(new InputStreamReader(stream),32768);
            token=null;
        }

        public String next()
        {
            while(token==null || !token.hasMoreTokens())
            {
                try
                {
                    token=new StringTokenizer(br.readLine());
                }
                catch(IOException e)
                {
                    throw new RuntimeException(e);
                }
            }
            return token.nextToken();
        }

        public int nextInt()
        {
            return Integer.parseInt(next());
        }

        public long nextLong()
        {
            return Long.parseLong(next());
        }

        public double nextDouble()
        {
            return Double.parseDouble(next());
        }
    }

    static class card{
        long a;
        int cnt;
        int i;
        public card(long a,int cnt,int i)
        {
            this.a=a;
            this.cnt=cnt;
            this.i=i;
        }
    }

    static class ascend implements Comparator<pair>
    {
        public int compare(pair o1,pair o2)
        {
            if(o1.b!=o2.b)
                return (int)(o1.b-o2.b);
            else 
                return (int)(o1.a-o2.a);
        }
    }

    

    static class extra
    {

        static void shuffle(long a[])
        {
            List<Long> l=new ArrayList<>();
            for(int i=0;i<a.length;i++)
                l.add(a[i]);
            Collections.shuffle(l);
            for(int i=0;i<a.length;i++)
                a[i]=l.get(i);
        }

        static long gcd(long a,long b)
        {
            if(b==0)
                return a;
            else
                return gcd(b,a%b);
        }

        static boolean valid(int i,int j,int r,int c)
        {
            if(i>=0 && i<r && j>=0 && j<c)
                return true;
            else
                return false;
        }

        static boolean v[]=new boolean[100001];
        static List<Integer> l=new ArrayList<>();
        static int t;
        static void seive()
        {
            for(int i=2;i<100001;i++)
            {
                if(!v[i])
                {
                    t++;
                    l.add(i);
                    for(int j=2*i;j<100001;j+=i)
                        v[j]=true;
                }
            }
        }

        static int binary(pair a[],int val,int n)
        {
            int mid=0,l=0,r=n-1,ans=0;
            while(l<=r)
            {
                mid=(l+r)>>1;
                if(a[mid].a==val)
                {
                    r=mid-1;
                    ans=mid;
                }
                else if(a[mid].a>val)
                    r=mid-1;
                else
                {
                    l=mid+1;
                    ans=l;
                }
            }
            return (ans);
        }
    }

    static class pair{
        long a;
        int b;
        public pair(long a,int n)
        {
            this.a=a;
            this.b=n;
        }
    }
    static InputReader sc=new InputReader(System.in);
    static PrintWriter out=new PrintWriter(System.out);
    public static void main(String[] args) {
        solver s=new solver();
        int t=1;
        while(t>0)
        {
            s.solve();
            t--;
        }
    }
    static class solver
    {
        void solve()
        {
            int n=sc.nextInt();
            int a[]=new int[n];
            int sum=0;
            for(int i=0;i<n;i++)
            {
                a[i]=sc.nextInt();
                sum+=a[i];
            }
            Arrays.sort(a);
            int k=(int)Math.round(4.5*n)-sum;
           
            if(k<=0)
            {
                System.out.println(0);
            }
            else
            {
                int p=0,ans=0;
                for(int i=0;i<n;i++)
                {
                    if(a[i]!=5)
                    {
                        p+=5-a[i];
                        if(p>=k){
                            ans++;
                            System.out.println(ans);
                            break;
                        }
                        ans++;
                    }
                }
            }
        }
    }
}","public class gr1 {

    class InputReader {
        BufferedReader br;
        StringTokenizer token;

        InputReader(InputStream stream) {
            br = new BufferedReader(new InputStreamReader(stream), 32768);
            token = null;
        }

        String next() {
            while (token == null || !token.hasMoreTokens()) {
                try {
                    token = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
            return token.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }

        long nextLong() {
            return Long.parseLong(next());
        }

        double nextDouble() {
            return Double.parseDouble(next());
        }
    }

    class card {
        long a;
        int cnt;
        int i;

        card(long a, int cnt, int i) {
            this.a = a;
            this.cnt = cnt;
            this.i = i;
        }
    }

    class ascend implements Comparator<pair> {
        public int compare(pair o1, pair o2) {
            if (o1.b != o2.b)
                return (int) (o1.b - o2.b);
            else
                return (int) (o1.a - o2.a);
        }
    }

    class extra {

        void shuffle(long a[]) {
            List<Long> l = new ArrayList<>();
            for (int i = 0; i < a.length; i++)
                l.add(a[i]);
            Collections.shuffle(l);
            for (int i = 0; i < a.length; i++)
                a[i] = l.get(i);
        }

        long gcd(long a, long b) {
            if (b == 0)
                return a;
            else
                return gcd(b, a % b);
        }

        boolean valid(int i, int j, int r, int c) {
            if (i >= 0 && i < r && j >= 0 && j < c)
                return true;
            else
                return false;
        }

        boolean v[] = new boolean[100001];
        List<Integer> l = new ArrayList<>();
        int t;

        void seive() {
            for (int i = 2; i < 100001; i++) {
                if (!v[i]) {
                    t++;
                    l.add(i);
                    for (int j = 2 * i; j < 100001; j += i)
                        v[j] = true;
                }
            }
        }

        int binary(pair a[], int val, int n) {
            int mid = 0, l = 0, r = n - 1, ans = 0;
            while (l <= r) {
                mid = (l + r) >> 1;
                if (a[mid].a == val) {
                    r = mid - 1;
                    ans = mid;
                } else if (a[mid].a > val)
                    r = mid - 1;
                else {
                    l = mid + 1;
                    ans = l;
                }
            }
            return (ans);
        }
    }

    class pair {
        long a;
        int b;

        pair(long a, int n) {
            this.a = a;
            this.b = n;
        }
    }

    InputReader sc = new InputReader(System.in);
    PrintWriter out = new PrintWriter(System.out);

    public static void main(String[] args) {
        solver s = new solver();
        int t = 1;
        while (t > 0) {
            s.solve();
            t--;
        }
    }

    class solver {
        void solve() {
            int n = sc.nextInt();
            int a[] = new int[n];
            int sum = 0;
            for (int i = 0; i < n; i++) {
                a[i] = sc.nextInt();
                sum += a[i];
            }
            Arrays.sort(a);
            int k = (int) Math.round(4.5 * n) - sum;

            if (k <= 0) {
                System.out.println(0);
            } else {
                int p = 0, ans = 0;
                for (int i = 0; i < n; i++) {
                    if (a[i] != 5) {
                        p += 5 - a[i];
                        if (p >= k) {
                            ans++;
                            System.out.println(ans);
                            break;
                        }
                        ans++;
                    }
                }
            }
        }
    }
}",622
"class
Test { 




static
int
mergeSort(
int
arr[], 
int
array_size) 

{ 

int
temp[] = 
new
int
[array_size]; 

return
_mergeSort(arr, temp, 
0
, array_size - 
1
); 

} 




static
int
_mergeSort(
int
arr[], 
int
temp[], 
int
left, 
int
right) 

{ 

int
mid, inv_count = 
0
; 

if
(right > left) { 



mid = (right + left) / 
2
; 




inv_count = _mergeSort(arr, temp, left, mid); 

inv_count += _mergeSort(arr, temp, mid + 
1
, right); 




inv_count += merge(arr, temp, left, mid + 
1
, right); 

} 

return
inv_count; 

} 




static
int
merge(
int
arr[], 
int
temp[], 
int
left, 
int
mid, 
int
right) 

{ 

int
i, j, k; 

int
inv_count = 
0
; 


i = left; 


j = mid; 


k = left; 


while
((i <= mid - 
1
) && (j <= right)) { 

if
(arr[i] <= arr[j]) { 

temp[k++] = arr[i++]; 

} 

else
{ 

temp[k++] = arr[j++]; 




inv_count = inv_count + (mid - i); 

} 

} 




while
(i <= mid - 
1
) 

temp[k++] = arr[i++]; 




while
(j <= right) 

temp[k++] = arr[j++]; 




for
(i = left; i <= right; i++) 

arr[i] = temp[i]; 


return
inv_count; 

} 




public
static
void
main(String[] args) 

{ 

int
arr[] = 
new
int
[] { 
1
, 
20
, 
6
, 
4
, 
5
}; 

System.out.println(
""Number of inversions are ""
+ mergeSort(arr, 
5
)); 

} 
}","class Test {

static int mergeSort(int arr[], int array_size) {
int temp[] = new int[array_size];
return _mergeSort(arr, temp, 0, array_size - 1);
}

static int _mergeSort(int arr[], int temp[], int left, int right) {
int mid, inv_count = 0;
if (right > left) {
mid = (right + left) / 2;
inv_count = _mergeSort(arr, temp, left, mid);
inv_count += _mergeSort(arr, temp, mid + 1, right);
inv_count += merge(arr, temp, left, mid + 1, right);
}
return inv_count;
}

static int merge(int arr[], int temp[], int left, int mid, int right) {
int i, j, k;
int inv_count = 0;
i = left;
j = mid;
k = left;
while ((i <= mid - 1) && (j <= right)) {
if (arr[i] <= arr[j]) {
temp[k++] = arr[i++];
}
else {
temp[k++] = arr[j++];
inv_count = inv_count + (mid - i);
}
}
while (i <= mid - 1) {
temp[k++] = arr[i++];
}
while (j <= right) {
temp[k++] = arr[j++];
}
for (i = left; i <= right; i++) {
arr[i] = temp[i];
}
return inv_count;
}

public static void main(String[] args) {
int arr[] = new int[] {1, 20, 6, 4, 5};
System.out.println(""Number of inversions are "" + mergeSort(arr, 5));
}
}",623
"class
Main 
{ 

static
void
minAbsSumPair(
int
arr[], 
int
n) 

{ 



int
sum, min_sum = 
999999
; 




int
l = 
0
, r = n-
1
; 




int
min_l = l, min_r = n-
1
; 




if
(n < 
2
) 

{ 

System.out.println(
""Invalid Input""
); 

return
; 

} 




sort(arr, l, r); 


while
(l < r) 

{ 

sum = arr[l] + arr[r]; 




if
(Math.abs(sum) < Math.abs(min_sum)) 

{ 

min_sum = sum; 

min_l = l; 

min_r = r; 

} 

if
(sum < 
0
) 

l++; 

else

r--; 

} 



System.out.println(
"" The two elements whose ""
+ 

""sum is minimum are ""
+ 

arr[min_l]+ 
"" and ""
+arr[min_r]); 

} 




public
static
void
main (String[] args) 

{ 

int
arr[] = {
1
, 
60
, -
10
, 
70
, -
80
, 
85
}; 

int
n = arr.length; 

minAbsSumPair(arr, n); 

} 







static
int
partition(
int
arr[], 
int
low, 
int
high) 

{ 

int
pivot = arr[high]; 

int
i = (low-
1
); 


for
(
int
j=low; j<high; j++) 

{ 





if
(arr[j] <= pivot) 

{ 

i++; 




int
temp = arr[i]; 

arr[i] = arr[j]; 

arr[j] = temp; 

} 

} 




int
temp = arr[i+
1
]; 

arr[i+
1
] = arr[high]; 

arr[high] = temp; 


return
i+
1
; 

} 





static
void
sort(
int
arr[], 
int
low, 
int
high) 

{ 

if
(low < high) 

{ 



int
pi = partition(arr, low, high); 






sort(arr, low, pi-
1
); 

sort(arr, pi+
1
, high); 

} 

} 
}","class Main { static void minAbsSumPair(int arr[], int n) { int sum, min_sum = 999999; int l = 0, r = n-1; int min_l = l, min_r = n-1; if (n < 2) { System.out.println(""Invalid Input""); return; } sort(arr, l, r); while (l < r) { sum = arr[l] + arr[r]; if (Math.abs(sum) < Math.abs(min_sum)) { min_sum = sum; min_l = l; min_r = r; } if (sum < 0) l++; else r--; } System.out.println("" The two elements whose ""+ ""sum is minimum are ""+ arr[min_l]+ "" and ""+ arr[min_r]); } public static void main (String[] args) { int arr[] = {1, 60, -10, 70, -80, 85}; int n = arr.length; minAbsSumPair(arr, n); } static int partition(int arr[], int low, int high) { int pivot = arr[high]; int i = (low-1); for (int j=low; j<high; j++) { if (arr[j] <= pivot) { i++; int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } } int temp = arr[i+1]; arr[i+1] = arr[high]; arr[high] = temp; return i+1; } static void sort(int arr[], int low, int high) { if (low < high) { int pi = partition(arr, low, high); sort(arr, low, pi-1); sort(arr, pi+1, high); } } }",624
"public class Test {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String[] line = reader.readLine().split("" "");
        int w = Integer.valueOf(line[0]);
        int h = Integer.valueOf(line[1]);
        int n = Integer.valueOf(line[2]);

        Request[] requests = new Request[n];

        for (int i = 0; i < n; i++) {
            line = reader.readLine().split("" "");
            requests[i] = new Request(line[0], Integer.valueOf(line[1]));
        }

        for (long e : solve(h, w, requests))
            System.out.println(e);









    }

    private static Request[] generate(int w, int h, int n) {
        Request[] requests = new Request[n];
        Random rnd = new Random();

        for (int i = 0; i < n; i++) {
            requests[i] = rnd.nextBoolean() ? new Request(""V"", rnd.nextInt(w)) : new Request(""H"", rnd.nextInt(h));
        }

        return requests;
    }

    private static long[] solve(int h, int w, Request[] requests) {
        TreeSet<Integer> hTree = new TreeSet<>();
        TreeSet<Integer> wTree = new TreeSet<>();

        Queue<CoordinateWithSize> hHeap = new PriorityQueue<>();
        Queue<CoordinateWithSize> wHeap = new PriorityQueue<>();

        hTree.add(0);
        hTree.add(h);
        wTree.add(0);
        wTree.add(w);

        hHeap.add(new CoordinateWithSize(0, h));
        wHeap.add(new CoordinateWithSize(0, w));

        long[] res = new long[requests.length];
        for (int i = 0; i < requests.length; i++) {
            Request request = requests[i];

            switch (request.type) {
                case ""H"": {
                    if (!hTree.contains(request.coordinate)) {
                        int higher = hTree.higher(request.coordinate);
                        int lower = hTree.lower(request.coordinate);

                        hHeap.add(new CoordinateWithSize(lower, request.coordinate - lower));
                        hHeap.add(new CoordinateWithSize(request.coordinate, higher - request.coordinate));

                        hTree.add(request.coordinate);
                    }

                    break;
                }
                case ""V"": {
                    if (!wTree.contains(request.coordinate)) {
                        int higher = wTree.higher(request.coordinate);
                        int lower = wTree.lower(request.coordinate);

                        wHeap.add(new CoordinateWithSize(lower, request.coordinate - lower));
                        wHeap.add(new CoordinateWithSize(request.coordinate, higher - request.coordinate));

                        wTree.add(request.coordinate);
                    }

                    break;
                }
                default:
                    throw new IllegalStateException(""Unknown type [type="" + request.type + ""]"");
            }

            while (true) {
                CoordinateWithSize c = hHeap.peek();
                if (hTree.higher(c.coordinate) - c.coordinate == c.size)
                    break;
                hHeap.remove();
            }

            while (true) {
                CoordinateWithSize c = wHeap.peek();
                if (wTree.higher(c.coordinate) - c.coordinate == c.size)
                    break;
                wHeap.remove();
            }

            res[i] = 1L * hHeap.peek().size * wHeap.peek().size;
        }

        return res;
    }

    private static class CoordinateWithSize implements Comparable<CoordinateWithSize> {

        private final int coordinate;

        private final int size;

        public CoordinateWithSize(int coordinate, int size) {
            this.coordinate = coordinate;
            this.size = size;
        }

        @Override public int compareTo(CoordinateWithSize o) {
            return Integer.compare(o.size, size);
        }
    }

    private static class Request {

        private final String type;

        private final int coordinate;

        public Request(String type, int coordinate) {
            this.type = type;
            this.coordinate = coordinate;
        }
    }
}","public class Test {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        String[] line = reader.readLine().split("" "");
        int w = Integer.valueOf(line[0]);
        int h = Integer.valueOf(line[1]);
        int n = Integer.valueOf(line[2]);

        Request[] requests = generate(w, h, n);

        for (Request request : requests) {
            System.out.println(request.type + "" "" + request.coordinate);
        }
    }

    private static Request[] generate(int w, int h, int n) {
        Request[] requests = new Request[n];
        Random rnd = new Random();

        for (int i = 0; i < n; i++) {
            requests[i] = rnd.nextBoolean() ? new Request(""V"", rnd.nextInt(w)) : new Request(""H"", rnd.nextInt(h));
        }

        return requests;
    }

    private static class Request {

        private final String type;

        private final int coordinate;

        public Request(String type, int coordinate) {
            this.type = type;
            this.coordinate = coordinate;
        }
    }
}",625
"public class Main {
    public static void main(String[] args) throws IOException {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        InputReader.OutputWriter out = new InputReader.OutputWriter(outputStream);


        int n = in.nextInt();
        int s = in.nextInt();
        Lift [] lifts = new Lift[n];
        for (int i = 0; i < n; i++) {
            lifts[i] = new Lift(in.nextInt(),in.nextInt());
        }
        Arrays.sort(lifts,(x,y)->y.getLevel() - x.getLevel());
        
        int ans = 0;
        for (int i = 0; i < lifts.length; i++) {
            Lift current = lifts[i];
            ans+=s-current.getLevel();
            if(current.getTime()>ans) {
                ans+=current.getTime() - ans;
            }
            s = current.getLevel();
        }
        ans+=s;
        out.println(ans);
        out.flush();
    }
}

class Lift {

    int level;
    int time;

    public int getLevel() {
        return level;
    }

    public int getTime() {
        return time;
    }

    public Lift(int level, int time) {
        this.level = level;
        this.time = time;
    }
}

class InputReader extends BufferedReader {
    StringTokenizer tokenizer;

    public InputReader(InputStream inputStream) {
        super(new InputStreamReader(inputStream), 32768);
    }

    public InputReader(String filename) {
        super(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)));
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(readLine());
            } catch (IOException e) {
                throw new RuntimeException();
            }
        }
        return tokenizer.nextToken();
    }

    public Integer nextInt() {
        return Integer.valueOf(next());
    }
    public Long nextLong() {return  Long.valueOf(next());}

    static class OutputWriter extends PrintWriter {
        public OutputWriter(OutputStream outputStream) {
            super(outputStream);
        }

        public OutputWriter(Writer writer) {
            super(writer);
        }

        public OutputWriter(String filename) throws FileNotFoundException {
            super(filename);
        }

        public void close() {
            super.close();
        }
    }
}","import java.io.*;
import java.util.*;

class Main {
    public static void main(String[] args) throws IOException {
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        InputReader.OutputWriter out = new InputReader.OutputWriter(outputStream);


        int n = in.nextInt();
        int s = in.nextInt();
        Lift[] lifts = new Lift[n];
        for (int i = 0; i < n; i++) {
            lifts[i] = new Lift(in.nextInt(), in.nextInt());
        }
        Arrays.sort(lifts, (x, y) -> y.getLevel() - x.getLevel());

        int ans = 0;
        for (int i = 0; i < lifts.length; i++) {
            Lift current = lifts[i];
            ans += s - current.getLevel();
            if (current.getTime() > ans) {
                ans += current.getTime() - ans;
            }
            s = current.getLevel();
        }
        ans += s;
        out.println(ans);
        out.flush();
    }
}

class Lift {

    int level;
    int time;

    public int getLevel() {
        return level;
    }

    public int getTime() {
        return time;
    }

    public Lift(int level, int time) {
        this.level = level;
        this.time = time;
    }
}

class InputReader extends BufferedReader {
    StringTokenizer tokenizer;

    public InputReader(InputStream inputStream) {
        super(new InputStreamReader(inputStream), 32768);
    }

    public InputReader(String filename) {
        super(new InputStreamReader(Thread.currentThread().getContextClassLoader().getResourceAsStream(filename)));
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(readLine());
            } catch (IOException e) {
                throw new RuntimeException();
            }
        }
        return tokenizer.nextToken();
    }

    public Integer nextInt() {
        return Integer.valueOf(next());
    }

    public Long nextLong() {
        return Long.valueOf(next());
    }

    static class OutputWriter extends PrintWriter {
        public OutputWriter(OutputStream outputStream) {
            super(outputStream);
        }

        public OutputWriter(Writer writer) {
            super(writer);
        }

        public OutputWriter(String filename) throws FileNotFoundException {
            super(filename);
        }

        public void close() {
            super.close();
        }
    }
}",626
"public class Main {

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        public FastScanner() {
            try {
                br = new BufferedReader(new InputStreamReader(System.in));
                st = new StringTokenizer(br.readLine());
            } catch (Exception e){e.printStackTrace();}
        }

        public String next() {
            if (st.hasMoreTokens()) return st.nextToken();
            try {st = new StringTokenizer(br.readLine());}
            catch (Exception e) {e.printStackTrace();}
            return st.nextToken();
        }

        public int nextInt() {return Integer.parseInt(next());}

        public long nextLong() {return Long.parseLong(next());}

        public double nextDouble() {return Double.parseDouble(next());}

        public String nextLine() {
            String line = """";
            if(st.hasMoreTokens()) line = st.nextToken();
            else try {return br.readLine();}catch(IOException e){e.printStackTrace();}
            while(st.hasMoreTokens()) line += "" ""+st.nextToken();
            return line;
        }
    }

    static class Pair {
        int a;
        int b;
        public Pair(int a, int b) {
            this.a = a;
            this.b = b;
        }
    }

    public static void main(String[] args) {
        FastScanner sc = new FastScanner();
        PrintWriter pw = new PrintWriter(System.out);

        int n = sc.nextInt();
        int floor = sc.nextInt();
        int time = 0;

        Pair[] arr = new Pair[n];
        for(int i=0;i<n;i++) arr[i] = new Pair(sc.nextInt(), sc.nextInt());

        Arrays.sort(arr, (Pair cur, Pair other) -> (other.a - cur.a));

        for(int i=0;i<n;i++) {
            time += floor - arr[i].a;
            floor = arr[i].a;
            time = Math.max(time, arr[i].b);
            
        }

        time += arr[n-1].a;

        pw.println(time);
        pw.close();
    }
}","class Main { static class FastScanner { BufferedReader br; StringTokenizer st; public FastScanner() { try { br = new BufferedReader(new InputStreamReader(System.in)); st = new StringTokenizer(br.readLine()); } catch (Exception e) { e.printStackTrace(); } } public String next() { if (st.hasMoreTokens()) return st.nextToken(); try { st = new StringTokenizer(br.readLine()); } catch (Exception e) { e.printStackTrace(); } return st.nextToken(); } public int nextInt() { return Integer.parseInt(next()); } public long nextLong() { return Long.parseLong(next()); } public double nextDouble() { return Double.parseDouble(next()); } public String nextLine() { String line = """"; if (st.hasMoreTokens()) line = st.nextToken(); else try { return br.readLine(); } catch (IOException e) { e.printStackTrace(); } while (st.hasMoreTokens()) line += "" "" + st.nextToken(); return line; } } static class Pair { int a; int b; public Pair(int a, int b) { this.a = a; this.b = b; } } public static void main(String[] args) { FastScanner sc = new FastScanner(); PrintWriter pw = new PrintWriter(System.out); int n = sc.nextInt(); int floor = sc.nextInt(); int time = 0; Pair[] arr = new Pair[n]; for (int i = 0; i < n; i++) arr[i] = new Pair(sc.nextInt(), sc.nextInt()); Arrays.sort(arr, new Comparator<Pair>() { public int compare(Pair cur, Pair other) { return other.a - cur.a; } }); for (int i = 0; i < n; i++) { time += floor - arr[i].a; floor = arr[i].a; time = Math.max(time, arr[i].b); } time += arr[n - 1].a; pw.println(time); pw.close(); } }",627
