current work directory:  /home/imsuhan22/few-shot-tc/custom_ssl/code

bs =>  7
Data set -> jointmatch
save_name: 5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'python'}

data_path:  ../data/jointmatch/python

There are 1 GPU(s) available.
We will use the GPU- 0 Quadro RTX 8000

**line 107 모델 =>  ['Salesforce/codet5p-110m-embedding', 'Salesforce/codet5p-110m-embedding']
**tokenizer type =  ['Salesforce/codet5p-110m-embedding', 'Salesforce/codet5p-110m-embedding'] 

n_labeled_per_class:  5
train_df samples: 3974
train_labeled_df samples: 35
train_unlabeled_df samples: 3939
Check n_smaples_per_class in the original training set:  OrderedDict([(1, 704), (2, 514), (3, 707), (4, 585), (5, 580), (6, 426), (7, 458)])
Check n_smaples_per_class in the labeled training set:  OrderedDict([(1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5)])
Check n_smaples_per_class in the unlabeled training set:  OrderedDict([(1, 699), (2, 509), (3, 702), (4, 580), (5, 575), (6, 421), (7, 453)])
n_classes:  7

net_arch:  Salesforce/codet5p-110m-embedding 
lr:  0.0003 
lr_linear:  0.001 


net_arch:  Salesforce/codet5p-110m-embedding 
lr:  0.00025 
lr_linear:  0.001 

acc_train_cw(현재 train의 class별 acc) [0.0, 0.6, 0.0, 0.2, 0.0, 0.8, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9311, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9425, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 5, Time: 0:07:59
Train F1: 0.1602, Val F1: 0.0158, Test F1: 0.0727
Epoch 1/20, Train Acc: 0.2286, Val Acc: 0.0261, Test Acc: 0.2500, Test F1(macro): 0.0727, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9075, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7623, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 10, Time: 0:16:13
Train F1: 0.0357, Val F1: 0.0240, Test F1: 0.0207
Epoch 2/20, Train Acc: 0.1429, Val Acc: 0.0912, Test Acc: 0.0779, Test F1(macro): 0.0207, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9567, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9582, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 15, Time: 0:24:03
Train F1: 0.0397, Val F1: 0.0115, Test F1: 0.0592
Epoch 3/20, Train Acc: 0.1429, Val Acc: 0.0261, Test Acc: 0.2357, Test F1(macro): 0.0592, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9312, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9241, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 20, Time: 0:32:21
Train F1: 0.0357, Val F1: 0.0300, Test F1: 0.0052
Epoch 4/20, Train Acc: 0.1429, Val Acc: 0.1173, Test Acc: 0.0184, Test F1(macro): 0.0052, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9492, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9641, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 25, Time: 0:40:37
Train F1: 0.0357, Val F1: 0.0798, Test F1: 0.0398
Epoch 5/20, Train Acc: 0.1429, Val Acc: 0.3876, Test Acc: 0.1619, Test F1(macro): 0.0398, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.8, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9075, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.8659, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 30, Time: 0:48:37
Train F1: 0.1061, Val F1: 0.0565, Test F1: 0.0383
Epoch 6/20, Train Acc: 0.2000, Val Acc: 0.1270, Test Acc: 0.0799, Test F1(macro): 0.0383, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8712, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9944, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 35, Time: 0:56:26
Train F1: 0.0357, Val F1: 0.0799, Test F1: 0.0593
Epoch 7/20, Train Acc: 0.1429, Val Acc: 0.3844, Test Acc: 0.1639, Test F1(macro): 0.0593, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.2, 0.4]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7769, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9066, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 40, Time: 1:04:20
Train F1: 0.1348, Val F1: 0.1187, Test F1: 0.0972
Epoch 8/20, Train Acc: 0.2286, Val Acc: 0.3192, Test Acc: 0.1680, Test F1(macro): 0.0972, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7048, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7546, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 45, Time: 1:12:00
Train F1: 0.0357, Val F1: 0.0800, Test F1: 0.0399
Epoch 9/20, Train Acc: 0.1429, Val Acc: 0.3876, Test Acc: 0.1619, Test F1(macro): 0.0399, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.2]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9683, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9739, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 50, Time: 1:19:54
Train F1: 0.0714, Val F1: 0.0787, Test F1: 0.0527
Epoch 10/20, Train Acc: 0.1714, Val Acc: 0.3713, Test Acc: 0.1598, Test F1(macro): 0.0527, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.2, 0.0, 0.0, 0.0, 0.0, 0.8, 0.2]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8928, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9286, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 55, Time: 1:27:47
Train F1: 0.1015, Val F1: 0.0314, Test F1: 0.0797
Epoch 11/20, Train Acc: 0.1714, Val Acc: 0.0423, Test Acc: 0.2828, Test F1(macro): 0.0797, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.8, 0.0, 0.4, 0.6]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9856, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6947, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 60, Time: 1:35:32
Train F1: 0.1689, Val F1: 0.1061, Test F1: 0.0941
Epoch 12/20, Train Acc: 0.2571, Val Acc: 0.1824, Test Acc: 0.1906, Test F1(macro): 0.0941, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.2, 0.0, 0.0, 0.6, 0.0, 0.0, 0.4]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8976, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6075, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 65, Time: 1:43:03
Train F1: 0.1201, Val F1: 0.0829, Test F1: 0.0345
Epoch 13/20, Train Acc: 0.1714, Val Acc: 0.1629, Test Acc: 0.0615, Test F1(macro): 0.0345, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.2, 0.0, 0.0, 0.4, 1.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8383, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.5571, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 70, Time: 1:50:45
Train F1: 0.1463, Val F1: 0.0765, Test F1: 0.0464
Epoch 14/20, Train Acc: 0.2286, Val Acc: 0.1889, Test Acc: 0.0758, Test F1(macro): 0.0464, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(2.0820, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9557, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 75, Time: 1:58:35
Train F1: 0.0357, Val F1: 0.0798, Test F1: 0.0398
Epoch 15/20, Train Acc: 0.1429, Val Acc: 0.3876, Test Acc: 0.1619, Test F1(macro): 0.0398, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9610, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6315, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 80, Time: 2:06:12
Train F1: 0.1171, Val F1: 0.0342, Test F1: 0.0332
Epoch 16/20, Train Acc: 0.2571, Val Acc: 0.0684, Test Acc: 0.1066, Test F1(macro): 0.0332, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.6987, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(2.0359, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 85, Time: 2:13:38
Train F1: 0.0743, Val F1: 0.0485, Test F1: 0.0256
Epoch 17/20, Train Acc: 0.1714, Val Acc: 0.1401, Test Acc: 0.0410, Test F1(macro): 0.0256, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.4, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9488, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6907, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 90, Time: 2:21:13
Train F1: 0.0657, Val F1: 0.0883, Test F1: 0.0331
Epoch 18/20, Train Acc: 0.1143, Val Acc: 0.1368, Test Acc: 0.0389, Test F1(macro): 0.0331, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.8, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9891, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7028, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 95, Time: 2:29:08
Train F1: 0.1326, Val F1: 0.0768, Test F1: 0.0828
Epoch 19/20, Train Acc: 0.2571, Val Acc: 0.3388, Test Acc: 0.1926, Test F1(macro): 0.0828, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.8, 0.0, 1.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9301, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.5583, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 100, Time: 2:37:02
Train F1: 0.1222, Val F1: 0.0687, Test F1: 0.0899
Epoch 20/20, Train Acc: 0.2571, Val Acc: 0.1694, Test Acc: 0.2090, Test F1(macro): 0.0899, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35


Training complete!
Total training took 2:37:02 (h:mm:ss)
Load model from ./experiment/jointmatch/output/5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'python'}_net0.pth
Load model from ./experiment/jointmatch/output/5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'python'}_net1.pth
Save training statistics in:  ./experiment/jointmatch/log/codet5p/joint_match//5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'python'}/training_statistics.csv


Best_step:  25 
Best_val_epoch:  5 
best_val_acc:  0.38762214983713356 
best_val_test_acc:  0.16188524590163936 
best_val_test_f1:  0.0398085159989922
Save best record in:  ./experiment/jointmatch/log/codet5p/joint_match/summary.csv
Save best record in:  ./experiment/jointmatch/log/summary_avgrun.csv
