current work directory:  /home/imsuhan22/few-shot-tc/custom_ssl/code

bs =>  7
Data set -> jointmatch
save_name: 5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[45]_{'java'}

data_path:  ../data/jointmatch/java

There are 1 GPU(s) available.
We will use the GPU- 0 Quadro RTX 8000

**line 107 모델 =>  ['Salesforce/codet5p-110m-embedding', 'Salesforce/codet5p-110m-embedding']
**tokenizer type =  ['Salesforce/codet5p-110m-embedding', 'Salesforce/codet5p-110m-embedding'] 

n_labeled_per_class:  5
train_df samples: 3851
train_labeled_df samples: 35
train_unlabeled_df samples: 3816
Check n_smaples_per_class in the original training set:  OrderedDict([(1, 632), (2, 555), (3, 583), (4, 559), (5, 493), (6, 432), (7, 597)])
Check n_smaples_per_class in the labeled training set:  OrderedDict([(1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5)])
Check n_smaples_per_class in the unlabeled training set:  OrderedDict([(1, 627), (2, 550), (3, 578), (4, 554), (5, 488), (6, 427), (7, 592)])
n_classes:  7

net_arch:  Salesforce/codet5p-110m-embedding 
lr:  0.0003 
lr_linear:  0.001 


net_arch:  Salesforce/codet5p-110m-embedding 
lr:  0.00025 
lr_linear:  0.001 

acc_train_cw(현재 train의 class별 acc) [0.2, 0.0, 0.0, 0.0, 0.6, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9377, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9349, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 5, Time: 0:05:53
Train F1: 0.1469, Val F1: 0.0478, Test F1: 0.0320
Epoch 1/20, Train Acc: 0.2286, Val Acc: 0.0711, Test Acc: 0.0582, Test F1(macro): 0.0320, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.2]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7953, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.8066, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 10, Time: 0:11:59
Train F1: 0.0865, Val F1: 0.0769, Test F1: 0.1148
Epoch 2/20, Train Acc: 0.1429, Val Acc: 0.1421, Test Acc: 0.1902, Test F1(macro): 0.1148, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9783, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7357, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 15, Time: 0:17:49
Train F1: 0.1222, Val F1: 0.0438, Test F1: 0.0716
Epoch 3/20, Train Acc: 0.2571, Val Acc: 0.0863, Test Acc: 0.1342, Test F1(macro): 0.0716, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9687, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9936, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 20, Time: 0:23:38
Train F1: 0.0357, Val F1: 0.0000, Test F1: 0.0767
Epoch 4/20, Train Acc: 0.1429, Val Acc: 0.0000, Test Acc: 0.3669, Test F1(macro): 0.0767, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9595, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9566, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 25, Time: 0:29:43
Train F1: 0.0357, Val F1: 0.0684, Test F1: 0.0116
Epoch 5/20, Train Acc: 0.1429, Val Acc: 0.2064, Test Acc: 0.0425, Test F1(macro): 0.0116, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9481, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9528, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 30, Time: 0:35:51
Train F1: 0.0357, Val F1: 0.0885, Test F1: 0.0531
Epoch 6/20, Train Acc: 0.1429, Val Acc: 0.2843, Test Acc: 0.2282, Test F1(macro): 0.0531, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9374, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9399, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 35, Time: 0:41:40
Train F1: 0.0544, Val F1: 0.0356, Test F1: 0.0145
Epoch 7/20, Train Acc: 0.1143, Val Acc: 0.0728, Test Acc: 0.0201, Test F1(macro): 0.0145, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9007, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.8797, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 40, Time: 0:47:28
Train F1: 0.1182, Val F1: 0.0338, Test F1: 0.0488
Epoch 8/20, Train Acc: 0.2571, Val Acc: 0.0795, Test Acc: 0.1208, Test F1(macro): 0.0488, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.8, 0.0, 0.0, 0.0, 0.8, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7313, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7410, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 45, Time: 0:53:16
Train F1: 0.2111, Val F1: 0.1406, Test F1: 0.1227
Epoch 9/20, Train Acc: 0.3429, Val Acc: 0.2064, Test Acc: 0.1790, Test F1(macro): 0.1227, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [1.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.4]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.6864, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6819, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 50, Time: 0:59:04
Train F1: 0.1558, Val F1: 0.0649, Test F1: 0.0652
Epoch 10/20, Train Acc: 0.2571, Val Acc: 0.1184, Test Acc: 0.1387, Test F1(macro): 0.0652, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.6394, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6618, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 55, Time: 1:04:51
Train F1: 0.1369, Val F1: 0.1357, Test F1: 0.0582
Epoch 11/20, Train Acc: 0.2857, Val Acc: 0.2623, Test Acc: 0.1521, Test F1(macro): 0.0582, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.2, 0.0, 1.0, 0.8, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.6800, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6772, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 60, Time: 1:10:39
Train F1: 0.1695, Val F1: 0.1631, Test F1: 0.0851
Epoch 12/20, Train Acc: 0.2857, Val Acc: 0.2657, Test Acc: 0.1521, Test F1(macro): 0.0851, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.6258, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6054, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 65, Time: 1:16:26
Train F1: 0.0357, Val F1: 0.0893, Test F1: 0.0527
Epoch 13/20, Train Acc: 0.1429, Val Acc: 0.2826, Test Acc: 0.2260, Test F1(macro): 0.0527, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.5877, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(2.0802, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 70, Time: 1:22:15
Train F1: 0.0357, Val F1: 0.0666, Test F1: 0.0163
Epoch 14/20, Train Acc: 0.1429, Val Acc: 0.1997, Test Acc: 0.0604, Test F1(macro): 0.0163, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.6926, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7860, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 75, Time: 1:28:03
Train F1: 0.1096, Val F1: 0.0753, Test F1: 0.0505
Epoch 15/20, Train Acc: 0.2286, Val Acc: 0.2014, Test Acc: 0.1387, Test F1(macro): 0.0505, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.4, 0.4, 0.0, 0.0, 0.2, 0.0, 0.4]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.5645, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6425, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 80, Time: 1:33:50
Train F1: 0.1574, Val F1: 0.0774, Test F1: 0.0840
Epoch 16/20, Train Acc: 0.2000, Val Acc: 0.1201, Test Acc: 0.1432, Test F1(macro): 0.0840, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.2, 0.0, 0.0, 1.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(2.1505, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.8884, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 85, Time: 1:39:38
Train F1: 0.0678, Val F1: 0.1126, Test F1: 0.0674
Epoch 17/20, Train Acc: 0.1714, Val Acc: 0.2589, Test Acc: 0.1678, Test F1(macro): 0.0674, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.6]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8958, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6451, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 90, Time: 1:45:27
Train F1: 0.1073, Val F1: 0.0630, Test F1: 0.0463
Epoch 18/20, Train Acc: 0.2286, Val Acc: 0.1878, Test Acc: 0.1432, Test F1(macro): 0.0463, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.4, 0.0, 0.0, 0.0, 0.6, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(2.0642, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6946, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 95, Time: 1:51:15
Train F1: 0.1534, Val F1: 0.0796, Test F1: 0.1055
Epoch 19/20, Train Acc: 0.2571, Val Acc: 0.1286, Test Acc: 0.1678, Test F1(macro): 0.1055, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.8, 0.0, 0.2, 0.6, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8278, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.5835, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 100, Time: 1:57:03
Train F1: 0.2537, Val F1: 0.0928, Test F1: 0.0619
Epoch 20/20, Train Acc: 0.3714, Val Acc: 0.1235, Test Acc: 0.0917, Test F1(macro): 0.0619, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35


Training complete!
Total training took 1:57:03 (h:mm:ss)
Load model from ./experiment/jointmatch/output/5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[45]_{'java'}_net0.pth
Load model from ./experiment/jointmatch/output/5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[45]_{'java'}_net1.pth
Save training statistics in:  ./experiment/jointmatch/log/codet5p/joint_match//5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[45]_{'java'}/training_statistics.csv


Best_step:  30 
Best_val_epoch:  6 
best_val_acc:  0.28426395939086296 
best_val_test_acc:  0.22818791946308725 
best_val_test_f1:  0.05308352849336456
Save best record in:  ./experiment/jointmatch/log/codet5p/joint_match/summary.csv
Save best record in:  ./experiment/jointmatch/log/summary_avgrun.csv
