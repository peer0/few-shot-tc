current work directory:  /home/imsuhan22/few-shot-tc/custom_ssl/code

bs =>  7
Data set -> jointmatch
save_name: 5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'java'}

data_path:  ../data/jointmatch/java

There are 1 GPU(s) available.
We will use the GPU- 0 Quadro RTX 8000

**line 107 모델 =>  ['Salesforce/codet5p-110m-embedding', 'Salesforce/codet5p-110m-embedding']
**tokenizer type =  ['Salesforce/codet5p-110m-embedding', 'Salesforce/codet5p-110m-embedding'] 

n_labeled_per_class:  5
train_df samples: 3851
train_labeled_df samples: 35
train_unlabeled_df samples: 3816
Check n_smaples_per_class in the original training set:  OrderedDict([(1, 632), (2, 555), (3, 583), (4, 559), (5, 493), (6, 432), (7, 597)])
Check n_smaples_per_class in the labeled training set:  OrderedDict([(1, 5), (2, 5), (3, 5), (4, 5), (5, 5), (6, 5), (7, 5)])
Check n_smaples_per_class in the unlabeled training set:  OrderedDict([(1, 627), (2, 550), (3, 578), (4, 554), (5, 488), (6, 427), (7, 592)])
n_classes:  7

net_arch:  Salesforce/codet5p-110m-embedding 
lr:  0.0003 
lr_linear:  0.001 


net_arch:  Salesforce/codet5p-110m-embedding 
lr:  0.00025 
lr_linear:  0.001 

acc_train_cw(현재 train의 class별 acc) [1.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9333, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9234, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 5, Time: 0:05:54
Train F1: 0.2037, Val F1: 0.0537, Test F1: 0.0339
Epoch 1/20, Train Acc: 0.3143, Val Acc: 0.0829, Test Acc: 0.0694, Test F1(macro): 0.0339, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.2]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9602, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.8883, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 10, Time: 0:12:03
Train F1: 0.0706, Val F1: 0.0523, Test F1: 0.0594
Epoch 2/20, Train Acc: 0.1714, Val Acc: 0.1980, Test Acc: 0.1566, Test F1(macro): 0.0594, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9454, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7559, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 15, Time: 0:17:54
Train F1: 0.0357, Val F1: 0.0000, Test F1: 0.0038
Epoch 3/20, Train Acc: 0.1429, Val Acc: 0.0000, Test Acc: 0.0134, Test F1(macro): 0.0038, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 1.0, 0.8, 0.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8145, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.8373, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 20, Time: 0:24:04
Train F1: 0.1146, Val F1: 0.1287, Test F1: 0.0546
Epoch 4/20, Train Acc: 0.2571, Val Acc: 0.2301, Test Acc: 0.1230, Test F1(macro): 0.0546, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 1.0, 0.8, 0.0, 0.0, 0.0, 0.2]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7716, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9736, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 25, Time: 0:29:54
Train F1: 0.1777, Val F1: 0.0900, Test F1: 0.0573
Epoch 5/20, Train Acc: 0.2857, Val Acc: 0.1997, Test Acc: 0.1454, Test F1(macro): 0.0573, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7439, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9766, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 30, Time: 0:35:42
Train F1: 0.0357, Val F1: 0.0666, Test F1: 0.0163
Epoch 6/20, Train Acc: 0.1429, Val Acc: 0.1997, Test Acc: 0.0604, Test F1(macro): 0.0163, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9451, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9392, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 35, Time: 0:41:32
Train F1: 0.0366, Val F1: 0.0677, Test F1: 0.0117
Epoch 7/20, Train Acc: 0.1429, Val Acc: 0.2030, Test Acc: 0.0425, Test F1(macro): 0.0117, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.4, 0.0, 0.6, 0.2, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9886, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9352, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 40, Time: 0:47:20
Train F1: 0.1221, Val F1: 0.0854, Test F1: 0.0494
Epoch 8/20, Train Acc: 0.1714, Val Acc: 0.1912, Test Acc: 0.0582, Test F1(macro): 0.0494, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9550, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7968, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 45, Time: 0:53:10
Train F1: 0.0357, Val F1: 0.0000, Test F1: 0.0038
Epoch 9/20, Train Acc: 0.1429, Val Acc: 0.0000, Test Acc: 0.0134, Test F1(macro): 0.0038, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.6]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9455, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9509, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 50, Time: 0:58:58
Train F1: 0.1349, Val F1: 0.0550, Test F1: 0.0547
Epoch 10/20, Train Acc: 0.2286, Val Acc: 0.1929, Test Acc: 0.0649, Test F1(macro): 0.0547, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9440, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7881, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 55, Time: 1:04:47
Train F1: 0.0842, Val F1: 0.0000, Test F1: 0.0038
Epoch 11/20, Train Acc: 0.1714, Val Acc: 0.0000, Test Acc: 0.0134, Test F1(macro): 0.0038, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9505, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.8186, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 60, Time: 1:10:35
Train F1: 0.0357, Val F1: 0.0357, Test F1: 0.0338
Epoch 12/20, Train Acc: 0.1429, Val Acc: 0.0981, Test Acc: 0.1342, Test F1(macro): 0.0338, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9182, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9628, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 65, Time: 1:16:24
Train F1: 0.0680, Val F1: 0.0175, Test F1: 0.0282
Epoch 13/20, Train Acc: 0.1714, Val Acc: 0.0186, Test Acc: 0.0380, Test F1(macro): 0.0282, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.6]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.9470, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.9056, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 70, Time: 1:22:11
Train F1: 0.1410, Val F1: 0.0896, Test F1: 0.0965
Epoch 14/20, Train Acc: 0.2000, Val Acc: 0.1912, Test Acc: 0.1611, Test F1(macro): 0.0965, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.2, 0.8, 0.0, 0.0, 0.2, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7495, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7747, device='cuda:0', grad_fn=<NllLossBackward0>)
Save model to ./experiment/jointmatch/output/
Step 75, Time: 1:28:19
Train F1: 0.2075, Val F1: 0.1636, Test F1: 0.0948
Epoch 15/20, Train Acc: 0.2857, Val Acc: 0.2504, Test Acc: 0.1253, Test F1(macro): 0.0948, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.6, 0.0, 0.8, 0.0, 0.0, 0.0, 0.6]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(2.0152, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7348, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 80, Time: 1:34:08
Train F1: 0.1923, Val F1: 0.0759, Test F1: 0.0921
Epoch 16/20, Train Acc: 0.2857, Val Acc: 0.1675, Test Acc: 0.1409, Test F1(macro): 0.0921, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.8, 0.2, 0.6, 0.0, 0.0, 0.8]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8103, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7057, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 85, Time: 1:39:54
Train F1: 0.2395, Val F1: 0.0877, Test F1: 0.0646
Epoch 17/20, Train Acc: 0.3429, Val Acc: 0.0998, Test Acc: 0.0626, Test F1(macro): 0.0646, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.8, 0.8, 0.0, 0.0, 0.0, 0.6]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8166, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6770, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 90, Time: 1:45:43
Train F1: 0.2084, Val F1: 0.0797, Test F1: 0.0901
Epoch 18/20, Train Acc: 0.3143, Val Acc: 0.1810, Test Acc: 0.1365, Test F1(macro): 0.0901, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.0, 0.8, 0.0, 0.8, 0.0, 0.0, 0.6]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.7995, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.6222, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 95, Time: 1:51:30
Train F1: 0.2154, Val F1: 0.0900, Test F1: 0.0485
Epoch 19/20, Train Acc: 0.3143, Val Acc: 0.2030, Test Acc: 0.0537, Test F1(macro): 0.0485, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35

acc_train_cw(현재 train의 class별 acc) [0.2, 0.0, 0.2, 0.0, 0.0, 0.0, 1.0]
cw_psl_total_eval(pseudo label 클래스별 총 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
cw_psl_correct_eval(pseudo label 클래스별 맞은 샘플 수):  [0, 0, 0, 0, 0, 0, 0]
psl_acc(PSL 평가에서의 정확도): None 
cw_psl_acc(클래스별 PSL 평가에서의 정확도):  [nan, nan, nan, nan, nan, nan, nan]
loss for labeled data =>  tensor(1.8163, device='cuda:0', grad_fn=<NllLossBackward0>)
loss for labeled data =>  tensor(1.7066, device='cuda:0', grad_fn=<NllLossBackward0>)
Step 100, Time: 1:57:18
Train F1: 0.1270, Val F1: 0.0551, Test F1: 0.0399
Epoch 20/20, Train Acc: 0.2000, Val Acc: 0.0440, Test Acc: 0.0425, Test F1(macro): 0.0399, Total Pseudo-Labels: 0, Correct Pseudo-Labels: 0, Train Data Number: 35


Training complete!
Total training took 1:57:18 (h:mm:ss)
Load model from ./experiment/jointmatch/output/5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'java'}_net0.pth
Load model from ./experiment/jointmatch/output/5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'java'}_net1.pth
Save training statistics in:  ./experiment/jointmatch/log/codet5p/joint_match//5_['codet5p', 'codet5p']_[0.0003, 0.00025]_0.7_jointmatch_20_[43]_{'java'}/training_statistics.csv


Best_step:  75 
Best_val_epoch:  15 
best_val_acc:  0.25042301184433163 
best_val_test_acc:  0.12527964205816555 
best_val_test_f1:  0.09483313869844316
Save best record in:  ./experiment/jointmatch/log/codet5p/joint_match/summary.csv
Save best record in:  ./experiment/jointmatch/log/summary_avgrun.csv
